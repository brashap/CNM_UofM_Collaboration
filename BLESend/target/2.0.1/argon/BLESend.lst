
c:/Users/IoT_Instructor/Documents/jarvis/BLESend/target/2.0.1/argon/BLESend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002bc4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6be0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e55c  000d6be4  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6c4c  000d6c4c  00026c4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6c74  000d6c74  00026c74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dfe15  00000000  00000000  00026c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f637  00000000  00000000  00106a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002268c  00000000  00000000  001160c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021b8  00000000  00000000  00138750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006390  00000000  00000000  0013a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030c6c  00000000  00000000  00140c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028f9b  00000000  00000000  00171904  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff4f5  00000000  00000000  0019a89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005bbc  00000000  00000000  00299d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 facd 	bl	d65cc <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 faef 	bl	d661c <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e55c 	.word	0x2003e55c
   d4048:	000d6be4 	.word	0x000d6be4
   d404c:	2003e5c4 	.word	0x2003e5c4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f001 fed7 	bl	d5e10 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6bb4 	.word	0x000d6bb4
   d407c:	000d6bd8 	.word	0x000d6bd8

000d4080 <module_user_setup>:
   d4080:	f000 b890 	b.w	d41a4 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f925 	bl	d42d4 <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f001 be81 	b.w	d5d94 <_post_loop>

000d4092 <_Znwj>:
   d4092:	f000 bbe9 	b.w	d4868 <malloc>

000d4096 <_ZdlPv>:
   d4096:	f000 bbef 	b.w	d4878 <free>

000d409a <__cxa_guard_acquire>:
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fbe1 	bl	d4878 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c8:	f001 fddf 	bl	d5c8a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    Serial.printf("\n");
    delay(5000);
}

//onDataReceived is used to recieve data from Bluefruit Connect App
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d40dc:	b092      	sub	sp, #72	; 0x48
   d40de:	4614      	mov	r4, r2
   d40e0:	460e      	mov	r6, r1
   d40e2:	4605      	mov	r5, r0
    uint8_t i;
    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d40e4:	f001 ff98 	bl	d6018 <_Z16_fetch_usbserialv>
   d40e8:	4621      	mov	r1, r4
   d40ea:	4607      	mov	r7, r0
   d40ec:	a806      	add	r0, sp, #24
   d40ee:	f001 f881 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d40f2:	2100      	movs	r1, #0
   d40f4:	a806      	add	r0, sp, #24
   d40f6:	f000 fd88 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d40fa:	4621      	mov	r1, r4
   d40fc:	9005      	str	r0, [sp, #20]
   d40fe:	a808      	add	r0, sp, #32
   d4100:	f001 f878 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d4104:	2101      	movs	r1, #1
   d4106:	a808      	add	r0, sp, #32
   d4108:	f000 fd7f 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d410c:	4621      	mov	r1, r4
   d410e:	9004      	str	r0, [sp, #16]
   d4110:	a80a      	add	r0, sp, #40	; 0x28
   d4112:	f001 f86f 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d4116:	2102      	movs	r1, #2
   d4118:	a80a      	add	r0, sp, #40	; 0x28
   d411a:	f000 fd76 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d411e:	4621      	mov	r1, r4
   d4120:	4680      	mov	r8, r0
   d4122:	a80c      	add	r0, sp, #48	; 0x30
   d4124:	f001 f866 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d4128:	2103      	movs	r1, #3
   d412a:	a80c      	add	r0, sp, #48	; 0x30
   d412c:	f000 fd6d 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d4130:	4621      	mov	r1, r4
   d4132:	4681      	mov	r9, r0
   d4134:	a80e      	add	r0, sp, #56	; 0x38
   d4136:	f001 f85d 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d413a:	2104      	movs	r1, #4
   d413c:	a80e      	add	r0, sp, #56	; 0x38
   d413e:	f000 fd64 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d4142:	4621      	mov	r1, r4
   d4144:	4682      	mov	sl, r0
   d4146:	a810      	add	r0, sp, #64	; 0x40
   d4148:	f001 f854 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d414c:	2105      	movs	r1, #5
   d414e:	a810      	add	r0, sp, #64	; 0x40
   d4150:	f000 fd5b 	bl	d4c0a <_ZNK8particle10BleAddressixEh>
   d4154:	e9cd 8900 	strd	r8, r9, [sp]
   d4158:	e9cd a002 	strd	sl, r0, [sp, #8]
   d415c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d4160:	490d      	ldr	r1, [pc, #52]	; (d4198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>)
    for (i = 0; i < len; i++) {
        Serial.printf("%c",data[i]);
   d4162:	f8df 803c 	ldr.w	r8, [pc, #60]	; d41a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc8>
    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d4166:	4638      	mov	r0, r7
   d4168:	f7ff ffa7 	bl	d40ba <_ZN5Print6printfEPKcz>
   d416c:	2400      	movs	r4, #0
    for (i = 0; i < len; i++) {
   d416e:	b2e7      	uxtb	r7, r4
   d4170:	42be      	cmp	r6, r7
   d4172:	f104 0401 	add.w	r4, r4, #1
   d4176:	d906      	bls.n	d4186 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        Serial.printf("%c",data[i]);
   d4178:	f001 ff4e 	bl	d6018 <_Z16_fetch_usbserialv>
   d417c:	5dea      	ldrb	r2, [r5, r7]
   d417e:	4641      	mov	r1, r8
   d4180:	f7ff ff9b 	bl	d40ba <_ZN5Print6printfEPKcz>
    for (i = 0; i < len; i++) {
   d4184:	e7f3      	b.n	d416e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
    }
    Serial.printf("\n");
   d4186:	f001 ff47 	bl	d6018 <_Z16_fetch_usbserialv>
   d418a:	4904      	ldr	r1, [pc, #16]	; (d419c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc4>)
   d418c:	f7ff ff95 	bl	d40ba <_ZN5Print6printfEPKcz>
   d4190:	b012      	add	sp, #72	; 0x48
   d4192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4196:	bf00      	nop
   d4198:	000d6730 	.word	0x000d6730
   d419c:	000d6762 	.word	0x000d6762
   d41a0:	000d6764 	.word	0x000d6764

000d41a4 <setup>:
void setup() { 
   d41a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d41a8:	b08f      	sub	sp, #60	; 0x3c
    Serial.begin();
   d41aa:	f001 ff35 	bl	d6018 <_Z16_fetch_usbserialv>
   d41ae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b2:	f001 ff21 	bl	d5ff8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41b6:	2000      	movs	r0, #0
   d41b8:	f000 f998 	bl	d44ec <hal_timer_millis>
   d41bc:	f04f 0900 	mov.w	r9, #0
   d41c0:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d41c2:	f643 2697 	movw	r6, #14999	; 0x3a97
   d41c6:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d41c8:	2000      	movs	r0, #0
   d41ca:	f000 f98f 	bl	d44ec <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d41ce:	ebb0 0408 	subs.w	r4, r0, r8
   d41d2:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d41d6:	42af      	cmp	r7, r5
   d41d8:	bf08      	it	eq
   d41da:	42a6      	cmpeq	r6, r4
   d41dc:	d307      	bcc.n	d41ee <setup+0x4a>
    waitFor(Serial.isConnected, 15000);  
   d41de:	f001 ff1b 	bl	d6018 <_Z16_fetch_usbserialv>
   d41e2:	f001 ff0d 	bl	d6000 <_ZN9USBSerial11isConnectedEv>
   d41e6:	b910      	cbnz	r0, d41ee <setup+0x4a>
            spark_process();
   d41e8:	f000 fb2e 	bl	d4848 <spark_process>
        while (_while() && !_condition()) {
   d41ec:	e7ec      	b.n	d41c8 <setup+0x24>
   d41ee:	f001 ff13 	bl	d6018 <_Z16_fetch_usbserialv>
   d41f2:	f001 ff05 	bl	d6000 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
   d41f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41fa:	f001 fd89 	bl	d5d10 <delay>
    BLE.on();
   d41fe:	f001 f849 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4202:	f001 f891 	bl	d5328 <_ZNK8particle14BleLocalDevice2onEv>
    Serial.printf("Starting up BLE Connection \n");
   d4206:	f001 ff07 	bl	d6018 <_Z16_fetch_usbserialv>
   d420a:	492c      	ldr	r1, [pc, #176]	; (d42bc <setup+0x118>)
   d420c:	f7ff ff55 	bl	d40ba <_ZN5Print6printfEPKcz>
    BLE.addCharacteristic(txCharacteristic);
   d4210:	f001 f840 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4214:	4a2a      	ldr	r2, [pc, #168]	; (d42c0 <setup+0x11c>)
   d4216:	4601      	mov	r1, r0
   d4218:	a809      	add	r0, sp, #36	; 0x24
   d421a:	f001 fbd1 	bl	d59c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d421e:	a809      	add	r0, sp, #36	; 0x24
   d4220:	f001 f90f 	bl	d5442 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d4224:	f001 f836 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4228:	4a26      	ldr	r2, [pc, #152]	; (d42c4 <setup+0x120>)
   d422a:	4601      	mov	r1, r0
   d422c:	a809      	add	r0, sp, #36	; 0x24
   d422e:	f001 fbc7 	bl	d59c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4232:	a809      	add	r0, sp, #36	; 0x24
   d4234:	f001 f905 	bl	d5442 <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   d4238:	4923      	ldr	r1, [pc, #140]	; (d42c8 <setup+0x124>)
   d423a:	a804      	add	r0, sp, #16
   d423c:	f000 fd78 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4240:	a904      	add	r1, sp, #16
   d4242:	a809      	add	r0, sp, #36	; 0x24
   d4244:	f000 fd74 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4248:	a809      	add	r0, sp, #36	; 0x24
   d424a:	f000 fdb7 	bl	d4dbc <_ZNK8particle7BleUuid4typeEv>
   d424e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4250:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4252:	bb54      	cbnz	r4, d42aa <setup+0x106>
            uint16_t uuid16 = tempUUID.shorted();
   d4254:	f000 fdd1 	bl	d4dfa <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4258:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d425a:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d425e:	2302      	movs	r3, #2
   d4260:	f10d 020e 	add.w	r2, sp, #14
   d4264:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4266:	4819      	ldr	r0, [pc, #100]	; (d42cc <setup+0x128>)
   d4268:	f000 fe6e 	bl	d4f48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   d426c:	f001 f812 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4270:	2200      	movs	r2, #0
   d4272:	4916      	ldr	r1, [pc, #88]	; (d42cc <setup+0x128>)
   d4274:	f001 f89d 	bl	d53b2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.printf("Argon BLE Address: %s\n",BLE.address().toString().c_str());
   d4278:	f001 fece 	bl	d6018 <_Z16_fetch_usbserialv>
   d427c:	4604      	mov	r4, r0
   d427e:	f001 f809 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4282:	4601      	mov	r1, r0
   d4284:	a804      	add	r0, sp, #16
   d4286:	f001 f85e 	bl	d5346 <_ZNK8particle14BleLocalDevice7addressEv>
   d428a:	a904      	add	r1, sp, #16
   d428c:	a809      	add	r0, sp, #36	; 0x24
   d428e:	2200      	movs	r2, #0
   d4290:	f000 fd2b 	bl	d4cea <_ZNK8particle10BleAddress8toStringEb>
   d4294:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4296:	490e      	ldr	r1, [pc, #56]	; (d42d0 <setup+0x12c>)
   d4298:	4620      	mov	r0, r4
   d429a:	f7ff ff0e 	bl	d40ba <_ZN5Print6printfEPKcz>
   d429e:	a809      	add	r0, sp, #36	; 0x24
   d42a0:	f000 fb66 	bl	d4970 <_ZN6StringD1Ev>
}
   d42a4:	b00f      	add	sp, #60	; 0x3c
   d42a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d42aa:	f000 fdab 	bl	d4e04 <_ZNK8particle7BleUuid8rawBytesEv>
   d42ae:	2300      	movs	r3, #0
   d42b0:	9300      	str	r3, [sp, #0]
   d42b2:	4602      	mov	r2, r0
   d42b4:	2310      	movs	r3, #16
   d42b6:	2107      	movs	r1, #7
   d42b8:	e7d5      	b.n	d4266 <setup+0xc2>
   d42ba:	bf00      	nop
   d42bc:	000d6767 	.word	0x000d6767
   d42c0:	2003e654 	.word	0x2003e654
   d42c4:	2003e638 	.word	0x2003e638
   d42c8:	2003e5d4 	.word	0x2003e5d4
   d42cc:	2003e610 	.word	0x2003e610
   d42d0:	000d6784 	.word	0x000d6784

000d42d4 <loop>:
void loop() {
   d42d4:	b570      	push	{r4, r5, r6, lr}
    for(i=0;i<UART_TX_BUF_SIZE-1;i++) {
   d42d6:	4c19      	ldr	r4, [pc, #100]	; (d433c <loop+0x68>)
        txBuf[i] = random(0x40,0x5B); //Captial ASCII characters plus @
   d42d8:	4e19      	ldr	r6, [pc, #100]	; (d4340 <loop+0x6c>)
    for(i=0;i<UART_TX_BUF_SIZE-1;i++) {
   d42da:	2300      	movs	r3, #0
   d42dc:	7023      	strb	r3, [r4, #0]
   d42de:	4635      	mov	r5, r6
        txBuf[i] = random(0x40,0x5B); //Captial ASCII characters plus @
   d42e0:	215b      	movs	r1, #91	; 0x5b
   d42e2:	2040      	movs	r0, #64	; 0x40
   d42e4:	f001 ff4b 	bl	d617e <_Z6randomii>
   d42e8:	7823      	ldrb	r3, [r4, #0]
   d42ea:	54f0      	strb	r0, [r6, r3]
    for(i=0;i<UART_TX_BUF_SIZE-1;i++) {
   d42ec:	3301      	adds	r3, #1
   d42ee:	b2db      	uxtb	r3, r3
   d42f0:	2b12      	cmp	r3, #18
   d42f2:	7023      	strb	r3, [r4, #0]
   d42f4:	d9f4      	bls.n	d42e0 <loop+0xc>
    txBuf[UART_TX_BUF_SIZE-1]=0x0D;  //Append a carriage return to txBuf
   d42f6:	230d      	movs	r3, #13
   d42f8:	74f3      	strb	r3, [r6, #19]
    txCharacteristic.setValue(txBuf, UART_TX_BUF_SIZE);
   d42fa:	4911      	ldr	r1, [pc, #68]	; (d4340 <loop+0x6c>)
   d42fc:	4811      	ldr	r0, [pc, #68]	; (d4344 <loop+0x70>)
        Serial.printf("%c",txBuf[i]);
   d42fe:	4e12      	ldr	r6, [pc, #72]	; (d4348 <loop+0x74>)
    txCharacteristic.setValue(txBuf, UART_TX_BUF_SIZE);
   d4300:	2300      	movs	r3, #0
   d4302:	2214      	movs	r2, #20
   d4304:	f000 fed0 	bl	d50a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    for(i=0;i<UART_TX_BUF_SIZE;i++) {
   d4308:	2300      	movs	r3, #0
   d430a:	7023      	strb	r3, [r4, #0]
        Serial.printf("%c",txBuf[i]);
   d430c:	f001 fe84 	bl	d6018 <_Z16_fetch_usbserialv>
   d4310:	7823      	ldrb	r3, [r4, #0]
   d4312:	4631      	mov	r1, r6
   d4314:	5cea      	ldrb	r2, [r5, r3]
   d4316:	f7ff fed0 	bl	d40ba <_ZN5Print6printfEPKcz>
    for(i=0;i<UART_TX_BUF_SIZE;i++) {
   d431a:	7823      	ldrb	r3, [r4, #0]
   d431c:	3301      	adds	r3, #1
   d431e:	b2db      	uxtb	r3, r3
   d4320:	2b13      	cmp	r3, #19
   d4322:	7023      	strb	r3, [r4, #0]
   d4324:	d9f2      	bls.n	d430c <loop+0x38>
    Serial.printf("\n");
   d4326:	f001 fe77 	bl	d6018 <_Z16_fetch_usbserialv>
   d432a:	4908      	ldr	r1, [pc, #32]	; (d434c <loop+0x78>)
   d432c:	f7ff fec5 	bl	d40ba <_ZN5Print6printfEPKcz>
}
   d4330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(5000);
   d4334:	f241 3088 	movw	r0, #5000	; 0x1388
   d4338:	f001 bcea 	b.w	d5d10 <delay>
   d433c:	2003e634 	.word	0x2003e634
   d4340:	2003e640 	.word	0x2003e640
   d4344:	2003e654 	.word	0x2003e654
   d4348:	000d6764 	.word	0x000d6764
   d434c:	000d6762 	.word	0x000d6762

000d4350 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4350:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4352:	4616      	mov	r6, r2
   d4354:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4356:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4358:	e9c0 2200 	strd	r2, r2, [r0]
   d435c:	4604      	mov	r4, r0
   d435e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4360:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4362:	4619      	mov	r1, r3
   d4364:	a806      	add	r0, sp, #24
   d4366:	f000 fce3 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d436a:	9916      	ldr	r1, [sp, #88]	; 0x58
   d436c:	4638      	mov	r0, r7
   d436e:	f000 fcdf 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4372:	7833      	ldrb	r3, [r6, #0]
   d4374:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4378:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d437a:	9302      	str	r3, [sp, #8]
   d437c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d437e:	4620      	mov	r0, r4
   d4380:	e9cd 7300 	strd	r7, r3, [sp]
   d4384:	aa05      	add	r2, sp, #20
   d4386:	ab06      	add	r3, sp, #24
   d4388:	4629      	mov	r1, r5
   d438a:	f001 f8af 	bl	d54ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d438e:	4620      	mov	r0, r4
   d4390:	b011      	add	sp, #68	; 0x44
   d4392:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4394 <_GLOBAL__sub_I_txBuf>:
   d4394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4398:	4d2f      	ldr	r5, [pc, #188]	; (d4458 <_GLOBAL__sub_I_txBuf+0xc4>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d439a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d4494 <_GLOBAL__sub_I_txBuf+0x100>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d439e:	4c2f      	ldr	r4, [pc, #188]	; (d445c <_GLOBAL__sub_I_txBuf+0xc8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43a0:	492f      	ldr	r1, [pc, #188]	; (d4460 <_GLOBAL__sub_I_txBuf+0xcc>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43a2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; d4498 <_GLOBAL__sub_I_txBuf+0x104>
   d43a6:	4e2f      	ldr	r6, [pc, #188]	; (d4464 <_GLOBAL__sub_I_txBuf+0xd0>)
   d43a8:	4f2f      	ldr	r7, [pc, #188]	; (d4468 <_GLOBAL__sub_I_txBuf+0xd4>)
   d43aa:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43ac:	4628      	mov	r0, r5
   d43ae:	f000 fdbf 	bl	d4f30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43b2:	492e      	ldr	r1, [pc, #184]	; (d446c <_GLOBAL__sub_I_txBuf+0xd8>)
   d43b4:	4640      	mov	r0, r8
   d43b6:	f000 fdbb 	bl	d4f30 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d43ba:	492d      	ldr	r1, [pc, #180]	; (d4470 <_GLOBAL__sub_I_txBuf+0xdc>)
   d43bc:	4620      	mov	r0, r4
   d43be:	f000 fdb7 	bl	d4f30 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d43c2:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43c4:	4621      	mov	r1, r4
   d43c6:	a806      	add	r0, sp, #24
   d43c8:	f88d 3014 	strb.w	r3, [sp, #20]
   d43cc:	f000 fcb0 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
   d43d0:	4629      	mov	r1, r5
   d43d2:	a80b      	add	r0, sp, #44	; 0x2c
   d43d4:	f000 fcac 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
   d43d8:	2400      	movs	r4, #0
   d43da:	ab0b      	add	r3, sp, #44	; 0x2c
   d43dc:	9300      	str	r3, [sp, #0]
   d43de:	aa05      	add	r2, sp, #20
   d43e0:	ab06      	add	r3, sp, #24
   d43e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d43e6:	4923      	ldr	r1, [pc, #140]	; (d4474 <_GLOBAL__sub_I_txBuf+0xe0>)
   d43e8:	4648      	mov	r0, r9
   d43ea:	f7ff ffb1 	bl	d4350 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d43ee:	4632      	mov	r2, r6
   d43f0:	4639      	mov	r1, r7
   d43f2:	4648      	mov	r0, r9
   d43f4:	f001 ffb4 	bl	d6360 <__aeabi_atexit>
   d43f8:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d43fa:	4641      	mov	r1, r8
   d43fc:	a806      	add	r0, sp, #24
   d43fe:	f88d 3014 	strb.w	r3, [sp, #20]
   d4402:	f000 fc95 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
   d4406:	4629      	mov	r1, r5
   d4408:	a80b      	add	r0, sp, #44	; 0x2c
   d440a:	f000 fc91 	bl	d4d30 <_ZN8particle7BleUuidC1ERKS0_>
   d440e:	4d1a      	ldr	r5, [pc, #104]	; (d4478 <_GLOBAL__sub_I_txBuf+0xe4>)
   d4410:	4b1a      	ldr	r3, [pc, #104]	; (d447c <_GLOBAL__sub_I_txBuf+0xe8>)
   d4412:	9301      	str	r3, [sp, #4]
   d4414:	ab0b      	add	r3, sp, #44	; 0x2c
   d4416:	9300      	str	r3, [sp, #0]
   d4418:	aa05      	add	r2, sp, #20
   d441a:	ab06      	add	r3, sp, #24
   d441c:	4918      	ldr	r1, [pc, #96]	; (d4480 <_GLOBAL__sub_I_txBuf+0xec>)
   d441e:	9402      	str	r4, [sp, #8]
   d4420:	4628      	mov	r0, r5
   d4422:	f7ff ff95 	bl	d4350 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4426:	4632      	mov	r2, r6
   d4428:	4639      	mov	r1, r7
   d442a:	4628      	mov	r0, r5
   d442c:	f001 ff98 	bl	d6360 <__aeabi_atexit>
              error_(SYSTEM_ERROR_NONE) {
   d4430:	4d14      	ldr	r5, [pc, #80]	; (d4484 <_GLOBAL__sub_I_txBuf+0xf0>)
BleAdvertisingData data;
   d4432:	4815      	ldr	r0, [pc, #84]	; (d4488 <_GLOBAL__sub_I_txBuf+0xf4>)
   d4434:	f000 fdd0 	bl	d4fd8 <_ZN8particle18BleAdvertisingDataC1Ev>
    SleepResult() {}
   d4438:	4b14      	ldr	r3, [pc, #80]	; (d448c <_GLOBAL__sub_I_txBuf+0xf8>)
   d443a:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d443c:	602c      	str	r4, [r5, #0]
   d443e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4440:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4442:	2002      	movs	r0, #2
   d4444:	f000 f98c 	bl	d4760 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC); //Using BLE and not Wifi
   d4448:	4911      	ldr	r1, [pc, #68]	; (d4490 <_GLOBAL__sub_I_txBuf+0xfc>)
   d444a:	4632      	mov	r2, r6
   d444c:	4628      	mov	r0, r5
   d444e:	f001 ff87 	bl	d6360 <__aeabi_atexit>
   d4452:	b011      	add	sp, #68	; 0x44
   d4454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4458:	2003e5d4 	.word	0x2003e5d4
   d445c:	2003e5fc 	.word	0x2003e5fc
   d4460:	000d679b 	.word	0x000d679b
   d4464:	2003e5c4 	.word	0x2003e5c4
   d4468:	000d5443 	.word	0x000d5443
   d446c:	000d67c0 	.word	0x000d67c0
   d4470:	000d67e5 	.word	0x000d67e5
   d4474:	000d680a 	.word	0x000d680a
   d4478:	2003e638 	.word	0x2003e638
   d447c:	000d40d9 	.word	0x000d40d9
   d4480:	000d680d 	.word	0x000d680d
   d4484:	2003e5c8 	.word	0x2003e5c8
   d4488:	2003e610 	.word	0x2003e610
   d448c:	ffff0000 	.word	0xffff0000
   d4490:	000d40ab 	.word	0x000d40ab
   d4494:	2003e5e8 	.word	0x2003e5e8
   d4498:	2003e654 	.word	0x2003e654

000d449c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <netdb_freeaddrinfo+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	689b      	ldr	r3, [r3, #8]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030268 	.word	0x00030268

000d44ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <netdb_getaddrinfo+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	68db      	ldr	r3, [r3, #12]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030268 	.word	0x00030268

000d44bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_RNG_GetRandomNumber+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	685b      	ldr	r3, [r3, #4]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030218 	.word	0x00030218

000d44cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_Delay_Microseconds+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	68db      	ldr	r3, [r3, #12]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030218 	.word	0x00030218

000d44dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030218 	.word	0x00030218

000d44ec <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_timer_millis+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030218 	.word	0x00030218

000d44fc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_ble_stack_init+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	689b      	ldr	r3, [r3, #8]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030278 	.word	0x00030278

000d450c <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <hal_ble_gap_get_device_address+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	69db      	ldr	r3, [r3, #28]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030278 	.word	0x00030278

000d451c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <hal_ble_gap_set_advertising_data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030278 	.word	0x00030278

000d452c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <hal_ble_gap_set_scan_response_data+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030278 	.word	0x00030278

000d453c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <hal_ble_gap_start_advertising+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030278 	.word	0x00030278

000d454c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b03      	ldr	r3, [pc, #12]	; (d455c <hal_ble_gap_disconnect+0x10>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4556:	9301      	str	r3, [sp, #4]
   d4558:	bd08      	pop	{r3, pc}
   d455a:	0000      	.short	0x0000
   d455c:	00030278 	.word	0x00030278

000d4560 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b03      	ldr	r3, [pc, #12]	; (d4570 <hal_ble_gatt_server_add_service+0x10>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d456a:	9301      	str	r3, [sp, #4]
   d456c:	bd08      	pop	{r3, pc}
   d456e:	0000      	.short	0x0000
   d4570:	00030278 	.word	0x00030278

000d4574 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b03      	ldr	r3, [pc, #12]	; (d4584 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d457e:	9301      	str	r3, [sp, #4]
   d4580:	bd08      	pop	{r3, pc}
   d4582:	0000      	.short	0x0000
   d4584:	00030278 	.word	0x00030278

000d4588 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b03      	ldr	r3, [pc, #12]	; (d4598 <hal_ble_gatt_client_write_with_response+0x10>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4592:	9301      	str	r3, [sp, #4]
   d4594:	bd08      	pop	{r3, pc}
   d4596:	0000      	.short	0x0000
   d4598:	00030278 	.word	0x00030278

000d459c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b03      	ldr	r3, [pc, #12]	; (d45ac <hal_ble_gatt_client_write_without_response+0x10>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d45a6:	9301      	str	r3, [sp, #4]
   d45a8:	bd08      	pop	{r3, pc}
   d45aa:	0000      	.short	0x0000
   d45ac:	00030278 	.word	0x00030278

000d45b0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b03      	ldr	r3, [pc, #12]	; (d45c0 <hal_ble_gatt_server_add_characteristic+0x10>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d45ba:	9301      	str	r3, [sp, #4]
   d45bc:	bd08      	pop	{r3, pc}
   d45be:	0000      	.short	0x0000
   d45c0:	00030278 	.word	0x00030278

000d45c4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b03      	ldr	r3, [pc, #12]	; (d45d4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d45ce:	9301      	str	r3, [sp, #4]
   d45d0:	bd08      	pop	{r3, pc}
   d45d2:	0000      	.short	0x0000
   d45d4:	00030278 	.word	0x00030278

000d45d8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b03      	ldr	r3, [pc, #12]	; (d45e8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d45e2:	9301      	str	r3, [sp, #4]
   d45e4:	bd08      	pop	{r3, pc}
   d45e6:	0000      	.short	0x0000
   d45e8:	00030278 	.word	0x00030278

000d45ec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b03      	ldr	r3, [pc, #12]	; (d45fc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d45f6:	9301      	str	r3, [sp, #4]
   d45f8:	bd08      	pop	{r3, pc}
   d45fa:	0000      	.short	0x0000
   d45fc:	00030278 	.word	0x00030278

000d4600 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <os_mutex_recursive_create+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030248 	.word	0x00030248

000d4610 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <os_mutex_recursive_destroy+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030248 	.word	0x00030248

000d4620 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <os_mutex_recursive_lock+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030248 	.word	0x00030248

000d4630 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <os_mutex_recursive_unlock+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030248 	.word	0x00030248

000d4640 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <inet_inet_ntop+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	695b      	ldr	r3, [r3, #20]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030264 	.word	0x00030264

000d4650 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <hal_usart_init+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	681b      	ldr	r3, [r3, #0]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003023c 	.word	0x0003023c

000d4660 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <hal_usart_write+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	68db      	ldr	r3, [r3, #12]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003023c 	.word	0x0003023c

000d4670 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <hal_usart_available+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	691b      	ldr	r3, [r3, #16]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	0003023c 	.word	0x0003023c

000d4680 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <hal_usart_read+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	695b      	ldr	r3, [r3, #20]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003023c 	.word	0x0003023c

000d4690 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <hal_usart_peek+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	699b      	ldr	r3, [r3, #24]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003023c 	.word	0x0003023c

000d46a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <hal_usart_flush+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	69db      	ldr	r3, [r3, #28]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003023c 	.word	0x0003023c

000d46b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <hal_usart_available_data_for_write+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003023c 	.word	0x0003023c

000d46c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_USB_USART_Init+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	681b      	ldr	r3, [r3, #0]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003024c 	.word	0x0003024c

000d46d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_USB_USART_Begin+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	685b      	ldr	r3, [r3, #4]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003024c 	.word	0x0003024c

000d46e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USB_USART_Available_Data+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	691b      	ldr	r3, [r3, #16]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003024c 	.word	0x0003024c

000d46f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	695b      	ldr	r3, [r3, #20]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003024c 	.word	0x0003024c

000d4700 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USB_USART_Receive_Data+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	699b      	ldr	r3, [r3, #24]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003024c 	.word	0x0003024c

000d4710 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USB_USART_Send_Data+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	69db      	ldr	r3, [r3, #28]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003024c 	.word	0x0003024c

000d4720 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USB_USART_Flush_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a1b      	ldr	r3, [r3, #32]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003024c 	.word	0x0003024c

000d4730 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USB_USART_Is_Connected+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003024c 	.word	0x0003024c

000d4740 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <panic_+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030260 	.word	0x00030260

000d4750 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <log_message+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030260 	.word	0x00030260

000d4760 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <set_system_mode+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	685b      	ldr	r3, [r3, #4]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030220 	.word	0x00030220

000d4770 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <system_delay_ms+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	695b      	ldr	r3, [r3, #20]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030220 	.word	0x00030220

000d4780 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b03      	ldr	r3, [pc, #12]	; (d4790 <system_ctrl_set_app_request_handler+0x10>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d478a:	9301      	str	r3, [sp, #4]
   d478c:	bd08      	pop	{r3, pc}
   d478e:	0000      	.short	0x0000
   d4790:	00030220 	.word	0x00030220

000d4794 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b03      	ldr	r3, [pc, #12]	; (d47a4 <system_ctrl_set_result+0x10>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d479e:	9301      	str	r3, [sp, #4]
   d47a0:	bd08      	pop	{r3, pc}
   d47a2:	0000      	.short	0x0000
   d47a4:	00030220 	.word	0x00030220

000d47a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <network_connect+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	685b      	ldr	r3, [r3, #4]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030240 	.word	0x00030240

000d47b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <network_connecting+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	689b      	ldr	r3, [r3, #8]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030240 	.word	0x00030240

000d47c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <network_disconnect+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	68db      	ldr	r3, [r3, #12]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030240 	.word	0x00030240

000d47d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <network_ready+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	691b      	ldr	r3, [r3, #16]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030240 	.word	0x00030240

000d47e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <network_on+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	695b      	ldr	r3, [r3, #20]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030240 	.word	0x00030240

000d47f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <network_off+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	699b      	ldr	r3, [r3, #24]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030240 	.word	0x00030240

000d4808 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <network_listen+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	69db      	ldr	r3, [r3, #28]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030240 	.word	0x00030240

000d4818 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <network_listening+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6a1b      	ldr	r3, [r3, #32]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030240 	.word	0x00030240

000d4828 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <network_set_listen_timeout+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030240 	.word	0x00030240

000d4838 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <network_get_listen_timeout+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030240 	.word	0x00030240

000d4848 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <spark_process+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	689b      	ldr	r3, [r3, #8]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030244 	.word	0x00030244

000d4858 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <spark_set_random_seed_from_cloud_handler+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030244 	.word	0x00030244

000d4868 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <malloc+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	681b      	ldr	r3, [r3, #0]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003021c 	.word	0x0003021c

000d4878 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <free+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	685b      	ldr	r3, [r3, #4]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003021c 	.word	0x0003021c

000d4888 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <realloc+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	689b      	ldr	r3, [r3, #8]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003021c 	.word	0x0003021c

000d4898 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <vsnprintf+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003021c 	.word	0x0003021c

000d48a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <newlib_impure_ptr_callback+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003021c 	.word	0x0003021c

000d48b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48b8:	2200      	movs	r2, #0
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	4611      	mov	r1, r2
   d48be:	f7ff bfab 	b.w	d4818 <network_listening>

000d48c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d48c2:	2200      	movs	r2, #0
   d48c4:	6840      	ldr	r0, [r0, #4]
   d48c6:	4611      	mov	r1, r2
   d48c8:	f7ff bfb6 	b.w	d4838 <network_get_listen_timeout>

000d48cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d48cc:	6840      	ldr	r0, [r0, #4]
   d48ce:	2200      	movs	r2, #0
   d48d0:	f7ff bfaa 	b.w	d4828 <network_set_listen_timeout>

000d48d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d48d4:	6840      	ldr	r0, [r0, #4]
   d48d6:	2200      	movs	r2, #0
   d48d8:	f081 0101 	eor.w	r1, r1, #1
   d48dc:	f7ff bf94 	b.w	d4808 <network_listen>

000d48e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d48e0:	2300      	movs	r3, #0
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	461a      	mov	r2, r3
   d48e6:	4619      	mov	r1, r3
   d48e8:	f7ff bf86 	b.w	d47f8 <network_off>

000d48ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d48ec:	2300      	movs	r3, #0
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	461a      	mov	r2, r3
   d48f2:	4619      	mov	r1, r3
   d48f4:	f7ff bf78 	b.w	d47e8 <network_on>

000d48f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48f8:	2200      	movs	r2, #0
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	4611      	mov	r1, r2
   d48fe:	f7ff bf6b 	b.w	d47d8 <network_ready>

000d4902 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4902:	2200      	movs	r2, #0
   d4904:	6840      	ldr	r0, [r0, #4]
   d4906:	4611      	mov	r1, r2
   d4908:	f7ff bf56 	b.w	d47b8 <network_connecting>

000d490c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	2200      	movs	r2, #0
   d4910:	2102      	movs	r1, #2
   d4912:	f7ff bf59 	b.w	d47c8 <network_disconnect>

000d4916 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4916:	2300      	movs	r3, #0
   d4918:	6840      	ldr	r0, [r0, #4]
   d491a:	461a      	mov	r2, r3
   d491c:	f7ff bf44 	b.w	d47a8 <network_connect>

000d4920 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4920:	4b02      	ldr	r3, [pc, #8]	; (d492c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4922:	2203      	movs	r2, #3
   d4924:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4926:	4a02      	ldr	r2, [pc, #8]	; (d4930 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4928:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d492a:	4770      	bx	lr
   d492c:	2003e65c 	.word	0x2003e65c
   d4930:	000d6818 	.word	0x000d6818

000d4934 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4934:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4936:	4b09      	ldr	r3, [pc, #36]	; (d495c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4938:	4c09      	ldr	r4, [pc, #36]	; (d4960 <_GLOBAL__sub_I_System+0x2c>)
   d493a:	2202      	movs	r2, #2
   d493c:	2000      	movs	r0, #0
   d493e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4940:	4b08      	ldr	r3, [pc, #32]	; (d4964 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4942:	6020      	str	r0, [r4, #0]
   d4944:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4946:	71a0      	strb	r0, [r4, #6]
   d4948:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d494a:	f7ff ff09 	bl	d4760 <set_system_mode>
SystemClass System;
   d494e:	4620      	mov	r0, r4
   d4950:	4a05      	ldr	r2, [pc, #20]	; (d4968 <_GLOBAL__sub_I_System+0x34>)
   d4952:	4906      	ldr	r1, [pc, #24]	; (d496c <_GLOBAL__sub_I_System+0x38>)
   d4954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4958:	f001 bd02 	b.w	d6360 <__aeabi_atexit>
   d495c:	2003e670 	.word	0x2003e670
   d4960:	2003e664 	.word	0x2003e664
   d4964:	ffff0000 	.word	0xffff0000
   d4968:	2003e5c4 	.word	0x2003e5c4
   d496c:	000d40ab 	.word	0x000d40ab

000d4970 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4970:	b510      	push	{r4, lr}
   d4972:	4604      	mov	r4, r0
{
	free(buffer);
   d4974:	6800      	ldr	r0, [r0, #0]
   d4976:	f7ff ff7f 	bl	d4878 <free>
}
   d497a:	4620      	mov	r0, r4
   d497c:	bd10      	pop	{r4, pc}

000d497e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d497e:	b510      	push	{r4, lr}
   d4980:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4982:	6800      	ldr	r0, [r0, #0]
   d4984:	b108      	cbz	r0, d498a <_ZN6String10invalidateEv+0xc>
   d4986:	f7ff ff77 	bl	d4878 <free>
	buffer = NULL;
   d498a:	2300      	movs	r3, #0
	capacity = len = 0;
   d498c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4990:	6023      	str	r3, [r4, #0]
}
   d4992:	bd10      	pop	{r4, pc}

000d4994 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4994:	b538      	push	{r3, r4, r5, lr}
   d4996:	4604      	mov	r4, r0
   d4998:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d499a:	6800      	ldr	r0, [r0, #0]
   d499c:	3101      	adds	r1, #1
   d499e:	f7ff ff73 	bl	d4888 <realloc>
	if (newbuffer) {
   d49a2:	b110      	cbz	r0, d49aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49a4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d49a8:	2001      	movs	r0, #1
	}
	return 0;
}
   d49aa:	bd38      	pop	{r3, r4, r5, pc}

000d49ac <_ZN6String7reserveEj>:
{
   d49ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d49ae:	6803      	ldr	r3, [r0, #0]
{
   d49b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d49b2:	b123      	cbz	r3, d49be <_ZN6String7reserveEj+0x12>
   d49b4:	6843      	ldr	r3, [r0, #4]
   d49b6:	428b      	cmp	r3, r1
   d49b8:	d301      	bcc.n	d49be <_ZN6String7reserveEj+0x12>
   d49ba:	2001      	movs	r0, #1
}
   d49bc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d49be:	4620      	mov	r0, r4
   d49c0:	f7ff ffe8 	bl	d4994 <_ZN6String12changeBufferEj>
   d49c4:	2800      	cmp	r0, #0
   d49c6:	d0f9      	beq.n	d49bc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d49c8:	68a3      	ldr	r3, [r4, #8]
   d49ca:	2b00      	cmp	r3, #0
   d49cc:	d1f5      	bne.n	d49ba <_ZN6String7reserveEj+0xe>
   d49ce:	6822      	ldr	r2, [r4, #0]
   d49d0:	7013      	strb	r3, [r2, #0]
   d49d2:	e7f2      	b.n	d49ba <_ZN6String7reserveEj+0xe>

000d49d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d49d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d49d6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d49d8:	4611      	mov	r1, r2
   d49da:	9201      	str	r2, [sp, #4]
{
   d49dc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d49de:	f7ff ffe5 	bl	d49ac <_ZN6String7reserveEj>
   d49e2:	9a01      	ldr	r2, [sp, #4]
   d49e4:	b928      	cbnz	r0, d49f2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d49e6:	4620      	mov	r0, r4
   d49e8:	f7ff ffc9 	bl	d497e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d49ec:	4620      	mov	r0, r4
   d49ee:	b003      	add	sp, #12
   d49f0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d49f2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d49f4:	4629      	mov	r1, r5
   d49f6:	6820      	ldr	r0, [r4, #0]
   d49f8:	f001 fde8 	bl	d65cc <memcpy>
	buffer[len] = 0;
   d49fc:	6822      	ldr	r2, [r4, #0]
   d49fe:	68a3      	ldr	r3, [r4, #8]
   d4a00:	2100      	movs	r1, #0
   d4a02:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a04:	e7f2      	b.n	d49ec <_ZN6String4copyEPKcj+0x18>

000d4a06 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a06:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a08:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a0a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a0e:	4604      	mov	r4, r0
	len = 0;
   d4a10:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a12:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a14:	b141      	cbz	r1, d4a28 <_ZN6StringC1EPKc+0x22>
   d4a16:	4608      	mov	r0, r1
   d4a18:	9101      	str	r1, [sp, #4]
   d4a1a:	f001 fe69 	bl	d66f0 <strlen>
   d4a1e:	9901      	ldr	r1, [sp, #4]
   d4a20:	4602      	mov	r2, r0
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ffd6 	bl	d49d4 <_ZN6String4copyEPKcj>
}
   d4a28:	4620      	mov	r0, r4
   d4a2a:	b002      	add	sp, #8
   d4a2c:	bd10      	pop	{r4, pc}

000d4a2e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4a2e:	b513      	push	{r0, r1, r4, lr}
   d4a30:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4a32:	b159      	cbz	r1, d4a4c <_ZN6StringaSEPKc+0x1e>
   d4a34:	4608      	mov	r0, r1
   d4a36:	9101      	str	r1, [sp, #4]
   d4a38:	f001 fe5a 	bl	d66f0 <strlen>
   d4a3c:	9901      	ldr	r1, [sp, #4]
   d4a3e:	4602      	mov	r2, r0
   d4a40:	4620      	mov	r0, r4
   d4a42:	f7ff ffc7 	bl	d49d4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4a46:	4620      	mov	r0, r4
   d4a48:	b002      	add	sp, #8
   d4a4a:	bd10      	pop	{r4, pc}
	else invalidate();
   d4a4c:	f7ff ff97 	bl	d497e <_ZN6String10invalidateEv>
   d4a50:	e7f9      	b.n	d4a46 <_ZN6StringaSEPKc+0x18>

000d4a52 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4a52:	4770      	bx	lr

000d4a54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4a54:	4770      	bx	lr

000d4a56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d4a56:	4770      	bx	lr

000d4a58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4a58:	4770      	bx	lr
	...

000d4a5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4a5c:	4b06      	ldr	r3, [pc, #24]	; (d4a78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a5e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4a60:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4a62:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4a66:	d005      	beq.n	d4a74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4a68:	4608      	mov	r0, r1
   d4a6a:	f001 fc81 	bl	d6370 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4a6e:	2800      	cmp	r0, #0
	return nullptr;
   d4a70:	bf08      	it	eq
   d4a72:	2400      	moveq	r4, #0
      }
   d4a74:	4620      	mov	r0, r4
   d4a76:	bd10      	pop	{r4, pc}
   d4a78:	000d698c 	.word	0x000d698c

000d4a7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4a7c:	4b06      	ldr	r3, [pc, #24]	; (d4a98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a7e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4a80:	b510      	push	{r4, lr}
   d4a82:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4a86:	d005      	beq.n	d4a94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4a88:	4608      	mov	r0, r1
   d4a8a:	f001 fc71 	bl	d6370 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4a8e:	2800      	cmp	r0, #0
	return nullptr;
   d4a90:	bf08      	it	eq
   d4a92:	2400      	moveq	r4, #0
      }
   d4a94:	4620      	mov	r0, r4
   d4a96:	bd10      	pop	{r4, pc}
   d4a98:	000d698c 	.word	0x000d698c

000d4a9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4a9c:	4b06      	ldr	r3, [pc, #24]	; (d4ab8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a9e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4aa0:	b510      	push	{r4, lr}
   d4aa2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4aa6:	d005      	beq.n	d4ab4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4aa8:	4608      	mov	r0, r1
   d4aaa:	f001 fc61 	bl	d6370 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4aae:	2800      	cmp	r0, #0
	return nullptr;
   d4ab0:	bf08      	it	eq
   d4ab2:	2400      	moveq	r4, #0
      }
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	bd10      	pop	{r4, pc}
   d4ab8:	000d698c 	.word	0x000d698c

000d4abc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d4abc:	3048      	adds	r0, #72	; 0x48
   d4abe:	f7ff bf57 	b.w	d4970 <_ZN6StringD1Ev>

000d4ac2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4ac2:	b510      	push	{r4, lr}
   d4ac4:	2160      	movs	r1, #96	; 0x60
   d4ac6:	4604      	mov	r4, r0
   d4ac8:	f001 fc4f 	bl	d636a <_ZdlPvj>
   d4acc:	4620      	mov	r0, r4
   d4ace:	bd10      	pop	{r4, pc}

000d4ad0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4ad0:	b510      	push	{r4, lr}
   d4ad2:	2124      	movs	r1, #36	; 0x24
   d4ad4:	4604      	mov	r4, r0
   d4ad6:	f001 fc48 	bl	d636a <_ZdlPvj>
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd10      	pop	{r4, pc}

000d4ade <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4ade:	b510      	push	{r4, lr}
   d4ae0:	2130      	movs	r1, #48	; 0x30
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	f001 fc41 	bl	d636a <_ZdlPvj>
   d4ae8:	4620      	mov	r0, r4
   d4aea:	bd10      	pop	{r4, pc}

000d4aec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4aec:	f7ff bad3 	b.w	d4096 <_ZdlPv>

000d4af0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4af0:	f7ff bad1 	b.w	d4096 <_ZdlPv>

000d4af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4af4:	f7ff bacf 	b.w	d4096 <_ZdlPv>

000d4af8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4af8:	b510      	push	{r4, lr}
          _M_dispose();
   d4afa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4afc:	4604      	mov	r4, r0
          _M_dispose();
   d4afe:	689b      	ldr	r3, [r3, #8]
   d4b00:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b02:	68a3      	ldr	r3, [r4, #8]
   d4b04:	3b01      	subs	r3, #1
   d4b06:	60a3      	str	r3, [r4, #8]
   d4b08:	b92b      	cbnz	r3, d4b16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4b0a:	6823      	ldr	r3, [r4, #0]
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	68db      	ldr	r3, [r3, #12]
    }
   d4b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4b14:	4718      	bx	r3
    }
   d4b16:	bd10      	pop	{r4, pc}

000d4b18 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b18:	b510      	push	{r4, lr}
   d4b1a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b1c:	6800      	ldr	r0, [r0, #0]
   d4b1e:	b108      	cbz	r0, d4b24 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b20:	f7ff fd76 	bl	d4610 <os_mutex_recursive_destroy>
    }
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}

000d4b28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b2a:	2500      	movs	r5, #0
   d4b2c:	1cec      	adds	r4, r5, #3
   d4b2e:	428c      	cmp	r4, r1
   d4b30:	d80d      	bhi.n	d4b4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        if (buf[i + 1] == adsType) {
   d4b32:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4b34:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4b36:	5d87      	ldrb	r7, [r0, r6]
   d4b38:	4297      	cmp	r7, r2
   d4b3a:	d105      	bne.n	d4b48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            if ((i + adsLen + 1) <= len) {
   d4b3c:	4426      	add	r6, r4
   d4b3e:	42b1      	cmp	r1, r6
   d4b40:	d305      	bcc.n	d4b4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4b42:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4b44:	1c60      	adds	r0, r4, #1
}
   d4b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4b48:	3401      	adds	r4, #1
   d4b4a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b4c:	e7ee      	b.n	d4b2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4b4e:	2000      	movs	r0, #0
   d4b50:	e7f9      	b.n	d4b46 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000d4b54 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4b54:	4a02      	ldr	r2, [pc, #8]	; (d4b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4b56:	2100      	movs	r1, #0
   d4b58:	200a      	movs	r0, #10
   d4b5a:	f7ff bdf1 	b.w	d4740 <panic_>
   d4b5e:	bf00      	nop
   d4b60:	000d44cd 	.word	0x000d44cd

000d4b64 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d4b64:	b530      	push	{r4, r5, lr}
   d4b66:	3801      	subs	r0, #1
   d4b68:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   d4b6c:	4613      	mov	r3, r2
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d4b6e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   d4b72:	0924      	lsrs	r4, r4, #4
    char hex_digit = nibble + 48;
   d4b74:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d4b78:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d4b7a:	bf88      	it	hi
   d4b7c:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   d4b80:	f803 5b02 	strb.w	r5, [r3], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   d4b84:	7804      	ldrb	r4, [r0, #0]
   d4b86:	f004 040f 	and.w	r4, r4, #15
    char hex_digit = nibble + 48;
   d4b8a:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d4b8e:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d4b90:	bf88      	it	hi
   d4b92:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    for (i = 0; i < len; ++i)
   d4b96:	4299      	cmp	r1, r3
    *p++ = ascii_nibble(nibble);
   d4b98:	f803 5c01 	strb.w	r5, [r3, #-1]
    for (i = 0; i < len; ++i)
   d4b9c:	d1e7      	bne.n	d4b6e <_ZL12bytes2hexbufPKhjPc+0xa>
    }
    return result;
}
   d4b9e:	4610      	mov	r0, r2
   d4ba0:	bd30      	pop	{r4, r5, pc}

000d4ba2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4ba2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4ba6:	b2da      	uxtb	r2, r3
   d4ba8:	2a09      	cmp	r2, #9
   d4baa:	d801      	bhi.n	d4bb0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4bac:	4618      	mov	r0, r3
   d4bae:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4bb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4bb4:	2b05      	cmp	r3, #5
   d4bb6:	d801      	bhi.n	d4bbc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4bb8:	3857      	subs	r0, #87	; 0x57
   d4bba:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4bbc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4bc0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4bc2:	bf94      	ite	ls
   d4bc4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4bc6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4bca:	4770      	bx	lr

000d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d4bcc:	b510      	push	{r4, lr}
            locked_(false) {
   d4bce:	2300      	movs	r3, #0
   d4bd0:	7003      	strb	r3, [r0, #0]
        mutex_.lock();
   d4bd2:	4b04      	ldr	r3, [pc, #16]	; (d4be4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d4bd4:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4bd6:	6818      	ldr	r0, [r3, #0]
   d4bd8:	f7ff fd22 	bl	d4620 <os_mutex_recursive_lock>
        locked_ = true;
   d4bdc:	2301      	movs	r3, #1
   d4bde:	7023      	strb	r3, [r4, #0]
    }
   d4be0:	4620      	mov	r0, r4
   d4be2:	bd10      	pop	{r4, pc}
   d4be4:	2003e67c 	.word	0x2003e67c

000d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d4be8:	b510      	push	{r4, lr}
        if (locked_) {
   d4bea:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d4bec:	4604      	mov	r4, r0
        if (locked_) {
   d4bee:	b11b      	cbz	r3, d4bf8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
        mutex_.unlock();
   d4bf0:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4bf2:	6818      	ldr	r0, [r3, #0]
   d4bf4:	f7ff fd1c 	bl	d4630 <os_mutex_recursive_unlock>
    }
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}
   d4bfc:	2003e67c 	.word	0x2003e67c

000d4c00 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d4c00:	2200      	movs	r2, #0
   d4c02:	6042      	str	r2, [r0, #4]
   d4c04:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d4c06:	7182      	strb	r2, [r0, #6]
}
   d4c08:	4770      	bx	lr

000d4c0a <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   d4c0a:	2905      	cmp	r1, #5
    return address_.addr[i];
   d4c0c:	bf94      	ite	ls
   d4c0e:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   d4c10:	2000      	movhi	r0, #0
}
   d4c12:	4770      	bx	lr

000d4c14 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d4c14:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4c16:	7982      	ldrb	r2, [r0, #6]
   d4c18:	798b      	ldrb	r3, [r1, #6]
   d4c1a:	429a      	cmp	r2, r3
   d4c1c:	d106      	bne.n	d4c2c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4c1e:	2206      	movs	r2, #6
   d4c20:	f001 fcc6 	bl	d65b0 <memcmp>
   d4c24:	fab0 f080 	clz	r0, r0
   d4c28:	0940      	lsrs	r0, r0, #5
}
   d4c2a:	bd08      	pop	{r3, pc}
    return false;
   d4c2c:	2000      	movs	r0, #0
   d4c2e:	e7fc      	b.n	d4c2a <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d4c30 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d4c30:	b510      	push	{r4, lr}
   d4c32:	1d43      	adds	r3, r0, #5
   d4c34:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   d4c36:	781c      	ldrb	r4, [r3, #0]
   d4c38:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d4c3c:	4283      	cmp	r3, r0
   d4c3e:	f103 33ff 	add.w	r3, r3, #4294967295
   d4c42:	d1f8      	bne.n	d4c36 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   d4c44:	bd10      	pop	{r4, pc}

000d4c46 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d4c46:	b570      	push	{r4, r5, r6, lr}
   d4c48:	4614      	mov	r4, r2
   d4c4a:	b088      	sub	sp, #32
   d4c4c:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   d4c4e:	460d      	mov	r5, r1
   d4c50:	2900      	cmp	r1, #0
   d4c52:	d048      	beq.n	d4ce6 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   d4c54:	b1a4      	cbz	r4, d4c80 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   d4c56:	a901      	add	r1, sp, #4
   d4c58:	f7ff ffea 	bl	d4c30 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   d4c5c:	b19a      	cbz	r2, d4c86 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d4c5e:	aa03      	add	r2, sp, #12
   d4c60:	2106      	movs	r1, #6
   d4c62:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   d4c64:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d4c66:	f7ff ff7d 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
    len = std::min(len - 1, sizeof(cStr));
   d4c6a:	2e11      	cmp	r6, #17
   d4c6c:	bf28      	it	cs
   d4c6e:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   d4c70:	4632      	mov	r2, r6
   d4c72:	a903      	add	r1, sp, #12
   d4c74:	4628      	mov	r0, r5
   d4c76:	f001 fca9 	bl	d65cc <memcpy>
    buf[len++] = '\0';
   d4c7a:	2300      	movs	r3, #0
   d4c7c:	55ab      	strb	r3, [r5, r6]
   d4c7e:	1c74      	adds	r4, r6, #1
}
   d4c80:	4620      	mov	r0, r4
   d4c82:	b008      	add	sp, #32
   d4c84:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d4c86:	aa03      	add	r2, sp, #12
   d4c88:	2101      	movs	r1, #1
   d4c8a:	a801      	add	r0, sp, #4
   d4c8c:	f7ff ff6a 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2] = ':';
   d4c90:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d4c92:	f10d 020f 	add.w	r2, sp, #15
   d4c96:	2101      	movs	r1, #1
   d4c98:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   d4c9c:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d4ca0:	f7ff ff60 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d4ca4:	f10d 0212 	add.w	r2, sp, #18
   d4ca8:	2101      	movs	r1, #1
   d4caa:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   d4cae:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d4cb2:	f7ff ff57 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d4cb6:	f10d 0215 	add.w	r2, sp, #21
   d4cba:	2101      	movs	r1, #1
   d4cbc:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   d4cc0:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d4cc4:	f7ff ff4e 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d4cc8:	aa06      	add	r2, sp, #24
   d4cca:	2101      	movs	r1, #1
   d4ccc:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   d4cce:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d4cd2:	f7ff ff47 	bl	d4b64 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2 + 4] = ':';
   d4cd6:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d4cda:	f10d 021b 	add.w	r2, sp, #27
   d4cde:	2101      	movs	r1, #1
   d4ce0:	f10d 0009 	add.w	r0, sp, #9
   d4ce4:	e7be      	b.n	d4c64 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   d4ce6:	460c      	mov	r4, r1
   d4ce8:	e7ca      	b.n	d4c80 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000d4cea <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   d4cea:	b510      	push	{r4, lr}
   d4cec:	b086      	sub	sp, #24
   d4cee:	4604      	mov	r4, r0
   d4cf0:	4613      	mov	r3, r2
   d4cf2:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   d4cf4:	2212      	movs	r2, #18
   d4cf6:	a901      	add	r1, sp, #4
   d4cf8:	f7ff ffa5 	bl	d4c46 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d4cfc:	a901      	add	r1, sp, #4
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff fe81 	bl	d4a06 <_ZN6StringC1EPKc>
}
   d4d04:	4620      	mov	r0, r4
   d4d06:	b006      	add	sp, #24
   d4d08:	bd10      	pop	{r4, pc}
	...

000d4d0c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d4d0c:	2201      	movs	r2, #1
   d4d0e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4d10:	4a06      	ldr	r2, [pc, #24]	; (d4d2c <_ZN8particle7BleUuidC1Ev+0x20>)
   d4d12:	6811      	ldr	r1, [r2, #0]
   d4d14:	6001      	str	r1, [r0, #0]
   d4d16:	6851      	ldr	r1, [r2, #4]
   d4d18:	6041      	str	r1, [r0, #4]
   d4d1a:	8911      	ldrh	r1, [r2, #8]
   d4d1c:	7a92      	ldrb	r2, [r2, #10]
   d4d1e:	7282      	strb	r2, [r0, #10]
   d4d20:	2200      	movs	r2, #0
   d4d22:	8101      	strh	r1, [r0, #8]
   d4d24:	f8c0 200b 	str.w	r2, [r0, #11]
   d4d28:	73c2      	strb	r2, [r0, #15]
}
   d4d2a:	4770      	bx	lr
   d4d2c:	000d6994 	.word	0x000d6994

000d4d30 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d4d30:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4d32:	690b      	ldr	r3, [r1, #16]
   d4d34:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4d36:	f101 0210 	add.w	r2, r1, #16
   d4d3a:	4603      	mov	r3, r0
   d4d3c:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d40:	f843 4b04 	str.w	r4, [r3], #4
   d4d44:	4291      	cmp	r1, r2
   d4d46:	d1f9      	bne.n	d4d3c <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4d48:	bd10      	pop	{r4, pc}

000d4d4a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4d4a:	b510      	push	{r4, lr}
    if (uuid128) {
   d4d4c:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4d4e:	4604      	mov	r4, r0
    if (uuid128) {
   d4d50:	b1b1      	cbz	r1, d4d80 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d4d52:	2a01      	cmp	r2, #1
   d4d54:	f101 0210 	add.w	r2, r1, #16
   d4d58:	d10a      	bne.n	d4d70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d5a:	4601      	mov	r1, r0
   d4d5c:	f853 0b04 	ldr.w	r0, [r3], #4
   d4d60:	f841 0b04 	str.w	r0, [r1], #4
   d4d64:	4293      	cmp	r3, r2
   d4d66:	d1f9      	bne.n	d4d5c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d4d68:	2301      	movs	r3, #1
   d4d6a:	6123      	str	r3, [r4, #16]
}
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	bd10      	pop	{r4, pc}
   d4d70:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d4d72:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d4d76:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4d7a:	429a      	cmp	r2, r3
   d4d7c:	d1f9      	bne.n	d4d72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d4d7e:	e7f3      	b.n	d4d68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4d80:	2210      	movs	r2, #16
   d4d82:	f001 fc4b 	bl	d661c <memset>
   d4d86:	e7f1      	b.n	d4d6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d4d88 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4d88:	b538      	push	{r3, r4, r5, lr}
   d4d8a:	4604      	mov	r4, r0
   d4d8c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4d8e:	461a      	mov	r2, r3
   d4d90:	f7ff ffdb 	bl	d4d4a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4d94:	81a5      	strh	r5, [r4, #12]
}
   d4d96:	4620      	mov	r0, r4
   d4d98:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d9c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d4d9c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4d9e:	6902      	ldr	r2, [r0, #16]
   d4da0:	b922      	cbnz	r2, d4dac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4da2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4da4:	3800      	subs	r0, #0
   d4da6:	bf18      	it	ne
   d4da8:	2001      	movne	r0, #1
}
   d4daa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dac:	4902      	ldr	r1, [pc, #8]	; (d4db8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4dae:	2210      	movs	r2, #16
   d4db0:	f001 fbfe 	bl	d65b0 <memcmp>
   d4db4:	e7f6      	b.n	d4da4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d4db6:	bf00      	nop
   d4db8:	000d69b4 	.word	0x000d69b4

000d4dbc <_ZNK8particle7BleUuid4typeEv>:
}
   d4dbc:	6900      	ldr	r0, [r0, #16]
   d4dbe:	4770      	bx	lr

000d4dc0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d4dc0:	b538      	push	{r3, r4, r5, lr}
   d4dc2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4dc4:	2214      	movs	r2, #20
   d4dc6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d4dc8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4dca:	f001 fc27 	bl	d661c <memset>
    if (type_ == BleUuidType::SHORT) {
   d4dce:	6923      	ldr	r3, [r4, #16]
   d4dd0:	b93b      	cbnz	r3, d4de2 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4dd2:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d4dd4:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4dd6:	7b23      	ldrb	r3, [r4, #12]
   d4dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4ddc:	802b      	strh	r3, [r5, #0]
}
   d4dde:	4628      	mov	r0, r5
   d4de0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4de2:	2301      	movs	r3, #1
   d4de4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4de6:	f104 0210 	add.w	r2, r4, #16
   d4dea:	462b      	mov	r3, r5
   d4dec:	f854 1b04 	ldr.w	r1, [r4], #4
   d4df0:	f843 1b04 	str.w	r1, [r3], #4
   d4df4:	4294      	cmp	r4, r2
   d4df6:	d1f9      	bne.n	d4dec <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d4df8:	e7f1      	b.n	d4dde <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d4dfa <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4dfa:	7b42      	ldrb	r2, [r0, #13]
   d4dfc:	7b00      	ldrb	r0, [r0, #12]
}
   d4dfe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4e02:	4770      	bx	lr

000d4e04 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d4e04:	4770      	bx	lr

000d4e06 <_ZN8particle7BleUuidaSERKS0_>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4e06:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4e08:	690b      	ldr	r3, [r1, #16]
   d4e0a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4e0c:	f101 0210 	add.w	r2, r1, #16
   d4e10:	4603      	mov	r3, r0
   d4e12:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e16:	f843 4b04 	str.w	r4, [r3], #4
   d4e1a:	4291      	cmp	r1, r2
   d4e1c:	d1f9      	bne.n	d4e12 <_ZN8particle7BleUuidaSERKS0_+0xc>
}
   d4e1e:	bd10      	pop	{r4, pc}

000d4e20 <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4e20:	b510      	push	{r4, lr}
   d4e22:	b086      	sub	sp, #24
   d4e24:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4e26:	2201      	movs	r2, #1
   d4e28:	a801      	add	r0, sp, #4
   d4e2a:	f7ff ff8e 	bl	d4d4a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4e2e:	a901      	add	r1, sp, #4
   d4e30:	4620      	mov	r0, r4
   d4e32:	f7ff ffe8 	bl	d4e06 <_ZN8particle7BleUuidaSERKS0_>
}
   d4e36:	b006      	add	sp, #24
   d4e38:	bd10      	pop	{r4, pc}

000d4e3a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d4e3a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4e3c:	6902      	ldr	r2, [r0, #16]
   d4e3e:	690b      	ldr	r3, [r1, #16]
   d4e40:	429a      	cmp	r2, r3
   d4e42:	d106      	bne.n	d4e52 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4e44:	2210      	movs	r2, #16
   d4e46:	f001 fbb3 	bl	d65b0 <memcmp>
   d4e4a:	fab0 f080 	clz	r0, r0
   d4e4e:	0940      	lsrs	r0, r0, #5
}
   d4e50:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4e52:	2000      	movs	r0, #0
   d4e54:	e7fc      	b.n	d4e50 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d4e58 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d4e58:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d4e5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d4e5e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e60:	4b32      	ldr	r3, [pc, #200]	; (d4f2c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d4e62:	681a      	ldr	r2, [r3, #0]
   d4e64:	6002      	str	r2, [r0, #0]
   d4e66:	685a      	ldr	r2, [r3, #4]
   d4e68:	6042      	str	r2, [r0, #4]
   d4e6a:	2500      	movs	r5, #0
   d4e6c:	891a      	ldrh	r2, [r3, #8]
   d4e6e:	7a9b      	ldrb	r3, [r3, #10]
   d4e70:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d4e72:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e74:	7283      	strb	r3, [r0, #10]
   d4e76:	f8c0 500b 	str.w	r5, [r0, #11]
   d4e7a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d4e7c:	460e      	mov	r6, r1
   d4e7e:	b321      	cbz	r1, d4eca <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4e80:	2124      	movs	r1, #36	; 0x24
   d4e82:	4630      	mov	r0, r6
   d4e84:	f001 fc3c 	bl	d6700 <strnlen>
   d4e88:	2804      	cmp	r0, #4
   d4e8a:	d121      	bne.n	d4ed0 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d4e8c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4e90:	af01      	add	r7, sp, #4
   d4e92:	1cb5      	adds	r5, r6, #2
   d4e94:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4e96:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d4e9a:	f7ff fe82 	bl	d4ba2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4e9e:	f1b0 0800 	subs.w	r8, r0, #0
   d4ea2:	db10      	blt.n	d4ec6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d4ea4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d4ea8:	f7ff fe7b 	bl	d4ba2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4eac:	2800      	cmp	r0, #0
   d4eae:	db0a      	blt.n	d4ec6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4eb0:	3502      	adds	r5, #2
   d4eb2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d4eb6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4eb8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d4ebc:	d1eb      	bne.n	d4e96 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d4ebe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4ec2:	ba5b      	rev16	r3, r3
   d4ec4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d4ec6:	2300      	movs	r3, #0
   d4ec8:	6123      	str	r3, [r4, #16]
}
   d4eca:	b002      	add	sp, #8
   d4ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d4ed0:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4ed2:	2124      	movs	r1, #36	; 0x24
   d4ed4:	4630      	mov	r0, r6
   d4ed6:	f001 fc13 	bl	d6700 <strnlen>
   d4eda:	42a8      	cmp	r0, r5
   d4edc:	d806      	bhi.n	d4eec <_ZN8particle7BleUuid9constructEPKc+0x94>
   d4ede:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d4ee0:	2300      	movs	r3, #0
    while (len > 0) {
   d4ee2:	42bc      	cmp	r4, r7
   d4ee4:	d0f1      	beq.n	d4eca <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d4ee6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d4eea:	e7fa      	b.n	d4ee2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4eec:	2f00      	cmp	r7, #0
   d4eee:	d0ec      	beq.n	d4eca <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d4ef0:	5d70      	ldrb	r0, [r6, r5]
   d4ef2:	f7ff fe56 	bl	d4ba2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4ef6:	0603      	lsls	r3, r0, #24
   d4ef8:	d415      	bmi.n	d4f26 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d4efa:	0100      	lsls	r0, r0, #4
   d4efc:	3f01      	subs	r7, #1
   d4efe:	fa5f f880 	uxtb.w	r8, r0
   d4f02:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4f06:	2124      	movs	r1, #36	; 0x24
   d4f08:	4630      	mov	r0, r6
   d4f0a:	f001 fbf9 	bl	d6700 <strnlen>
   d4f0e:	3501      	adds	r5, #1
   d4f10:	42a8      	cmp	r0, r5
   d4f12:	d908      	bls.n	d4f26 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d4f14:	5d70      	ldrb	r0, [r6, r5]
   d4f16:	f7ff fe44 	bl	d4ba2 <_ZN8particle11hexToNibbleEc>
   d4f1a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4f1c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4f1e:	bfa4      	itt	ge
   d4f20:	ea40 0008 	orrge.w	r0, r0, r8
   d4f24:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f26:	3501      	adds	r5, #1
   d4f28:	e7d3      	b.n	d4ed2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d4f2a:	bf00      	nop
   d4f2c:	000d6994 	.word	0x000d6994

000d4f30 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d4f30:	b513      	push	{r0, r1, r4, lr}
   d4f32:	4604      	mov	r4, r0
   d4f34:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d4f36:	f7ff fee9 	bl	d4d0c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4f3a:	4620      	mov	r0, r4
   d4f3c:	9901      	ldr	r1, [sp, #4]
   d4f3e:	f7ff ff8b 	bl	d4e58 <_ZN8particle7BleUuid9constructEPKc>
}
   d4f42:	4620      	mov	r0, r4
   d4f44:	b002      	add	sp, #8
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4f48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f4c:	4689      	mov	r9, r1
   d4f4e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d4f52:	6a01      	ldr	r1, [r0, #32]
   d4f54:	4604      	mov	r4, r0
   d4f56:	461e      	mov	r6, r3
    if (buf == nullptr) {
   d4f58:	4690      	mov	r8, r2
   d4f5a:	b332      	cbz	r2, d4faa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x62>
    if (offset == nullptr) {
   d4f5c:	ab01      	add	r3, sp, #4
   d4f5e:	464a      	mov	r2, r9
   d4f60:	f7ff fde2 	bl	d4b28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d4f64:	6a25      	ldr	r5, [r4, #32]
   d4f66:	1cb3      	adds	r3, r6, #2
   d4f68:	bb1f      	cbnz	r7, d4fb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
   d4f6a:	b310      	cbz	r0, d4fb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4f6c:	18ef      	adds	r7, r5, r3
   d4f6e:	1a3f      	subs	r7, r7, r0
   d4f70:	2f1f      	cmp	r7, #31
   d4f72:	d819      	bhi.n	d4fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f74:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f78:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f7c:	eba5 0209 	sub.w	r2, r5, r9
   d4f80:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f82:	eb00 0109 	add.w	r1, r0, r9
   d4f86:	eb06 000a 	add.w	r0, r6, sl
   d4f8a:	b292      	uxth	r2, r2
   d4f8c:	4421      	add	r1, r4
   d4f8e:	4420      	add	r0, r4
   d4f90:	f001 fb2a 	bl	d65e8 <memmove>
            selfData_[offset] = len + 1;
   d4f94:	1c73      	adds	r3, r6, #1
   d4f96:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d4f9a:	4632      	mov	r2, r6
   d4f9c:	4641      	mov	r1, r8
   d4f9e:	eb04 000a 	add.w	r0, r4, sl
   d4fa2:	f001 fb13 	bl	d65cc <memcpy>
            selfLen_ = staLen + len + 2;
   d4fa6:	6227      	str	r7, [r4, #32]
    return selfLen_;
   d4fa8:	6a21      	ldr	r1, [r4, #32]
}
   d4faa:	4608      	mov	r0, r1
   d4fac:	b002      	add	sp, #8
   d4fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4fb2:	442b      	add	r3, r5
   d4fb4:	2b1f      	cmp	r3, #31
   d4fb6:	d8f7      	bhi.n	d4fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
        selfData_[selfLen_++] = len + 1;
   d4fb8:	1c73      	adds	r3, r6, #1
   d4fba:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fbc:	1ca8      	adds	r0, r5, #2
   d4fbe:	4425      	add	r5, r4
   d4fc0:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fc2:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fc4:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fc8:	4641      	mov	r1, r8
   d4fca:	4420      	add	r0, r4
   d4fcc:	f001 fafe 	bl	d65cc <memcpy>
        selfLen_ += len;
   d4fd0:	6a23      	ldr	r3, [r4, #32]
   d4fd2:	4433      	add	r3, r6
   d4fd4:	6223      	str	r3, [r4, #32]
   d4fd6:	e7e7      	b.n	d4fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>

000d4fd8 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d4fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fda:	4604      	mov	r4, r0
          selfLen_(0) {
   d4fdc:	4602      	mov	r2, r0
   d4fde:	f100 011f 	add.w	r1, r0, #31
   d4fe2:	2300      	movs	r3, #0
   d4fe4:	f802 3b01 	strb.w	r3, [r2], #1
   d4fe8:	4291      	cmp	r1, r2
   d4fea:	d1fb      	bne.n	d4fe4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d4fec:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4fee:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ff0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ff2:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ff4:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ff8:	4619      	mov	r1, r3
   d4ffa:	f10d 020f 	add.w	r2, sp, #15
   d4ffe:	4620      	mov	r0, r4
   d5000:	f7ff ffa2 	bl	d4f48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5004:	4620      	mov	r0, r4
   d5006:	b004      	add	sp, #16
   d5008:	bd10      	pop	{r4, pc}

000d500a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d500a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d500c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d500e:	460e      	mov	r6, r1
   d5010:	ab01      	add	r3, sp, #4
   d5012:	6a01      	ldr	r1, [r0, #32]
   d5014:	4604      	mov	r4, r0
   d5016:	f7ff fd87 	bl	d4b28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d501a:	4605      	mov	r5, r0
   d501c:	b178      	cbz	r0, d503e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d501e:	9801      	ldr	r0, [sp, #4]
   d5020:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5022:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d5024:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5026:	4421      	add	r1, r4
   d5028:	1b52      	subs	r2, r2, r5
   d502a:	4420      	add	r0, r4
   d502c:	f001 face 	bl	d65cc <memcpy>
        selfLen_ -= len;
   d5030:	6a20      	ldr	r0, [r4, #32]
   d5032:	1b40      	subs	r0, r0, r5
   d5034:	6220      	str	r0, [r4, #32]
        remove(type);
   d5036:	4631      	mov	r1, r6
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff ffe6 	bl	d500a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d503e:	b002      	add	sp, #8
   d5040:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5044 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d5044:	b538      	push	{r3, r4, r5, lr}
              context_(nullptr) {
   d5046:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d504a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d504c:	4604      	mov	r4, r0
              context_(nullptr) {
   d504e:	8043      	strh	r3, [r0, #2]
   d5050:	220e      	movs	r2, #14
   d5052:	4629      	mov	r1, r5
   d5054:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5056:	7105      	strb	r5, [r0, #4]
   d5058:	3006      	adds	r0, #6
   d505a:	f001 fadf 	bl	d661c <memset>
   d505e:	f104 0014 	add.w	r0, r4, #20
   d5062:	f7ff fe53 	bl	d4d0c <_ZN8particle7BleUuidC1Ev>
   d5066:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d506a:	f7ff fe4f 	bl	d4d0c <_ZN8particle7BleUuidC1Ev>
   d506e:	4904      	ldr	r1, [pc, #16]	; (d5080 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5070:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5074:	f7ff fcc7 	bl	d4a06 <_ZN6StringC1EPKc>
   d5078:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    }
   d507c:	4620      	mov	r0, r4
   d507e:	bd38      	pop	{r3, r4, r5, pc}
   d5080:	000d6763 	.word	0x000d6763

000d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5084:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5086:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d508a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d508e:	4293      	cmp	r3, r2
   d5090:	4618      	mov	r0, r3
   d5092:	d006      	beq.n	d50a2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5094:	6804      	ldr	r4, [r0, #0]
   d5096:	8824      	ldrh	r4, [r4, #0]
   d5098:	428c      	cmp	r4, r1
   d509a:	f103 0308 	add.w	r3, r3, #8
   d509e:	d1f6      	bne.n	d508e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d50a0:	bd10      	pop	{r4, pc}
        return nullptr;
   d50a2:	2000      	movs	r0, #0
   d50a4:	e7fc      	b.n	d50a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d50a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d50a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50aa:	4606      	mov	r6, r0
   d50ac:	b085      	sub	sp, #20
   d50ae:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d50b0:	460d      	mov	r5, r1
   d50b2:	2900      	cmp	r1, #0
   d50b4:	d050      	beq.n	d5158 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d50b6:	2a00      	cmp	r2, #0
   d50b8:	d04e      	beq.n	d5158 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    int subscribe(bool enable) const;

    void onDataReceived(BleOnDataReceivedCallback callback, void* context);

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d50ba:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d50bc:	7823      	ldrb	r3, [r4, #0]
   d50be:	2af4      	cmp	r2, #244	; 0xf4
   d50c0:	bf28      	it	cs
   d50c2:	22f4      	movcs	r2, #244	; 0xf4
   d50c4:	b343      	cbz	r3, d5118 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d50c6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d50c8:	0798      	lsls	r0, r3, #30
   d50ca:	d509      	bpl.n	d50e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d50cc:	89a0      	ldrh	r0, [r4, #12]
   d50ce:	9203      	str	r2, [sp, #12]
   d50d0:	2300      	movs	r3, #0
   d50d2:	f7ff fa4f 	bl	d4574 <hal_ble_gatt_server_set_characteristic_value>
   d50d6:	2800      	cmp	r0, #0
   d50d8:	9a03      	ldr	r2, [sp, #12]
   d50da:	da03      	bge.n	d50e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d50dc:	b005      	add	sp, #20
   d50de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d50e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d50e4:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d50e6:	7923      	ldrb	r3, [r4, #4]
   d50e8:	06d9      	lsls	r1, r3, #27
   d50ea:	d509      	bpl.n	d5100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d50ec:	2f01      	cmp	r7, #1
   d50ee:	d007      	beq.n	d5100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50f0:	89a0      	ldrh	r0, [r4, #12]
   d50f2:	2300      	movs	r3, #0
   d50f4:	4629      	mov	r1, r5
}
   d50f6:	b005      	add	sp, #20
   d50f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50fc:	f7ff ba6c 	b.w	d45d8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5100:	069b      	lsls	r3, r3, #26
   d5102:	d5eb      	bpl.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5104:	2f02      	cmp	r7, #2
   d5106:	d0e9      	beq.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5108:	89a0      	ldrh	r0, [r4, #12]
   d510a:	2300      	movs	r3, #0
   d510c:	4629      	mov	r1, r5
}
   d510e:	b005      	add	sp, #20
   d5110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5114:	f7ff ba6a 	b.w	d45ec <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5118:	8860      	ldrh	r0, [r4, #2]
   d511a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d511e:	4288      	cmp	r0, r1
   d5120:	d01c      	beq.n	d515c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5122:	7921      	ldrb	r1, [r4, #4]
   d5124:	074e      	lsls	r6, r1, #29
   d5126:	d501      	bpl.n	d512c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d5128:	2f01      	cmp	r7, #1
   d512a:	d104      	bne.n	d5136 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d512c:	070b      	lsls	r3, r1, #28
   d512e:	d409      	bmi.n	d5144 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5130:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5134:	e7d2      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5136:	89a1      	ldrh	r1, [r4, #12]
   d5138:	9300      	str	r3, [sp, #0]
   d513a:	4613      	mov	r3, r2
   d513c:	462a      	mov	r2, r5
   d513e:	f7ff fa2d 	bl	d459c <hal_ble_gatt_client_write_without_response>
   d5142:	e7cb      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5144:	2f02      	cmp	r7, #2
   d5146:	d0f3      	beq.n	d5130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5148:	2300      	movs	r3, #0
   d514a:	89a1      	ldrh	r1, [r4, #12]
   d514c:	9300      	str	r3, [sp, #0]
   d514e:	4613      	mov	r3, r2
   d5150:	462a      	mov	r2, r5
   d5152:	f7ff fa19 	bl	d4588 <hal_ble_gatt_client_write_with_response>
   d5156:	e7c1      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5158:	4802      	ldr	r0, [pc, #8]	; (d5164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d515a:	e7bf      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d515c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5160:	e7bc      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5162:	bf00      	nop
   d5164:	fffffef2 	.word	0xfffffef2

000d5168 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d516c:	f04f 0800 	mov.w	r8, #0
   d5170:	f8c0 8000 	str.w	r8, [r0]
   d5174:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5176:	2024      	movs	r0, #36	; 0x24
   d5178:	460f      	mov	r7, r1
   d517a:	f7fe ff8a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d517e:	1e04      	subs	r4, r0, #0
   d5180:	f104 060c 	add.w	r6, r4, #12
   d5184:	d00d      	beq.n	d51a2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d5186:	2301      	movs	r3, #1
   d5188:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d518c:	4b07      	ldr	r3, [pc, #28]	; (d51ac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d518e:	6023      	str	r3, [r4, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5190:	4630      	mov	r0, r6
   d5192:	f7ff fdbb 	bl	d4d0c <_ZN8particle7BleUuidC1Ev>
   d5196:	f8c4 8020 	str.w	r8, [r4, #32]
        uuid_ = svcUuid;
   d519a:	4639      	mov	r1, r7
   d519c:	4630      	mov	r0, r6
   d519e:	f7ff fe32 	bl	d4e06 <_ZN8particle7BleUuidaSERKS0_>
	  __p = __pi->_M_ptr();
   d51a2:	e9c5 6400 	strd	r6, r4, [r5]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d51a6:	4628      	mov	r0, r5
   d51a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51ac:	000d695c 	.word	0x000d695c

000d51b0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d51b0:	b538      	push	{r3, r4, r5, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d51b2:	2400      	movs	r4, #0
   d51b4:	6004      	str	r4, [r0, #0]
   d51b6:	4605      	mov	r5, r0
   d51b8:	2030      	movs	r0, #48	; 0x30
   d51ba:	f7fe ff6a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d51be:	4603      	mov	r3, r0
   d51c0:	b188      	cbz	r0, d51e6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d51c2:	2201      	movs	r2, #1
   d51c4:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   d51c8:	4a09      	ldr	r2, [pc, #36]	; (d51f0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d51ca:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   d51cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51d0:	8182      	strh	r2, [r0, #12]
   d51d2:	300e      	adds	r0, #14
   d51d4:	f7ff fd14 	bl	d4c00 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d51d8:	e9c3 4406 	strd	r4, r4, [r3, #24]
   d51dc:	e9c3 4408 	strd	r4, r4, [r3, #32]
   d51e0:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   d51e4:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   d51e6:	606b      	str	r3, [r5, #4]
   d51e8:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   d51ea:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d51ec:	4628      	mov	r0, r5
   d51ee:	bd38      	pop	{r3, r4, r5, pc}
   d51f0:	000d6978 	.word	0x000d6978

000d51f4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   d51f4:	6809      	ldr	r1, [r1, #0]
   d51f6:	f851 2f02 	ldr.w	r2, [r1, #2]!
   d51fa:	6002      	str	r2, [r0, #0]
   d51fc:	684a      	ldr	r2, [r1, #4]
   d51fe:	6042      	str	r2, [r0, #4]
}
   d5200:	4770      	bx	lr

000d5202 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5202:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5204:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5206:	6801      	ldr	r1, [r0, #0]
   d5208:	681a      	ldr	r2, [r3, #0]
   d520a:	8809      	ldrh	r1, [r1, #0]
   d520c:	8812      	ldrh	r2, [r2, #0]
   d520e:	4291      	cmp	r1, r2
   d5210:	d10c      	bne.n	d522c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5212:	4601      	mov	r1, r0
   d5214:	4668      	mov	r0, sp
   d5216:	f7ff ffed 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d521a:	a802      	add	r0, sp, #8
   d521c:	4619      	mov	r1, r3
   d521e:	f7ff ffe9 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5222:	a902      	add	r1, sp, #8
   d5224:	4668      	mov	r0, sp
   d5226:	f7ff fcf5 	bl	d4c14 <_ZNK8particle10BleAddresseqERKS0_>
   d522a:	b900      	cbnz	r0, d522e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d522c:	2000      	movs	r0, #0
}
   d522e:	b005      	add	sp, #20
   d5230:	f85d fb04 	ldr.w	pc, [sp], #4

000d5234 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5234:	b510      	push	{r4, lr}
   d5236:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5238:	2034      	movs	r0, #52	; 0x34
   d523a:	f7fe ff2a 	bl	d4092 <_Znwj>
   d523e:	4601      	mov	r1, r0
   d5240:	b168      	cbz	r0, d525e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
   d5242:	2300      	movs	r3, #0
   d5244:	e9c0 3300 	strd	r3, r3, [r0]
   d5248:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d524c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5250:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   d5254:	e9c0 3308 	strd	r3, r3, [r0, #32]
   d5258:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   d525c:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d525e:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5260:	b919      	cbnz	r1, d526a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5262:	4a0a      	ldr	r2, [pc, #40]	; (d528c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5264:	200a      	movs	r0, #10
   d5266:	f7ff fa6b 	bl	d4740 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d526a:	2000      	movs	r0, #0
   d526c:	f7ff f946 	bl	d44fc <hal_ble_stack_init>
   d5270:	b120      	cbz	r0, d527c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5272:	4a06      	ldr	r2, [pc, #24]	; (d528c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5274:	2100      	movs	r1, #0
   d5276:	200a      	movs	r0, #10
   d5278:	f7ff fa62 	bl	d4740 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d527c:	6821      	ldr	r1, [r4, #0]
   d527e:	4804      	ldr	r0, [pc, #16]	; (d5290 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5280:	2200      	movs	r2, #0
   d5282:	f7ff f99f 	bl	d45c4 <hal_ble_set_callback_on_periph_link_events>
}
   d5286:	4620      	mov	r0, r4
   d5288:	bd10      	pop	{r4, pc}
   d528a:	bf00      	nop
   d528c:	000d44cd 	.word	0x000d44cd
   d5290:	000d56bd 	.word	0x000d56bd

000d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5294:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5296:	4c0b      	ldr	r4, [pc, #44]	; (d52c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5298:	7823      	ldrb	r3, [r4, #0]
   d529a:	f3bf 8f5b 	dmb	ish
   d529e:	07db      	lsls	r3, r3, #31
   d52a0:	d40e      	bmi.n	d52c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d52a2:	4620      	mov	r0, r4
   d52a4:	f7fe fef9 	bl	d409a <__cxa_guard_acquire>
   d52a8:	b150      	cbz	r0, d52c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d52aa:	4807      	ldr	r0, [pc, #28]	; (d52c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52ac:	f7ff ffc2 	bl	d5234 <_ZN8particle14BleLocalDeviceC1Ev>
   d52b0:	4620      	mov	r0, r4
   d52b2:	f7fe fef7 	bl	d40a4 <__cxa_guard_release>
   d52b6:	4a05      	ldr	r2, [pc, #20]	; (d52cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d52b8:	4905      	ldr	r1, [pc, #20]	; (d52d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d52ba:	4803      	ldr	r0, [pc, #12]	; (d52c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52bc:	f001 f850 	bl	d6360 <__aeabi_atexit>
    return instance;
}
   d52c0:	4801      	ldr	r0, [pc, #4]	; (d52c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52c2:	bd10      	pop	{r4, pc}
   d52c4:	2003e674 	.word	0x2003e674
   d52c8:	2003e680 	.word	0x2003e680
   d52cc:	2003e5c4 	.word	0x2003e5c4
   d52d0:	000d54ad 	.word	0x000d54ad

000d52d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d52d4:	b570      	push	{r4, r5, r6, lr}
    switch (event->type) {
   d52d6:	6803      	ldr	r3, [r0, #0]
   d52d8:	3b09      	subs	r3, #9
   d52da:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d52dc:	b08a      	sub	sp, #40	; 0x28
   d52de:	4604      	mov	r4, r0
   d52e0:	460d      	mov	r5, r1
    switch (event->type) {
   d52e2:	d812      	bhi.n	d530a <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d52e4:	f7ff ffd6 	bl	d5294 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d52e8:	88a1      	ldrh	r1, [r4, #4]
   d52ea:	6800      	ldr	r0, [r0, #0]
   d52ec:	f7ff feca 	bl	d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d52f0:	4602      	mov	r2, r0
   d52f2:	b960      	cbnz	r0, d530e <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3a>
                LOG(ERROR, "Peer device is missing!");
   d52f4:	2320      	movs	r3, #32
   d52f6:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d52fa:	4b09      	ldr	r3, [pc, #36]	; (d5320 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d52fc:	9300      	str	r3, [sp, #0]
   d52fe:	4909      	ldr	r1, [pc, #36]	; (d5324 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x50>)
   d5300:	4603      	mov	r3, r0
   d5302:	aa02      	add	r2, sp, #8
   d5304:	2032      	movs	r0, #50	; 0x32
   d5306:	f7ff fa23 	bl	d4750 <log_message>
}
   d530a:	b00a      	add	sp, #40	; 0x28
   d530c:	bd70      	pop	{r4, r5, r6, pc}
            if (impl->callback_) {
   d530e:	6cee      	ldr	r6, [r5, #76]	; 0x4c
   d5310:	2e00      	cmp	r6, #0
   d5312:	d0fa      	beq.n	d530a <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5314:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
   d5318:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d531a:	47b0      	blx	r6
}
   d531c:	e7f5      	b.n	d530a <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
   d531e:	bf00      	nop
   d5320:	000d686b 	.word	0x000d686b
   d5324:	000d6844 	.word	0x000d6844

000d5328 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5328:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d532a:	a801      	add	r0, sp, #4
   d532c:	f7ff fc4e 	bl	d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5330:	2000      	movs	r0, #0
   d5332:	f7ff f8e3 	bl	d44fc <hal_ble_stack_init>
   d5336:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5338:	a801      	add	r0, sp, #4
   d533a:	f7ff fc55 	bl	d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
}
   d533e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d5342:	b002      	add	sp, #8
   d5344:	bd10      	pop	{r4, pc}

000d5346 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d5346:	b513      	push	{r0, r1, r4, lr}
   d5348:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d534a:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d534c:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   d534e:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d5352:	f7ff f8db 	bl	d450c <hal_ble_gap_get_device_address>
    address_ = addr;
   d5356:	466b      	mov	r3, sp
   d5358:	cb03      	ldmia	r3!, {r0, r1}
   d535a:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   d535c:	4620      	mov	r0, r4
    address_ = addr;
   d535e:	6061      	str	r1, [r4, #4]
}
   d5360:	b002      	add	sp, #8
   d5362:	bd10      	pop	{r4, pc}

000d5364 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5364:	4608      	mov	r0, r1
   d5366:	b911      	cbnz	r1, d536e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5368:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d536a:	f7ff b8d7 	b.w	d451c <hal_ble_gap_set_advertising_data>
   d536e:	6a09      	ldr	r1, [r1, #32]
   d5370:	2200      	movs	r2, #0
   d5372:	e7fa      	b.n	d536a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d5374 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5374:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d5376:	4608      	mov	r0, r1
   d5378:	b929      	cbnz	r1, d5386 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d537a:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d537c:	b003      	add	sp, #12
   d537e:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5382:	f7ff b8d3 	b.w	d452c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5386:	2101      	movs	r1, #1
   d5388:	9001      	str	r0, [sp, #4]
   d538a:	f7ff fe3e 	bl	d500a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d538e:	9801      	ldr	r0, [sp, #4]
   d5390:	2200      	movs	r2, #0
   d5392:	6a01      	ldr	r1, [r0, #32]
   d5394:	e7f2      	b.n	d537c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d5396 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5396:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5398:	a801      	add	r0, sp, #4
   d539a:	f7ff fc17 	bl	d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d539e:	2000      	movs	r0, #0
   d53a0:	f7ff f8cc 	bl	d453c <hal_ble_gap_start_advertising>
   d53a4:	4604      	mov	r4, r0
    WiringBleLock lk;
   d53a6:	a801      	add	r0, sp, #4
   d53a8:	f7ff fc1e 	bl	d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d53ac:	4620      	mov	r0, r4
   d53ae:	b002      	add	sp, #8
   d53b0:	bd10      	pop	{r4, pc}

000d53b2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d53b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d53b4:	4605      	mov	r5, r0
    WiringBleLock lk;
   d53b6:	a803      	add	r0, sp, #12
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d53b8:	9101      	str	r1, [sp, #4]
   d53ba:	4616      	mov	r6, r2
    WiringBleLock lk;
   d53bc:	f7ff fc06 	bl	d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d53c0:	9901      	ldr	r1, [sp, #4]
   d53c2:	4628      	mov	r0, r5
   d53c4:	f7ff ffce 	bl	d5364 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d53c8:	1e04      	subs	r4, r0, #0
   d53ca:	db09      	blt.n	d53e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    CHECK(setScanResponseData(scanResponse));
   d53cc:	4631      	mov	r1, r6
   d53ce:	4628      	mov	r0, r5
   d53d0:	f7ff ffd0 	bl	d5374 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d53d4:	1e04      	subs	r4, r0, #0
   d53d6:	db03      	blt.n	d53e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    return advertise();
   d53d8:	4628      	mov	r0, r5
   d53da:	f7ff ffdc 	bl	d5396 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d53de:	4604      	mov	r4, r0
    WiringBleLock lk;
   d53e0:	a803      	add	r0, sp, #12
   d53e2:	f7ff fc01 	bl	d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d53e6:	4620      	mov	r0, r4
   d53e8:	b004      	add	sp, #16
   d53ea:	bd70      	pop	{r4, r5, r6, pc}

000d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d53ec:	680b      	ldr	r3, [r1, #0]
   d53ee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d53f0:	b113      	cbz	r3, d53f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d53f2:	685a      	ldr	r2, [r3, #4]
   d53f4:	3201      	adds	r2, #1
   d53f6:	605a      	str	r2, [r3, #4]
      }
   d53f8:	4770      	bx	lr

000d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d53fa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53fc:	f851 3b04 	ldr.w	r3, [r1], #4
   d5400:	4604      	mov	r4, r0
   d5402:	f840 3b04 	str.w	r3, [r0], #4
   d5406:	f7ff fff1 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d540a:	6823      	ldr	r3, [r4, #0]
   d540c:	b90b      	cbnz	r3, d5412 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d540e:	f7ff fba1 	bl	d4b54 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d5412:	4620      	mov	r0, r4
   d5414:	bd10      	pop	{r4, pc}

000d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5416:	b510      	push	{r4, lr}
   d5418:	f851 3b04 	ldr.w	r3, [r1], #4
   d541c:	4604      	mov	r4, r0
   d541e:	f840 3b04 	str.w	r3, [r0], #4
   d5422:	f7ff ffe3 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5426:	4620      	mov	r0, r4
   d5428:	bd10      	pop	{r4, pc}

000d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d542a:	b510      	push	{r4, lr}
   d542c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d542e:	6800      	ldr	r0, [r0, #0]
   d5430:	b128      	cbz	r0, d543e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5432:	6843      	ldr	r3, [r0, #4]
   d5434:	3b01      	subs	r3, #1
   d5436:	6043      	str	r3, [r0, #4]
   d5438:	b90b      	cbnz	r3, d543e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d543a:	f7ff fb5d 	bl	d4af8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d543e:	4620      	mov	r0, r4
   d5440:	bd10      	pop	{r4, pc}

000d5442 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d5442:	b510      	push	{r4, lr}
   d5444:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5446:	3004      	adds	r0, #4
   d5448:	f7ff ffef 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d544c:	4620      	mov	r0, r4
   d544e:	bd10      	pop	{r4, pc}

000d5450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5450:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5452:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5456:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5458:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d545c:	42ae      	cmp	r6, r5
   d545e:	d004      	beq.n	d546a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5460:	1d28      	adds	r0, r5, #4
   d5462:	f7ff ffe2 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5466:	3508      	adds	r5, #8
   d5468:	e7f8      	b.n	d545c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d546a:	6820      	ldr	r0, [r4, #0]
   d546c:	f7ff fa04 	bl	d4878 <free>
}
   d5470:	4620      	mov	r0, r4
   d5472:	bd70      	pop	{r4, r5, r6, pc}

000d5474 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5474:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5476:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d547a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d547c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5480:	42ae      	cmp	r6, r5
   d5482:	d004      	beq.n	d548e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5484:	1d28      	adds	r0, r5, #4
   d5486:	f7ff ffd0 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d548a:	3508      	adds	r5, #8
   d548c:	e7f8      	b.n	d5480 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d548e:	6820      	ldr	r0, [r4, #0]
   d5490:	f7ff f9f2 	bl	d4878 <free>
}
   d5494:	4620      	mov	r0, r4
   d5496:	bd70      	pop	{r4, r5, r6, pc}

000d5498 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5498:	b510      	push	{r4, lr}
   d549a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d549c:	3024      	adds	r0, #36	; 0x24
   d549e:	f7ff ffe9 	bl	d5474 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d54a2:	f104 0018 	add.w	r0, r4, #24
   d54a6:	f7ff ffd3 	bl	d5450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d54aa:	bd10      	pop	{r4, pc}

000d54ac <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d54ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d54ae:	6804      	ldr	r4, [r0, #0]
   d54b0:	4606      	mov	r6, r0
   d54b2:	b1c4      	cbz	r4, d54e6 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   d54b4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d54b8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d54bc:	42af      	cmp	r7, r5
   d54be:	d004      	beq.n	d54ca <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   d54c0:	1d28      	adds	r0, r5, #4
   d54c2:	f7ff ffb2 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54c6:	3508      	adds	r5, #8
   d54c8:	e7f8      	b.n	d54bc <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   d54ca:	69a0      	ldr	r0, [r4, #24]
   d54cc:	f7ff f9d4 	bl	d4878 <free>
    ~BleLocalDeviceImpl() = default;
   d54d0:	f104 000c 	add.w	r0, r4, #12
   d54d4:	f7ff ffce 	bl	d5474 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d54d8:	4620      	mov	r0, r4
   d54da:	f7ff ffb9 	bl	d5450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d54de:	2134      	movs	r1, #52	; 0x34
   d54e0:	4620      	mov	r0, r4
   d54e2:	f000 ff42 	bl	d636a <_ZdlPvj>
   d54e6:	4630      	mov	r0, r6
   d54e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d54ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d54ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54f0:	b085      	sub	sp, #20
   d54f2:	4680      	mov	r8, r0
   d54f4:	4699      	mov	r9, r3
   d54f6:	2060      	movs	r0, #96	; 0x60
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d54f8:	2300      	movs	r3, #0
   d54fa:	460d      	mov	r5, r1
   d54fc:	4616      	mov	r6, r2
   d54fe:	9300      	str	r3, [sp, #0]
   d5500:	f7fe fdc7 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5504:	1e04      	subs	r4, r0, #0
   d5506:	f104 070c 	add.w	r7, r4, #12
   d550a:	d01c      	beq.n	d5546 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5a>
	: _M_impl(__a)
   d550c:	4b1c      	ldr	r3, [pc, #112]	; (d5580 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   d550e:	6023      	str	r3, [r4, #0]
      : _M_use_count(1), _M_weak_count(1) { }
   d5510:	2201      	movs	r2, #1
   d5512:	e9c4 2201 	strd	r2, r2, [r4, #4]
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d5516:	7836      	ldrb	r6, [r6, #0]
            : BleCharacteristicImpl() {
   d5518:	4638      	mov	r0, r7
   d551a:	f7ff fd93 	bl	d5044 <_ZN8particle21BleCharacteristicImplC1Ev>
        description_ = desc;
   d551e:	4629      	mov	r1, r5
        properties_ = properties;
   d5520:	7426      	strb	r6, [r4, #16]
        description_ = desc;
   d5522:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5526:	f7ff fa82 	bl	d4a2e <_ZN6StringaSEPKc>
        callback_ = callback;
   d552a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d552c:	65a3      	str	r3, [r4, #88]	; 0x58
        context_ = context;
   d552e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5530:	65e3      	str	r3, [r4, #92]	; 0x5c
        charUuid_ = charUuid;
   d5532:	4649      	mov	r1, r9
   d5534:	f104 0020 	add.w	r0, r4, #32
   d5538:	f7ff fc65 	bl	d4e06 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d553c:	990c      	ldr	r1, [sp, #48]	; 0x30
   d553e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5542:	f7ff fc60 	bl	d4e06 <_ZN8particle7BleUuidaSERKS0_>
	__r._M_pi = _M_pi;
   d5546:	2300      	movs	r3, #0
	__r._M_ptr = 0;
   d5548:	e9cd 3300 	strd	r3, r3, [sp]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d554c:	f8d8 3000 	ldr.w	r3, [r8]
   d5550:	9302      	str	r3, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5552:	f8c8 7000 	str.w	r7, [r8]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5556:	f8d8 3004 	ldr.w	r3, [r8, #4]
	__r._M_pi = _M_pi;
   d555a:	f8c8 4004 	str.w	r4, [r8, #4]
      ~__shared_ptr() = default;
   d555e:	a803      	add	r0, sp, #12
	_M_pi = __tmp;
   d5560:	9303      	str	r3, [sp, #12]
      ~__shared_ptr() = default;
   d5562:	f7ff ff62 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5566:	a801      	add	r0, sp, #4
   d5568:	f7ff ff5f 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d556c:	f8d8 1000 	ldr.w	r1, [r8]
   d5570:	b919      	cbnz	r1, d557a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8e>
        SPARK_ASSERT(false);
   d5572:	4a04      	ldr	r2, [pc, #16]	; (d5584 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x98>)
   d5574:	200a      	movs	r0, #10
   d5576:	f7ff f8e3 	bl	d4740 <panic_>
}
   d557a:	b005      	add	sp, #20
   d557c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5580:	000d6940 	.word	0x000d6940
   d5584:	000d44cd 	.word	0x000d44cd

000d5588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5588:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d558a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d558c:	4606      	mov	r6, r0
   d558e:	460c      	mov	r4, r1
   d5590:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5592:	d918      	bls.n	d55c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5594:	4290      	cmp	r0, r2
   d5596:	d217      	bcs.n	d55c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   d5598:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d559c:	f1a1 0708 	sub.w	r7, r1, #8
   d55a0:	1a69      	subs	r1, r5, r1
   d55a2:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d55a4:	42af      	cmp	r7, r5
   d55a6:	d020      	beq.n	d55ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   d55a8:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   d55aa:	b134      	cbz	r4, d55ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55ac:	4620      	mov	r0, r4
   d55ae:	682b      	ldr	r3, [r5, #0]
   d55b0:	f840 3b04 	str.w	r3, [r0], #4
   d55b4:	4631      	mov	r1, r6
   d55b6:	f7ff ff19 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d55ba:	4630      	mov	r0, r6
   d55bc:	f7ff ff35 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d55c0:	3d08      	subs	r5, #8
   d55c2:	3c08      	subs	r4, #8
   d55c4:	e7ee      	b.n	d55a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d55c6:	d010      	beq.n	d55ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   d55c8:	42ac      	cmp	r4, r5
   d55ca:	d00e      	beq.n	d55ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   d55cc:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   d55ce:	b136      	cbz	r6, d55de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55d0:	4630      	mov	r0, r6
   d55d2:	6823      	ldr	r3, [r4, #0]
   d55d4:	f840 3b04 	str.w	r3, [r0], #4
   d55d8:	4639      	mov	r1, r7
   d55da:	f7ff ff07 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d55de:	4638      	mov	r0, r7
   d55e0:	f7ff ff23 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d55e4:	3408      	adds	r4, #8
   d55e6:	3608      	adds	r6, #8
   d55e8:	e7ee      	b.n	d55c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   d55ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d55ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d55f0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d55f4:	4605      	mov	r5, r0
   d55f6:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d55f8:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d55fc:	42a7      	cmp	r7, r4
   d55fe:	d01a      	beq.n	d5636 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   d5600:	4641      	mov	r1, r8
   d5602:	4620      	mov	r0, r4
   d5604:	f7ff fdfd 	bl	d5202 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5608:	4606      	mov	r6, r0
   d560a:	b908      	cbnz	r0, d5610 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   d560c:	3408      	adds	r4, #8
   d560e:	e7f5      	b.n	d55fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5610:	b19c      	cbz	r4, d563a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   d5612:	1d20      	adds	r0, r4, #4
   d5614:	f7ff ff09 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5618:	e9d5 3200 	ldrd	r3, r2, [r5]
   d561c:	f104 0108 	add.w	r1, r4, #8
   d5620:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5624:	4620      	mov	r0, r4
   d5626:	f7ff ffaf 	bl	d5588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d562a:	686b      	ldr	r3, [r5, #4]
   d562c:	3b01      	subs	r3, #1
   d562e:	606b      	str	r3, [r5, #4]
}
   d5630:	4630      	mov	r0, r6
   d5632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   d5636:	2600      	movs	r6, #0
   d5638:	e7fa      	b.n	d5630 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   d563a:	4626      	mov	r6, r4
   d563c:	e7f8      	b.n	d5630 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000d563e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d563e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5640:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5642:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5646:	6847      	ldr	r7, [r0, #4]
   d5648:	9300      	str	r3, [sp, #0]
   d564a:	a801      	add	r0, sp, #4
   d564c:	f7ff fece 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5650:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   d5654:	429e      	cmp	r6, r3
   d5656:	db12      	blt.n	d567e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5658:	3601      	adds	r6, #1
        if (n > 0) {
   d565a:	2e00      	cmp	r6, #0
   d565c:	dd2c      	ble.n	d56b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   d565e:	00f0      	lsls	r0, r6, #3
   d5660:	f7ff f902 	bl	d4868 <malloc>
            if (!d) {
   d5664:	4605      	mov	r5, r0
   d5666:	b308      	cbz	r0, d56ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   d5668:	e9d4 1200 	ldrd	r1, r2, [r4]
   d566c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5670:	f7ff ff8a 	bl	d5588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5674:	6820      	ldr	r0, [r4, #0]
   d5676:	f7ff f8ff 	bl	d4878 <free>
        data_ = d;
   d567a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d567c:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   d567e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5680:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5682:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5686:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d568a:	4629      	mov	r1, r5
   d568c:	f105 0008 	add.w	r0, r5, #8
   d5690:	f7ff ff7a 	bl	d5588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5694:	b135      	cbz	r5, d56a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   d5696:	9b00      	ldr	r3, [sp, #0]
   d5698:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d569c:	a901      	add	r1, sp, #4
   d569e:	1d28      	adds	r0, r5, #4
   d56a0:	f7ff fea4 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d56a4:	6863      	ldr	r3, [r4, #4]
   d56a6:	3301      	adds	r3, #1
   d56a8:	6063      	str	r3, [r4, #4]
    return true;
   d56aa:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   d56ac:	a801      	add	r0, sp, #4
   d56ae:	f7ff febc 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d56b2:	4628      	mov	r0, r5
   d56b4:	b003      	add	sp, #12
   d56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d56b8:	2500      	movs	r5, #0
   d56ba:	e7db      	b.n	d5674 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>

000d56bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d56bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56c0:	4604      	mov	r4, r0
   d56c2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d56c4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d56c6:	460d      	mov	r5, r1
        WiringBleLock lk;
   d56c8:	f7ff fa80 	bl	d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d56cc:	6823      	ldr	r3, [r4, #0]
   d56ce:	2b03      	cmp	r3, #3
   d56d0:	d007      	beq.n	d56e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   d56d2:	2b04      	cmp	r3, #4
   d56d4:	d048      	beq.n	d5768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   d56d6:	a803      	add	r0, sp, #12
   d56d8:	f7ff fa86 	bl	d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d56dc:	b00e      	add	sp, #56	; 0x38
   d56de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   d56e2:	a804      	add	r0, sp, #16
   d56e4:	f7ff fd64 	bl	d51b0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d56e8:	9b04      	ldr	r3, [sp, #16]
   d56ea:	8922      	ldrh	r2, [r4, #8]
   d56ec:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   d56ee:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   d56f0:	9904      	ldr	r1, [sp, #16]
   d56f2:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d56f6:	f8c1 3002 	str.w	r3, [r1, #2]
   d56fa:	6853      	ldr	r3, [r2, #4]
   d56fc:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5700:	a807      	add	r0, sp, #28
   d5702:	9b04      	ldr	r3, [sp, #16]
   d5704:	9306      	str	r3, [sp, #24]
   d5706:	a905      	add	r1, sp, #20
   d5708:	f7ff fe70 	bl	d53ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   d570c:	a906      	add	r1, sp, #24
   d570e:	f105 0018 	add.w	r0, r5, #24
   d5712:	f7ff ff94 	bl	d563e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5716:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5718:	a807      	add	r0, sp, #28
   d571a:	f7ff fe86 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d571e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5720:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5722:	b98c      	cbnz	r4, d5748 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5724:	4b33      	ldr	r3, [pc, #204]	; (d57f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5726:	4934      	ldr	r1, [pc, #208]	; (d57f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5728:	9300      	str	r3, [sp, #0]
   d572a:	2032      	movs	r0, #50	; 0x32
   d572c:	4623      	mov	r3, r4
   d572e:	aa06      	add	r2, sp, #24
   d5730:	9407      	str	r4, [sp, #28]
   d5732:	f7ff f80d 	bl	d4750 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5736:	9b04      	ldr	r3, [sp, #16]
   d5738:	4621      	mov	r1, r4
   d573a:	8818      	ldrh	r0, [r3, #0]
   d573c:	f7fe ff06 	bl	d454c <hal_ble_gap_disconnect>
   d5740:	a805      	add	r0, sp, #20
   d5742:	f7ff fe72 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5746:	e7c6      	b.n	d56d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   d5748:	4a2c      	ldr	r2, [pc, #176]	; (d57fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d574a:	9200      	str	r2, [sp, #0]
   d574c:	2300      	movs	r3, #0
   d574e:	492a      	ldr	r1, [pc, #168]	; (d57f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5750:	9307      	str	r3, [sp, #28]
   d5752:	aa06      	add	r2, sp, #24
   d5754:	2001      	movs	r0, #1
   d5756:	f7fe fffb 	bl	d4750 <log_message>
                if (impl->connectedCb_) {
   d575a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d575c:	2b00      	cmp	r3, #0
   d575e:	d0ef      	beq.n	d5740 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5760:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5762:	a804      	add	r0, sp, #16
   d5764:	4798      	blx	r3
   d5766:	e7eb      	b.n	d5740 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5768:	8921      	ldrh	r1, [r4, #8]
   d576a:	4628      	mov	r0, r5
   d576c:	f7ff fc8a 	bl	d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5770:	4606      	mov	r6, r0
   d5772:	2800      	cmp	r0, #0
   d5774:	d0af      	beq.n	d56d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d5776:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   d5778:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d577c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5780:	8022      	strh	r2, [r4, #0]
   d5782:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5786:	4299      	cmp	r1, r3
   d5788:	d003      	beq.n	d5792 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   d578a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d578e:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   d5790:	e7f9      	b.n	d5786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   d5792:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   d5796:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d579a:	45b8      	cmp	r8, r7
   d579c:	d004      	beq.n	d57a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   d579e:	1d38      	adds	r0, r7, #4
   d57a0:	f7ff fe43 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57a4:	3708      	adds	r7, #8
   d57a6:	e7f8      	b.n	d579a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   d57a8:	2300      	movs	r3, #0
   d57aa:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   d57ac:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   d57b0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d57b4:	45b8      	cmp	r8, r7
   d57b6:	d004      	beq.n	d57c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   d57b8:	1d38      	adds	r0, r7, #4
   d57ba:	f7ff fe36 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57be:	3708      	adds	r7, #8
   d57c0:	e7f8      	b.n	d57b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   d57c2:	2300      	movs	r3, #0
   d57c4:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   d57c6:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   d57c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d57ca:	b113      	cbz	r3, d57d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d57cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d57ce:	4630      	mov	r0, r6
   d57d0:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   d57d2:	2300      	movs	r3, #0
   d57d4:	2220      	movs	r2, #32
   d57d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d57da:	4a09      	ldr	r2, [pc, #36]	; (d5800 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d57dc:	9200      	str	r2, [sp, #0]
   d57de:	4906      	ldr	r1, [pc, #24]	; (d57f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d57e0:	aa06      	add	r2, sp, #24
   d57e2:	2001      	movs	r0, #1
   d57e4:	f7fe ffb4 	bl	d4750 <log_message>
                    impl->peers_.removeOne(*peer);
   d57e8:	4631      	mov	r1, r6
   d57ea:	f105 0018 	add.w	r0, r5, #24
   d57ee:	f7ff fefd 	bl	d55ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d57f2:	e770      	b.n	d56d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d57f4:	000d6883 	.word	0x000d6883
   d57f8:	000d6844 	.word	0x000d6844
   d57fc:	000d68a9 	.word	0x000d68a9
   d5800:	000d68c6 	.word	0x000d68c6

000d5804 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5804:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5808:	4604      	mov	r4, r0
   d580a:	460d      	mov	r5, r1
   d580c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d580e:	d914      	bls.n	d583a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5810:	4290      	cmp	r0, r2
   d5812:	d213      	bcs.n	d583c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5814:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5818:	1a75      	subs	r5, r6, r1
   d581a:	f1a1 0708 	sub.w	r7, r1, #8
   d581e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5820:	42b7      	cmp	r7, r6
   d5822:	d018      	beq.n	d5856 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5824:	b11c      	cbz	r4, d582e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5826:	4631      	mov	r1, r6
   d5828:	4620      	mov	r0, r4
   d582a:	f7ff fdf4 	bl	d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d582e:	1d30      	adds	r0, r6, #4
   d5830:	f7ff fdfb 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5834:	3e08      	subs	r6, #8
   d5836:	3c08      	subs	r4, #8
   d5838:	e7f2      	b.n	d5820 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d583a:	d00c      	beq.n	d5856 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d583c:	42b5      	cmp	r5, r6
   d583e:	d00a      	beq.n	d5856 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5840:	b11c      	cbz	r4, d584a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5842:	4629      	mov	r1, r5
   d5844:	4620      	mov	r0, r4
   d5846:	f7ff fde6 	bl	d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d584a:	1d28      	adds	r0, r5, #4
   d584c:	f7ff fded 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5850:	3508      	adds	r5, #8
   d5852:	3408      	adds	r4, #8
   d5854:	e7f2      	b.n	d583c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5858 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5858:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d585a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d585c:	4605      	mov	r5, r0
        if (n > 0) {
   d585e:	dd11      	ble.n	d5884 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5860:	00f0      	lsls	r0, r6, #3
   d5862:	f7ff f801 	bl	d4868 <malloc>
            if (!d) {
   d5866:	4604      	mov	r4, r0
   d5868:	b158      	cbz	r0, d5882 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d586a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d586e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5872:	f7ff ffc7 	bl	d5804 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5876:	6828      	ldr	r0, [r5, #0]
   d5878:	f7fe fffe 	bl	d4878 <free>
        data_ = d;
   d587c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d587e:	60ae      	str	r6, [r5, #8]
        return true;
   d5880:	2001      	movs	r0, #1
    }
   d5882:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5884:	2400      	movs	r4, #0
   d5886:	e7f6      	b.n	d5876 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5888:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d588a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d588c:	6845      	ldr	r5, [r0, #4]
   d588e:	4668      	mov	r0, sp
   d5890:	f7ff fdc1 	bl	d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5894:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5898:	4299      	cmp	r1, r3
   d589a:	da10      	bge.n	d58be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d589c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d589e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d58a0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d58a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d58a8:	4629      	mov	r1, r5
   d58aa:	f105 0008 	add.w	r0, r5, #8
   d58ae:	f7ff ffa9 	bl	d5804 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d58b2:	b98d      	cbnz	r5, d58d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d58b4:	6863      	ldr	r3, [r4, #4]
   d58b6:	3301      	adds	r3, #1
   d58b8:	6063      	str	r3, [r4, #4]
    return true;
   d58ba:	2601      	movs	r6, #1
   d58bc:	e006      	b.n	d58cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58be:	3101      	adds	r1, #1
   d58c0:	4620      	mov	r0, r4
   d58c2:	f7ff ffc9 	bl	d5858 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d58c6:	4606      	mov	r6, r0
   d58c8:	2800      	cmp	r0, #0
   d58ca:	d1e7      	bne.n	d589c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d58cc:	a801      	add	r0, sp, #4
   d58ce:	f7ff fdac 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d58d2:	4630      	mov	r0, r6
   d58d4:	b002      	add	sp, #8
   d58d6:	bd70      	pop	{r4, r5, r6, pc}
   d58d8:	4669      	mov	r1, sp
   d58da:	4628      	mov	r0, r5
   d58dc:	f7ff fd9b 	bl	d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d58e0:	e7e8      	b.n	d58b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d58e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d58e2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d58e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58e6:	4604      	mov	r4, r0
   d58e8:	460d      	mov	r5, r1
   d58ea:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d58ec:	d914      	bls.n	d5918 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d58ee:	4290      	cmp	r0, r2
   d58f0:	d213      	bcs.n	d591a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d58f2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d58f6:	1a75      	subs	r5, r6, r1
   d58f8:	f1a1 0708 	sub.w	r7, r1, #8
   d58fc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d58fe:	42b7      	cmp	r7, r6
   d5900:	d018      	beq.n	d5934 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5902:	b11c      	cbz	r4, d590c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5904:	4631      	mov	r1, r6
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff fd77 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d590c:	1d30      	adds	r0, r6, #4
   d590e:	f7ff fd8c 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5912:	3e08      	subs	r6, #8
   d5914:	3c08      	subs	r4, #8
   d5916:	e7f2      	b.n	d58fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5918:	d00c      	beq.n	d5934 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d591a:	42b5      	cmp	r5, r6
   d591c:	d00a      	beq.n	d5934 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d591e:	b11c      	cbz	r4, d5928 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5920:	4629      	mov	r1, r5
   d5922:	4620      	mov	r0, r4
   d5924:	f7ff fd69 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5928:	1d28      	adds	r0, r5, #4
   d592a:	f7ff fd7e 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d592e:	3508      	adds	r5, #8
   d5930:	3408      	adds	r4, #8
   d5932:	e7f2      	b.n	d591a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5936 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5936:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5938:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d593a:	4605      	mov	r5, r0
        if (n > 0) {
   d593c:	dd11      	ble.n	d5962 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d593e:	00f0      	lsls	r0, r6, #3
   d5940:	f7fe ff92 	bl	d4868 <malloc>
            if (!d) {
   d5944:	4604      	mov	r4, r0
   d5946:	b158      	cbz	r0, d5960 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5948:	e9d5 1200 	ldrd	r1, r2, [r5]
   d594c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5950:	f7ff ffc7 	bl	d58e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5954:	6828      	ldr	r0, [r5, #0]
   d5956:	f7fe ff8f 	bl	d4878 <free>
        data_ = d;
   d595a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d595c:	60ae      	str	r6, [r5, #8]
        return true;
   d595e:	2001      	movs	r0, #1
    }
   d5960:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5962:	2400      	movs	r4, #0
   d5964:	e7f6      	b.n	d5954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5966:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5968:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d596a:	6845      	ldr	r5, [r0, #4]
   d596c:	4668      	mov	r0, sp
   d596e:	f7ff fd44 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5972:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5976:	4299      	cmp	r1, r3
   d5978:	da10      	bge.n	d599c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d597a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d597c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d597e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5982:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5986:	4629      	mov	r1, r5
   d5988:	f105 0008 	add.w	r0, r5, #8
   d598c:	f7ff ffa9 	bl	d58e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5990:	b98d      	cbnz	r5, d59b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d5992:	6863      	ldr	r3, [r4, #4]
   d5994:	3301      	adds	r3, #1
   d5996:	6063      	str	r3, [r4, #4]
    return true;
   d5998:	2601      	movs	r6, #1
   d599a:	e006      	b.n	d59aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d599c:	3101      	adds	r1, #1
   d599e:	4620      	mov	r0, r4
   d59a0:	f7ff ffc9 	bl	d5936 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d59a4:	4606      	mov	r6, r0
   d59a6:	2800      	cmp	r0, #0
   d59a8:	d1e7      	bne.n	d597a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d59aa:	a801      	add	r0, sp, #4
   d59ac:	f7ff fd3d 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d59b0:	4630      	mov	r0, r6
   d59b2:	b002      	add	sp, #8
   d59b4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d59b6:	4669      	mov	r1, sp
   d59b8:	4628      	mov	r0, r5
   d59ba:	f7ff fd1e 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d59be:	e7e8      	b.n	d5992 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d59c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59c4:	4616      	mov	r6, r2
   d59c6:	b0a1      	sub	sp, #132	; 0x84
   d59c8:	4680      	mov	r8, r0
    WiringBleLock lk;
   d59ca:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59cc:	460d      	mov	r5, r1
    WiringBleLock lk;
   d59ce:	f7ff f8fd 	bl	d4bcc <_ZN8particle3ble13WiringBleLockC1Ev>
   d59d2:	6834      	ldr	r4, [r6, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d59d4:	7923      	ldrb	r3, [r4, #4]
   d59d6:	b953      	cbnz	r3, d59ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d59d8:	4631      	mov	r1, r6
   d59da:	4640      	mov	r0, r8
   d59dc:	f7ff fd0d 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d59e0:	a80a      	add	r0, sp, #40	; 0x28
   d59e2:	f7ff f901 	bl	d4be8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d59e6:	4640      	mov	r0, r8
   d59e8:	b021      	add	sp, #132	; 0x84
   d59ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d59ee:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   d59f0:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
   d59f4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d59f8:	9303      	str	r3, [sp, #12]
   d59fa:	f104 0928 	add.w	r9, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d59fe:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d5a02:	9b03      	ldr	r3, [sp, #12]
   d5a04:	429f      	cmp	r7, r3
   d5a06:	d021      	beq.n	d5a4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d5a08:	f8d7 a000 	ldr.w	sl, [r7]
        if (charUuid_ == impl.charUuid_ &&
   d5a0c:	4658      	mov	r0, fp
   d5a0e:	f10a 0114 	add.w	r1, sl, #20
   d5a12:	f7ff fa12 	bl	d4e3a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d5a16:	b1b8      	cbz	r0, d5a48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d5a18:	f10a 0128 	add.w	r1, sl, #40	; 0x28
   d5a1c:	4648      	mov	r0, r9
   d5a1e:	f7ff fa0c 	bl	d4e3a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d5a22:	b188      	cbz	r0, d5a48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d5a24:	6823      	ldr	r3, [r4, #0]
   d5a26:	f8da 2000 	ldr.w	r2, [sl]
   d5a2a:	4053      	eors	r3, r2
   d5a2c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d5a30:	d10a      	bne.n	d5a48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5a32:	2220      	movs	r2, #32
   d5a34:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d5a38:	4a58      	ldr	r2, [pc, #352]	; (d5b9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1dc>)
   d5a3a:	9200      	str	r2, [sp, #0]
   d5a3c:	aa15      	add	r2, sp, #84	; 0x54
   d5a3e:	4958      	ldr	r1, [pc, #352]	; (d5ba0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e0>)
   d5a40:	2032      	movs	r0, #50	; 0x32
   d5a42:	f7fe fe85 	bl	d4750 <log_message>
   d5a46:	e7c7      	b.n	d59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d5a48:	3708      	adds	r7, #8
   d5a4a:	e7da      	b.n	d5a02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d5a4c:	4648      	mov	r0, r9
   d5a4e:	f7ff f9a5 	bl	d4d9c <_ZNK8particle7BleUuid7isValidEv>
   d5a52:	b918      	cbnz	r0, d5a5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5a54:	4953      	ldr	r1, [pc, #332]	; (d5ba4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
   d5a56:	4648      	mov	r0, r9
   d5a58:	f7ff f9e2 	bl	d4e20 <_ZN8particle7BleUuidaSEPKh>
   d5a5c:	682b      	ldr	r3, [r5, #0]
   d5a5e:	e9d3 7300 	ldrd	r7, r3, [r3]
   d5a62:	eb07 0bc3 	add.w	fp, r7, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d5a66:	455f      	cmp	r7, fp
   d5a68:	46ba      	mov	sl, r7
        BleService svc(charImpl->svcUUID());
   d5a6a:	4649      	mov	r1, r9
    for (auto& svc : impl()->services()) {
   d5a6c:	d06a      	beq.n	d5b44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x184>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5a6e:	f857 0b08 	ldr.w	r0, [r7], #8
   d5a72:	f7ff f9e2 	bl	d4e3a <_ZNK8particle7BleUuideqERKS0_>
   d5a76:	2800      	cmp	r0, #0
   d5a78:	d0f5      	beq.n	d5a66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xa6>
        if (!charUuid_.isValid()) {
   d5a7a:	f104 0714 	add.w	r7, r4, #20
   d5a7e:	4638      	mov	r0, r7
   d5a80:	f7ff f98c 	bl	d4d9c <_ZNK8particle7BleUuid7isValidEv>
   d5a84:	b968      	cbnz	r0, d5aa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xe2>
            defaultUuidCharCount_++;
   d5a86:	4b48      	ldr	r3, [pc, #288]	; (d5ba8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e8>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5a88:	4946      	ldr	r1, [pc, #280]	; (d5ba4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
            defaultUuidCharCount_++;
   d5a8a:	881a      	ldrh	r2, [r3, #0]
   d5a8c:	3201      	adds	r2, #1
   d5a8e:	b292      	uxth	r2, r2
   d5a90:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5a92:	a815      	add	r0, sp, #84	; 0x54
   d5a94:	2301      	movs	r3, #1
   d5a96:	f7ff f977 	bl	d4d88 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5a9a:	a915      	add	r1, sp, #84	; 0x54
   d5a9c:	4638      	mov	r0, r7
   d5a9e:	f7ff f9b2 	bl	d4e06 <_ZN8particle7BleUuidaSERKS0_>
    hal_ble_char_init_t charInit = {};
   d5aa2:	2228      	movs	r2, #40	; 0x28
   d5aa4:	2100      	movs	r1, #0
   d5aa6:	a816      	add	r0, sp, #88	; 0x58
   d5aa8:	f000 fdb8 	bl	d661c <memset>
    charInit.version = BLE_API_VERSION;
   d5aac:	4b3f      	ldr	r3, [pc, #252]	; (d5bac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ec>)
   d5aae:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d5ab0:	4639      	mov	r1, r7
   d5ab2:	a804      	add	r0, sp, #16
   d5ab4:	f7ff f984 	bl	d4dc0 <_ZN8particle7BleUuid7halUUIDEv>
   d5ab8:	ab04      	add	r3, sp, #16
   d5aba:	aa18      	add	r2, sp, #96	; 0x60
   d5abc:	f10d 0c20 	add.w	ip, sp, #32
   d5ac0:	6818      	ldr	r0, [r3, #0]
   d5ac2:	6859      	ldr	r1, [r3, #4]
   d5ac4:	4617      	mov	r7, r2
   d5ac6:	c703      	stmia	r7!, {r0, r1}
   d5ac8:	3308      	adds	r3, #8
   d5aca:	4563      	cmp	r3, ip
   d5acc:	463a      	mov	r2, r7
   d5ace:	d1f7      	bne.n	d5ac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x100>
   d5ad0:	6818      	ldr	r0, [r3, #0]
   d5ad2:	6038      	str	r0, [r7, #0]
    charInit.properties = charImpl->properties().value();
   d5ad4:	7923      	ldrb	r3, [r4, #4]
   d5ad6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5ada:	f8da 3000 	ldr.w	r3, [sl]
   d5ade:	8a9b      	ldrh	r3, [r3, #20]
   d5ae0:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5ae6:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d5ae8:	4b31      	ldr	r3, [pc, #196]	; (d5bb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f0>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5aea:	2200      	movs	r2, #0
   d5aec:	1da1      	adds	r1, r4, #6
   d5aee:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d5af0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5af4:	f7fe fd5c 	bl	d45b0 <hal_ble_gatt_server_add_characteristic>
   d5af8:	2800      	cmp	r0, #0
   d5afa:	f47f af6d 	bne.w	d59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    charImpl->local() = true;
   d5afe:	2301      	movs	r3, #1
   d5b00:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d5b02:	682c      	ldr	r4, [r5, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d5b04:	4631      	mov	r1, r6
        return characteristics_;
   d5b06:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d5b08:	a80d      	add	r0, sp, #52	; 0x34
   d5b0a:	f7ff fc76 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5b0e:	4620      	mov	r0, r4
   d5b10:	a90d      	add	r1, sp, #52	; 0x34
   d5b12:	f7ff ff28 	bl	d5966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5b16:	4604      	mov	r4, r0
   d5b18:	a80e      	add	r0, sp, #56	; 0x38
   d5b1a:	f7ff fc86 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b1e:	2c00      	cmp	r4, #0
   d5b20:	f47f af5a 	bne.w	d59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d5b24:	2320      	movs	r3, #32
   d5b26:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d5b2a:	4b22      	ldr	r3, [pc, #136]	; (d5bb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5b2c:	9300      	str	r3, [sp, #0]
   d5b2e:	aa0d      	add	r2, sp, #52	; 0x34
   d5b30:	4623      	mov	r3, r4
   d5b32:	e784      	b.n	d5a3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d5b34:	4631      	mov	r1, r6
   d5b36:	4640      	mov	r0, r8
   d5b38:	f7ff fc5f 	bl	d53fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5b3c:	a80c      	add	r0, sp, #48	; 0x30
   d5b3e:	f7ff fc74 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b42:	e74d      	b.n	d59e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d5b44:	a80b      	add	r0, sp, #44	; 0x2c
   d5b46:	f7ff fb0f 	bl	d5168 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5b4a:	4649      	mov	r1, r9
   d5b4c:	a815      	add	r0, sp, #84	; 0x54
   d5b4e:	f7ff f937 	bl	d4dc0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5b54:	2300      	movs	r3, #0
   d5b56:	3214      	adds	r2, #20
   d5b58:	a915      	add	r1, sp, #84	; 0x54
   d5b5a:	2001      	movs	r0, #1
   d5b5c:	f7fe fd00 	bl	d4560 <hal_ble_gatt_server_add_service>
   d5b60:	2800      	cmp	r0, #0
   d5b62:	d1e7      	bne.n	d5b34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
        return services_;
   d5b64:	682f      	ldr	r7, [r5, #0]
   d5b66:	a90b      	add	r1, sp, #44	; 0x2c
   d5b68:	a80d      	add	r0, sp, #52	; 0x34
   d5b6a:	f7ff fc54 	bl	d5416 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d5b6e:	4638      	mov	r0, r7
   d5b70:	a90d      	add	r1, sp, #52	; 0x34
   d5b72:	f7ff fe89 	bl	d5888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5b76:	4607      	mov	r7, r0
   d5b78:	a80e      	add	r0, sp, #56	; 0x38
   d5b7a:	f7ff fc56 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b7e:	2f00      	cmp	r7, #0
   d5b80:	d0d8      	beq.n	d5b34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
   d5b82:	682a      	ldr	r2, [r5, #0]
    return data_[size_ - 1];
   d5b84:	6853      	ldr	r3, [r2, #4]
   d5b86:	6812      	ldr	r2, [r2, #0]
   d5b88:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5b8c:	3b01      	subs	r3, #1
   d5b8e:	a80c      	add	r0, sp, #48	; 0x30
   d5b90:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   d5b94:	f7ff fc49 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b98:	e76f      	b.n	d5a7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xba>
   d5b9a:	bf00      	nop
   d5b9c:	000d68e5 	.word	0x000d68e5
   d5ba0:	000d6844 	.word	0x000d6844
   d5ba4:	000d69a4 	.word	0x000d69a4
   d5ba8:	2003e678 	.word	0x2003e678
   d5bac:	002c0001 	.word	0x002c0001
   d5bb0:	000d52d5 	.word	0x000d52d5
   d5bb4:	000d6910 	.word	0x000d6910

000d5bb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5bb8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5bba:	4c06      	ldr	r4, [pc, #24]	; (d5bd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5bbc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5bbe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5bc0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5bc2:	f7fe fd1d 	bl	d4600 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	4a03      	ldr	r2, [pc, #12]	; (d5bd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5bca:	4904      	ldr	r1, [pc, #16]	; (d5bdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5bd0:	f000 bbc6 	b.w	d6360 <__aeabi_atexit>
   d5bd4:	2003e67c 	.word	0x2003e67c
   d5bd8:	2003e5c4 	.word	0x2003e5c4
   d5bdc:	000d4b19 	.word	0x000d4b19

000d5be0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5be2:	4606      	mov	r6, r0
   d5be4:	460d      	mov	r5, r1
  size_t n = 0;
   d5be6:	188f      	adds	r7, r1, r2
   d5be8:	2400      	movs	r4, #0
  while (size--) {
   d5bea:	42bd      	cmp	r5, r7
   d5bec:	d00c      	beq.n	d5c08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5bee:	6833      	ldr	r3, [r6, #0]
   d5bf0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5bf4:	689b      	ldr	r3, [r3, #8]
   d5bf6:	4630      	mov	r0, r6
   d5bf8:	4798      	blx	r3
     if (chunk>=0)
   d5bfa:	1e03      	subs	r3, r0, #0
   d5bfc:	db01      	blt.n	d5c02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5bfe:	441c      	add	r4, r3
  while (size--) {
   d5c00:	e7f3      	b.n	d5bea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c02:	2c00      	cmp	r4, #0
   d5c04:	bf08      	it	eq
   d5c06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c08:	4620      	mov	r0, r4
   d5c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c0c:	b513      	push	{r0, r1, r4, lr}
   d5c0e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5c10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c12:	b159      	cbz	r1, d5c2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c14:	9101      	str	r1, [sp, #4]
   d5c16:	f000 fd6b 	bl	d66f0 <strlen>
   d5c1a:	6823      	ldr	r3, [r4, #0]
   d5c1c:	9901      	ldr	r1, [sp, #4]
   d5c1e:	68db      	ldr	r3, [r3, #12]
   d5c20:	4602      	mov	r2, r0
   d5c22:	4620      	mov	r0, r4
    }
   d5c24:	b002      	add	sp, #8
   d5c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c2a:	4718      	bx	r3
    }
   d5c2c:	b002      	add	sp, #8
   d5c2e:	bd10      	pop	{r4, pc}

000d5c30 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c30:	6803      	ldr	r3, [r0, #0]
   d5c32:	689b      	ldr	r3, [r3, #8]
   d5c34:	4718      	bx	r3

000d5c36 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c38:	210d      	movs	r1, #13
{
   d5c3a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c3c:	f7ff fff8 	bl	d5c30 <_ZN5Print5printEc>
  n += print('\n');
   d5c40:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5c42:	4604      	mov	r4, r0
  n += print('\n');
   d5c44:	4628      	mov	r0, r5
   d5c46:	f7ff fff3 	bl	d5c30 <_ZN5Print5printEc>
  return n;
}
   d5c4a:	4420      	add	r0, r4
   d5c4c:	bd38      	pop	{r3, r4, r5, pc}

000d5c4e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c4e:	b530      	push	{r4, r5, lr}
   d5c50:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c52:	2300      	movs	r3, #0
   d5c54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c58:	2a01      	cmp	r2, #1
   d5c5a:	bf98      	it	ls
   d5c5c:	220a      	movls	r2, #10
   d5c5e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5c60:	460d      	mov	r5, r1
   d5c62:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5c66:	fb01 5312 	mls	r3, r1, r2, r5
   d5c6a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c6e:	2b09      	cmp	r3, #9
   d5c70:	bf94      	ite	ls
   d5c72:	3330      	addls	r3, #48	; 0x30
   d5c74:	3337      	addhi	r3, #55	; 0x37
   d5c76:	b2db      	uxtb	r3, r3
  } while(n);
   d5c78:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5c7e:	d9ef      	bls.n	d5c60 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5c80:	4621      	mov	r1, r4
   d5c82:	f7ff ffc3 	bl	d5c0c <_ZN5Print5writeEPKc>
}
   d5c86:	b00b      	add	sp, #44	; 0x2c
   d5c88:	bd30      	pop	{r4, r5, pc}

000d5c8a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c8e:	b086      	sub	sp, #24
   d5c90:	af00      	add	r7, sp, #0
   d5c92:	4605      	mov	r5, r0
   d5c94:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c96:	1d38      	adds	r0, r7, #4
   d5c98:	2114      	movs	r1, #20
{
   d5c9a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5c9c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c9e:	f7fe fdfb 	bl	d4898 <vsnprintf>

    if (n<bufsize)
   d5ca2:	2813      	cmp	r0, #19
   d5ca4:	d80e      	bhi.n	d5cc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5ca6:	1d39      	adds	r1, r7, #4
   d5ca8:	4628      	mov	r0, r5
   d5caa:	f7ff ffaf 	bl	d5c0c <_ZN5Print5writeEPKc>
   d5cae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5cb0:	b11e      	cbz	r6, d5cba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5cb2:	4628      	mov	r0, r5
   d5cb4:	f7ff ffbf 	bl	d5c36 <_ZN5Print7printlnEv>
   d5cb8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5cba:	4620      	mov	r0, r4
   d5cbc:	3718      	adds	r7, #24
   d5cbe:	46bd      	mov	sp, r7
   d5cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5cc4:	f100 0308 	add.w	r3, r0, #8
   d5cc8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5ccc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5cce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5cd2:	4622      	mov	r2, r4
   d5cd4:	1c41      	adds	r1, r0, #1
   d5cd6:	683b      	ldr	r3, [r7, #0]
   d5cd8:	4668      	mov	r0, sp
   d5cda:	f7fe fddd 	bl	d4898 <vsnprintf>
  return write(str);
   d5cde:	4669      	mov	r1, sp
   d5ce0:	4628      	mov	r0, r5
   d5ce2:	f7ff ff93 	bl	d5c0c <_ZN5Print5writeEPKc>
   d5ce6:	4604      	mov	r4, r0
   d5ce8:	46c5      	mov	sp, r8
   d5cea:	e7e1      	b.n	d5cb0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5cec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5cec:	4b01      	ldr	r3, [pc, #4]	; (d5cf4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cee:	4a02      	ldr	r2, [pc, #8]	; (d5cf8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cf0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5cf2:	4770      	bx	lr
   d5cf4:	2003e684 	.word	0x2003e684
   d5cf8:	000d69c4 	.word	0x000d69c4

000d5cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5cfc:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5d04:	4770      	bx	lr
   d5d06:	bf00      	nop
   d5d08:	2003e55c 	.word	0x2003e55c
   d5d0c:	2003e688 	.word	0x2003e688

000d5d10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5d10:	2100      	movs	r1, #0
   d5d12:	f7fe bd2d 	b.w	d4770 <system_delay_ms>

000d5d16 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d16:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d18:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5d1a:	4604      	mov	r4, r0
      if (_M_manager)
   d5d1c:	b113      	cbz	r3, d5d24 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d1e:	2203      	movs	r2, #3
   d5d20:	4601      	mov	r1, r0
   d5d22:	4798      	blx	r3
    }
   d5d24:	4620      	mov	r0, r4
   d5d26:	bd10      	pop	{r4, pc}

000d5d28 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d28:	b510      	push	{r4, lr}
   d5d2a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d2c:	f7ff fff3 	bl	d5d16 <_ZNSt14_Function_baseD1Ev>
   d5d30:	4620      	mov	r0, r4
   d5d32:	bd10      	pop	{r4, pc}

000d5d34 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5d34:	4803      	ldr	r0, [pc, #12]	; (d5d44 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d36:	4a04      	ldr	r2, [pc, #16]	; (d5d48 <_GLOBAL__sub_I_RGB+0x14>)
   d5d38:	4904      	ldr	r1, [pc, #16]	; (d5d4c <_GLOBAL__sub_I_RGB+0x18>)
   d5d3a:	2300      	movs	r3, #0
   d5d3c:	6083      	str	r3, [r0, #8]
   d5d3e:	f000 bb0f 	b.w	d6360 <__aeabi_atexit>
   d5d42:	bf00      	nop
   d5d44:	2003e68c 	.word	0x2003e68c
   d5d48:	2003e5c4 	.word	0x2003e5c4
   d5d4c:	000d5d29 	.word	0x000d5d29

000d5d50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5d50:	4b01      	ldr	r3, [pc, #4]	; (d5d58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5d52:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5d54:	4770      	bx	lr
   d5d56:	bf00      	nop
   d5d58:	2003e560 	.word	0x2003e560

000d5d5c <serialEventRun>:
{
   d5d5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d5e:	4b0b      	ldr	r3, [pc, #44]	; (d5d8c <serialEventRun+0x30>)
   d5d60:	b143      	cbz	r3, d5d74 <serialEventRun+0x18>
   d5d62:	f000 f959 	bl	d6018 <_Z16_fetch_usbserialv>
   d5d66:	6803      	ldr	r3, [r0, #0]
   d5d68:	691b      	ldr	r3, [r3, #16]
   d5d6a:	4798      	blx	r3
   d5d6c:	2800      	cmp	r0, #0
   d5d6e:	dd01      	ble.n	d5d74 <serialEventRun+0x18>
        serialEvent();
   d5d70:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5d74:	4b06      	ldr	r3, [pc, #24]	; (d5d90 <serialEventRun+0x34>)
   d5d76:	b143      	cbz	r3, d5d8a <serialEventRun+0x2e>
   d5d78:	f000 f9cc 	bl	d6114 <_Z22__fetch_global_Serial1v>
   d5d7c:	6803      	ldr	r3, [r0, #0]
   d5d7e:	691b      	ldr	r3, [r3, #16]
   d5d80:	4798      	blx	r3
   d5d82:	2800      	cmp	r0, #0
   d5d84:	dd01      	ble.n	d5d8a <serialEventRun+0x2e>
        serialEvent1();
   d5d86:	f3af 8000 	nop.w
}
   d5d8a:	bd08      	pop	{r3, pc}
	...

000d5d94 <_post_loop>:
{
   d5d94:	b508      	push	{r3, lr}
	serialEventRun();
   d5d96:	f7ff ffe1 	bl	d5d5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d9a:	f7fe fb9f 	bl	d44dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d9e:	4b01      	ldr	r3, [pc, #4]	; (d5da4 <_post_loop+0x10>)
   d5da0:	6018      	str	r0, [r3, #0]
}
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	2003e7ec 	.word	0x2003e7ec

000d5da8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5da8:	4802      	ldr	r0, [pc, #8]	; (d5db4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5daa:	4a03      	ldr	r2, [pc, #12]	; (d5db8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5dac:	4903      	ldr	r1, [pc, #12]	; (d5dbc <_Z33system_initialize_user_backup_ramv+0x14>)
   d5dae:	1a12      	subs	r2, r2, r0
   d5db0:	f000 bc0c 	b.w	d65cc <memcpy>
   d5db4:	2003f400 	.word	0x2003f400
   d5db8:	2003f404 	.word	0x2003f404
   d5dbc:	000d6be0 	.word	0x000d6be0

000d5dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5dc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	9300      	str	r3, [sp, #0]
   d5dc6:	461a      	mov	r2, r3
   d5dc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5dcc:	f7fe fce2 	bl	d4794 <system_ctrl_set_result>
}
   d5dd0:	b003      	add	sp, #12
   d5dd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5dd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5dd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5dda:	8843      	ldrh	r3, [r0, #2]
   d5ddc:	2b0a      	cmp	r3, #10
   d5dde:	d008      	beq.n	d5df2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5de0:	2b50      	cmp	r3, #80	; 0x50
   d5de2:	d10b      	bne.n	d5dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5de4:	4b09      	ldr	r3, [pc, #36]	; (d5e0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5de6:	681b      	ldr	r3, [r3, #0]
   d5de8:	b14b      	cbz	r3, d5dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5dea:	b003      	add	sp, #12
   d5dec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5df0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5df2:	f7ff ffe5 	bl	d5dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5df6:	b003      	add	sp, #12
   d5df8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5dfc:	2300      	movs	r3, #0
   d5dfe:	9300      	str	r3, [sp, #0]
   d5e00:	461a      	mov	r2, r3
   d5e02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e06:	f7fe fcc5 	bl	d4794 <system_ctrl_set_result>
}
   d5e0a:	e7f4      	b.n	d5df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5e0c:	2003e6a0 	.word	0x2003e6a0

000d5e10 <module_user_init_hook>:
{
   d5e10:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e12:	4c12      	ldr	r4, [pc, #72]	; (d5e5c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e14:	4812      	ldr	r0, [pc, #72]	; (d5e60 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e16:	4d13      	ldr	r5, [pc, #76]	; (d5e64 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e18:	2100      	movs	r1, #0
   d5e1a:	f7fe fd45 	bl	d48a8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e1e:	6823      	ldr	r3, [r4, #0]
   d5e20:	42ab      	cmp	r3, r5
   d5e22:	4b11      	ldr	r3, [pc, #68]	; (d5e68 <module_user_init_hook+0x58>)
   d5e24:	bf0c      	ite	eq
   d5e26:	2201      	moveq	r2, #1
   d5e28:	2200      	movne	r2, #0
   d5e2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e2c:	d002      	beq.n	d5e34 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5e2e:	f7ff ffbb 	bl	d5da8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e34:	f7fe fb42 	bl	d44bc <HAL_RNG_GetRandomNumber>
   d5e38:	4604      	mov	r4, r0
    srand(seed);
   d5e3a:	f000 fbf7 	bl	d662c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e3e:	4b0b      	ldr	r3, [pc, #44]	; (d5e6c <module_user_init_hook+0x5c>)
   d5e40:	b113      	cbz	r3, d5e48 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5e42:	4620      	mov	r0, r4
   d5e44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e48:	2100      	movs	r1, #0
   d5e4a:	4808      	ldr	r0, [pc, #32]	; (d5e6c <module_user_init_hook+0x5c>)
   d5e4c:	f7fe fd04 	bl	d4858 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e54:	4806      	ldr	r0, [pc, #24]	; (d5e70 <module_user_init_hook+0x60>)
   d5e56:	2100      	movs	r1, #0
   d5e58:	f7fe bc92 	b.w	d4780 <system_ctrl_set_app_request_handler>
   d5e5c:	2003f400 	.word	0x2003f400
   d5e60:	000d5d51 	.word	0x000d5d51
   d5e64:	9a271c1e 	.word	0x9a271c1e
   d5e68:	2003e69c 	.word	0x2003e69c
   d5e6c:	00000000 	.word	0x00000000
   d5e70:	000d5dd9 	.word	0x000d5dd9

000d5e74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e74:	4770      	bx	lr

000d5e76 <_ZN9IPAddressD0Ev>:
   d5e76:	b510      	push	{r4, lr}
   d5e78:	2118      	movs	r1, #24
   d5e7a:	4604      	mov	r4, r0
   d5e7c:	f000 fa75 	bl	d636a <_ZdlPvj>
   d5e80:	4620      	mov	r0, r4
   d5e82:	bd10      	pop	{r4, pc}

000d5e84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e86:	7d03      	ldrb	r3, [r0, #20]
   d5e88:	2b06      	cmp	r3, #6
{
   d5e8a:	b08d      	sub	sp, #52	; 0x34
   d5e8c:	460e      	mov	r6, r1
   d5e8e:	f100 0704 	add.w	r7, r0, #4
   d5e92:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5e96:	d012      	beq.n	d5ebe <_ZNK9IPAddress7printToER5Print+0x3a>
   d5e98:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5e9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5ea0:	220a      	movs	r2, #10
   d5ea2:	4630      	mov	r0, r6
   d5ea4:	f7ff fed3 	bl	d5c4e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ea8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5eaa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5eac:	d019      	beq.n	d5ee2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5eae:	2c00      	cmp	r4, #0
   d5eb0:	d0f4      	beq.n	d5e9c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5eb2:	212e      	movs	r1, #46	; 0x2e
   d5eb4:	4630      	mov	r0, r6
   d5eb6:	f7ff febb 	bl	d5c30 <_ZN5Print5printEc>
   d5eba:	4404      	add	r4, r0
   d5ebc:	e7ee      	b.n	d5e9c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ebe:	232f      	movs	r3, #47	; 0x2f
   d5ec0:	466a      	mov	r2, sp
   d5ec2:	4639      	mov	r1, r7
   d5ec4:	200a      	movs	r0, #10
		buf[0] = 0;
   d5ec6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5eca:	f7fe fbb9 	bl	d4640 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5ece:	4668      	mov	r0, sp
   d5ed0:	f000 fc0e 	bl	d66f0 <strlen>
   d5ed4:	6833      	ldr	r3, [r6, #0]
   d5ed6:	4602      	mov	r2, r0
   d5ed8:	68db      	ldr	r3, [r3, #12]
   d5eda:	4669      	mov	r1, sp
   d5edc:	4630      	mov	r0, r6
   d5ede:	4798      	blx	r3
   d5ee0:	4604      	mov	r4, r0
    }
    return n;
}
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	b00d      	add	sp, #52	; 0x34
   d5ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ee8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	4b05      	ldr	r3, [pc, #20]	; (d5f00 <_ZN9IPAddressC1Ev+0x18>)
   d5eec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5eee:	2211      	movs	r2, #17
   d5ef0:	f840 3b04 	str.w	r3, [r0], #4
   d5ef4:	2100      	movs	r1, #0
   d5ef6:	f000 fb91 	bl	d661c <memset>
}
   d5efa:	4620      	mov	r0, r4
   d5efc:	bd10      	pop	{r4, pc}
   d5efe:	bf00      	nop
   d5f00:	000d69ec 	.word	0x000d69ec

000d5f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f04:	4603      	mov	r3, r0
   d5f06:	4a07      	ldr	r2, [pc, #28]	; (d5f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f08:	b510      	push	{r4, lr}
   d5f0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5f0e:	f101 0210 	add.w	r2, r1, #16
   d5f12:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f16:	f843 4b04 	str.w	r4, [r3], #4
   d5f1a:	4291      	cmp	r1, r2
   d5f1c:	d1f9      	bne.n	d5f12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f1e:	780a      	ldrb	r2, [r1, #0]
   d5f20:	701a      	strb	r2, [r3, #0]
}
   d5f22:	bd10      	pop	{r4, pc}
   d5f24:	000d69ec 	.word	0x000d69ec

000d5f28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5f28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5f3a:	2304      	movs	r3, #4
   d5f3c:	6041      	str	r1, [r0, #4]
   d5f3e:	7503      	strb	r3, [r0, #20]
}
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN9IPAddressaSEPKh>:
{
   d5f42:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f44:	78cb      	ldrb	r3, [r1, #3]
   d5f46:	9300      	str	r3, [sp, #0]
   d5f48:	788b      	ldrb	r3, [r1, #2]
   d5f4a:	784a      	ldrb	r2, [r1, #1]
   d5f4c:	7809      	ldrb	r1, [r1, #0]
   d5f4e:	f7ff ffeb 	bl	d5f28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5f52:	b002      	add	sp, #8
   d5f54:	bd10      	pop	{r4, pc}

000d5f56 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f56:	7441      	strb	r1, [r0, #17]
}
   d5f58:	4770      	bx	lr

000d5f5a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f5a:	4770      	bx	lr

000d5f5c <_ZN9USBSerial4readEv>:
{
   d5f5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f5e:	2100      	movs	r1, #0
   d5f60:	7c00      	ldrb	r0, [r0, #16]
   d5f62:	f7fe fbcd 	bl	d4700 <HAL_USB_USART_Receive_Data>
}
   d5f66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f6a:	bd08      	pop	{r3, pc}

000d5f6c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5f6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f6e:	2101      	movs	r1, #1
   d5f70:	7c00      	ldrb	r0, [r0, #16]
   d5f72:	f7fe fbc5 	bl	d4700 <HAL_USB_USART_Receive_Data>
}
   d5f76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f7a:	bd08      	pop	{r3, pc}

000d5f7c <_ZN9USBSerial17availableForWriteEv>:
{
   d5f7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f7e:	7c00      	ldrb	r0, [r0, #16]
   d5f80:	f7fe fbb6 	bl	d46f0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f88:	bd08      	pop	{r3, pc}

000d5f8a <_ZN9USBSerial9availableEv>:
{
   d5f8a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f8c:	7c00      	ldrb	r0, [r0, #16]
   d5f8e:	f7fe fba7 	bl	d46e0 <HAL_USB_USART_Available_Data>
}
   d5f92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f96:	bd08      	pop	{r3, pc}

000d5f98 <_ZN9USBSerial5writeEh>:
{
   d5f98:	b513      	push	{r0, r1, r4, lr}
   d5f9a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f9c:	7c00      	ldrb	r0, [r0, #16]
{
   d5f9e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fa0:	f7fe fba6 	bl	d46f0 <HAL_USB_USART_Available_Data_For_Write>
   d5fa4:	2800      	cmp	r0, #0
   d5fa6:	9901      	ldr	r1, [sp, #4]
   d5fa8:	dc01      	bgt.n	d5fae <_ZN9USBSerial5writeEh+0x16>
   d5faa:	7c60      	ldrb	r0, [r4, #17]
   d5fac:	b120      	cbz	r0, d5fb8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5fae:	7c20      	ldrb	r0, [r4, #16]
   d5fb0:	f7fe fbae 	bl	d4710 <HAL_USB_USART_Send_Data>
   d5fb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5fb8:	b002      	add	sp, #8
   d5fba:	bd10      	pop	{r4, pc}

000d5fbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5fbc:	7c00      	ldrb	r0, [r0, #16]
   d5fbe:	f7fe bbaf 	b.w	d4720 <HAL_USB_USART_Flush_Data>

000d5fc2 <_ZN9USBSerialD0Ev>:
   d5fc2:	b510      	push	{r4, lr}
   d5fc4:	2114      	movs	r1, #20
   d5fc6:	4604      	mov	r4, r0
   d5fc8:	f000 f9cf 	bl	d636a <_ZdlPvj>
   d5fcc:	4620      	mov	r0, r4
   d5fce:	bd10      	pop	{r4, pc}

000d5fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5fd0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fd6:	4604      	mov	r4, r0
   d5fd8:	4608      	mov	r0, r1
   d5fda:	2100      	movs	r1, #0
   d5fdc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5fe0:	4b04      	ldr	r3, [pc, #16]	; (d5ff4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5fe2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5fe4:	2301      	movs	r3, #1
  _serial = serial;
   d5fe6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5fe8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5fea:	4611      	mov	r1, r2
   d5fec:	f7fe fb68 	bl	d46c0 <HAL_USB_USART_Init>
}
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd10      	pop	{r4, pc}
   d5ff4:	000d6a00 	.word	0x000d6a00

000d5ff8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5ff8:	7c00      	ldrb	r0, [r0, #16]
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	f7fe bb68 	b.w	d46d0 <HAL_USB_USART_Begin>

000d6000 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d6000:	7c00      	ldrb	r0, [r0, #16]
   d6002:	f7fe bb95 	b.w	d4730 <HAL_USB_USART_Is_Connected>

000d6006 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6006:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6008:	2214      	movs	r2, #20
{
   d600a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d600c:	2100      	movs	r1, #0
   d600e:	f000 fb05 	bl	d661c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6012:	4620      	mov	r0, r4
   d6014:	bd10      	pop	{r4, pc}
	...

000d6018 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6018:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d601a:	4c10      	ldr	r4, [pc, #64]	; (d605c <_Z16_fetch_usbserialv+0x44>)
{
   d601c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d601e:	a803      	add	r0, sp, #12
   d6020:	f7ff fff1 	bl	d6006 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6024:	7821      	ldrb	r1, [r4, #0]
   d6026:	f3bf 8f5b 	dmb	ish
   d602a:	f011 0101 	ands.w	r1, r1, #1
   d602e:	d111      	bne.n	d6054 <_Z16_fetch_usbserialv+0x3c>
   d6030:	4620      	mov	r0, r4
   d6032:	9101      	str	r1, [sp, #4]
   d6034:	f7fe f831 	bl	d409a <__cxa_guard_acquire>
   d6038:	9901      	ldr	r1, [sp, #4]
   d603a:	b158      	cbz	r0, d6054 <_Z16_fetch_usbserialv+0x3c>
   d603c:	aa03      	add	r2, sp, #12
   d603e:	4808      	ldr	r0, [pc, #32]	; (d6060 <_Z16_fetch_usbserialv+0x48>)
   d6040:	f7ff ffc6 	bl	d5fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6044:	4620      	mov	r0, r4
   d6046:	f7fe f82d 	bl	d40a4 <__cxa_guard_release>
   d604a:	4a06      	ldr	r2, [pc, #24]	; (d6064 <_Z16_fetch_usbserialv+0x4c>)
   d604c:	4906      	ldr	r1, [pc, #24]	; (d6068 <_Z16_fetch_usbserialv+0x50>)
   d604e:	4804      	ldr	r0, [pc, #16]	; (d6060 <_Z16_fetch_usbserialv+0x48>)
   d6050:	f000 f986 	bl	d6360 <__aeabi_atexit>
	return _usbserial;
}
   d6054:	4802      	ldr	r0, [pc, #8]	; (d6060 <_Z16_fetch_usbserialv+0x48>)
   d6056:	b008      	add	sp, #32
   d6058:	bd10      	pop	{r4, pc}
   d605a:	bf00      	nop
   d605c:	2003e6a4 	.word	0x2003e6a4
   d6060:	2003e6a8 	.word	0x2003e6a8
   d6064:	2003e5c4 	.word	0x2003e5c4
   d6068:	000d5f5b 	.word	0x000d5f5b

000d606c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d606c:	4770      	bx	lr

000d606e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d606e:	7441      	strb	r1, [r0, #17]
}
   d6070:	4770      	bx	lr

000d6072 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6072:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6074:	7c00      	ldrb	r0, [r0, #16]
   d6076:	f7fe fb1b 	bl	d46b0 <hal_usart_available_data_for_write>
}
   d607a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d607e:	bd08      	pop	{r3, pc}

000d6080 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6080:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6082:	7c00      	ldrb	r0, [r0, #16]
   d6084:	f7fe faf4 	bl	d4670 <hal_usart_available>
}
   d6088:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d608c:	bd08      	pop	{r3, pc}

000d608e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d608e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6090:	7c00      	ldrb	r0, [r0, #16]
   d6092:	f7fe fafd 	bl	d4690 <hal_usart_peek>
}
   d6096:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d609a:	bd08      	pop	{r3, pc}

000d609c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d609c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d609e:	7c00      	ldrb	r0, [r0, #16]
   d60a0:	f7fe faee 	bl	d4680 <hal_usart_read>
}
   d60a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60a8:	bd08      	pop	{r3, pc}

000d60aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d60aa:	7c00      	ldrb	r0, [r0, #16]
   d60ac:	f7fe baf8 	b.w	d46a0 <hal_usart_flush>

000d60b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d60b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60b2:	7c45      	ldrb	r5, [r0, #17]
{
   d60b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60b6:	b12d      	cbz	r5, d60c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d60b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60ba:	b003      	add	sp, #12
   d60bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d60c0:	f7fe bace 	b.w	d4660 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60c4:	7c00      	ldrb	r0, [r0, #16]
   d60c6:	9101      	str	r1, [sp, #4]
   d60c8:	f7fe faf2 	bl	d46b0 <hal_usart_available_data_for_write>
   d60cc:	2800      	cmp	r0, #0
   d60ce:	9901      	ldr	r1, [sp, #4]
   d60d0:	dcf2      	bgt.n	d60b8 <_ZN11USARTSerial5writeEh+0x8>
}
   d60d2:	4628      	mov	r0, r5
   d60d4:	b003      	add	sp, #12
   d60d6:	bd30      	pop	{r4, r5, pc}

000d60d8 <_ZN11USARTSerialD0Ev>:
   d60d8:	b510      	push	{r4, lr}
   d60da:	2114      	movs	r1, #20
   d60dc:	4604      	mov	r4, r0
   d60de:	f000 f944 	bl	d636a <_ZdlPvj>
   d60e2:	4620      	mov	r0, r4
   d60e4:	bd10      	pop	{r4, pc}
	...

000d60e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d60e8:	b510      	push	{r4, lr}
   d60ea:	f04f 0c00 	mov.w	ip, #0
   d60ee:	4604      	mov	r4, r0
   d60f0:	4608      	mov	r0, r1
   d60f2:	4611      	mov	r1, r2
   d60f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d60fc:	4a04      	ldr	r2, [pc, #16]	; (d6110 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d60fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6100:	2201      	movs	r2, #1
  _serial = serial;
   d6102:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6104:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6106:	461a      	mov	r2, r3
   d6108:	f7fe faa2 	bl	d4650 <hal_usart_init>
}
   d610c:	4620      	mov	r0, r4
   d610e:	bd10      	pop	{r4, pc}
   d6110:	000d6a30 	.word	0x000d6a30

000d6114 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6114:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6116:	4c0e      	ldr	r4, [pc, #56]	; (d6150 <_Z22__fetch_global_Serial1v+0x3c>)
   d6118:	7821      	ldrb	r1, [r4, #0]
   d611a:	f3bf 8f5b 	dmb	ish
   d611e:	f011 0101 	ands.w	r1, r1, #1
   d6122:	d112      	bne.n	d614a <_Z22__fetch_global_Serial1v+0x36>
   d6124:	4620      	mov	r0, r4
   d6126:	9101      	str	r1, [sp, #4]
   d6128:	f7fd ffb7 	bl	d409a <__cxa_guard_acquire>
   d612c:	9901      	ldr	r1, [sp, #4]
   d612e:	b160      	cbz	r0, d614a <_Z22__fetch_global_Serial1v+0x36>
   d6130:	4a08      	ldr	r2, [pc, #32]	; (d6154 <_Z22__fetch_global_Serial1v+0x40>)
   d6132:	4b09      	ldr	r3, [pc, #36]	; (d6158 <_Z22__fetch_global_Serial1v+0x44>)
   d6134:	4809      	ldr	r0, [pc, #36]	; (d615c <_Z22__fetch_global_Serial1v+0x48>)
   d6136:	f7ff ffd7 	bl	d60e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d613a:	4620      	mov	r0, r4
   d613c:	f7fd ffb2 	bl	d40a4 <__cxa_guard_release>
   d6140:	4a07      	ldr	r2, [pc, #28]	; (d6160 <_Z22__fetch_global_Serial1v+0x4c>)
   d6142:	4908      	ldr	r1, [pc, #32]	; (d6164 <_Z22__fetch_global_Serial1v+0x50>)
   d6144:	4805      	ldr	r0, [pc, #20]	; (d615c <_Z22__fetch_global_Serial1v+0x48>)
   d6146:	f000 f90b 	bl	d6360 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d614a:	4804      	ldr	r0, [pc, #16]	; (d615c <_Z22__fetch_global_Serial1v+0x48>)
   d614c:	b002      	add	sp, #8
   d614e:	bd10      	pop	{r4, pc}
   d6150:	2003e6bc 	.word	0x2003e6bc
   d6154:	2003e6c0 	.word	0x2003e6c0
   d6158:	2003e744 	.word	0x2003e744
   d615c:	2003e7c8 	.word	0x2003e7c8
   d6160:	2003e5c4 	.word	0x2003e5c4
   d6164:	000d606d 	.word	0x000d606d

000d6168 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6168:	b510      	push	{r4, lr}
  if (0 == max) {
   d616a:	4604      	mov	r4, r0
   d616c:	b128      	cbz	r0, d617a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d616e:	f000 fa81 	bl	d6674 <rand>
   d6172:	fb90 f3f4 	sdiv	r3, r0, r4
   d6176:	fb03 0414 	mls	r4, r3, r4, r0
}
   d617a:	4620      	mov	r0, r4
   d617c:	bd10      	pop	{r4, pc}

000d617e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d617e:	4288      	cmp	r0, r1
{
   d6180:	b510      	push	{r4, lr}
   d6182:	4604      	mov	r4, r0
  if (min >= max) {
   d6184:	da03      	bge.n	d618e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d6186:	1a08      	subs	r0, r1, r0
   d6188:	f7ff ffee 	bl	d6168 <_Z6randomi>
   d618c:	4404      	add	r4, r0
}
   d618e:	4620      	mov	r0, r4
   d6190:	bd10      	pop	{r4, pc}

000d6192 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6192:	2200      	movs	r2, #0
   d6194:	6840      	ldr	r0, [r0, #4]
   d6196:	4611      	mov	r1, r2
   d6198:	f7fe bb1e 	b.w	d47d8 <network_ready>

000d619c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d619c:	2200      	movs	r2, #0
   d619e:	6840      	ldr	r0, [r0, #4]
   d61a0:	4611      	mov	r1, r2
   d61a2:	f7fe bb39 	b.w	d4818 <network_listening>

000d61a6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d61a6:	2200      	movs	r2, #0
   d61a8:	6840      	ldr	r0, [r0, #4]
   d61aa:	4611      	mov	r1, r2
   d61ac:	f7fe bb44 	b.w	d4838 <network_get_listen_timeout>

000d61b0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d61b0:	6840      	ldr	r0, [r0, #4]
   d61b2:	2200      	movs	r2, #0
   d61b4:	f7fe bb38 	b.w	d4828 <network_set_listen_timeout>

000d61b8 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d61b8:	6840      	ldr	r0, [r0, #4]
   d61ba:	2200      	movs	r2, #0
   d61bc:	f081 0101 	eor.w	r1, r1, #1
   d61c0:	f7fe bb22 	b.w	d4808 <network_listen>

000d61c4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61c4:	2300      	movs	r3, #0
   d61c6:	6840      	ldr	r0, [r0, #4]
   d61c8:	461a      	mov	r2, r3
   d61ca:	4619      	mov	r1, r3
   d61cc:	f7fe bb14 	b.w	d47f8 <network_off>

000d61d0 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d61d0:	2300      	movs	r3, #0
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	461a      	mov	r2, r3
   d61d6:	4619      	mov	r1, r3
   d61d8:	f7fe bb06 	b.w	d47e8 <network_on>

000d61dc <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d61dc:	2200      	movs	r2, #0
   d61de:	6840      	ldr	r0, [r0, #4]
   d61e0:	4611      	mov	r1, r2
   d61e2:	f7fe bae9 	b.w	d47b8 <network_connecting>

000d61e6 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61e6:	6840      	ldr	r0, [r0, #4]
   d61e8:	2200      	movs	r2, #0
   d61ea:	2102      	movs	r1, #2
   d61ec:	f7fe baec 	b.w	d47c8 <network_disconnect>

000d61f0 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d61f0:	2300      	movs	r3, #0
   d61f2:	6840      	ldr	r0, [r0, #4]
   d61f4:	461a      	mov	r2, r3
   d61f6:	f7fe bad7 	b.w	d47a8 <network_connect>
	...

000d61fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d61fc:	4b02      	ldr	r3, [pc, #8]	; (d6208 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d61fe:	2204      	movs	r2, #4
   d6200:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6202:	4a02      	ldr	r2, [pc, #8]	; (d620c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6204:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6206:	4770      	bx	lr
   d6208:	2003e7dc 	.word	0x2003e7dc
   d620c:	000d6a60 	.word	0x000d6a60

000d6210 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6210:	2300      	movs	r3, #0
   d6212:	6840      	ldr	r0, [r0, #4]
   d6214:	461a      	mov	r2, r3
   d6216:	f7fe bac7 	b.w	d47a8 <network_connect>

000d621a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d621a:	6840      	ldr	r0, [r0, #4]
   d621c:	2200      	movs	r2, #0
   d621e:	2102      	movs	r1, #2
   d6220:	f7fe bad2 	b.w	d47c8 <network_disconnect>

000d6224 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6224:	2200      	movs	r2, #0
   d6226:	6840      	ldr	r0, [r0, #4]
   d6228:	4611      	mov	r1, r2
   d622a:	f7fe bac5 	b.w	d47b8 <network_connecting>

000d622e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d622e:	2200      	movs	r2, #0
   d6230:	6840      	ldr	r0, [r0, #4]
   d6232:	4611      	mov	r1, r2
   d6234:	f7fe bad0 	b.w	d47d8 <network_ready>

000d6238 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6238:	2300      	movs	r3, #0
   d623a:	6840      	ldr	r0, [r0, #4]
   d623c:	461a      	mov	r2, r3
   d623e:	4619      	mov	r1, r3
   d6240:	f7fe bad2 	b.w	d47e8 <network_on>

000d6244 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6244:	2300      	movs	r3, #0
   d6246:	6840      	ldr	r0, [r0, #4]
   d6248:	461a      	mov	r2, r3
   d624a:	4619      	mov	r1, r3
   d624c:	f7fe bad4 	b.w	d47f8 <network_off>

000d6250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6250:	6840      	ldr	r0, [r0, #4]
   d6252:	2200      	movs	r2, #0
   d6254:	f081 0101 	eor.w	r1, r1, #1
   d6258:	f7fe bad6 	b.w	d4808 <network_listen>

000d625c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d625c:	6840      	ldr	r0, [r0, #4]
   d625e:	2200      	movs	r2, #0
   d6260:	f7fe bae2 	b.w	d4828 <network_set_listen_timeout>

000d6264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6264:	2200      	movs	r2, #0
   d6266:	6840      	ldr	r0, [r0, #4]
   d6268:	4611      	mov	r1, r2
   d626a:	f7fe bae5 	b.w	d4838 <network_get_listen_timeout>

000d626e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d626e:	2200      	movs	r2, #0
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	4611      	mov	r1, r2
   d6274:	f7fe bad0 	b.w	d4818 <network_listening>

000d6278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d627c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d627e:	b095      	sub	sp, #84	; 0x54
   d6280:	4616      	mov	r6, r2
   d6282:	460d      	mov	r5, r1
   d6284:	4607      	mov	r7, r0
    IPAddress addr;
   d6286:	f7ff fe2f 	bl	d5ee8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d628a:	4621      	mov	r1, r4
   d628c:	2218      	movs	r2, #24
   d628e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6290:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6292:	f000 f9c3 	bl	d661c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6296:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6298:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d629c:	4621      	mov	r1, r4
   d629e:	466b      	mov	r3, sp
   d62a0:	aa0c      	add	r2, sp, #48	; 0x30
   d62a2:	4630      	mov	r0, r6
   d62a4:	f7fe f902 	bl	d44ac <netdb_getaddrinfo>
    if (!r) {
   d62a8:	4604      	mov	r4, r0
   d62aa:	2800      	cmp	r0, #0
   d62ac:	d146      	bne.n	d633c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62ae:	4602      	mov	r2, r0
   d62b0:	2101      	movs	r1, #1
   d62b2:	6868      	ldr	r0, [r5, #4]
   d62b4:	f7fe fa90 	bl	d47d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62bc:	4622      	mov	r2, r4
   d62be:	6868      	ldr	r0, [r5, #4]
   d62c0:	f7fe fa8a 	bl	d47d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62c6:	4681      	mov	r9, r0
        bool ok = false;
   d62c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62ca:	2e00      	cmp	r6, #0
   d62cc:	d036      	beq.n	d633c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d62ce:	2900      	cmp	r1, #0
   d62d0:	d134      	bne.n	d633c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d62d2:	6873      	ldr	r3, [r6, #4]
   d62d4:	2b02      	cmp	r3, #2
   d62d6:	d003      	beq.n	d62e0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d62d8:	2b0a      	cmp	r3, #10
   d62da:	d00b      	beq.n	d62f4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62dc:	69f6      	ldr	r6, [r6, #28]
   d62de:	e7f4      	b.n	d62ca <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d62e0:	f1b8 0f00 	cmp.w	r8, #0
   d62e4:	d004      	beq.n	d62f0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62e6:	6971      	ldr	r1, [r6, #20]
   d62e8:	4638      	mov	r0, r7
   d62ea:	3104      	adds	r1, #4
   d62ec:	f7ff fe29 	bl	d5f42 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d62f0:	4641      	mov	r1, r8
   d62f2:	e7f3      	b.n	d62dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62f4:	f1b9 0f00 	cmp.w	r9, #0
   d62f8:	d101      	bne.n	d62fe <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d62fa:	4649      	mov	r1, r9
   d62fc:	e7ee      	b.n	d62dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6300:	2210      	movs	r2, #16
   d6302:	a801      	add	r0, sp, #4
   d6304:	f000 f98a 	bl	d661c <memset>
                    a.v = 6;
   d6308:	2306      	movs	r3, #6
   d630a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d630e:	ad01      	add	r5, sp, #4
   d6310:	f104 0308 	add.w	r3, r4, #8
   d6314:	3418      	adds	r4, #24
   d6316:	6818      	ldr	r0, [r3, #0]
   d6318:	6859      	ldr	r1, [r3, #4]
   d631a:	462a      	mov	r2, r5
   d631c:	c203      	stmia	r2!, {r0, r1}
   d631e:	3308      	adds	r3, #8
   d6320:	42a3      	cmp	r3, r4
   d6322:	4615      	mov	r5, r2
   d6324:	d1f7      	bne.n	d6316 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6326:	a901      	add	r1, sp, #4
   d6328:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d632a:	ad07      	add	r5, sp, #28
   d632c:	f7ff fdea 	bl	d5f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6332:	1d3c      	adds	r4, r7, #4
   d6334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6336:	682b      	ldr	r3, [r5, #0]
   d6338:	7023      	strb	r3, [r4, #0]
   d633a:	e7de      	b.n	d62fa <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d633c:	9800      	ldr	r0, [sp, #0]
   d633e:	f7fe f8ad 	bl	d449c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6342:	4638      	mov	r0, r7
   d6344:	b015      	add	sp, #84	; 0x54
   d6346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d634c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d634c:	4b02      	ldr	r3, [pc, #8]	; (d6358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d634e:	4a03      	ldr	r2, [pc, #12]	; (d635c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6350:	601a      	str	r2, [r3, #0]
   d6352:	2200      	movs	r2, #0
   d6354:	605a      	str	r2, [r3, #4]

} // spark
   d6356:	4770      	bx	lr
   d6358:	2003e7e4 	.word	0x2003e7e4
   d635c:	000d6a94 	.word	0x000d6a94

000d6360 <__aeabi_atexit>:
   d6360:	460b      	mov	r3, r1
   d6362:	4601      	mov	r1, r0
   d6364:	4618      	mov	r0, r3
   d6366:	f000 b915 	b.w	d6594 <__cxa_atexit>

000d636a <_ZdlPvj>:
   d636a:	f7fd be94 	b.w	d4096 <_ZdlPv>
	...

000d6370 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6370:	4901      	ldr	r1, [pc, #4]	; (d6378 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6372:	f000 b8f9 	b.w	d6568 <_ZNKSt9type_infoeqERKS_>
   d6376:	bf00      	nop
   d6378:	000d6ad8 	.word	0x000d6ad8

000d637c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d637c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d637e:	2400      	movs	r4, #0
   d6380:	2310      	movs	r3, #16
   d6382:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6386:	6803      	ldr	r3, [r0, #0]
   d6388:	9400      	str	r4, [sp, #0]
   d638a:	699e      	ldr	r6, [r3, #24]
   d638c:	f88d 4004 	strb.w	r4, [sp, #4]
   d6390:	4615      	mov	r5, r2
   d6392:	466b      	mov	r3, sp
   d6394:	6812      	ldr	r2, [r2, #0]
   d6396:	47b0      	blx	r6
   d6398:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d639c:	f003 0306 	and.w	r3, r3, #6
   d63a0:	2b06      	cmp	r3, #6
   d63a2:	bf03      	ittte	eq
   d63a4:	9b00      	ldreq	r3, [sp, #0]
   d63a6:	602b      	streq	r3, [r5, #0]
   d63a8:	2001      	moveq	r0, #1
   d63aa:	4620      	movne	r0, r4
   d63ac:	b004      	add	sp, #16
   d63ae:	bd70      	pop	{r4, r5, r6, pc}

000d63b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d63b0:	9800      	ldr	r0, [sp, #0]
   d63b2:	4290      	cmp	r0, r2
   d63b4:	bf14      	ite	ne
   d63b6:	2001      	movne	r0, #1
   d63b8:	2006      	moveq	r0, #6
   d63ba:	4770      	bx	lr

000d63bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d63bc:	b510      	push	{r4, lr}
   d63be:	4b03      	ldr	r3, [pc, #12]	; (d63cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d63c0:	6003      	str	r3, [r0, #0]
   d63c2:	4604      	mov	r4, r0
   d63c4:	f000 f8cd 	bl	d6562 <_ZNSt9type_infoD1Ev>
   d63c8:	4620      	mov	r0, r4
   d63ca:	bd10      	pop	{r4, pc}
   d63cc:	000d6b18 	.word	0x000d6b18

000d63d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d63d0:	b510      	push	{r4, lr}
   d63d2:	4604      	mov	r4, r0
   d63d4:	f7ff fff2 	bl	d63bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d63d8:	4620      	mov	r0, r4
   d63da:	2108      	movs	r1, #8
   d63dc:	f7ff ffc5 	bl	d636a <_ZdlPvj>
   d63e0:	4620      	mov	r0, r4
   d63e2:	bd10      	pop	{r4, pc}

000d63e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d63e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63e8:	461f      	mov	r7, r3
   d63ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d63ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d63f2:	4598      	cmp	r8, r3
   d63f4:	4606      	mov	r6, r0
   d63f6:	4615      	mov	r5, r2
   d63f8:	d107      	bne.n	d640a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d63fa:	9907      	ldr	r1, [sp, #28]
   d63fc:	f000 f8b4 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d6400:	b118      	cbz	r0, d640a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6402:	7165      	strb	r5, [r4, #5]
   d6404:	2000      	movs	r0, #0
   d6406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d640a:	4639      	mov	r1, r7
   d640c:	4630      	mov	r0, r6
   d640e:	f000 f8ab 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d6412:	2800      	cmp	r0, #0
   d6414:	d0f6      	beq.n	d6404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6416:	2301      	movs	r3, #1
   d6418:	f8c4 8000 	str.w	r8, [r4]
   d641c:	7125      	strb	r5, [r4, #4]
   d641e:	71a3      	strb	r3, [r4, #6]
   d6420:	e7f0      	b.n	d6404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6422:	b538      	push	{r3, r4, r5, lr}
   d6424:	4615      	mov	r5, r2
   d6426:	461c      	mov	r4, r3
   d6428:	f000 f89e 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d642c:	b120      	cbz	r0, d6438 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d642e:	2308      	movs	r3, #8
   d6430:	60e3      	str	r3, [r4, #12]
   d6432:	2306      	movs	r3, #6
   d6434:	6025      	str	r5, [r4, #0]
   d6436:	7123      	strb	r3, [r4, #4]
   d6438:	bd38      	pop	{r3, r4, r5, pc}

000d643a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d643a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d643c:	4605      	mov	r5, r0
   d643e:	460c      	mov	r4, r1
   d6440:	9201      	str	r2, [sp, #4]
   d6442:	461e      	mov	r6, r3
   d6444:	f000 f890 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d6448:	b950      	cbnz	r0, d6460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d644a:	2e03      	cmp	r6, #3
   d644c:	d808      	bhi.n	d6460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d644e:	6823      	ldr	r3, [r4, #0]
   d6450:	9a01      	ldr	r2, [sp, #4]
   d6452:	695b      	ldr	r3, [r3, #20]
   d6454:	4629      	mov	r1, r5
   d6456:	4620      	mov	r0, r4
   d6458:	b002      	add	sp, #8
   d645a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d645e:	4718      	bx	r3
   d6460:	b002      	add	sp, #8
   d6462:	bd70      	pop	{r4, r5, r6, pc}

000d6464 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6464:	b510      	push	{r4, lr}
   d6466:	4b03      	ldr	r3, [pc, #12]	; (d6474 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6468:	6003      	str	r3, [r0, #0]
   d646a:	4604      	mov	r4, r0
   d646c:	f7ff ffa6 	bl	d63bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6470:	4620      	mov	r0, r4
   d6472:	bd10      	pop	{r4, pc}
   d6474:	000d6b78 	.word	0x000d6b78

000d6478 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6478:	b510      	push	{r4, lr}
   d647a:	4604      	mov	r4, r0
   d647c:	f7ff fff2 	bl	d6464 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6480:	4620      	mov	r0, r4
   d6482:	210c      	movs	r1, #12
   d6484:	f7ff ff71 	bl	d636a <_ZdlPvj>
   d6488:	4620      	mov	r0, r4
   d648a:	bd10      	pop	{r4, pc}

000d648c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d648e:	9f08      	ldr	r7, [sp, #32]
   d6490:	4297      	cmp	r7, r2
   d6492:	4605      	mov	r5, r0
   d6494:	460e      	mov	r6, r1
   d6496:	4614      	mov	r4, r2
   d6498:	d00a      	beq.n	d64b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d649a:	68a8      	ldr	r0, [r5, #8]
   d649c:	6802      	ldr	r2, [r0, #0]
   d649e:	9708      	str	r7, [sp, #32]
   d64a0:	6a15      	ldr	r5, [r2, #32]
   d64a2:	4631      	mov	r1, r6
   d64a4:	4622      	mov	r2, r4
   d64a6:	46ac      	mov	ip, r5
   d64a8:	b003      	add	sp, #12
   d64aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d64ae:	4760      	bx	ip
   d64b0:	4619      	mov	r1, r3
   d64b2:	9301      	str	r3, [sp, #4]
   d64b4:	f000 f858 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d64b8:	9b01      	ldr	r3, [sp, #4]
   d64ba:	2800      	cmp	r0, #0
   d64bc:	d0ed      	beq.n	d649a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d64be:	2006      	movs	r0, #6
   d64c0:	b003      	add	sp, #12
   d64c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d64c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64c8:	460d      	mov	r5, r1
   d64ca:	4619      	mov	r1, r3
   d64cc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d64d0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d64d4:	4681      	mov	r9, r0
   d64d6:	4617      	mov	r7, r2
   d64d8:	4698      	mov	r8, r3
   d64da:	f000 f845 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d64de:	b190      	cbz	r0, d6506 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d64e0:	2d00      	cmp	r5, #0
   d64e2:	6034      	str	r4, [r6, #0]
   d64e4:	7137      	strb	r7, [r6, #4]
   d64e6:	db09      	blt.n	d64fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d64e8:	1961      	adds	r1, r4, r5
   d64ea:	458a      	cmp	sl, r1
   d64ec:	bf0c      	ite	eq
   d64ee:	2106      	moveq	r1, #6
   d64f0:	2101      	movne	r1, #1
   d64f2:	71b1      	strb	r1, [r6, #6]
   d64f4:	2000      	movs	r0, #0
   d64f6:	b001      	add	sp, #4
   d64f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64fc:	3502      	adds	r5, #2
   d64fe:	d1f9      	bne.n	d64f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6500:	2301      	movs	r3, #1
   d6502:	71b3      	strb	r3, [r6, #6]
   d6504:	e7f6      	b.n	d64f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6506:	4554      	cmp	r4, sl
   d6508:	d106      	bne.n	d6518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d650a:	4659      	mov	r1, fp
   d650c:	4648      	mov	r0, r9
   d650e:	f000 f82b 	bl	d6568 <_ZNKSt9type_infoeqERKS_>
   d6512:	b108      	cbz	r0, d6518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6514:	7177      	strb	r7, [r6, #5]
   d6516:	e7ed      	b.n	d64f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6518:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d651c:	6803      	ldr	r3, [r0, #0]
   d651e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6522:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6526:	69dc      	ldr	r4, [r3, #28]
   d6528:	463a      	mov	r2, r7
   d652a:	4643      	mov	r3, r8
   d652c:	4629      	mov	r1, r5
   d652e:	46a4      	mov	ip, r4
   d6530:	b001      	add	sp, #4
   d6532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6536:	4760      	bx	ip

000d6538 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d653c:	4607      	mov	r7, r0
   d653e:	460c      	mov	r4, r1
   d6540:	4615      	mov	r5, r2
   d6542:	461e      	mov	r6, r3
   d6544:	f7ff ff6d 	bl	d6422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6548:	b948      	cbnz	r0, d655e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d654a:	68b8      	ldr	r0, [r7, #8]
   d654c:	6803      	ldr	r3, [r0, #0]
   d654e:	699f      	ldr	r7, [r3, #24]
   d6550:	462a      	mov	r2, r5
   d6552:	4633      	mov	r3, r6
   d6554:	4621      	mov	r1, r4
   d6556:	46bc      	mov	ip, r7
   d6558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d655c:	4760      	bx	ip
   d655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6562 <_ZNSt9type_infoD1Ev>:
   d6562:	4770      	bx	lr

000d6564 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6564:	2000      	movs	r0, #0
   d6566:	4770      	bx	lr

000d6568 <_ZNKSt9type_infoeqERKS_>:
   d6568:	4281      	cmp	r1, r0
   d656a:	b508      	push	{r3, lr}
   d656c:	d00e      	beq.n	d658c <_ZNKSt9type_infoeqERKS_+0x24>
   d656e:	6840      	ldr	r0, [r0, #4]
   d6570:	7803      	ldrb	r3, [r0, #0]
   d6572:	2b2a      	cmp	r3, #42	; 0x2a
   d6574:	d00c      	beq.n	d6590 <_ZNKSt9type_infoeqERKS_+0x28>
   d6576:	6849      	ldr	r1, [r1, #4]
   d6578:	780b      	ldrb	r3, [r1, #0]
   d657a:	2b2a      	cmp	r3, #42	; 0x2a
   d657c:	bf08      	it	eq
   d657e:	3101      	addeq	r1, #1
   d6580:	f000 f8ac 	bl	d66dc <strcmp>
   d6584:	fab0 f080 	clz	r0, r0
   d6588:	0940      	lsrs	r0, r0, #5
   d658a:	bd08      	pop	{r3, pc}
   d658c:	2001      	movs	r0, #1
   d658e:	e7fc      	b.n	d658a <_ZNKSt9type_infoeqERKS_+0x22>
   d6590:	2000      	movs	r0, #0
   d6592:	e7fa      	b.n	d658a <_ZNKSt9type_infoeqERKS_+0x22>

000d6594 <__cxa_atexit>:
   d6594:	b510      	push	{r4, lr}
   d6596:	4c05      	ldr	r4, [pc, #20]	; (d65ac <__cxa_atexit+0x18>)
   d6598:	4613      	mov	r3, r2
   d659a:	b12c      	cbz	r4, d65a8 <__cxa_atexit+0x14>
   d659c:	460a      	mov	r2, r1
   d659e:	4601      	mov	r1, r0
   d65a0:	2002      	movs	r0, #2
   d65a2:	f3af 8000 	nop.w
   d65a6:	bd10      	pop	{r4, pc}
   d65a8:	4620      	mov	r0, r4
   d65aa:	e7fc      	b.n	d65a6 <__cxa_atexit+0x12>
   d65ac:	00000000 	.word	0x00000000

000d65b0 <memcmp>:
   d65b0:	b530      	push	{r4, r5, lr}
   d65b2:	3901      	subs	r1, #1
   d65b4:	2400      	movs	r4, #0
   d65b6:	42a2      	cmp	r2, r4
   d65b8:	d101      	bne.n	d65be <memcmp+0xe>
   d65ba:	2000      	movs	r0, #0
   d65bc:	e005      	b.n	d65ca <memcmp+0x1a>
   d65be:	5d03      	ldrb	r3, [r0, r4]
   d65c0:	3401      	adds	r4, #1
   d65c2:	5d0d      	ldrb	r5, [r1, r4]
   d65c4:	42ab      	cmp	r3, r5
   d65c6:	d0f6      	beq.n	d65b6 <memcmp+0x6>
   d65c8:	1b58      	subs	r0, r3, r5
   d65ca:	bd30      	pop	{r4, r5, pc}

000d65cc <memcpy>:
   d65cc:	440a      	add	r2, r1
   d65ce:	4291      	cmp	r1, r2
   d65d0:	f100 33ff 	add.w	r3, r0, #4294967295
   d65d4:	d100      	bne.n	d65d8 <memcpy+0xc>
   d65d6:	4770      	bx	lr
   d65d8:	b510      	push	{r4, lr}
   d65da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d65de:	f803 4f01 	strb.w	r4, [r3, #1]!
   d65e2:	4291      	cmp	r1, r2
   d65e4:	d1f9      	bne.n	d65da <memcpy+0xe>
   d65e6:	bd10      	pop	{r4, pc}

000d65e8 <memmove>:
   d65e8:	4288      	cmp	r0, r1
   d65ea:	b510      	push	{r4, lr}
   d65ec:	eb01 0402 	add.w	r4, r1, r2
   d65f0:	d902      	bls.n	d65f8 <memmove+0x10>
   d65f2:	4284      	cmp	r4, r0
   d65f4:	4623      	mov	r3, r4
   d65f6:	d807      	bhi.n	d6608 <memmove+0x20>
   d65f8:	1e43      	subs	r3, r0, #1
   d65fa:	42a1      	cmp	r1, r4
   d65fc:	d008      	beq.n	d6610 <memmove+0x28>
   d65fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6602:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6606:	e7f8      	b.n	d65fa <memmove+0x12>
   d6608:	4402      	add	r2, r0
   d660a:	4601      	mov	r1, r0
   d660c:	428a      	cmp	r2, r1
   d660e:	d100      	bne.n	d6612 <memmove+0x2a>
   d6610:	bd10      	pop	{r4, pc}
   d6612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6616:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d661a:	e7f7      	b.n	d660c <memmove+0x24>

000d661c <memset>:
   d661c:	4402      	add	r2, r0
   d661e:	4603      	mov	r3, r0
   d6620:	4293      	cmp	r3, r2
   d6622:	d100      	bne.n	d6626 <memset+0xa>
   d6624:	4770      	bx	lr
   d6626:	f803 1b01 	strb.w	r1, [r3], #1
   d662a:	e7f9      	b.n	d6620 <memset+0x4>

000d662c <srand>:
   d662c:	b538      	push	{r3, r4, r5, lr}
   d662e:	4b0d      	ldr	r3, [pc, #52]	; (d6664 <srand+0x38>)
   d6630:	681d      	ldr	r5, [r3, #0]
   d6632:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6634:	4604      	mov	r4, r0
   d6636:	b97b      	cbnz	r3, d6658 <srand+0x2c>
   d6638:	2018      	movs	r0, #24
   d663a:	f7fe f915 	bl	d4868 <malloc>
   d663e:	4a0a      	ldr	r2, [pc, #40]	; (d6668 <srand+0x3c>)
   d6640:	4b0a      	ldr	r3, [pc, #40]	; (d666c <srand+0x40>)
   d6642:	63a8      	str	r0, [r5, #56]	; 0x38
   d6644:	e9c0 2300 	strd	r2, r3, [r0]
   d6648:	4b09      	ldr	r3, [pc, #36]	; (d6670 <srand+0x44>)
   d664a:	6083      	str	r3, [r0, #8]
   d664c:	230b      	movs	r3, #11
   d664e:	8183      	strh	r3, [r0, #12]
   d6650:	2201      	movs	r2, #1
   d6652:	2300      	movs	r3, #0
   d6654:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6658:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d665a:	2200      	movs	r2, #0
   d665c:	611c      	str	r4, [r3, #16]
   d665e:	615a      	str	r2, [r3, #20]
   d6660:	bd38      	pop	{r3, r4, r5, pc}
   d6662:	bf00      	nop
   d6664:	2003e560 	.word	0x2003e560
   d6668:	abcd330e 	.word	0xabcd330e
   d666c:	e66d1234 	.word	0xe66d1234
   d6670:	0005deec 	.word	0x0005deec

000d6674 <rand>:
   d6674:	4b13      	ldr	r3, [pc, #76]	; (d66c4 <rand+0x50>)
   d6676:	b510      	push	{r4, lr}
   d6678:	681c      	ldr	r4, [r3, #0]
   d667a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d667c:	b97b      	cbnz	r3, d669e <rand+0x2a>
   d667e:	2018      	movs	r0, #24
   d6680:	f7fe f8f2 	bl	d4868 <malloc>
   d6684:	4a10      	ldr	r2, [pc, #64]	; (d66c8 <rand+0x54>)
   d6686:	4b11      	ldr	r3, [pc, #68]	; (d66cc <rand+0x58>)
   d6688:	63a0      	str	r0, [r4, #56]	; 0x38
   d668a:	e9c0 2300 	strd	r2, r3, [r0]
   d668e:	4b10      	ldr	r3, [pc, #64]	; (d66d0 <rand+0x5c>)
   d6690:	6083      	str	r3, [r0, #8]
   d6692:	230b      	movs	r3, #11
   d6694:	8183      	strh	r3, [r0, #12]
   d6696:	2201      	movs	r2, #1
   d6698:	2300      	movs	r3, #0
   d669a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d669e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d66a0:	480c      	ldr	r0, [pc, #48]	; (d66d4 <rand+0x60>)
   d66a2:	690a      	ldr	r2, [r1, #16]
   d66a4:	694b      	ldr	r3, [r1, #20]
   d66a6:	4c0c      	ldr	r4, [pc, #48]	; (d66d8 <rand+0x64>)
   d66a8:	4350      	muls	r0, r2
   d66aa:	fb04 0003 	mla	r0, r4, r3, r0
   d66ae:	fba2 3404 	umull	r3, r4, r2, r4
   d66b2:	1c5a      	adds	r2, r3, #1
   d66b4:	4404      	add	r4, r0
   d66b6:	f144 0000 	adc.w	r0, r4, #0
   d66ba:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d66be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d66c2:	bd10      	pop	{r4, pc}
   d66c4:	2003e560 	.word	0x2003e560
   d66c8:	abcd330e 	.word	0xabcd330e
   d66cc:	e66d1234 	.word	0xe66d1234
   d66d0:	0005deec 	.word	0x0005deec
   d66d4:	5851f42d 	.word	0x5851f42d
   d66d8:	4c957f2d 	.word	0x4c957f2d

000d66dc <strcmp>:
   d66dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d66e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d66e4:	2a01      	cmp	r2, #1
   d66e6:	bf28      	it	cs
   d66e8:	429a      	cmpcs	r2, r3
   d66ea:	d0f7      	beq.n	d66dc <strcmp>
   d66ec:	1ad0      	subs	r0, r2, r3
   d66ee:	4770      	bx	lr

000d66f0 <strlen>:
   d66f0:	4603      	mov	r3, r0
   d66f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66f6:	2a00      	cmp	r2, #0
   d66f8:	d1fb      	bne.n	d66f2 <strlen+0x2>
   d66fa:	1a18      	subs	r0, r3, r0
   d66fc:	3801      	subs	r0, #1
   d66fe:	4770      	bx	lr

000d6700 <strnlen>:
   d6700:	b510      	push	{r4, lr}
   d6702:	4602      	mov	r2, r0
   d6704:	4401      	add	r1, r0
   d6706:	428a      	cmp	r2, r1
   d6708:	4613      	mov	r3, r2
   d670a:	d101      	bne.n	d6710 <strnlen+0x10>
   d670c:	1a18      	subs	r0, r3, r0
   d670e:	bd10      	pop	{r4, pc}
   d6710:	781c      	ldrb	r4, [r3, #0]
   d6712:	3201      	adds	r2, #1
   d6714:	2c00      	cmp	r4, #0
   d6716:	d1f6      	bne.n	d6706 <strnlen+0x6>
   d6718:	e7f8      	b.n	d670c <strnlen+0xc>

000d671a <link_code_end>:
	...

000d671c <dynalib_user>:
   d671c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d672c:	0000 0000 6552 6563 7669 6465 6420 7461     ....Received dat
   d673c:	2061 7266 6d6f 203a 3025 5832 253a 3230     a from: %02X:%02
   d674c:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   d675c:	253a 3230 2058 000a 6325 5300 6174 7472     :%02X ..%c.Start
   d676c:	6e69 2067 7075 4220 454c 4320 6e6f 656e     ing up BLE Conne
   d677c:	7463 6f69 206e 000a 7241 6f67 206e 4c42     ction ..Argon BL
   d678c:	2045 6441 7264 7365 3a73 2520 0a73 3600     E Address: %s..6
   d679c:	3445 3030 3030 2d31 3542 3341 462d 3933     E400001-B5A3-F39
   d67ac:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d67bc:	3941 0045 4536 3034 3030 3230 422d 4135     A9E.6E400002-B5A
   d67cc:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   d67dc:	3432 4344 4143 4539 3600 3445 3030 3030     24DCCA9E.6E40000
   d67ec:	2d33 3542 3341 462d 3933 2d33 3045 3941     3-B5A3-F393-E0A9
   d67fc:	452d 3035 3245 4434 4343 3941 0045 7874     -E50E24DCCA9E.tx
   d680c:	7200 0078                                   .rx.

000d6810 <_ZTVN5spark13EthernetClassE>:
	...
   d6818:	4917 000d 490d 000d 4903 000d 48f9 000d     .I...I...I...H..
   d6828:	48ed 000d 48e1 000d 48d5 000d 48cd 000d     .H...H...H...H..
   d6838:	48c3 000d 48b9 000d 6279 000d 6977 6972     .H...H..yb..wiri
   d6848:	676e 622e 656c 5300 6174 7472 6420 7369     ng.ble.Start dis
   d6858:	6f63 6576 6972 676e 7320 7265 6976 6563     covering service
   d6868:	2e73 5000 6565 2072 6564 6976 6563 6920     s..Peer device i
   d6878:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   d6888:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   d6898:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   d68a8:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   d68b8:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   d68c8:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   d68d8:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   d68e8:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   d68f8:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   d6908:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   d6918:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   d6928:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000d6938 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6940:	4a59 000d 4ac3 000d 4abd 000d 4aed 000d     YJ...J...J...J..
   d6950:	4a5d 000d                                   ]J..

000d6954 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d695c:	4a55 000d 4ad1 000d 4a57 000d 4af1 000d     UJ...J..WJ...J..
   d696c:	4a7d 000d                                   }J..

000d6970 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6978:	4a53 000d 4adf 000d 5499 000d 4af5 000d     SJ...J...T...J..
   d6988:	4a9d 000d                                   .J..

000d698c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d6994:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d69a4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d69a4:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d69b4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d69b4:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d69c4:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d69d4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d69e4 <_ZTV9IPAddress>:
	...
   d69ec:	5e85 000d 5e75 000d 5e77 000d               .^..u^..w^..

000d69f8 <_ZTV9USBSerial>:
	...
   d6a00:	5f5b 000d 5fc3 000d 5f99 000d 5be1 000d     [_..._..._...[..
   d6a10:	5f8b 000d 5f5d 000d 5f6d 000d 5fbd 000d     ._..]_..m_..._..
   d6a20:	5f7d 000d 5f57 000d                         }_..W_..

000d6a28 <_ZTV11USARTSerial>:
	...
   d6a30:	606d 000d 60d9 000d 60b1 000d 5be1 000d     m`...`...`...[..
   d6a40:	6081 000d 609d 000d 608f 000d 60ab 000d     .`...`...`...`..
   d6a50:	606f 000d 6073 000d                         o`..s`..

000d6a58 <_ZTVN5spark9WiFiClassE>:
	...
   d6a60:	61f1 000d 61e7 000d 61dd 000d 6193 000d     .a...a...a...a..
   d6a70:	61d1 000d 61c5 000d 61b9 000d 61b1 000d     .a...a...a...a..
   d6a80:	61a7 000d 619d 000d 6279 000d               .a...a..yb..

000d6a8c <_ZTVN5spark12NetworkClassE>:
	...
   d6a94:	6211 000d 621b 000d 6225 000d 622f 000d     .b...b..%b../b..
   d6aa4:	6239 000d 6245 000d 6251 000d 625d 000d     9b..Eb..Qb..]b..
   d6ab4:	6265 000d 626f 000d 6279 000d               eb..ob..yb..

000d6ac0 <_ZTSSt19_Sp_make_shared_tag>:
   d6ac0:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d6ad0:	6572 5f64 6174 0067                         red_tag.

000d6ad8 <_ZTISt19_Sp_make_shared_tag>:
   d6ad8:	6b18 000d 6ac0 000d                         .k...j..

000d6ae0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6ae0:	6b78 000d 6aec 000d 6b9c 000d               xk...j...k..

000d6aec <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6aec:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d6afc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d6b0c:	0045 0000                                   E...

000d6b10 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6b10:	0000 0000 6ae0 000d 63bd 000d 63d1 000d     .....j...c...c..
   d6b20:	6565 000d 6565 000d 643b 000d 637d 000d     ee..ee..;d..}c..
   d6b30:	6423 000d 63e5 000d 63b1 000d               #d...c...c..

000d6b3c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6b3c:	6b78 000d 6b48 000d 6ae0 000d               xk..Hk...j..

000d6b48 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6b48:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d6b58:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d6b68:	666e 456f 0000 0000                         nfoE....

000d6b70 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6b70:	0000 0000 6b3c 000d 6465 000d 6479 000d     ....<k..ed..yd..
   d6b80:	6565 000d 6565 000d 643b 000d 637d 000d     ee..ee..;d..}c..
   d6b90:	6539 000d 64c5 000d 648d 000d               9e...d...d..

000d6b9c <_ZTISt9type_info>:
   d6b9c:	6b18 000d 6ba4 000d                         .k...k..

000d6ba4 <_ZTSSt9type_info>:
   d6ba4:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6bb1 <link_const_variable_data_end>:
   d6bb1:	00          	.byte	0x00
	...

000d6bb4 <link_constructors_location>:
   d6bb4:	000d4395 	.word	0x000d4395
   d6bb8:	000d4921 	.word	0x000d4921
   d6bbc:	000d4935 	.word	0x000d4935
   d6bc0:	000d5bb9 	.word	0x000d5bb9
   d6bc4:	000d5ced 	.word	0x000d5ced
   d6bc8:	000d5cfd 	.word	0x000d5cfd
   d6bcc:	000d5d35 	.word	0x000d5d35
   d6bd0:	000d61fd 	.word	0x000d61fd
   d6bd4:	000d634d 	.word	0x000d634d

000d6bd8 <link_constructors_end>:
	...

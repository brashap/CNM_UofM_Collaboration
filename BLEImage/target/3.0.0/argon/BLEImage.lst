
c:/Users/IoT_Instructor/Documents/jarvis/BLEImage/target/3.0.0/argon/BLEImage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7510  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e534  000d7514  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000254  2003e59c  2003e59c  0002e59c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d757c  000d757c  0002757c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75a4  000d75a4  000275a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00170eb6  00000000  00000000  000275a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015987  00000000  00000000  0019845e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003364b  00000000  00000000  001adde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cf0  00000000  00000000  001e1430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000090c8  00000000  00000000  001e4120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037452  00000000  00000000  001ed1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a379  00000000  00000000  0022463a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00122ee3  00000000  00000000  0025e9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d04  00000000  00000000  00381898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff4d 	bl	d6ecc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff6f 	bl	d6f1c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e534 	.word	0x2003e534
   d4048:	000d7514 	.word	0x000d7514
   d404c:	2003e59c 	.word	0x2003e59c
   d4050:	2003e59c 	.word	0x2003e59c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 fa75 	bl	d654c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d74e4 	.word	0x000d74e4
   d407c:	000d750c 	.word	0x000d750c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8d0 	b.w	d4224 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f967 	bl	d4358 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 ba1f 	b.w	d64d0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bec9 	b.w	d4e28 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bec7 	b.w	d4e28 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 becd 	b.w	d4e38 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 febf 	bl	d4e38 <free>
class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40be:	b40e      	push	{r1, r2, r3}
   d40c0:	b503      	push	{r0, r1, lr}
   d40c2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40cc:	f002 f97d 	bl	d63ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40d0:	b002      	add	sp, #8
   d40d2:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d6:	b003      	add	sp, #12
   d40d8:	4770      	bx	lr
	...

000d40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void loop() {

}

//onDataReceived is used to recieve data from Bluefruit Connect App
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d40e0:	b092      	sub	sp, #72	; 0x48
   d40e2:	4614      	mov	r4, r2
   d40e4:	460d      	mov	r5, r1
   d40e6:	4607      	mov	r7, r0
    //int pixelcount,pixelcolor;
    uint8_t i,j;
    int color;

    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d40e8:	f002 fb3a 	bl	d6760 <_Z16_fetch_usbserialv>
   d40ec:	4621      	mov	r1, r4
   d40ee:	4606      	mov	r6, r0
   d40f0:	a806      	add	r0, sp, #24
   d40f2:	f001 fb61 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d40f6:	2100      	movs	r1, #0
   d40f8:	a806      	add	r0, sp, #24
   d40fa:	f001 f904 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d40fe:	4621      	mov	r1, r4
   d4100:	9005      	str	r0, [sp, #20]
   d4102:	a808      	add	r0, sp, #32
   d4104:	f001 fb58 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d4108:	2101      	movs	r1, #1
   d410a:	a808      	add	r0, sp, #32
   d410c:	f001 f8fb 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d4110:	4621      	mov	r1, r4
   d4112:	9004      	str	r0, [sp, #16]
   d4114:	a80a      	add	r0, sp, #40	; 0x28
   d4116:	f001 fb4f 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d411a:	2102      	movs	r1, #2
   d411c:	a80a      	add	r0, sp, #40	; 0x28
   d411e:	f001 f8f2 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d4122:	4621      	mov	r1, r4
   d4124:	4680      	mov	r8, r0
   d4126:	a80c      	add	r0, sp, #48	; 0x30
   d4128:	f001 fb46 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d412c:	2103      	movs	r1, #3
   d412e:	a80c      	add	r0, sp, #48	; 0x30
   d4130:	f001 f8e9 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d4134:	4621      	mov	r1, r4
   d4136:	4681      	mov	r9, r0
   d4138:	a80e      	add	r0, sp, #56	; 0x38
   d413a:	f001 fb3d 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d413e:	2104      	movs	r1, #4
   d4140:	a80e      	add	r0, sp, #56	; 0x38
   d4142:	f001 f8e0 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d4146:	4621      	mov	r1, r4
   d4148:	4682      	mov	sl, r0
   d414a:	a810      	add	r0, sp, #64	; 0x40
   d414c:	f001 fb34 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d4150:	2105      	movs	r1, #5
   d4152:	a810      	add	r0, sp, #64	; 0x40
   d4154:	f001 f8d7 	bl	d5306 <_ZNK8particle10BleAddressixEh>
   d4158:	e9cd 8900 	strd	r8, r9, [sp]
   d415c:	e9cd a002 	strd	sl, r0, [sp, #8]
   d4160:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d4164:	4928      	ldr	r1, [pc, #160]	; (d4208 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
    for (i = 0; i < len; i++) {
        Serial.printf("%02X\n",data[i]);
   d4166:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d4218 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>
    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d416a:	4630      	mov	r0, r6
   d416c:	f7ff ffa7 	bl	d40be <_ZN5Print6printfEPKcz>
   d4170:	2400      	movs	r4, #0
    for (i = 0; i < len; i++) {
   d4172:	b2e6      	uxtb	r6, r4
   d4174:	42ae      	cmp	r6, r5
   d4176:	f104 0401 	add.w	r4, r4, #1
   d417a:	d206      	bcs.n	d418a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        Serial.printf("%02X\n",data[i]);
   d417c:	f002 faf0 	bl	d6760 <_Z16_fetch_usbserialv>
   d4180:	5dba      	ldrb	r2, [r7, r6]
   d4182:	4641      	mov	r1, r8
   d4184:	f7ff ff9b 	bl	d40be <_ZN5Print6printfEPKcz>
    for (i = 0; i < len; i++) {
   d4188:	e7f3      	b.n	d4172 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
    }
    Serial.printf("\n");
   d418a:	f002 fae9 	bl	d6760 <_Z16_fetch_usbserialv>
   d418e:	491f      	ldr	r1, [pc, #124]	; (d420c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)

    pixel.setBrightness(32);
    pixel.clear();
    for (i=0;i<64;i++) {
      j = 7+(i*3);
      memcpy(imgBuf,&data[j],3);
   d4190:	4d1f      	ldr	r5, [pc, #124]	; (d4210 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
      Serial.printf("1: 0x%02X, 2: 0x%02X, 3: 0x%02X\n",imgBuf[0],imgBuf[1],imgBuf[2]);
   d4192:	f8df 9088 	ldr.w	r9, [pc, #136]	; d421c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
      color = imgBuf[0]<<16 | imgBuf[1]<<8 | imgBuf[2];
      Serial.printf("byte %i, color %06X\n",i,color);
   d4196:	f8df 8088 	ldr.w	r8, [pc, #136]	; d4220 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
    Serial.printf("\n");
   d419a:	f7ff ff90 	bl	d40be <_ZN5Print6printfEPKcz>
    pixel.setBrightness(32);
   d419e:	481d      	ldr	r0, [pc, #116]	; (d4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d41a0:	2120      	movs	r1, #32
   d41a2:	f000 fbd1 	bl	d4948 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.clear();
   d41a6:	481b      	ldr	r0, [pc, #108]	; (d4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d41a8:	f000 fbf4 	bl	d4994 <_ZN17Adafruit_NeoPixel5clearEv>
   d41ac:	2600      	movs	r6, #0
      memcpy(imgBuf,&data[j],3);
   d41ae:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   d41b2:	1dfb      	adds	r3, r7, #7
   d41b4:	1899      	adds	r1, r3, r2
   d41b6:	5a9b      	ldrh	r3, [r3, r2]
   d41b8:	802b      	strh	r3, [r5, #0]
   d41ba:	788b      	ldrb	r3, [r1, #2]
   d41bc:	70ab      	strb	r3, [r5, #2]
      Serial.printf("1: 0x%02X, 2: 0x%02X, 3: 0x%02X\n",imgBuf[0],imgBuf[1],imgBuf[2]);
   d41be:	f002 facf 	bl	d6760 <_Z16_fetch_usbserialv>
   d41c2:	78ab      	ldrb	r3, [r5, #2]
   d41c4:	9300      	str	r3, [sp, #0]
   d41c6:	782a      	ldrb	r2, [r5, #0]
   d41c8:	786b      	ldrb	r3, [r5, #1]
   d41ca:	4649      	mov	r1, r9
   d41cc:	f7ff ff77 	bl	d40be <_ZN5Print6printfEPKcz>
      color = imgBuf[0]<<16 | imgBuf[1]<<8 | imgBuf[2];
   d41d0:	786c      	ldrb	r4, [r5, #1]
   d41d2:	782b      	ldrb	r3, [r5, #0]
   d41d4:	0224      	lsls	r4, r4, #8
   d41d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d41da:	78ab      	ldrb	r3, [r5, #2]
   d41dc:	431c      	orrs	r4, r3
      Serial.printf("byte %i, color %06X\n",i,color);
   d41de:	f002 fabf 	bl	d6760 <_Z16_fetch_usbserialv>
   d41e2:	4632      	mov	r2, r6
   d41e4:	4623      	mov	r3, r4
   d41e6:	4641      	mov	r1, r8
   d41e8:	f7ff ff69 	bl	d40be <_ZN5Print6printfEPKcz>
      pixel.setPixelColor(i,color);
   d41ec:	b2b1      	uxth	r1, r6
   d41ee:	4809      	ldr	r0, [pc, #36]	; (d4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d41f0:	4622      	mov	r2, r4
   d41f2:	3601      	adds	r6, #1
   d41f4:	f000 fb64 	bl	d48c0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (i=0;i<64;i++) {
   d41f8:	2e40      	cmp	r6, #64	; 0x40
   d41fa:	d1d8      	bne.n	d41ae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd2>
    }
    pixel.show();
   d41fc:	4805      	ldr	r0, [pc, #20]	; (d4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d41fe:	f000 f9b9 	bl	d4574 <_ZN17Adafruit_NeoPixel4showEv>
   d4202:	b012      	add	sp, #72	; 0x48
   d4204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4208:	000d6fc8 	.word	0x000d6fc8
   d420c:	000d6ffa 	.word	0x000d6ffa
   d4210:	2003e60c 	.word	0x2003e60c
   d4214:	2003e610 	.word	0x2003e610
   d4218:	000d7017 	.word	0x000d7017
   d421c:	000d6ffc 	.word	0x000d6ffc
   d4220:	000d701d 	.word	0x000d701d

000d4224 <setup>:
void setup() { 
   d4224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4228:	b08f      	sub	sp, #60	; 0x3c
    Serial.begin();
   d422a:	f002 fa99 	bl	d6760 <_Z16_fetch_usbserialv>
   d422e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4232:	f002 fa85 	bl	d6740 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4236:	2000      	movs	r0, #0
   d4238:	f000 fc0a 	bl	d4a50 <hal_timer_millis>
   d423c:	f04f 0900 	mov.w	r9, #0
   d4240:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4242:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4246:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4248:	2000      	movs	r0, #0
   d424a:	f000 fc01 	bl	d4a50 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d424e:	ebb0 0408 	subs.w	r4, r0, r8
   d4252:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4256:	42af      	cmp	r7, r5
   d4258:	bf08      	it	eq
   d425a:	42a6      	cmpeq	r6, r4
   d425c:	d307      	bcc.n	d426e <setup+0x4a>
    waitFor(Serial.isConnected, 15000);  
   d425e:	f002 fa7f 	bl	d6760 <_Z16_fetch_usbserialv>
   d4262:	f002 fa71 	bl	d6748 <_ZN9USBSerial11isConnectedEv>
   d4266:	b910      	cbnz	r0, d426e <setup+0x4a>
            spark_process();
   d4268:	f000 fdce 	bl	d4e08 <spark_process>
        while (_while() && !_condition()) {
   d426c:	e7ec      	b.n	d4248 <setup+0x24>
   d426e:	f002 fa77 	bl	d6760 <_Z16_fetch_usbserialv>
   d4272:	f002 fa69 	bl	d6748 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
   d4276:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d427a:	f002 f8ef 	bl	d645c <delay>
    BLE.on();
   d427e:	f001 fafd 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4282:	f001 fb49 	bl	d5918 <_ZNK8particle14BleLocalDevice2onEv>
    Serial.printf("Starting up BLE Connection \n");
   d4286:	f002 fa6b 	bl	d6760 <_Z16_fetch_usbserialv>
   d428a:	492d      	ldr	r1, [pc, #180]	; (d4340 <setup+0x11c>)
   d428c:	f7ff ff17 	bl	d40be <_ZN5Print6printfEPKcz>
    BLE.addCharacteristic(txCharacteristic);
   d4290:	f001 faf4 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4294:	4a2b      	ldr	r2, [pc, #172]	; (d4344 <setup+0x120>)
   d4296:	4601      	mov	r1, r0
   d4298:	a809      	add	r0, sp, #36	; 0x24
   d429a:	f001 ff25 	bl	d60e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d429e:	a809      	add	r0, sp, #36	; 0x24
   d42a0:	f001 fbc9 	bl	d5a36 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d42a4:	f001 faea 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42a8:	4a27      	ldr	r2, [pc, #156]	; (d4348 <setup+0x124>)
   d42aa:	4601      	mov	r1, r0
   d42ac:	a809      	add	r0, sp, #36	; 0x24
   d42ae:	f001 ff1b 	bl	d60e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42b2:	a809      	add	r0, sp, #36	; 0x24
   d42b4:	f001 fbbf 	bl	d5a36 <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   d42b8:	4924      	ldr	r1, [pc, #144]	; (d434c <setup+0x128>)
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f001 f8d2 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d42c0:	a904      	add	r1, sp, #16
   d42c2:	a809      	add	r0, sp, #36	; 0x24
   d42c4:	f001 f8ce 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42c8:	a809      	add	r0, sp, #36	; 0x24
   d42ca:	f001 f911 	bl	d54f0 <_ZNK8particle7BleUuid4typeEv>
   d42ce:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42d0:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42d2:	bb54      	cbnz	r4, d432a <setup+0x106>
            uint16_t uuid16 = tempUUID.shorted();
   d42d4:	f001 f92b 	bl	d552e <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42d8:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d42da:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42de:	2302      	movs	r3, #2
   d42e0:	481b      	ldr	r0, [pc, #108]	; (d4350 <setup+0x12c>)
   d42e2:	f10d 020e 	add.w	r2, sp, #14
   d42e6:	2103      	movs	r1, #3
   d42e8:	f001 f9ae 	bl	d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   d42ec:	f001 fac6 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42f0:	2200      	movs	r2, #0
   d42f2:	4917      	ldr	r1, [pc, #92]	; (d4350 <setup+0x12c>)
   d42f4:	f001 fb3f 	bl	d5976 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.printf("Argon BLE Address: %s\n",BLE.address().toString().c_str());
   d42f8:	f002 fa32 	bl	d6760 <_Z16_fetch_usbserialv>
   d42fc:	4604      	mov	r4, r0
   d42fe:	f001 fabd 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4302:	4601      	mov	r1, r0
   d4304:	a804      	add	r0, sp, #16
   d4306:	f001 fb0e 	bl	d5926 <_ZNK8particle14BleLocalDevice7addressEv>
   d430a:	a904      	add	r1, sp, #16
   d430c:	a809      	add	r0, sp, #36	; 0x24
   d430e:	2200      	movs	r2, #0
   d4310:	f001 f886 	bl	d5420 <_ZNK8particle10BleAddress8toStringEb>
   d4314:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4316:	490f      	ldr	r1, [pc, #60]	; (d4354 <setup+0x130>)
   d4318:	4620      	mov	r0, r4
   d431a:	f7ff fed0 	bl	d40be <_ZN5Print6printfEPKcz>
   d431e:	a809      	add	r0, sp, #36	; 0x24
   d4320:	f000 fe18 	bl	d4f54 <_ZN6StringD1Ev>
}
   d4324:	b00f      	add	sp, #60	; 0x3c
   d4326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d432a:	f001 f905 	bl	d5538 <_ZNK8particle7BleUuid8rawBytesEv>
   d432e:	2300      	movs	r3, #0
   d4330:	4602      	mov	r2, r0
   d4332:	9300      	str	r3, [sp, #0]
   d4334:	2107      	movs	r1, #7
   d4336:	2310      	movs	r3, #16
   d4338:	4805      	ldr	r0, [pc, #20]	; (d4350 <setup+0x12c>)
   d433a:	f001 f985 	bl	d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
   d433e:	e7d5      	b.n	d42ec <setup+0xc8>
   d4340:	000d7032 	.word	0x000d7032
   d4344:	2003e62c 	.word	0x2003e62c
   d4348:	2003e624 	.word	0x2003e624
   d434c:	2003e5ac 	.word	0x2003e5ac
   d4350:	2003e5e8 	.word	0x2003e5e8
   d4354:	000d704f 	.word	0x000d704f

000d4358 <loop>:
}
   d4358:	4770      	bx	lr

000d435a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d435a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d435c:	4616      	mov	r6, r2
   d435e:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4360:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4362:	e9c0 2200 	strd	r2, r2, [r0]
   d4366:	4604      	mov	r4, r0
   d4368:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d436a:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d436c:	4619      	mov	r1, r3
   d436e:	a806      	add	r0, sp, #24
   d4370:	f001 f878 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4374:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4376:	4638      	mov	r0, r7
   d4378:	f001 f874 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d437c:	7833      	ldrb	r3, [r6, #0]
   d437e:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4382:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4384:	9302      	str	r3, [sp, #8]
   d4386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4388:	4620      	mov	r0, r4
   d438a:	e9cd 7300 	strd	r7, r3, [sp]
   d438e:	aa05      	add	r2, sp, #20
   d4390:	ab06      	add	r3, sp, #24
   d4392:	4629      	mov	r1, r5
   d4394:	f001 fd86 	bl	d5ea4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4398:	4620      	mov	r0, r4
   d439a:	b011      	add	sp, #68	; 0x44
   d439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d43a0 <_GLOBAL__sub_I_txBuf>:
   d43a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43a4:	4d35      	ldr	r5, [pc, #212]	; (d447c <_GLOBAL__sub_I_txBuf+0xdc>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43a6:	f8df 8118 	ldr.w	r8, [pc, #280]	; d44c0 <_GLOBAL__sub_I_txBuf+0x120>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d43aa:	4c35      	ldr	r4, [pc, #212]	; (d4480 <_GLOBAL__sub_I_txBuf+0xe0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43ac:	4935      	ldr	r1, [pc, #212]	; (d4484 <_GLOBAL__sub_I_txBuf+0xe4>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43ae:	f8df 9114 	ldr.w	r9, [pc, #276]	; d44c4 <_GLOBAL__sub_I_txBuf+0x124>
   d43b2:	4e35      	ldr	r6, [pc, #212]	; (d4488 <_GLOBAL__sub_I_txBuf+0xe8>)
   d43b4:	4f35      	ldr	r7, [pc, #212]	; (d448c <_GLOBAL__sub_I_txBuf+0xec>)
   d43b6:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43b8:	4628      	mov	r0, r5
   d43ba:	f001 f939 	bl	d5630 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43be:	4934      	ldr	r1, [pc, #208]	; (d4490 <_GLOBAL__sub_I_txBuf+0xf0>)
   d43c0:	4640      	mov	r0, r8
   d43c2:	f001 f935 	bl	d5630 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d43c6:	4933      	ldr	r1, [pc, #204]	; (d4494 <_GLOBAL__sub_I_txBuf+0xf4>)
   d43c8:	4620      	mov	r0, r4
   d43ca:	f001 f931 	bl	d5630 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d43ce:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43d0:	4621      	mov	r1, r4
   d43d2:	a806      	add	r0, sp, #24
   d43d4:	f88d 3014 	strb.w	r3, [sp, #20]
   d43d8:	f001 f844 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
   d43dc:	4629      	mov	r1, r5
   d43de:	a80b      	add	r0, sp, #44	; 0x2c
   d43e0:	f001 f840 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
   d43e4:	2400      	movs	r4, #0
   d43e6:	ab0b      	add	r3, sp, #44	; 0x2c
   d43e8:	9300      	str	r3, [sp, #0]
   d43ea:	aa05      	add	r2, sp, #20
   d43ec:	ab06      	add	r3, sp, #24
   d43ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d43f2:	4929      	ldr	r1, [pc, #164]	; (d4498 <_GLOBAL__sub_I_txBuf+0xf8>)
   d43f4:	4648      	mov	r0, r9
   d43f6:	f7ff ffb0 	bl	d435a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d43fa:	4632      	mov	r2, r6
   d43fc:	4639      	mov	r1, r7
   d43fe:	4648      	mov	r0, r9
   d4400:	f002 fc2a 	bl	d6c58 <__aeabi_atexit>
   d4404:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4406:	4641      	mov	r1, r8
   d4408:	a806      	add	r0, sp, #24
   d440a:	f88d 3014 	strb.w	r3, [sp, #20]
   d440e:	f001 f829 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
   d4412:	4629      	mov	r1, r5
   d4414:	a80b      	add	r0, sp, #44	; 0x2c
   d4416:	f001 f825 	bl	d5464 <_ZN8particle7BleUuidC1ERKS0_>
   d441a:	4d20      	ldr	r5, [pc, #128]	; (d449c <_GLOBAL__sub_I_txBuf+0xfc>)
   d441c:	4b20      	ldr	r3, [pc, #128]	; (d44a0 <_GLOBAL__sub_I_txBuf+0x100>)
   d441e:	9301      	str	r3, [sp, #4]
   d4420:	ab0b      	add	r3, sp, #44	; 0x2c
   d4422:	9300      	str	r3, [sp, #0]
   d4424:	aa05      	add	r2, sp, #20
   d4426:	ab06      	add	r3, sp, #24
   d4428:	491e      	ldr	r1, [pc, #120]	; (d44a4 <_GLOBAL__sub_I_txBuf+0x104>)
   d442a:	9402      	str	r4, [sp, #8]
   d442c:	4628      	mov	r0, r5
   d442e:	f7ff ff94 	bl	d435a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4432:	4632      	mov	r2, r6
   d4434:	4639      	mov	r1, r7
   d4436:	4628      	mov	r0, r5
   d4438:	f002 fc0e 	bl	d6c58 <__aeabi_atexit>
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d443c:	4d1a      	ldr	r5, [pc, #104]	; (d44a8 <_GLOBAL__sub_I_txBuf+0x108>)
BleAdvertisingData data;
   d443e:	481b      	ldr	r0, [pc, #108]	; (d44ac <_GLOBAL__sub_I_txBuf+0x10c>)
   d4440:	f001 f90d 	bl	d565e <_ZN8particle18BleAdvertisingDataC1Ev>
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4444:	2302      	movs	r3, #2
   d4446:	461a      	mov	r2, r3
   d4448:	2164      	movs	r1, #100	; 0x64
   d444a:	4628      	mov	r0, r5
   d444c:	f000 f881 	bl	d4552 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4450:	4632      	mov	r2, r6
   d4452:	4917      	ldr	r1, [pc, #92]	; (d44b0 <_GLOBAL__sub_I_txBuf+0x110>)
   d4454:	4628      	mov	r0, r5
              error_(SYSTEM_ERROR_NONE) {
   d4456:	4d17      	ldr	r5, [pc, #92]	; (d44b4 <_GLOBAL__sub_I_txBuf+0x114>)
   d4458:	f002 fbfe 	bl	d6c58 <__aeabi_atexit>
    SleepResult() {}
   d445c:	4b16      	ldr	r3, [pc, #88]	; (d44b8 <_GLOBAL__sub_I_txBuf+0x118>)
   d445e:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4460:	602c      	str	r4, [r5, #0]
   d4462:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4464:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4466:	2002      	movs	r0, #2
   d4468:	f000 fc4a 	bl	d4d00 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC); //Using BLE and not Wifi
   d446c:	4913      	ldr	r1, [pc, #76]	; (d44bc <_GLOBAL__sub_I_txBuf+0x11c>)
   d446e:	4632      	mov	r2, r6
   d4470:	4628      	mov	r0, r5
   d4472:	f002 fbf1 	bl	d6c58 <__aeabi_atexit>
   d4476:	b011      	add	sp, #68	; 0x44
   d4478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d447c:	2003e5ac 	.word	0x2003e5ac
   d4480:	2003e5d4 	.word	0x2003e5d4
   d4484:	000d7066 	.word	0x000d7066
   d4488:	2003e59c 	.word	0x2003e59c
   d448c:	000d5a37 	.word	0x000d5a37
   d4490:	000d708b 	.word	0x000d708b
   d4494:	000d70b0 	.word	0x000d70b0
   d4498:	000d70d5 	.word	0x000d70d5
   d449c:	2003e624 	.word	0x2003e624
   d44a0:	000d40dd 	.word	0x000d40dd
   d44a4:	000d70d8 	.word	0x000d70d8
   d44a8:	2003e610 	.word	0x2003e610
   d44ac:	2003e5e8 	.word	0x2003e5e8
   d44b0:	000d44c9 	.word	0x000d44c9
   d44b4:	2003e5a0 	.word	0x2003e5a0
   d44b8:	ffff0000 	.word	0xffff0000
   d44bc:	000d40af 	.word	0x000d40af
   d44c0:	2003e5c0 	.word	0x2003e5c0
   d44c4:	2003e62c 	.word	0x2003e62c

000d44c8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d44c8:	b510      	push	{r4, lr}
   d44ca:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d44cc:	68c0      	ldr	r0, [r0, #12]
   d44ce:	b108      	cbz	r0, d44d4 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d44d0:	f000 fcb2 	bl	d4e38 <free>
  if (begun) pinMode(pin, INPUT);
   d44d4:	7823      	ldrb	r3, [r4, #0]
   d44d6:	b11b      	cbz	r3, d44e0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d44d8:	79e0      	ldrb	r0, [r4, #7]
   d44da:	2100      	movs	r1, #0
   d44dc:	f002 fb52 	bl	d6b84 <pinMode>
}
   d44e0:	4620      	mov	r0, r4
   d44e2:	bd10      	pop	{r4, pc}

000d44e4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44e4:	b538      	push	{r3, r4, r5, lr}
   d44e6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d44e8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44ea:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d44ec:	b108      	cbz	r0, d44f2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d44ee:	f000 fca3 	bl	d4e38 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d44f2:	79a3      	ldrb	r3, [r4, #6]
   d44f4:	2b06      	cmp	r3, #6
   d44f6:	bf0c      	ite	eq
   d44f8:	2004      	moveq	r0, #4
   d44fa:	2003      	movne	r0, #3
   d44fc:	fb10 f005 	smulbb	r0, r0, r5
   d4500:	b280      	uxth	r0, r0
   d4502:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4504:	f000 fc90 	bl	d4e28 <malloc>
   d4508:	60e0      	str	r0, [r4, #12]
   d450a:	b128      	cbz	r0, d4518 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d450c:	88a2      	ldrh	r2, [r4, #4]
   d450e:	2100      	movs	r1, #0
   d4510:	f002 fd04 	bl	d6f1c <memset>
    numLEDs = n;
   d4514:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d4516:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d4518:	80a0      	strh	r0, [r4, #4]
   d451a:	8060      	strh	r0, [r4, #2]
}
   d451c:	e7fb      	b.n	d4516 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d451e <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d451e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d4520:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4522:	4605      	mov	r5, r0
   d4524:	460c      	mov	r4, r1
    if (begun) {
   d4526:	b11b      	cbz	r3, d4530 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4528:	79c0      	ldrb	r0, [r0, #7]
   d452a:	2100      	movs	r1, #0
   d452c:	f002 fb2a 	bl	d6b84 <pinMode>
    }
    pin = p;
    if (begun) {
   d4530:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4532:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4534:	b15b      	cbz	r3, d454e <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4536:	b2a0      	uxth	r0, r4
   d4538:	2101      	movs	r1, #1
   d453a:	9001      	str	r0, [sp, #4]
   d453c:	f002 fb22 	bl	d6b84 <pinMode>
        digitalWrite(p, LOW);
   d4540:	9801      	ldr	r0, [sp, #4]
   d4542:	2100      	movs	r1, #0
    }
}
   d4544:	b003      	add	sp, #12
   d4546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d454a:	f002 bb2c 	b.w	d6ba6 <digitalWrite>
}
   d454e:	b003      	add	sp, #12
   d4550:	bd30      	pop	{r4, r5, pc}

000d4552 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4552:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4554:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4556:	4604      	mov	r4, r0
   d4558:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d455a:	7183      	strb	r3, [r0, #6]
   d455c:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4560:	7005      	strb	r5, [r0, #0]
   d4562:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d4564:	f7ff ffbe 	bl	d44e4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4568:	4620      	mov	r0, r4
   d456a:	4631      	mov	r1, r6
   d456c:	f7ff ffd7 	bl	d451e <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4570:	4620      	mov	r0, r4
   d4572:	bd70      	pop	{r4, r5, r6, pc}

000d4574 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4574:	68c3      	ldr	r3, [r0, #12]
   d4576:	2b00      	cmp	r3, #0
   d4578:	f000 818d 	beq.w	d4896 <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4580:	7983      	ldrb	r3, [r0, #6]
   d4582:	3b02      	subs	r3, #2
   d4584:	b2db      	uxtb	r3, r3
   d4586:	2b04      	cmp	r3, #4
   d4588:	bf9c      	itt	ls
   d458a:	4ac8      	ldrls	r2, [pc, #800]	; (d48ac <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d458c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4590:	b087      	sub	sp, #28
   d4592:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4594:	bf88      	it	hi
   d4596:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4598:	f000 fa4a 	bl	d4a30 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d459c:	692b      	ldr	r3, [r5, #16]
   d459e:	1ac0      	subs	r0, r0, r3
   d45a0:	42a0      	cmp	r0, r4
   d45a2:	d3f9      	bcc.n	d4598 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d45a4:	4ac2      	ldr	r2, [pc, #776]	; (d48b0 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d45a6:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d45a8:	ca07      	ldmia	r2, {r0, r1, r2}
   d45aa:	ac06      	add	r4, sp, #24
   d45ac:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d45b0:	9c03      	ldr	r4, [sp, #12]
   d45b2:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45b6:	b91a      	cbnz	r2, d45c0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45b8:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d45bc:	2a00      	cmp	r2, #0
   d45be:	db7c      	blt.n	d46ba <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d45c0:	9c04      	ldr	r4, [sp, #16]
   d45c2:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45c6:	b922      	cbnz	r2, d45d2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45c8:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d45cc:	2a00      	cmp	r2, #0
   d45ce:	f2c0 8152 	blt.w	d4876 <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d45d2:	9c05      	ldr	r4, [sp, #20]
   d45d4:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45d8:	2a00      	cmp	r2, #0
   d45da:	f000 8137 	beq.w	d484c <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45de:	4bb5      	ldr	r3, [pc, #724]	; (d48b4 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45e0:	48b5      	ldr	r0, [pc, #724]	; (d48b8 <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45e2:	681c      	ldr	r4, [r3, #0]
   d45e4:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45e6:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45e8:	011a      	lsls	r2, r3, #4
   d45ea:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d45ee:	5ca7      	ldrb	r7, [r4, r2]
   d45f0:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d45f2:	4cb2      	ldr	r4, [pc, #712]	; (d48bc <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45f4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d45f8:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d45fa:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45fc:	f003 031f 	and.w	r3, r3, #31
   d4600:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4604:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4606:	433a      	orrs	r2, r7
   d4608:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d460a:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d460c:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4610:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4614:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d4616:	2900      	cmp	r1, #0
   d4618:	d044      	beq.n	d46a4 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d461a:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d461e:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4620:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d4624:	f818 cb01 	ldrb.w	ip, [r8], #1
   d4628:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d462a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d462c:	6863      	ldr	r3, [r4, #4]
   d462e:	1a9b      	subs	r3, r3, r2
   d4630:	2b46      	cmp	r3, #70	; 0x46
   d4632:	d9fb      	bls.n	d462c <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d4634:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d4636:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d463a:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d463e:	ea43 0307 	orr.w	r3, r3, r7
   d4642:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d4646:	d02f      	beq.n	d46a8 <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4648:	6863      	ldr	r3, [r4, #4]
   d464a:	1a9b      	subs	r3, r3, r2
   d464c:	2b28      	cmp	r3, #40	; 0x28
   d464e:	d9fb      	bls.n	d4648 <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4650:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4654:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4656:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d465a:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d465e:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4662:	d1e3      	bne.n	d462c <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d4664:	88ab      	ldrh	r3, [r5, #4]
   d4666:	f10e 0e01 	add.w	lr, lr, #1
   d466a:	fa1f fe8e 	uxth.w	lr, lr
   d466e:	4573      	cmp	r3, lr
   d4670:	d8d8      	bhi.n	d4624 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d4672:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d4676:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d467a:	6863      	ldr	r3, [r4, #4]
   d467c:	1a9b      	subs	r3, r3, r2
   d467e:	2b46      	cmp	r3, #70	; 0x46
   d4680:	d9fb      	bls.n	d467a <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4682:	6863      	ldr	r3, [r4, #4]
   d4684:	eba3 0909 	sub.w	r9, r3, r9
   d4688:	4589      	cmp	r9, r1
   d468a:	f0c0 80d9 	bcc.w	d4840 <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d468e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4692:	f000 f9c5 	bl	d4a20 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d4696:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4698:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d469c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d46a0:	2900      	cmp	r1, #0
   d46a2:	d1ba      	bne.n	d461a <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d46a4:	460a      	mov	r2, r1
   d46a6:	e7e8      	b.n	d467a <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d46a8:	6863      	ldr	r3, [r4, #4]
   d46aa:	1a9b      	subs	r3, r3, r2
   d46ac:	2b11      	cmp	r3, #17
   d46ae:	d8cf      	bhi.n	d4650 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d46b0:	6863      	ldr	r3, [r4, #4]
   d46b2:	1a9b      	subs	r3, r3, r2
   d46b4:	2b11      	cmp	r3, #17
   d46b6:	d9f7      	bls.n	d46a8 <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d46b8:	e7ca      	b.n	d4650 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46ba:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46be:	2a00      	cmp	r2, #0
   d46c0:	f6bf af7e 	bge.w	d45c0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46c4:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46c8:	2a00      	cmp	r2, #0
   d46ca:	f6bf af79 	bge.w	d45c0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d46ce:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46d2:	2a00      	cmp	r2, #0
   d46d4:	f6bf af74 	bge.w	d45c0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d46d8:	011b      	lsls	r3, r3, #4
   d46da:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d46dc:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d46de:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d46e0:	f000 fba2 	bl	d4e28 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d46e4:	2800      	cmp	r0, #0
   d46e6:	f43f af7a 	beq.w	d45de <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d46ea:	88ab      	ldrh	r3, [r5, #4]
   d46ec:	2b00      	cmp	r3, #0
   d46ee:	f000 80da 	beq.w	d48a6 <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d46f2:	68ea      	ldr	r2, [r5, #12]
   d46f4:	3b01      	subs	r3, #1
   d46f6:	fa12 fe83 	uxtah	lr, r2, r3
   d46fa:	f102 3cff 	add.w	ip, r2, #4294967295
    uint16_t pos = 0; // bit position
   d46fe:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4700:	f248 0206 	movw	r2, #32774	; 0x8006
   d4704:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d4708:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d470c:	f017 0f80 	tst.w	r7, #128	; 0x80
   d4710:	bf0c      	ite	eq
   d4712:	4690      	moveq	r8, r2
   d4714:	4688      	movne	r8, r1
   d4716:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d471a:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d471e:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d4722:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4726:	bf0c      	ite	eq
   d4728:	4693      	moveq	fp, r2
   d472a:	468b      	movne	fp, r1
   d472c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d4730:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4734:	f017 0f20 	tst.w	r7, #32
        pos++;
   d4738:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d473c:	bf0c      	ite	eq
   d473e:	4692      	moveq	sl, r2
   d4740:	468a      	movne	sl, r1
   d4742:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d4746:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d474a:	f017 0f10 	tst.w	r7, #16
        pos++;
   d474e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4752:	bf0c      	ite	eq
   d4754:	4691      	moveq	r9, r2
   d4756:	4689      	movne	r9, r1
   d4758:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d475c:	f103 0904 	add.w	r9, r3, #4
   d4760:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4764:	f017 0f08 	tst.w	r7, #8
        pos++;
   d4768:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d476c:	bf0c      	ite	eq
   d476e:	4692      	moveq	sl, r2
   d4770:	468a      	movne	sl, r1
        pos++;
   d4772:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4776:	f017 0f04 	tst.w	r7, #4
   d477a:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d477e:	bf0c      	ite	eq
   d4780:	4691      	moveq	r9, r2
   d4782:	4689      	movne	r9, r1
   d4784:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4788:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d478c:	f017 0f02 	tst.w	r7, #2
        pos++;
   d4790:	fa1f f888 	uxth.w	r8, r8
   d4794:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4798:	bf0c      	ite	eq
   d479a:	4691      	moveq	r9, r2
   d479c:	4689      	movne	r9, r1
        pos++;
   d479e:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47a0:	07ff      	lsls	r7, r7, #31
   d47a2:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d47a6:	9601      	str	r6, [sp, #4]
   d47a8:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47aa:	d575      	bpl.n	d4898 <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d47ac:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47ae:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d47b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d47b6:	d1a7      	bne.n	d4708 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d47b8:	1c59      	adds	r1, r3, #1
   d47ba:	3302      	adds	r3, #2
   d47bc:	b289      	uxth	r1, r1
   d47be:	b29b      	uxth	r3, r3
   d47c0:	0049      	lsls	r1, r1, #1
   d47c2:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47c4:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d47c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d47ca:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47cc:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47ce:	4939      	ldr	r1, [pc, #228]	; (d48b4 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d47d0:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d47d2:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d47d4:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d47d8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d47dc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d47e0:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d47e4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d47e8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d47ec:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47f0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d47f4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d47f8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47fc:	79eb      	ldrb	r3, [r5, #7]
   d47fe:	680e      	ldr	r6, [r1, #0]
   d4800:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d4804:	0119      	lsls	r1, r3, #4
   d4806:	787b      	ldrb	r3, [r7, #1]
   d4808:	5c71      	ldrb	r1, [r6, r1]
   d480a:	f003 031f 	and.w	r3, r3, #31
   d480e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d4812:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4814:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d4818:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d481c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4820:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d4822:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4826:	2b00      	cmp	r3, #0
   d4828:	d0fb      	beq.n	d4822 <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d482a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d482c:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   d4830:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d4834:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4838:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d483c:	f000 fafc 	bl	d4e38 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4840:	f000 f8f6 	bl	d4a30 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4844:	6128      	str	r0, [r5, #16]
}
   d4846:	b007      	add	sp, #28
   d4848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d484c:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4850:	2a00      	cmp	r2, #0
   d4852:	f6bf aec4 	bge.w	d45de <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4856:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d485a:	2a00      	cmp	r2, #0
   d485c:	f6bf aebf 	bge.w	d45de <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4860:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4864:	2a00      	cmp	r2, #0
   d4866:	f6bf aeba 	bge.w	d45de <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d486a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d486e:	2a00      	cmp	r2, #0
   d4870:	f6bf aeb5 	bge.w	d45de <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d4874:	e730      	b.n	d46d8 <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4876:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d487a:	2a00      	cmp	r2, #0
   d487c:	f6bf aea9 	bge.w	d45d2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4880:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4884:	2a00      	cmp	r2, #0
   d4886:	f6bf aea4 	bge.w	d45d2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d488a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d488e:	2a00      	cmp	r2, #0
   d4890:	f6bf ae9f 	bge.w	d45d2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d4894:	e720      	b.n	d46d8 <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d4896:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d4898:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d489a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d489e:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d48a0:	f47f af32 	bne.w	d4708 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d48a4:	e788      	b.n	d47b8 <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d48a6:	2304      	movs	r3, #4
   d48a8:	2102      	movs	r1, #2
   d48aa:	e78b      	b.n	d47c4 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d48ac:	000d70e8 	.word	0x000d70e8
   d48b0:	000d70dc 	.word	0x000d70dc
   d48b4:	2003e634 	.word	0x2003e634
   d48b8:	e000edf0 	.word	0xe000edf0
   d48bc:	e0001000 	.word	0xe0001000

000d48c0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d48c0:	8843      	ldrh	r3, [r0, #2]
   d48c2:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d48c6:	d926      	bls.n	d4916 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d48c8:	7a05      	ldrb	r5, [r0, #8]
   d48ca:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d48ce:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d48d2:	b2d6      	uxtb	r6, r2
   d48d4:	b13d      	cbz	r5, d48e6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   d48d6:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d48d8:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d48da:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
   d48dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d48e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d48e4:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d48e6:	f890 c006 	ldrb.w	ip, [r0, #6]
   d48ea:	68c7      	ldr	r7, [r0, #12]
   d48ec:	f1bc 0f06 	cmp.w	ip, #6
   d48f0:	bf0c      	ite	eq
   d48f2:	2504      	moveq	r5, #4
   d48f4:	2503      	movne	r5, #3
   d48f6:	4369      	muls	r1, r5
   d48f8:	f1ac 0c02 	sub.w	ip, ip, #2
   d48fc:	187d      	adds	r5, r7, r1
    switch(type) {
   d48fe:	f1bc 0f06 	cmp.w	ip, #6
   d4902:	d81d      	bhi.n	d4940 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   d4904:	e8df f00c 	tbb	[pc, ip]
   d4908:	04081c04 	.word	0x04081c04
   d490c:	040f      	.short	0x040f
   d490e:	04          	.byte	0x04
   d490f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4910:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4912:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4914:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d4916:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   d4918:	2bfe      	cmp	r3, #254	; 0xfe
   d491a:	bf28      	it	cs
   d491c:	23fe      	movcs	r3, #254	; 0xfe
   d491e:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4920:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4922:	70ac      	strb	r4, [r5, #2]
        } break;
   d4924:	e7f7      	b.n	d4916 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
   d4926:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4928:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d492a:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d492c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   d492e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4930:	b913      	cbnz	r3, d4938 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   d4932:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4934:	70ea      	strb	r2, [r5, #3]
        } break;
   d4936:	e7ee      	b.n	d4916 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4938:	435a      	muls	r2, r3
   d493a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d493e:	e7f9      	b.n	d4934 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   d4940:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4942:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4944:	70ae      	strb	r6, [r5, #2]
}
   d4946:	e7e6      	b.n	d4916 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

000d4948 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4948:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   d494a:	1c4a      	adds	r2, r1, #1
   d494c:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d494e:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4950:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   d4952:	d01e      	beq.n	d4992 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d4954:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4956:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   d495a:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d495c:	d00c      	beq.n	d4978 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d495e:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4960:	bf1f      	itttt	ne
   d4962:	0211      	lslne	r1, r2, #8
   d4964:	f101 31ff 	addne.w	r1, r1, #4294967295
   d4968:	fbb1 f3f3 	udivne	r3, r1, r3
   d496c:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   d496e:	bf04      	itt	eq
   d4970:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d4974:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   d4978:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   d497a:	8886      	ldrh	r6, [r0, #4]
   d497c:	1b29      	subs	r1, r5, r4
   d497e:	b289      	uxth	r1, r1
   d4980:	428e      	cmp	r6, r1
   d4982:	d905      	bls.n	d4990 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   d4984:	7829      	ldrb	r1, [r5, #0]
   d4986:	4359      	muls	r1, r3
   d4988:	1209      	asrs	r1, r1, #8
   d498a:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   d498e:	e7f4      	b.n	d497a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   d4990:	7202      	strb	r2, [r0, #8]
  }
}
   d4992:	bd70      	pop	{r4, r5, r6, pc}

000d4994 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4994:	8882      	ldrh	r2, [r0, #4]
   d4996:	68c0      	ldr	r0, [r0, #12]
   d4998:	2100      	movs	r1, #0
   d499a:	f002 babf 	b.w	d6f1c <memset>
	...

000d49a0 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d49a0:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d49a2:	f000 f815 	bl	d49d0 <HAL_Pin_Map>
   d49a6:	4b01      	ldr	r3, [pc, #4]	; (d49ac <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d49a8:	6018      	str	r0, [r3, #0]
}
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	2003e634 	.word	0x2003e634

000d49b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <netdb_freeaddrinfo+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	689b      	ldr	r3, [r3, #8]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030268 	.word	0x00030268

000d49c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <netdb_getaddrinfo+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	68db      	ldr	r3, [r3, #12]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030268 	.word	0x00030268

000d49d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_Pin_Map+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	681b      	ldr	r3, [r3, #0]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003022c 	.word	0x0003022c

000d49e0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_Pin_Mode+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	689b      	ldr	r3, [r3, #8]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	0003022c 	.word	0x0003022c

000d49f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <HAL_Get_Pin_Mode+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	68db      	ldr	r3, [r3, #12]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	0003022c 	.word	0x0003022c

000d4a00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_GPIO_Write+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	691b      	ldr	r3, [r3, #16]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003022c 	.word	0x0003022c

000d4a10 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <HAL_RNG_GetRandomNumber+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	685b      	ldr	r3, [r3, #4]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030218 	.word	0x00030218

000d4a20 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_Delay_Microseconds+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	68db      	ldr	r3, [r3, #12]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030218 	.word	0x00030218

000d4a30 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	691b      	ldr	r3, [r3, #16]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030218 	.word	0x00030218

000d4a40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	695b      	ldr	r3, [r3, #20]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030218 	.word	0x00030218

000d4a50 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <hal_timer_millis+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030218 	.word	0x00030218

000d4a60 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <hal_ble_stack_init+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	689b      	ldr	r3, [r3, #8]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030278 	.word	0x00030278

000d4a70 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <hal_ble_gap_get_device_address+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	69db      	ldr	r3, [r3, #28]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030278 	.word	0x00030278

000d4a80 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <hal_ble_gap_set_advertising_data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030278 	.word	0x00030278

000d4a90 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <hal_ble_gap_set_scan_response_data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030278 	.word	0x00030278

000d4aa0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <hal_ble_gap_start_advertising+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030278 	.word	0x00030278

000d4ab0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b03      	ldr	r3, [pc, #12]	; (d4ac0 <hal_ble_gap_disconnect+0x10>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4aba:	9301      	str	r3, [sp, #4]
   d4abc:	bd08      	pop	{r3, pc}
   d4abe:	0000      	.short	0x0000
   d4ac0:	00030278 	.word	0x00030278

000d4ac4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b03      	ldr	r3, [pc, #12]	; (d4ad4 <hal_ble_gatt_server_add_service+0x10>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4ace:	9301      	str	r3, [sp, #4]
   d4ad0:	bd08      	pop	{r3, pc}
   d4ad2:	0000      	.short	0x0000
   d4ad4:	00030278 	.word	0x00030278

000d4ad8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b03      	ldr	r3, [pc, #12]	; (d4ae8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4ae2:	9301      	str	r3, [sp, #4]
   d4ae4:	bd08      	pop	{r3, pc}
   d4ae6:	0000      	.short	0x0000
   d4ae8:	00030278 	.word	0x00030278

000d4aec <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b03      	ldr	r3, [pc, #12]	; (d4afc <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4af6:	9301      	str	r3, [sp, #4]
   d4af8:	bd08      	pop	{r3, pc}
   d4afa:	0000      	.short	0x0000
   d4afc:	00030278 	.word	0x00030278

000d4b00 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <os_mutex_recursive_create+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030248 	.word	0x00030248

000d4b10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <os_mutex_recursive_destroy+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030248 	.word	0x00030248

000d4b20 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <os_mutex_recursive_lock+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030248 	.word	0x00030248

000d4b30 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <os_mutex_recursive_unlock+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030248 	.word	0x00030248

000d4b40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <inet_inet_ntop+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	695b      	ldr	r3, [r3, #20]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030264 	.word	0x00030264

000d4b50 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <hal_usart_init+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	681b      	ldr	r3, [r3, #0]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003023c 	.word	0x0003023c

000d4b60 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <hal_usart_write+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	68db      	ldr	r3, [r3, #12]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003023c 	.word	0x0003023c

000d4b70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <hal_usart_available+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	691b      	ldr	r3, [r3, #16]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003023c 	.word	0x0003023c

000d4b80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <hal_usart_read+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	695b      	ldr	r3, [r3, #20]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003023c 	.word	0x0003023c

000d4b90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <hal_usart_peek+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	699b      	ldr	r3, [r3, #24]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003023c 	.word	0x0003023c

000d4ba0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <hal_usart_flush+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	69db      	ldr	r3, [r3, #28]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003023c 	.word	0x0003023c

000d4bb0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <hal_usart_is_enabled+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6a1b      	ldr	r3, [r3, #32]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003023c 	.word	0x0003023c

000d4bc0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <hal_usart_available_data_for_write+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003023c 	.word	0x0003023c

000d4bd0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <hal_i2c_write+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6a1b      	ldr	r3, [r3, #32]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030228 	.word	0x00030228

000d4be0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <hal_i2c_available+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030228 	.word	0x00030228

000d4bf0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <hal_i2c_read+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030228 	.word	0x00030228

000d4c00 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <hal_i2c_peek+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030228 	.word	0x00030228

000d4c10 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <hal_i2c_flush+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030228 	.word	0x00030228

000d4c20 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <hal_i2c_is_enabled+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030228 	.word	0x00030228

000d4c30 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <hal_i2c_init+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030228 	.word	0x00030228

000d4c40 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <hal_spi_init+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	69db      	ldr	r3, [r3, #28]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030230 	.word	0x00030230

000d4c50 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <hal_spi_is_enabled+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6a1b      	ldr	r3, [r3, #32]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030230 	.word	0x00030230

000d4c60 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <HAL_USB_USART_Init+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	681b      	ldr	r3, [r3, #0]
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	0003024c 	.word	0x0003024c

000d4c70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <HAL_USB_USART_Begin+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	685b      	ldr	r3, [r3, #4]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	0003024c 	.word	0x0003024c

000d4c80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <HAL_USB_USART_Available_Data+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	691b      	ldr	r3, [r3, #16]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	0003024c 	.word	0x0003024c

000d4c90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	695b      	ldr	r3, [r3, #20]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	0003024c 	.word	0x0003024c

000d4ca0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <HAL_USB_USART_Receive_Data+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	699b      	ldr	r3, [r3, #24]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	0003024c 	.word	0x0003024c

000d4cb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <HAL_USB_USART_Send_Data+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	69db      	ldr	r3, [r3, #28]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	0003024c 	.word	0x0003024c

000d4cc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <HAL_USB_USART_Flush_Data+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6a1b      	ldr	r3, [r3, #32]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	0003024c 	.word	0x0003024c

000d4cd0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <HAL_USB_USART_Is_Connected+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	0003024c 	.word	0x0003024c

000d4ce0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <panic_+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030260 	.word	0x00030260

000d4cf0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <log_message+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030260 	.word	0x00030260

000d4d00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <set_system_mode+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	685b      	ldr	r3, [r3, #4]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030220 	.word	0x00030220

000d4d10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <system_delay_ms+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	695b      	ldr	r3, [r3, #20]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030220 	.word	0x00030220

000d4d20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b03      	ldr	r3, [pc, #12]	; (d4d30 <system_ctrl_set_app_request_handler+0x10>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4d2a:	9301      	str	r3, [sp, #4]
   d4d2c:	bd08      	pop	{r3, pc}
   d4d2e:	0000      	.short	0x0000
   d4d30:	00030220 	.word	0x00030220

000d4d34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b03      	ldr	r3, [pc, #12]	; (d4d44 <system_ctrl_set_result+0x10>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d3e:	9301      	str	r3, [sp, #4]
   d4d40:	bd08      	pop	{r3, pc}
   d4d42:	0000      	.short	0x0000
   d4d44:	00030220 	.word	0x00030220

000d4d48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <network_connect+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	685b      	ldr	r3, [r3, #4]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030240 	.word	0x00030240

000d4d58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <network_connecting+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	689b      	ldr	r3, [r3, #8]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030240 	.word	0x00030240

000d4d68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <network_disconnect+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	68db      	ldr	r3, [r3, #12]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030240 	.word	0x00030240

000d4d78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <network_ready+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	691b      	ldr	r3, [r3, #16]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030240 	.word	0x00030240

000d4d88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <network_on+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	695b      	ldr	r3, [r3, #20]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030240 	.word	0x00030240

000d4d98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <network_off+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	699b      	ldr	r3, [r3, #24]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030240 	.word	0x00030240

000d4da8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <network_listen+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	69db      	ldr	r3, [r3, #28]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	00030240 	.word	0x00030240

000d4db8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <network_listening+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	6a1b      	ldr	r3, [r3, #32]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030240 	.word	0x00030240

000d4dc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <network_set_listen_timeout+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030240 	.word	0x00030240

000d4dd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <network_get_listen_timeout+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030240 	.word	0x00030240

000d4de8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <network_is_on+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030240 	.word	0x00030240

000d4df8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <network_is_off+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030240 	.word	0x00030240

000d4e08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <spark_process+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	689b      	ldr	r3, [r3, #8]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030244 	.word	0x00030244

000d4e18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030244 	.word	0x00030244

000d4e28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <malloc+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	681b      	ldr	r3, [r3, #0]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003021c 	.word	0x0003021c

000d4e38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <free+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	685b      	ldr	r3, [r3, #4]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003021c 	.word	0x0003021c

000d4e48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <realloc+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	689b      	ldr	r3, [r3, #8]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003021c 	.word	0x0003021c

000d4e58 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <vsnprintf+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	0003021c 	.word	0x0003021c

000d4e68 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <abort+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003021c 	.word	0x0003021c

000d4e78 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <newlib_impure_ptr_callback+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003021c 	.word	0x0003021c

000d4e88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e88:	2200      	movs	r2, #0
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	4611      	mov	r1, r2
   d4e8e:	f7ff bf93 	b.w	d4db8 <network_listening>

000d4e92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4e92:	2200      	movs	r2, #0
   d4e94:	6840      	ldr	r0, [r0, #4]
   d4e96:	4611      	mov	r1, r2
   d4e98:	f7ff bf9e 	b.w	d4dd8 <network_get_listen_timeout>

000d4e9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4e9c:	6840      	ldr	r0, [r0, #4]
   d4e9e:	2200      	movs	r2, #0
   d4ea0:	f7ff bf92 	b.w	d4dc8 <network_set_listen_timeout>

000d4ea4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ea4:	6840      	ldr	r0, [r0, #4]
   d4ea6:	2200      	movs	r2, #0
   d4ea8:	f081 0101 	eor.w	r1, r1, #1
   d4eac:	f7ff bf7c 	b.w	d4da8 <network_listen>

000d4eb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4eb0:	2300      	movs	r3, #0
   d4eb2:	6840      	ldr	r0, [r0, #4]
   d4eb4:	461a      	mov	r2, r3
   d4eb6:	4619      	mov	r1, r3
   d4eb8:	f7ff bf6e 	b.w	d4d98 <network_off>

000d4ebc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	461a      	mov	r2, r3
   d4ec2:	4619      	mov	r1, r3
   d4ec4:	f7ff bf60 	b.w	d4d88 <network_on>

000d4ec8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ec8:	2200      	movs	r2, #0
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	4611      	mov	r1, r2
   d4ece:	f7ff bf53 	b.w	d4d78 <network_ready>

000d4ed2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ed2:	2200      	movs	r2, #0
   d4ed4:	6840      	ldr	r0, [r0, #4]
   d4ed6:	4611      	mov	r1, r2
   d4ed8:	f7ff bf3e 	b.w	d4d58 <network_connecting>

000d4edc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4edc:	6840      	ldr	r0, [r0, #4]
   d4ede:	2200      	movs	r2, #0
   d4ee0:	2102      	movs	r1, #2
   d4ee2:	f7ff bf41 	b.w	d4d68 <network_disconnect>

000d4ee6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ee6:	2300      	movs	r3, #0
   d4ee8:	6840      	ldr	r0, [r0, #4]
   d4eea:	461a      	mov	r2, r3
   d4eec:	f7ff bf2c 	b.w	d4d48 <network_connect>

000d4ef0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ef0:	4b02      	ldr	r3, [pc, #8]	; (d4efc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ef2:	2203      	movs	r2, #3
   d4ef4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ef6:	4a02      	ldr	r2, [pc, #8]	; (d4f00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ef8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4efa:	4770      	bx	lr
   d4efc:	2003e638 	.word	0x2003e638
   d4f00:	000d7104 	.word	0x000d7104

000d4f04 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4f04:	b510      	push	{r4, lr}
   d4f06:	4604      	mov	r4, r0
   d4f08:	4608      	mov	r0, r1
{
    _spi = spi;
   d4f0a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4f0c:	f7ff fe98 	bl	d4c40 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4f10:	2300      	movs	r3, #0
   d4f12:	6063      	str	r3, [r4, #4]
}
   d4f14:	4620      	mov	r0, r4
   d4f16:	bd10      	pop	{r4, pc}

000d4f18 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f18:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f1a:	4b09      	ldr	r3, [pc, #36]	; (d4f40 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f1c:	4c09      	ldr	r4, [pc, #36]	; (d4f44 <_GLOBAL__sub_I_System+0x2c>)
   d4f1e:	2202      	movs	r2, #2
   d4f20:	2000      	movs	r0, #0
   d4f22:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4f24:	4b08      	ldr	r3, [pc, #32]	; (d4f48 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4f26:	6020      	str	r0, [r4, #0]
   d4f28:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4f2a:	71a0      	strb	r0, [r4, #6]
   d4f2c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f2e:	f7ff fee7 	bl	d4d00 <set_system_mode>
SystemClass System;
   d4f32:	4620      	mov	r0, r4
   d4f34:	4a05      	ldr	r2, [pc, #20]	; (d4f4c <_GLOBAL__sub_I_System+0x34>)
   d4f36:	4906      	ldr	r1, [pc, #24]	; (d4f50 <_GLOBAL__sub_I_System+0x38>)
   d4f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4f3c:	f001 be8c 	b.w	d6c58 <__aeabi_atexit>
   d4f40:	2003e64c 	.word	0x2003e64c
   d4f44:	2003e640 	.word	0x2003e640
   d4f48:	ffff0000 	.word	0xffff0000
   d4f4c:	2003e59c 	.word	0x2003e59c
   d4f50:	000d40af 	.word	0x000d40af

000d4f54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f54:	b510      	push	{r4, lr}
   d4f56:	4604      	mov	r4, r0
{
	free(buffer);
   d4f58:	6800      	ldr	r0, [r0, #0]
   d4f5a:	f7ff ff6d 	bl	d4e38 <free>
}
   d4f5e:	4620      	mov	r0, r4
   d4f60:	bd10      	pop	{r4, pc}

000d4f62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f62:	b510      	push	{r4, lr}
   d4f64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f66:	6800      	ldr	r0, [r0, #0]
   d4f68:	b108      	cbz	r0, d4f6e <_ZN6String10invalidateEv+0xc>
   d4f6a:	f7ff ff65 	bl	d4e38 <free>
	buffer = NULL;
   d4f6e:	2300      	movs	r3, #0
	capacity = len = 0;
   d4f70:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4f74:	6023      	str	r3, [r4, #0]
}
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f78:	b538      	push	{r3, r4, r5, lr}
   d4f7a:	4604      	mov	r4, r0
   d4f7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f7e:	6800      	ldr	r0, [r0, #0]
   d4f80:	3101      	adds	r1, #1
   d4f82:	f7ff ff61 	bl	d4e48 <realloc>
	if (newbuffer) {
   d4f86:	b110      	cbz	r0, d4f8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f88:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4f8c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f8e:	bd38      	pop	{r3, r4, r5, pc}

000d4f90 <_ZN6String7reserveEj>:
{
   d4f90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f92:	6803      	ldr	r3, [r0, #0]
{
   d4f94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f96:	b123      	cbz	r3, d4fa2 <_ZN6String7reserveEj+0x12>
   d4f98:	6843      	ldr	r3, [r0, #4]
   d4f9a:	428b      	cmp	r3, r1
   d4f9c:	d301      	bcc.n	d4fa2 <_ZN6String7reserveEj+0x12>
   d4f9e:	2001      	movs	r0, #1
}
   d4fa0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	f7ff ffe8 	bl	d4f78 <_ZN6String12changeBufferEj>
   d4fa8:	2800      	cmp	r0, #0
   d4faa:	d0f9      	beq.n	d4fa0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4fac:	68a3      	ldr	r3, [r4, #8]
   d4fae:	2b00      	cmp	r3, #0
   d4fb0:	d1f5      	bne.n	d4f9e <_ZN6String7reserveEj+0xe>
   d4fb2:	6822      	ldr	r2, [r4, #0]
   d4fb4:	7013      	strb	r3, [r2, #0]
   d4fb6:	e7f2      	b.n	d4f9e <_ZN6String7reserveEj+0xe>

000d4fb8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4fba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4fbc:	4611      	mov	r1, r2
   d4fbe:	9201      	str	r2, [sp, #4]
{
   d4fc0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4fc2:	f7ff ffe5 	bl	d4f90 <_ZN6String7reserveEj>
   d4fc6:	9a01      	ldr	r2, [sp, #4]
   d4fc8:	b928      	cbnz	r0, d4fd6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4fca:	4620      	mov	r0, r4
   d4fcc:	f7ff ffc9 	bl	d4f62 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	b003      	add	sp, #12
   d4fd4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4fd6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fd8:	4629      	mov	r1, r5
   d4fda:	6820      	ldr	r0, [r4, #0]
   d4fdc:	f001 ff76 	bl	d6ecc <memcpy>
	buffer[len] = 0;
   d4fe0:	6822      	ldr	r2, [r4, #0]
   d4fe2:	68a3      	ldr	r3, [r4, #8]
   d4fe4:	2100      	movs	r1, #0
   d4fe6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4fe8:	e7f2      	b.n	d4fd0 <_ZN6String4copyEPKcj+0x18>

000d4fea <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4fea:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4fec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4fee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4ff2:	4604      	mov	r4, r0
	len = 0;
   d4ff4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ff6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4ff8:	b141      	cbz	r1, d500c <_ZN6StringC1EPKc+0x22>
   d4ffa:	4608      	mov	r0, r1
   d4ffc:	9101      	str	r1, [sp, #4]
   d4ffe:	f001 ffc3 	bl	d6f88 <strlen>
   d5002:	9901      	ldr	r1, [sp, #4]
   d5004:	4602      	mov	r2, r0
   d5006:	4620      	mov	r0, r4
   d5008:	f7ff ffd6 	bl	d4fb8 <_ZN6String4copyEPKcj>
}
   d500c:	4620      	mov	r0, r4
   d500e:	b002      	add	sp, #8
   d5010:	bd10      	pop	{r4, pc}

000d5012 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5012:	b513      	push	{r0, r1, r4, lr}
   d5014:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5016:	b159      	cbz	r1, d5030 <_ZN6StringaSEPKc+0x1e>
   d5018:	4608      	mov	r0, r1
   d501a:	9101      	str	r1, [sp, #4]
   d501c:	f001 ffb4 	bl	d6f88 <strlen>
   d5020:	9901      	ldr	r1, [sp, #4]
   d5022:	4602      	mov	r2, r0
   d5024:	4620      	mov	r0, r4
   d5026:	f7ff ffc7 	bl	d4fb8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d502a:	4620      	mov	r0, r4
   d502c:	b002      	add	sp, #8
   d502e:	bd10      	pop	{r4, pc}
	else invalidate();
   d5030:	f7ff ff97 	bl	d4f62 <_ZN6String10invalidateEv>
   d5034:	e7f9      	b.n	d502a <_ZN6StringaSEPKc+0x18>

000d5036 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5036:	4770      	bx	lr

000d5038 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d5038:	4770      	bx	lr

000d503a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d503a:	4770      	bx	lr

000d503c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d503c:	4770      	bx	lr
	...

000d5040 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5040:	4b06      	ldr	r3, [pc, #24]	; (d505c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5042:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5044:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5046:	f100 040c 	add.w	r4, r0, #12
	    ||
   d504a:	d005      	beq.n	d5058 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d504c:	4608      	mov	r0, r1
   d504e:	f001 fe0f 	bl	d6c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5052:	2800      	cmp	r0, #0
	return nullptr;
   d5054:	bf08      	it	eq
   d5056:	2400      	moveq	r4, #0
      }
   d5058:	4620      	mov	r0, r4
   d505a:	bd10      	pop	{r4, pc}
   d505c:	000d7280 	.word	0x000d7280

000d5060 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5060:	4b06      	ldr	r3, [pc, #24]	; (d507c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5062:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5064:	b510      	push	{r4, lr}
   d5066:	f100 040c 	add.w	r4, r0, #12
	    ||
   d506a:	d005      	beq.n	d5078 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d506c:	4608      	mov	r0, r1
   d506e:	f001 fdff 	bl	d6c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5072:	2800      	cmp	r0, #0
	return nullptr;
   d5074:	bf08      	it	eq
   d5076:	2400      	moveq	r4, #0
      }
   d5078:	4620      	mov	r0, r4
   d507a:	bd10      	pop	{r4, pc}
   d507c:	000d7280 	.word	0x000d7280

000d5080 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5080:	4b06      	ldr	r3, [pc, #24]	; (d509c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5082:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5084:	b510      	push	{r4, lr}
   d5086:	f100 040c 	add.w	r4, r0, #12
	    ||
   d508a:	d005      	beq.n	d5098 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d508c:	4608      	mov	r0, r1
   d508e:	f001 fdef 	bl	d6c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5092:	2800      	cmp	r0, #0
	return nullptr;
   d5094:	bf08      	it	eq
   d5096:	2400      	moveq	r4, #0
      }
   d5098:	4620      	mov	r0, r4
   d509a:	bd10      	pop	{r4, pc}
   d509c:	000d7280 	.word	0x000d7280

000d50a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d50a0:	b510      	push	{r4, lr}
   d50a2:	2168      	movs	r1, #104	; 0x68
   d50a4:	4604      	mov	r4, r0
   d50a6:	f001 fddc 	bl	d6c62 <_ZdlPvj>
   d50aa:	4620      	mov	r0, r4
   d50ac:	bd10      	pop	{r4, pc}

000d50ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d50ae:	b510      	push	{r4, lr}
   d50b0:	2128      	movs	r1, #40	; 0x28
   d50b2:	4604      	mov	r4, r0
   d50b4:	f001 fdd5 	bl	d6c62 <_ZdlPvj>
   d50b8:	4620      	mov	r0, r4
   d50ba:	bd10      	pop	{r4, pc}

000d50bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d50bc:	b510      	push	{r4, lr}
   d50be:	2130      	movs	r1, #48	; 0x30
   d50c0:	4604      	mov	r4, r0
   d50c2:	f001 fdce 	bl	d6c62 <_ZdlPvj>
   d50c6:	4620      	mov	r0, r4
   d50c8:	bd10      	pop	{r4, pc}

000d50ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d50ca:	f7fe bfe6 	b.w	d409a <_ZdlPv>

000d50ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d50ce:	f7fe bfe4 	b.w	d409a <_ZdlPv>

000d50d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d50d2:	f7fe bfe2 	b.w	d409a <_ZdlPv>

000d50d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50d6:	b510      	push	{r4, lr}
          _M_dispose();
   d50d8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50da:	4604      	mov	r4, r0
          _M_dispose();
   d50dc:	689b      	ldr	r3, [r3, #8]
   d50de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50e0:	68a3      	ldr	r3, [r4, #8]
   d50e2:	3b01      	subs	r3, #1
   d50e4:	60a3      	str	r3, [r4, #8]
   d50e6:	b92b      	cbnz	r3, d50f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d50e8:	6823      	ldr	r3, [r4, #0]
   d50ea:	4620      	mov	r0, r4
   d50ec:	68db      	ldr	r3, [r3, #12]
    }
   d50ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d50f2:	4718      	bx	r3
    }
   d50f4:	bd10      	pop	{r4, pc}

000d50f6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d50f6:	b510      	push	{r4, lr}
   d50f8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50fa:	6800      	ldr	r0, [r0, #0]
   d50fc:	b108      	cbz	r0, d5102 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50fe:	f7ff fd07 	bl	d4b10 <os_mutex_recursive_destroy>
    }
   d5102:	4620      	mov	r0, r4
   d5104:	bd10      	pop	{r4, pc}
	...

000d5108 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d5108:	b510      	push	{r4, lr}
        mutex_.lock();
   d510a:	4b04      	ldr	r3, [pc, #16]	; (d511c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d510c:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d510e:	6818      	ldr	r0, [r3, #0]
   d5110:	f7ff fd06 	bl	d4b20 <os_mutex_recursive_lock>
        locked_ = true;
   d5114:	2301      	movs	r3, #1
   d5116:	7023      	strb	r3, [r4, #0]
    }
   d5118:	bd10      	pop	{r4, pc}
   d511a:	bf00      	nop
   d511c:	2003e658 	.word	0x2003e658

000d5120 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d5120:	b510      	push	{r4, lr}
        mutex_.unlock();
   d5122:	4b04      	ldr	r3, [pc, #16]	; (d5134 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d5124:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5126:	6818      	ldr	r0, [r3, #0]
   d5128:	f7ff fd02 	bl	d4b30 <os_mutex_recursive_unlock>
        locked_ = false;
   d512c:	2300      	movs	r3, #0
   d512e:	7023      	strb	r3, [r4, #0]
    }
   d5130:	bd10      	pop	{r4, pc}
   d5132:	bf00      	nop
   d5134:	2003e658 	.word	0x2003e658

000d5138 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5138:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d513a:	2500      	movs	r5, #0
   d513c:	1cec      	adds	r4, r5, #3
   d513e:	428c      	cmp	r4, r1
   d5140:	d80d      	bhi.n	d515e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5142:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d5144:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d5146:	5d87      	ldrb	r7, [r0, r6]
   d5148:	4297      	cmp	r7, r2
   d514a:	d105      	bne.n	d5158 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d514c:	4426      	add	r6, r4
   d514e:	42b1      	cmp	r1, r6
   d5150:	d305      	bcc.n	d515e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d5152:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d5154:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5156:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d5158:	3401      	adds	r4, #1
   d515a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d515c:	e7ee      	b.n	d513c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d515e:	2000      	movs	r0, #0
   d5160:	e7f9      	b.n	d5156 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d5162 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5162:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5166:	4604      	mov	r4, r0
   d5168:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d516c:	461e      	mov	r6, r3
   d516e:	4689      	mov	r9, r1
   d5170:	ab01      	add	r3, sp, #4
   d5172:	4690      	mov	r8, r2
   d5174:	460a      	mov	r2, r1
   d5176:	6a01      	ldr	r1, [r0, #32]
   d5178:	f7ff ffde 	bl	d5138 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d517c:	6a25      	ldr	r5, [r4, #32]
   d517e:	1cb3      	adds	r3, r6, #2
   d5180:	bb17      	cbnz	r7, d51c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d5182:	b308      	cbz	r0, d51c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5184:	195f      	adds	r7, r3, r5
   d5186:	1a3f      	subs	r7, r7, r0
   d5188:	2f1f      	cmp	r7, #31
   d518a:	d819      	bhi.n	d51c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d518c:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5190:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5194:	eba5 0209 	sub.w	r2, r5, r9
   d5198:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d519a:	eb00 0109 	add.w	r1, r0, r9
   d519e:	eb06 000a 	add.w	r0, r6, sl
   d51a2:	b292      	uxth	r2, r2
   d51a4:	4421      	add	r1, r4
   d51a6:	4420      	add	r0, r4
   d51a8:	f001 fe9e 	bl	d6ee8 <memmove>
            selfData_[offset] = len + 1;
   d51ac:	1c73      	adds	r3, r6, #1
   d51ae:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d51b2:	4632      	mov	r2, r6
   d51b4:	4641      	mov	r1, r8
   d51b6:	eb04 000a 	add.w	r0, r4, sl
   d51ba:	f001 fe87 	bl	d6ecc <memcpy>
            selfLen_ = staLen + len + 2;
   d51be:	6227      	str	r7, [r4, #32]
}
   d51c0:	6a20      	ldr	r0, [r4, #32]
   d51c2:	b002      	add	sp, #8
   d51c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d51c8:	442b      	add	r3, r5
   d51ca:	2b1f      	cmp	r3, #31
   d51cc:	d8f8      	bhi.n	d51c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d51ce:	1c73      	adds	r3, r6, #1
   d51d0:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d51d2:	1ca8      	adds	r0, r5, #2
   d51d4:	4425      	add	r5, r4
   d51d6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d51d8:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d51da:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d51de:	4641      	mov	r1, r8
   d51e0:	4420      	add	r0, r4
   d51e2:	f001 fe73 	bl	d6ecc <memcpy>
        selfLen_ += len;
   d51e6:	6a23      	ldr	r3, [r4, #32]
   d51e8:	4433      	add	r3, r6
   d51ea:	6223      	str	r3, [r4, #32]
   d51ec:	e7e8      	b.n	d51c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d51f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d51f0:	4a02      	ldr	r2, [pc, #8]	; (d51fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d51f2:	2100      	movs	r1, #0
   d51f4:	200a      	movs	r0, #10
   d51f6:	f7ff bd73 	b.w	d4ce0 <panic_>
   d51fa:	bf00      	nop
   d51fc:	000d4a21 	.word	0x000d4a21

000d5200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5200:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5202:	b538      	push	{r3, r4, r5, lr}
   d5204:	4604      	mov	r4, r0
	  switch (__op)
   d5206:	d007      	beq.n	d5218 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d5208:	2a03      	cmp	r2, #3
   d520a:	d011      	beq.n	d5230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d520c:	2a01      	cmp	r2, #1
   d520e:	d101      	bne.n	d5214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5210:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d5212:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5214:	2000      	movs	r0, #0
   d5216:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5218:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d521a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d521c:	f7fe ff39 	bl	d4092 <_Znwj>
   d5220:	4603      	mov	r3, r0
   d5222:	2800      	cmp	r0, #0
   d5224:	d0f5      	beq.n	d5212 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d5226:	e895 0003 	ldmia.w	r5, {r0, r1}
   d522a:	e883 0003 	stmia.w	r3, {r0, r1}
   d522e:	e7f0      	b.n	d5212 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d5230:	6800      	ldr	r0, [r0, #0]
   d5232:	2800      	cmp	r0, #0
   d5234:	d0ee      	beq.n	d5214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d5236:	2108      	movs	r1, #8
   d5238:	f001 fd13 	bl	d6c62 <_ZdlPvj>
   d523c:	e7ea      	b.n	d5214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d523e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d523e:	b430      	push	{r4, r5}
   d5240:	460d      	mov	r5, r1
   d5242:	4611      	mov	r1, r2
   d5244:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d5246:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5248:	6809      	ldr	r1, [r1, #0]
   d524a:	6828      	ldr	r0, [r5, #0]
   d524c:	e9d3 4300 	ldrd	r4, r3, [r3]
   d5250:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d5252:	bc30      	pop	{r4, r5}
   d5254:	4760      	bx	ip

000d5256 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d5256:	b530      	push	{r4, r5, lr}
   d5258:	3801      	subs	r0, #1
   d525a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   d525e:	4613      	mov	r3, r2
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d5260:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   d5264:	0924      	lsrs	r4, r4, #4
    char hex_digit = nibble + 48;
   d5266:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d526a:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d526c:	bf88      	it	hi
   d526e:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   d5272:	f803 5b02 	strb.w	r5, [r3], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   d5276:	7804      	ldrb	r4, [r0, #0]
   d5278:	f004 040f 	and.w	r4, r4, #15
    char hex_digit = nibble + 48;
   d527c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5280:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5282:	bf88      	it	hi
   d5284:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    for (i = 0; i < len; ++i)
   d5288:	4299      	cmp	r1, r3
    *p++ = ascii_nibble(nibble);
   d528a:	f803 5c01 	strb.w	r5, [r3, #-1]
    for (i = 0; i < len; ++i)
   d528e:	d1e7      	bne.n	d5260 <_ZL12bytes2hexbufPKhjPc+0xa>
    }
    return result;
}
   d5290:	4610      	mov	r0, r2
   d5292:	bd30      	pop	{r4, r5, pc}

000d5294 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5294:	b510      	push	{r4, lr}
      if (_M_manager)
   d5296:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5298:	4604      	mov	r4, r0
      if (_M_manager)
   d529a:	b113      	cbz	r3, d52a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d529c:	2203      	movs	r2, #3
   d529e:	4601      	mov	r1, r0
   d52a0:	4798      	blx	r3
    }
   d52a2:	4620      	mov	r0, r4
   d52a4:	bd10      	pop	{r4, pc}

000d52a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d52a6:	b510      	push	{r4, lr}
   d52a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52aa:	3058      	adds	r0, #88	; 0x58
   d52ac:	f7ff fff2 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d52b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d52b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d52b8:	f7ff be4c 	b.w	d4f54 <_ZN6StringD1Ev>

000d52bc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d52bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d52c0:	b2da      	uxtb	r2, r3
   d52c2:	2a09      	cmp	r2, #9
   d52c4:	d801      	bhi.n	d52ca <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d52c6:	4618      	mov	r0, r3
   d52c8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d52ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d52ce:	2b05      	cmp	r3, #5
   d52d0:	d801      	bhi.n	d52d6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d52d2:	3857      	subs	r0, #87	; 0x57
   d52d4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d52d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d52da:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d52dc:	bf94      	ite	ls
   d52de:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d52e0:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d52e4:	4770      	bx	lr

000d52e6 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d52e6:	b510      	push	{r4, lr}
            locked_(false) {
   d52e8:	2300      	movs	r3, #0
    WiringBleLock() :
   d52ea:	4604      	mov	r4, r0
            locked_(false) {
   d52ec:	7003      	strb	r3, [r0, #0]
        lock();
   d52ee:	f7ff ff0b 	bl	d5108 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d52f2:	4620      	mov	r0, r4
   d52f4:	bd10      	pop	{r4, pc}

000d52f6 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d52f6:	b510      	push	{r4, lr}
        if (locked_) {
   d52f8:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d52fa:	4604      	mov	r4, r0
        if (locked_) {
   d52fc:	b10b      	cbz	r3, d5302 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d52fe:	f7ff ff0f 	bl	d5120 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d5302:	4620      	mov	r0, r4
   d5304:	bd10      	pop	{r4, pc}

000d5306 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   d5306:	2905      	cmp	r1, #5
    return address_.addr[i];
   d5308:	bf94      	ite	ls
   d530a:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   d530c:	2000      	movhi	r0, #0
}
   d530e:	4770      	bx	lr

000d5310 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d5310:	b082      	sub	sp, #8
   d5312:	4603      	mov	r3, r0
    address_ = addr;
   d5314:	6808      	ldr	r0, [r1, #0]
   d5316:	6849      	ldr	r1, [r1, #4]
   d5318:	466a      	mov	r2, sp
   d531a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d531c:	466a      	mov	r2, sp
   d531e:	ca03      	ldmia	r2!, {r0, r1}
   d5320:	6018      	str	r0, [r3, #0]
}
   d5322:	4618      	mov	r0, r3
    address_ = addr.address_;
   d5324:	6059      	str	r1, [r3, #4]
}
   d5326:	b002      	add	sp, #8
   d5328:	4770      	bx	lr

000d532a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d532a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d532c:	7982      	ldrb	r2, [r0, #6]
   d532e:	798b      	ldrb	r3, [r1, #6]
   d5330:	429a      	cmp	r2, r3
   d5332:	d106      	bne.n	d5342 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5334:	2206      	movs	r2, #6
   d5336:	f001 fdbb 	bl	d6eb0 <memcmp>
   d533a:	fab0 f080 	clz	r0, r0
   d533e:	0940      	lsrs	r0, r0, #5
}
   d5340:	bd08      	pop	{r3, pc}
    return false;
   d5342:	2000      	movs	r0, #0
   d5344:	e7fc      	b.n	d5340 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d5346 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d5346:	f04f 33ff 	mov.w	r3, #4294967295
   d534a:	6003      	str	r3, [r0, #0]
   d534c:	8083      	strh	r3, [r0, #4]
}
   d534e:	2000      	movs	r0, #0
   d5350:	4770      	bx	lr

000d5352 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d5352:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d5354:	b508      	push	{r3, lr}
        : address_{} {
   d5356:	6001      	str	r1, [r0, #0]
   d5358:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d535a:	4602      	mov	r2, r0
    clear();
   d535c:	f7ff fff3 	bl	d5346 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d5360:	7191      	strb	r1, [r2, #6]
}
   d5362:	4610      	mov	r0, r2
   d5364:	bd08      	pop	{r3, pc}

000d5366 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d5366:	b510      	push	{r4, lr}
   d5368:	1d43      	adds	r3, r0, #5
   d536a:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   d536c:	781c      	ldrb	r4, [r3, #0]
   d536e:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d5372:	4283      	cmp	r3, r0
   d5374:	f103 33ff 	add.w	r3, r3, #4294967295
   d5378:	d1f8      	bne.n	d536c <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   d537a:	bd10      	pop	{r4, pc}

000d537c <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d537c:	b570      	push	{r4, r5, r6, lr}
   d537e:	4614      	mov	r4, r2
   d5380:	b088      	sub	sp, #32
   d5382:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   d5384:	460d      	mov	r5, r1
   d5386:	2900      	cmp	r1, #0
   d5388:	d048      	beq.n	d541c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   d538a:	b1a4      	cbz	r4, d53b6 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   d538c:	a901      	add	r1, sp, #4
   d538e:	f7ff ffea 	bl	d5366 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   d5392:	b19a      	cbz	r2, d53bc <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5394:	aa03      	add	r2, sp, #12
   d5396:	2106      	movs	r1, #6
   d5398:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   d539a:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d539c:	f7ff ff5b 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
    len = std::min(len - 1, sizeof(cStr));
   d53a0:	2e11      	cmp	r6, #17
   d53a2:	bf28      	it	cs
   d53a4:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   d53a6:	4632      	mov	r2, r6
   d53a8:	a903      	add	r1, sp, #12
   d53aa:	4628      	mov	r0, r5
   d53ac:	f001 fd8e 	bl	d6ecc <memcpy>
    buf[len++] = '\0';
   d53b0:	2300      	movs	r3, #0
   d53b2:	55ab      	strb	r3, [r5, r6]
   d53b4:	1c74      	adds	r4, r6, #1
}
   d53b6:	4620      	mov	r0, r4
   d53b8:	b008      	add	sp, #32
   d53ba:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d53bc:	aa03      	add	r2, sp, #12
   d53be:	2101      	movs	r1, #1
   d53c0:	a801      	add	r0, sp, #4
   d53c2:	f7ff ff48 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2] = ':';
   d53c6:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d53c8:	f10d 020f 	add.w	r2, sp, #15
   d53cc:	2101      	movs	r1, #1
   d53ce:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   d53d2:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d53d6:	f7ff ff3e 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d53da:	f10d 0212 	add.w	r2, sp, #18
   d53de:	2101      	movs	r1, #1
   d53e0:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   d53e4:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d53e8:	f7ff ff35 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d53ec:	f10d 0215 	add.w	r2, sp, #21
   d53f0:	2101      	movs	r1, #1
   d53f2:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   d53f6:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d53fa:	f7ff ff2c 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d53fe:	aa06      	add	r2, sp, #24
   d5400:	2101      	movs	r1, #1
   d5402:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   d5404:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5408:	f7ff ff25 	bl	d5256 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2 + 4] = ':';
   d540c:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d5410:	f10d 021b 	add.w	r2, sp, #27
   d5414:	2101      	movs	r1, #1
   d5416:	f10d 0009 	add.w	r0, sp, #9
   d541a:	e7be      	b.n	d539a <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   d541c:	460c      	mov	r4, r1
   d541e:	e7ca      	b.n	d53b6 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000d5420 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   d5420:	b510      	push	{r4, lr}
   d5422:	b086      	sub	sp, #24
   d5424:	4604      	mov	r4, r0
   d5426:	4613      	mov	r3, r2
   d5428:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   d542a:	2212      	movs	r2, #18
   d542c:	a901      	add	r1, sp, #4
   d542e:	f7ff ffa5 	bl	d537c <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d5432:	a901      	add	r1, sp, #4
   d5434:	4620      	mov	r0, r4
   d5436:	f7ff fdd8 	bl	d4fea <_ZN6StringC1EPKc>
}
   d543a:	4620      	mov	r0, r4
   d543c:	b006      	add	sp, #24
   d543e:	bd10      	pop	{r4, pc}

000d5440 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d5440:	2201      	movs	r2, #1
   d5442:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5444:	4a06      	ldr	r2, [pc, #24]	; (d5460 <_ZN8particle7BleUuidC1Ev+0x20>)
   d5446:	6811      	ldr	r1, [r2, #0]
   d5448:	6001      	str	r1, [r0, #0]
   d544a:	6851      	ldr	r1, [r2, #4]
   d544c:	6041      	str	r1, [r0, #4]
   d544e:	8911      	ldrh	r1, [r2, #8]
   d5450:	7a92      	ldrb	r2, [r2, #10]
   d5452:	7282      	strb	r2, [r0, #10]
   d5454:	2200      	movs	r2, #0
   d5456:	8101      	strh	r1, [r0, #8]
   d5458:	f8c0 200b 	str.w	r2, [r0, #11]
   d545c:	73c2      	strb	r2, [r0, #15]
}
   d545e:	4770      	bx	lr
   d5460:	000d7288 	.word	0x000d7288

000d5464 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d5464:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d5466:	690b      	ldr	r3, [r1, #16]
   d5468:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d546a:	f101 0210 	add.w	r2, r1, #16
   d546e:	4603      	mov	r3, r0
   d5470:	f851 4b04 	ldr.w	r4, [r1], #4
   d5474:	f843 4b04 	str.w	r4, [r3], #4
   d5478:	4291      	cmp	r1, r2
   d547a:	d1f9      	bne.n	d5470 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d547c:	bd10      	pop	{r4, pc}

000d547e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d547e:	b510      	push	{r4, lr}
    if (uuid128) {
   d5480:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5482:	4604      	mov	r4, r0
    if (uuid128) {
   d5484:	b1b1      	cbz	r1, d54b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d5486:	2a01      	cmp	r2, #1
   d5488:	f101 0210 	add.w	r2, r1, #16
   d548c:	d10a      	bne.n	d54a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d548e:	4601      	mov	r1, r0
   d5490:	f853 0b04 	ldr.w	r0, [r3], #4
   d5494:	f841 0b04 	str.w	r0, [r1], #4
   d5498:	4293      	cmp	r3, r2
   d549a:	d1f9      	bne.n	d5490 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d549c:	2301      	movs	r3, #1
   d549e:	6123      	str	r3, [r4, #16]
}
   d54a0:	4620      	mov	r0, r4
   d54a2:	bd10      	pop	{r4, pc}
   d54a4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d54a6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d54aa:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d54ae:	429a      	cmp	r2, r3
   d54b0:	d1f9      	bne.n	d54a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d54b2:	e7f3      	b.n	d549c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d54b4:	2210      	movs	r2, #16
   d54b6:	f001 fd31 	bl	d6f1c <memset>
   d54ba:	e7f1      	b.n	d54a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d54bc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d54bc:	b538      	push	{r3, r4, r5, lr}
   d54be:	4604      	mov	r4, r0
   d54c0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d54c2:	461a      	mov	r2, r3
   d54c4:	f7ff ffdb 	bl	d547e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d54c8:	81a5      	strh	r5, [r4, #12]
}
   d54ca:	4620      	mov	r0, r4
   d54cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54d0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d54d0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d54d2:	6902      	ldr	r2, [r0, #16]
   d54d4:	b922      	cbnz	r2, d54e0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d54d6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d54d8:	3800      	subs	r0, #0
   d54da:	bf18      	it	ne
   d54dc:	2001      	movne	r0, #1
}
   d54de:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d54e0:	4902      	ldr	r1, [pc, #8]	; (d54ec <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d54e2:	2210      	movs	r2, #16
   d54e4:	f001 fce4 	bl	d6eb0 <memcmp>
   d54e8:	e7f6      	b.n	d54d8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d54ea:	bf00      	nop
   d54ec:	000d72a8 	.word	0x000d72a8

000d54f0 <_ZNK8particle7BleUuid4typeEv>:
}
   d54f0:	6900      	ldr	r0, [r0, #16]
   d54f2:	4770      	bx	lr

000d54f4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d54f4:	b538      	push	{r3, r4, r5, lr}
   d54f6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d54f8:	2214      	movs	r2, #20
   d54fa:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d54fc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d54fe:	f001 fd0d 	bl	d6f1c <memset>
    if (type_ == BleUuidType::SHORT) {
   d5502:	6923      	ldr	r3, [r4, #16]
   d5504:	b93b      	cbnz	r3, d5516 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d5506:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d5508:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d550a:	7b23      	ldrb	r3, [r4, #12]
   d550c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5510:	802b      	strh	r3, [r5, #0]
}
   d5512:	4628      	mov	r0, r5
   d5514:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d5516:	2301      	movs	r3, #1
   d5518:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d551a:	f104 0210 	add.w	r2, r4, #16
   d551e:	462b      	mov	r3, r5
   d5520:	f854 1b04 	ldr.w	r1, [r4], #4
   d5524:	f843 1b04 	str.w	r1, [r3], #4
   d5528:	4294      	cmp	r4, r2
   d552a:	d1f9      	bne.n	d5520 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d552c:	e7f1      	b.n	d5512 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d552e <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d552e:	7b42      	ldrb	r2, [r0, #13]
   d5530:	7b00      	ldrb	r0, [r0, #12]
}
   d5532:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d5536:	4770      	bx	lr

000d5538 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d5538:	4770      	bx	lr

000d553a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d553a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d553c:	6902      	ldr	r2, [r0, #16]
   d553e:	690b      	ldr	r3, [r1, #16]
   d5540:	429a      	cmp	r2, r3
   d5542:	d106      	bne.n	d5552 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5544:	2210      	movs	r2, #16
   d5546:	f001 fcb3 	bl	d6eb0 <memcmp>
   d554a:	fab0 f080 	clz	r0, r0
   d554e:	0940      	lsrs	r0, r0, #5
}
   d5550:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5552:	2000      	movs	r0, #0
   d5554:	e7fc      	b.n	d5550 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d5558 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d5558:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d555a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d555e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5560:	4b32      	ldr	r3, [pc, #200]	; (d562c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d5562:	681a      	ldr	r2, [r3, #0]
   d5564:	6002      	str	r2, [r0, #0]
   d5566:	685a      	ldr	r2, [r3, #4]
   d5568:	6042      	str	r2, [r0, #4]
   d556a:	2500      	movs	r5, #0
   d556c:	891a      	ldrh	r2, [r3, #8]
   d556e:	7a9b      	ldrb	r3, [r3, #10]
   d5570:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d5572:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5574:	7283      	strb	r3, [r0, #10]
   d5576:	f8c0 500b 	str.w	r5, [r0, #11]
   d557a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d557c:	460e      	mov	r6, r1
   d557e:	b321      	cbz	r1, d55ca <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5580:	2124      	movs	r1, #36	; 0x24
   d5582:	4630      	mov	r0, r6
   d5584:	f001 fd08 	bl	d6f98 <strnlen>
   d5588:	2804      	cmp	r0, #4
   d558a:	d121      	bne.n	d55d0 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d558c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5590:	af01      	add	r7, sp, #4
   d5592:	1cb5      	adds	r5, r6, #2
   d5594:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5596:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d559a:	f7ff fe8f 	bl	d52bc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d559e:	f1b0 0800 	subs.w	r8, r0, #0
   d55a2:	db10      	blt.n	d55c6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d55a4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d55a8:	f7ff fe88 	bl	d52bc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d55ac:	2800      	cmp	r0, #0
   d55ae:	db0a      	blt.n	d55c6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d55b0:	3502      	adds	r5, #2
   d55b2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d55b6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d55b8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d55bc:	d1eb      	bne.n	d5596 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d55be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d55c2:	ba5b      	rev16	r3, r3
   d55c4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d55c6:	2300      	movs	r3, #0
   d55c8:	6123      	str	r3, [r4, #16]
}
   d55ca:	b002      	add	sp, #8
   d55cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d55d0:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d55d2:	2124      	movs	r1, #36	; 0x24
   d55d4:	4630      	mov	r0, r6
   d55d6:	f001 fcdf 	bl	d6f98 <strnlen>
   d55da:	42a8      	cmp	r0, r5
   d55dc:	d806      	bhi.n	d55ec <_ZN8particle7BleUuid9constructEPKc+0x94>
   d55de:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d55e0:	2300      	movs	r3, #0
    while (len > 0) {
   d55e2:	42bc      	cmp	r4, r7
   d55e4:	d0f1      	beq.n	d55ca <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d55e6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d55ea:	e7fa      	b.n	d55e2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d55ec:	2f00      	cmp	r7, #0
   d55ee:	d0ec      	beq.n	d55ca <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d55f0:	5d70      	ldrb	r0, [r6, r5]
   d55f2:	f7ff fe63 	bl	d52bc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d55f6:	0603      	lsls	r3, r0, #24
   d55f8:	d415      	bmi.n	d5626 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d55fa:	0100      	lsls	r0, r0, #4
   d55fc:	3f01      	subs	r7, #1
   d55fe:	fa5f f880 	uxtb.w	r8, r0
   d5602:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5606:	2124      	movs	r1, #36	; 0x24
   d5608:	4630      	mov	r0, r6
   d560a:	f001 fcc5 	bl	d6f98 <strnlen>
   d560e:	3501      	adds	r5, #1
   d5610:	42a8      	cmp	r0, r5
   d5612:	d908      	bls.n	d5626 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d5614:	5d70      	ldrb	r0, [r6, r5]
   d5616:	f7ff fe51 	bl	d52bc <_ZN8particle11hexToNibbleEc>
   d561a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d561c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d561e:	bfa4      	itt	ge
   d5620:	ea40 0008 	orrge.w	r0, r0, r8
   d5624:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5626:	3501      	adds	r5, #1
   d5628:	e7d3      	b.n	d55d2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d562a:	bf00      	nop
   d562c:	000d7288 	.word	0x000d7288

000d5630 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d5630:	b513      	push	{r0, r1, r4, lr}
   d5632:	4604      	mov	r4, r0
   d5634:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d5636:	f7ff ff03 	bl	d5440 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d563a:	4620      	mov	r0, r4
   d563c:	9901      	ldr	r1, [sp, #4]
   d563e:	f7ff ff8b 	bl	d5558 <_ZN8particle7BleUuid9constructEPKc>
}
   d5642:	4620      	mov	r0, r4
   d5644:	b002      	add	sp, #8
   d5646:	bd10      	pop	{r4, pc}

000d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5648:	b430      	push	{r4, r5}
   d564a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d564e:	b912      	cbnz	r2, d5656 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d5650:	6a00      	ldr	r0, [r0, #32]
}
   d5652:	bc30      	pop	{r4, r5}
   d5654:	4770      	bx	lr
   d5656:	9502      	str	r5, [sp, #8]
   d5658:	bc30      	pop	{r4, r5}
   d565a:	f7ff bd82 	b.w	d5162 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d565e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d565e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5660:	4604      	mov	r4, r0
          selfLen_(0) {
   d5662:	4602      	mov	r2, r0
   d5664:	f100 011f 	add.w	r1, r0, #31
   d5668:	2300      	movs	r3, #0
   d566a:	f802 3b01 	strb.w	r3, [r2], #1
   d566e:	4291      	cmp	r1, r2
   d5670:	d1fb      	bne.n	d566a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d5672:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5674:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5676:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5678:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d567a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d567e:	4619      	mov	r1, r3
   d5680:	f10d 020f 	add.w	r2, sp, #15
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff ffdf 	bl	d5648 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d568a:	4620      	mov	r0, r4
   d568c:	b004      	add	sp, #16
   d568e:	bd10      	pop	{r4, pc}

000d5690 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5690:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d5692:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5694:	460e      	mov	r6, r1
   d5696:	ab01      	add	r3, sp, #4
   d5698:	6a01      	ldr	r1, [r0, #32]
   d569a:	4604      	mov	r4, r0
   d569c:	f7ff fd4c 	bl	d5138 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d56a0:	4605      	mov	r5, r0
   d56a2:	b178      	cbz	r0, d56c4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d56a4:	9801      	ldr	r0, [sp, #4]
   d56a6:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d56a8:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d56aa:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d56ac:	4421      	add	r1, r4
   d56ae:	1b52      	subs	r2, r2, r5
   d56b0:	4420      	add	r0, r4
   d56b2:	f001 fc0b 	bl	d6ecc <memcpy>
        selfLen_ -= len;
   d56b6:	6a20      	ldr	r0, [r4, #32]
   d56b8:	1b40      	subs	r0, r0, r5
   d56ba:	6220      	str	r0, [r4, #32]
        remove(type);
   d56bc:	4631      	mov	r1, r6
   d56be:	4620      	mov	r0, r4
   d56c0:	f7ff ffe6 	bl	d5690 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d56c4:	b002      	add	sp, #8
   d56c6:	bd70      	pop	{r4, r5, r6, pc}

000d56c8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d56c8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d56ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56ce:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d56d0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d56d2:	8043      	strh	r3, [r0, #2]
   d56d4:	220e      	movs	r2, #14
   d56d6:	4629      	mov	r1, r5
   d56d8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d56da:	7105      	strb	r5, [r0, #4]
   d56dc:	3006      	adds	r0, #6
   d56de:	f001 fc1d 	bl	d6f1c <memset>
   d56e2:	f104 0014 	add.w	r0, r4, #20
   d56e6:	f7ff feab 	bl	d5440 <_ZN8particle7BleUuidC1Ev>
   d56ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d56ee:	f7ff fea7 	bl	d5440 <_ZN8particle7BleUuidC1Ev>
   d56f2:	4904      	ldr	r1, [pc, #16]	; (d5704 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d56f4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d56f8:	f7ff fc77 	bl	d4fea <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d56fc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d56fe:	4620      	mov	r0, r4
   d5700:	bd38      	pop	{r3, r4, r5, pc}
   d5702:	bf00      	nop
   d5704:	000d6ffb 	.word	0x000d6ffb

000d5708 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5708:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d570a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d570e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5712:	4293      	cmp	r3, r2
   d5714:	4618      	mov	r0, r3
   d5716:	d006      	beq.n	d5726 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5718:	6804      	ldr	r4, [r0, #0]
   d571a:	8824      	ldrh	r4, [r4, #0]
   d571c:	428c      	cmp	r4, r1
   d571e:	f103 0308 	add.w	r3, r3, #8
   d5722:	d1f6      	bne.n	d5712 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d5724:	bd10      	pop	{r4, pc}
        return nullptr;
   d5726:	2000      	movs	r0, #0
   d5728:	e7fc      	b.n	d5724 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d572c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5730:	2600      	movs	r6, #0
   d5732:	6006      	str	r6, [r0, #0]
   d5734:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5736:	2028      	movs	r0, #40	; 0x28
   d5738:	460c      	mov	r4, r1
   d573a:	f7fe fcaa 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d573e:	1e05      	subs	r5, r0, #0
   d5740:	f105 080c 	add.w	r8, r5, #12
   d5744:	d00f      	beq.n	d5766 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d5746:	2301      	movs	r3, #1
   d5748:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d574c:	4b08      	ldr	r3, [pc, #32]	; (d5770 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d574e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d5750:	4640      	mov	r0, r8
   d5752:	f7ff fe75 	bl	d5440 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d5756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d5758:	622e      	str	r6, [r5, #32]
   d575a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d575e:	4646      	mov	r6, r8
   d5760:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5762:	6823      	ldr	r3, [r4, #0]
   d5764:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d5766:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d576a:	4638      	mov	r0, r7
   d576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5770:	000d7250 	.word	0x000d7250

000d5774 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5774:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5776:	2500      	movs	r5, #0
   d5778:	6005      	str	r5, [r0, #0]
   d577a:	4606      	mov	r6, r0
   d577c:	2030      	movs	r0, #48	; 0x30
   d577e:	f7fe fc88 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5782:	4604      	mov	r4, r0
   d5784:	b188      	cbz	r0, d57aa <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d5786:	2301      	movs	r3, #1
   d5788:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d578c:	4b09      	ldr	r3, [pc, #36]	; (d57b4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d578e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d5790:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5794:	8183      	strh	r3, [r0, #12]
   d5796:	300e      	adds	r0, #14
   d5798:	f7ff fddb 	bl	d5352 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d579c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d57a0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d57a4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d57a8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d57aa:	6074      	str	r4, [r6, #4]
   d57ac:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d57ae:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d57b0:	4630      	mov	r0, r6
   d57b2:	bd70      	pop	{r4, r5, r6, pc}
   d57b4:	000d726c 	.word	0x000d726c

000d57b8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d57b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d57ba:	460d      	mov	r5, r1
   d57bc:	4604      	mov	r4, r0
    WiringBleLock lk;
   d57be:	a801      	add	r0, sp, #4
   d57c0:	f7ff fd91 	bl	d52e6 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d57c4:	682a      	ldr	r2, [r5, #0]
   d57c6:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d57ca:	6023      	str	r3, [r4, #0]
   d57cc:	6853      	ldr	r3, [r2, #4]
   d57ce:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d57d0:	a801      	add	r0, sp, #4
   d57d2:	f7ff fd90 	bl	d52f6 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d57d6:	4620      	mov	r0, r4
   d57d8:	b003      	add	sp, #12
   d57da:	bd30      	pop	{r4, r5, pc}

000d57dc <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d57dc:	b530      	push	{r4, r5, lr}
   d57de:	4605      	mov	r5, r0
   d57e0:	b087      	sub	sp, #28
   d57e2:	460c      	mov	r4, r1
    WiringBleLock lk;
   d57e4:	a801      	add	r0, sp, #4
   d57e6:	f7ff fd7e 	bl	d52e6 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d57ea:	682a      	ldr	r2, [r5, #0]
   d57ec:	6823      	ldr	r3, [r4, #0]
   d57ee:	8812      	ldrh	r2, [r2, #0]
   d57f0:	881b      	ldrh	r3, [r3, #0]
   d57f2:	429a      	cmp	r2, r3
   d57f4:	d10d      	bne.n	d5812 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d57f6:	4629      	mov	r1, r5
   d57f8:	a802      	add	r0, sp, #8
   d57fa:	f7ff ffdd 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d57fe:	4621      	mov	r1, r4
   d5800:	a804      	add	r0, sp, #16
   d5802:	f7ff ffd9 	bl	d57b8 <_ZNK8particle13BlePeerDevice7addressEv>
   d5806:	a904      	add	r1, sp, #16
   d5808:	a802      	add	r0, sp, #8
   d580a:	f7ff fd8e 	bl	d532a <_ZNK8particle10BleAddresseqERKS0_>
   d580e:	4604      	mov	r4, r0
   d5810:	b900      	cbnz	r0, d5814 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d5812:	2400      	movs	r4, #0
    WiringBleLock lk;
   d5814:	a801      	add	r0, sp, #4
   d5816:	f7ff fd6e 	bl	d52f6 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d581a:	4620      	mov	r0, r4
   d581c:	b007      	add	sp, #28
   d581e:	bd30      	pop	{r4, r5, pc}

000d5820 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5820:	b510      	push	{r4, lr}
   d5822:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5824:	2054      	movs	r0, #84	; 0x54
   d5826:	f7fe fc34 	bl	d4092 <_Znwj>
   d582a:	4601      	mov	r1, r0
   d582c:	b160      	cbz	r0, d5848 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d582e:	2300      	movs	r3, #0
   d5830:	e9c0 3300 	strd	r3, r3, [r0]
   d5834:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5838:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d583c:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d5840:	6203      	str	r3, [r0, #32]
   d5842:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5844:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5846:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5848:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d584a:	b919      	cbnz	r1, d5854 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d584c:	4a09      	ldr	r2, [pc, #36]	; (d5874 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d584e:	200a      	movs	r0, #10
   d5850:	f7ff fa46 	bl	d4ce0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5854:	2000      	movs	r0, #0
   d5856:	f7ff f903 	bl	d4a60 <hal_ble_stack_init>
   d585a:	b120      	cbz	r0, d5866 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d585c:	4a05      	ldr	r2, [pc, #20]	; (d5874 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d585e:	2100      	movs	r1, #0
   d5860:	200a      	movs	r0, #10
   d5862:	f7ff fa3d 	bl	d4ce0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5866:	6821      	ldr	r1, [r4, #0]
   d5868:	4803      	ldr	r0, [pc, #12]	; (d5878 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d586a:	2200      	movs	r2, #0
   d586c:	f7ff f93e 	bl	d4aec <hal_ble_set_callback_on_periph_link_events>
}
   d5870:	4620      	mov	r0, r4
   d5872:	bd10      	pop	{r4, pc}
   d5874:	000d4a21 	.word	0x000d4a21
   d5878:	000d5c21 	.word	0x000d5c21

000d587c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d587c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d587e:	4c0b      	ldr	r4, [pc, #44]	; (d58ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5880:	7823      	ldrb	r3, [r4, #0]
   d5882:	f3bf 8f5b 	dmb	ish
   d5886:	07db      	lsls	r3, r3, #31
   d5888:	d40e      	bmi.n	d58a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d588a:	4620      	mov	r0, r4
   d588c:	f7fe fc07 	bl	d409e <__cxa_guard_acquire>
   d5890:	b150      	cbz	r0, d58a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5892:	4807      	ldr	r0, [pc, #28]	; (d58b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5894:	f7ff ffc4 	bl	d5820 <_ZN8particle14BleLocalDeviceC1Ev>
   d5898:	4620      	mov	r0, r4
   d589a:	f7fe fc05 	bl	d40a8 <__cxa_guard_release>
   d589e:	4a05      	ldr	r2, [pc, #20]	; (d58b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d58a0:	4905      	ldr	r1, [pc, #20]	; (d58b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d58a2:	4803      	ldr	r0, [pc, #12]	; (d58b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d58a4:	f001 f9d8 	bl	d6c58 <__aeabi_atexit>
    return instance;
}
   d58a8:	4801      	ldr	r0, [pc, #4]	; (d58b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d58aa:	bd10      	pop	{r4, pc}
   d58ac:	2003e650 	.word	0x2003e650
   d58b0:	2003e65c 	.word	0x2003e65c
   d58b4:	2003e59c 	.word	0x2003e59c
   d58b8:	000d5aa1 	.word	0x000d5aa1

000d58bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d58bc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d58be:	6803      	ldr	r3, [r0, #0]
   d58c0:	3b09      	subs	r3, #9
   d58c2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d58c4:	b08d      	sub	sp, #52	; 0x34
   d58c6:	4604      	mov	r4, r0
   d58c8:	460d      	mov	r5, r1
    switch (event->type) {
   d58ca:	d811      	bhi.n	d58f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d58cc:	f7ff ffd6 	bl	d587c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d58d0:	88a1      	ldrh	r1, [r4, #4]
   d58d2:	6800      	ldr	r0, [r0, #0]
   d58d4:	f7ff ff18 	bl	d5708 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d58d8:	4603      	mov	r3, r0
   d58da:	b958      	cbnz	r0, d58f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d58dc:	2220      	movs	r2, #32
   d58de:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d58e2:	4a0b      	ldr	r2, [pc, #44]	; (d5910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d58e4:	9200      	str	r2, [sp, #0]
   d58e6:	490b      	ldr	r1, [pc, #44]	; (d5914 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d58e8:	aa04      	add	r2, sp, #16
   d58ea:	2032      	movs	r0, #50	; 0x32
   d58ec:	f7ff fa00 	bl	d4cf0 <log_message>
}
   d58f0:	b00d      	add	sp, #52	; 0x34
   d58f2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d58f4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d58f6:	2a00      	cmp	r2, #0
   d58f8:	d0fa      	beq.n	d58f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d58fa:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58fe:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d5902:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d5906:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d5908:	aa04      	add	r2, sp, #16
   d590a:	a903      	add	r1, sp, #12
   d590c:	47a0      	blx	r4
}
   d590e:	e7ef      	b.n	d58f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d5910:	000d715f 	.word	0x000d715f
   d5914:	000d7138 	.word	0x000d7138

000d5918 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5918:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d591a:	2000      	movs	r0, #0
   d591c:	f7ff f8a0 	bl	d4a60 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d5920:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5924:	bd08      	pop	{r3, pc}

000d5926 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d5926:	b513      	push	{r0, r1, r4, lr}
   d5928:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d592a:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d592c:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   d592e:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d5932:	f7ff f89d 	bl	d4a70 <hal_ble_gap_get_device_address>
    address_ = addr;
   d5936:	466b      	mov	r3, sp
   d5938:	cb03      	ldmia	r3!, {r0, r1}
   d593a:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   d593c:	4620      	mov	r0, r4
    address_ = addr;
   d593e:	6061      	str	r1, [r4, #4]
}
   d5940:	b002      	add	sp, #8
   d5942:	bd10      	pop	{r4, pc}

000d5944 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5944:	4608      	mov	r0, r1
   d5946:	b911      	cbnz	r1, d594e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5948:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d594a:	f7ff b899 	b.w	d4a80 <hal_ble_gap_set_advertising_data>
   d594e:	6a09      	ldr	r1, [r1, #32]
   d5950:	2200      	movs	r2, #0
   d5952:	e7fa      	b.n	d594a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d5954 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5954:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d5956:	4608      	mov	r0, r1
   d5958:	b929      	cbnz	r1, d5966 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d595a:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d595c:	b003      	add	sp, #12
   d595e:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5962:	f7ff b895 	b.w	d4a90 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5966:	2101      	movs	r1, #1
   d5968:	9001      	str	r0, [sp, #4]
   d596a:	f7ff fe91 	bl	d5690 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d596e:	9801      	ldr	r0, [sp, #4]
   d5970:	2200      	movs	r2, #0
   d5972:	6a01      	ldr	r1, [r0, #32]
   d5974:	e7f2      	b.n	d595c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d5976 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5976:	b538      	push	{r3, r4, r5, lr}
   d5978:	4604      	mov	r4, r0
   d597a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d597c:	f7ff ffe2 	bl	d5944 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5980:	2800      	cmp	r0, #0
   d5982:	db0a      	blt.n	d599a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d5984:	4629      	mov	r1, r5
   d5986:	4620      	mov	r0, r4
   d5988:	f7ff ffe4 	bl	d5954 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d598c:	2800      	cmp	r0, #0
   d598e:	db04      	blt.n	d599a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d5990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d5994:	2000      	movs	r0, #0
   d5996:	f7ff b883 	b.w	d4aa0 <hal_ble_gap_start_advertising>
}
   d599a:	bd38      	pop	{r3, r4, r5, pc}

000d599c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d599c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d599e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d59a0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d59a2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59a4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d59a6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59a8:	f7fe fb73 	bl	d4092 <_Znwj>
   d59ac:	b118      	cbz	r0, d59b6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d59ae:	682b      	ldr	r3, [r5, #0]
   d59b0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d59b2:	686b      	ldr	r3, [r5, #4]
   d59b4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d59b6:	4b03      	ldr	r3, [pc, #12]	; (d59c4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d59b8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d59ba:	4b03      	ldr	r3, [pc, #12]	; (d59c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59bc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d59be:	60a3      	str	r3, [r4, #8]
      }
   d59c0:	4620      	mov	r0, r4
   d59c2:	bd38      	pop	{r3, r4, r5, pc}
   d59c4:	000d523f 	.word	0x000d523f
   d59c8:	000d5201 	.word	0x000d5201

000d59cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d59cc:	680b      	ldr	r3, [r1, #0]
   d59ce:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d59d0:	b113      	cbz	r3, d59d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d59d2:	685a      	ldr	r2, [r3, #4]
   d59d4:	3201      	adds	r2, #1
   d59d6:	605a      	str	r2, [r3, #4]
      }
   d59d8:	4770      	bx	lr

000d59da <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d59da:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59dc:	f851 3b04 	ldr.w	r3, [r1], #4
   d59e0:	4604      	mov	r4, r0
   d59e2:	f840 3b04 	str.w	r3, [r0], #4
   d59e6:	f7ff fff1 	bl	d59cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d59ea:	6823      	ldr	r3, [r4, #0]
   d59ec:	b90b      	cbnz	r3, d59f2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d59ee:	f7ff fbff 	bl	d51f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d59f2:	4620      	mov	r0, r4
   d59f4:	bd10      	pop	{r4, pc}

000d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d59f6:	b510      	push	{r4, lr}
   d59f8:	f851 3b04 	ldr.w	r3, [r1], #4
   d59fc:	4604      	mov	r4, r0
   d59fe:	f840 3b04 	str.w	r3, [r0], #4
   d5a02:	f7ff ffe3 	bl	d59cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5a06:	4620      	mov	r0, r4
   d5a08:	bd10      	pop	{r4, pc}

000d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5a0a:	b510      	push	{r4, lr}
   d5a0c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a10:	4604      	mov	r4, r0
   d5a12:	f840 3b04 	str.w	r3, [r0], #4
   d5a16:	f7ff ffd9 	bl	d59cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	bd10      	pop	{r4, pc}

000d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5a1e:	b510      	push	{r4, lr}
   d5a20:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5a22:	6800      	ldr	r0, [r0, #0]
   d5a24:	b128      	cbz	r0, d5a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5a26:	6843      	ldr	r3, [r0, #4]
   d5a28:	3b01      	subs	r3, #1
   d5a2a:	6043      	str	r3, [r0, #4]
   d5a2c:	b90b      	cbnz	r3, d5a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5a2e:	f7ff fb52 	bl	d50d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5a32:	4620      	mov	r0, r4
   d5a34:	bd10      	pop	{r4, pc}

000d5a36 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d5a36:	b510      	push	{r4, lr}
   d5a38:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5a3a:	3004      	adds	r0, #4
   d5a3c:	f7ff ffef 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd10      	pop	{r4, pc}

000d5a44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5a46:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a4a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5a4c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5a50:	42ae      	cmp	r6, r5
   d5a52:	d004      	beq.n	d5a5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5a54:	1d28      	adds	r0, r5, #4
   d5a56:	f7ff ffe2 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a5a:	3508      	adds	r5, #8
   d5a5c:	e7f8      	b.n	d5a50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5a5e:	6820      	ldr	r0, [r4, #0]
   d5a60:	f7ff f9ea 	bl	d4e38 <free>
}
   d5a64:	4620      	mov	r0, r4
   d5a66:	bd70      	pop	{r4, r5, r6, pc}

000d5a68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a68:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5a6a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a6e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5a70:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5a74:	42ae      	cmp	r6, r5
   d5a76:	d004      	beq.n	d5a82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5a78:	1d28      	adds	r0, r5, #4
   d5a7a:	f7ff ffd0 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a7e:	3508      	adds	r5, #8
   d5a80:	e7f8      	b.n	d5a74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5a82:	6820      	ldr	r0, [r4, #0]
   d5a84:	f7ff f9d8 	bl	d4e38 <free>
}
   d5a88:	4620      	mov	r0, r4
   d5a8a:	bd70      	pop	{r4, r5, r6, pc}

000d5a8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5a8c:	b510      	push	{r4, lr}
   d5a8e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5a90:	3024      	adds	r0, #36	; 0x24
   d5a92:	f7ff ffe9 	bl	d5a68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a96:	f104 0018 	add.w	r0, r4, #24
   d5a9a:	f7ff ffd3 	bl	d5a44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5a9e:	bd10      	pop	{r4, pc}

000d5aa0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5aa2:	6804      	ldr	r4, [r0, #0]
   d5aa4:	4606      	mov	r6, r0
   d5aa6:	b324      	cbz	r4, d5af2 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d5aa8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5aac:	f7ff fbf2 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
   d5ab0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5ab4:	f7ff fbee 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
   d5ab8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5abc:	f7ff fbea 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d5ac0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5ac4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5ac8:	42af      	cmp	r7, r5
   d5aca:	d004      	beq.n	d5ad6 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d5acc:	1d28      	adds	r0, r5, #4
   d5ace:	f7ff ffa6 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ad2:	3508      	adds	r5, #8
   d5ad4:	e7f8      	b.n	d5ac8 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d5ad6:	69a0      	ldr	r0, [r4, #24]
   d5ad8:	f7ff f9ae 	bl	d4e38 <free>
    ~BleLocalDeviceImpl() = default;
   d5adc:	f104 000c 	add.w	r0, r4, #12
   d5ae0:	f7ff ffc2 	bl	d5a68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	f7ff ffad 	bl	d5a44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d5aea:	2154      	movs	r1, #84	; 0x54
   d5aec:	4620      	mov	r0, r4
   d5aee:	f001 f8b8 	bl	d6c62 <_ZdlPvj>
   d5af2:	4630      	mov	r0, r6
   d5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5af6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d5af6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5af8:	b510      	push	{r4, lr}
      if (_M_empty())
   d5afa:	b90a      	cbnz	r2, d5b00 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d5afc:	f001 f8b5 	bl	d6c6a <_ZSt25__throw_bad_function_callv>
    }
   d5b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b04:	68c3      	ldr	r3, [r0, #12]
   d5b06:	4718      	bx	r3

000d5b08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5b08:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b0c:	4604      	mov	r4, r0
   d5b0e:	460d      	mov	r5, r1
   d5b10:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5b12:	d914      	bls.n	d5b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5b14:	4290      	cmp	r0, r2
   d5b16:	d213      	bcs.n	d5b40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5b18:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5b1c:	1a75      	subs	r5, r6, r1
   d5b1e:	f1a1 0708 	sub.w	r7, r1, #8
   d5b22:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5b24:	42b7      	cmp	r7, r6
   d5b26:	d018      	beq.n	d5b5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5b28:	b11c      	cbz	r4, d5b32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5b2a:	4631      	mov	r1, r6
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	f7ff ff6c 	bl	d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5b32:	1d30      	adds	r0, r6, #4
   d5b34:	f7ff ff73 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5b38:	3e08      	subs	r6, #8
   d5b3a:	3c08      	subs	r4, #8
   d5b3c:	e7f2      	b.n	d5b24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5b3e:	d00c      	beq.n	d5b5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5b40:	42b5      	cmp	r5, r6
   d5b42:	d00a      	beq.n	d5b5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5b44:	b11c      	cbz	r4, d5b4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5b46:	4629      	mov	r1, r5
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f7ff ff5e 	bl	d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5b4e:	1d28      	adds	r0, r5, #4
   d5b50:	f7ff ff65 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5b54:	3508      	adds	r5, #8
   d5b56:	3408      	adds	r4, #8
   d5b58:	e7f2      	b.n	d5b40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5b60:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b64:	4605      	mov	r5, r0
   d5b66:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5b68:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5b6c:	42a7      	cmp	r7, r4
   d5b6e:	d103      	bne.n	d5b78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d5b70:	2600      	movs	r6, #0
}
   d5b72:	4630      	mov	r0, r6
   d5b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d5b78:	4641      	mov	r1, r8
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f7ff fe2e 	bl	d57dc <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5b80:	4606      	mov	r6, r0
   d5b82:	b908      	cbnz	r0, d5b88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d5b84:	3408      	adds	r4, #8
   d5b86:	e7f1      	b.n	d5b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5b88:	2c00      	cmp	r4, #0
   d5b8a:	d0f1      	beq.n	d5b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d5b8c:	1d20      	adds	r0, r4, #4
   d5b8e:	f7ff ff46 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5b92:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5b96:	f104 0108 	add.w	r1, r4, #8
   d5b9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f7ff ffb2 	bl	d5b08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5ba4:	686b      	ldr	r3, [r5, #4]
   d5ba6:	3b01      	subs	r3, #1
   d5ba8:	606b      	str	r3, [r5, #4]
    return true;
   d5baa:	e7e2      	b.n	d5b72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d5bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5bae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5bb0:	6846      	ldr	r6, [r0, #4]
   d5bb2:	4668      	mov	r0, sp
   d5bb4:	f7ff ff29 	bl	d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5bb8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d5bbc:	429f      	cmp	r7, r3
   d5bbe:	db12      	blt.n	d5be6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d5bc0:	3701      	adds	r7, #1
        if (n > 0) {
   d5bc2:	2f00      	cmp	r7, #0
   d5bc4:	dd29      	ble.n	d5c1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d5bc6:	00f8      	lsls	r0, r7, #3
   d5bc8:	f7ff f92e 	bl	d4e28 <malloc>
            if (!d) {
   d5bcc:	4605      	mov	r5, r0
   d5bce:	b1f0      	cbz	r0, d5c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d5bd0:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5bd4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5bd8:	f7ff ff96 	bl	d5b08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5bdc:	6820      	ldr	r0, [r4, #0]
   d5bde:	f7ff f92b 	bl	d4e38 <free>
        data_ = d;
   d5be2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5be4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d5be6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5be8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5bea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d5bee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5bf2:	4631      	mov	r1, r6
   d5bf4:	f106 0008 	add.w	r0, r6, #8
   d5bf8:	f7ff ff86 	bl	d5b08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5bfc:	b11e      	cbz	r6, d5c06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d5bfe:	4669      	mov	r1, sp
   d5c00:	4630      	mov	r0, r6
   d5c02:	f7ff ff02 	bl	d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5c06:	6863      	ldr	r3, [r4, #4]
   d5c08:	3301      	adds	r3, #1
   d5c0a:	6063      	str	r3, [r4, #4]
    return true;
   d5c0c:	2501      	movs	r5, #1
   d5c0e:	a801      	add	r0, sp, #4
   d5c10:	f7ff ff05 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c14:	4628      	mov	r0, r5
   d5c16:	b003      	add	sp, #12
   d5c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5c1a:	2500      	movs	r5, #0
   d5c1c:	e7de      	b.n	d5bdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d5c20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c24:	4605      	mov	r5, r0
   d5c26:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5c28:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5c2a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d5c2c:	f7ff fb5b 	bl	d52e6 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5c30:	682e      	ldr	r6, [r5, #0]
   d5c32:	2e04      	cmp	r6, #4
   d5c34:	d06b      	beq.n	d5d0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d5c36:	d807      	bhi.n	d5c48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d5c38:	2e03      	cmp	r6, #3
   d5c3a:	d028      	beq.n	d5c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d5c3c:	a803      	add	r0, sp, #12
   d5c3e:	f7ff fb5a 	bl	d52f6 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5c42:	b00e      	add	sp, #56	; 0x38
   d5c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d5c48:	f1a6 030c 	sub.w	r3, r6, #12
   d5c4c:	2b03      	cmp	r3, #3
   d5c4e:	d8f5      	bhi.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5c50:	89a9      	ldrh	r1, [r5, #12]
   d5c52:	4620      	mov	r0, r4
   d5c54:	f7ff fd58 	bl	d5708 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5c58:	4607      	mov	r7, r0
   d5c5a:	2800      	cmp	r0, #0
   d5c5c:	d0ee      	beq.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d5c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5c60:	2b00      	cmp	r3, #0
   d5c62:	d0eb      	beq.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d5c64:	2210      	movs	r2, #16
   d5c66:	2100      	movs	r1, #0
   d5c68:	a807      	add	r0, sp, #28
   d5c6a:	f001 f957 	bl	d6f1c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5c6e:	2e0d      	cmp	r6, #13
                        };
   d5c70:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d5c72:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5c76:	f040 8092 	bne.w	d5d9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d5c7a:	686b      	ldr	r3, [r5, #4]
   d5c7c:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d5c7e:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5c80:	9308      	str	r3, [sp, #32]
   d5c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5c84:	a906      	add	r1, sp, #24
   d5c86:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5c8a:	4798      	blx	r3
   d5c8c:	e7d6      	b.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d5c8e:	a804      	add	r0, sp, #16
   d5c90:	f7ff fd70 	bl	d5774 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5c94:	9b04      	ldr	r3, [sp, #16]
   d5c96:	89aa      	ldrh	r2, [r5, #12]
   d5c98:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d5c9a:	6869      	ldr	r1, [r5, #4]
   d5c9c:	9804      	ldr	r0, [sp, #16]
   d5c9e:	3108      	adds	r1, #8
   d5ca0:	3002      	adds	r0, #2
   d5ca2:	f7ff fb35 	bl	d5310 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d5ca6:	a904      	add	r1, sp, #16
   d5ca8:	a806      	add	r0, sp, #24
   d5caa:	f7ff feae 	bl	d5a0a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d5cae:	a906      	add	r1, sp, #24
   d5cb0:	f104 0018 	add.w	r0, r4, #24
   d5cb4:	f7ff ff7a 	bl	d5bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5cb8:	4605      	mov	r5, r0
   d5cba:	a807      	add	r0, sp, #28
   d5cbc:	f7ff feaf 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cc0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5cc2:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5cc4:	b98d      	cbnz	r5, d5cea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5cc6:	4b3e      	ldr	r3, [pc, #248]	; (d5dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d5cc8:	493e      	ldr	r1, [pc, #248]	; (d5dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5cca:	9300      	str	r3, [sp, #0]
   d5ccc:	2032      	movs	r0, #50	; 0x32
   d5cce:	462b      	mov	r3, r5
   d5cd0:	aa06      	add	r2, sp, #24
   d5cd2:	9507      	str	r5, [sp, #28]
   d5cd4:	f7ff f80c 	bl	d4cf0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5cd8:	9b04      	ldr	r3, [sp, #16]
   d5cda:	4629      	mov	r1, r5
   d5cdc:	8818      	ldrh	r0, [r3, #0]
   d5cde:	f7fe fee7 	bl	d4ab0 <hal_ble_gap_disconnect>
   d5ce2:	a805      	add	r0, sp, #20
   d5ce4:	f7ff fe9b 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ce8:	e7a8      	b.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d5cea:	4a37      	ldr	r2, [pc, #220]	; (d5dc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d5cec:	9200      	str	r2, [sp, #0]
   d5cee:	2300      	movs	r3, #0
   d5cf0:	4934      	ldr	r1, [pc, #208]	; (d5dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5cf2:	9307      	str	r3, [sp, #28]
   d5cf4:	aa06      	add	r2, sp, #24
   d5cf6:	2001      	movs	r0, #1
   d5cf8:	f7fe fffa 	bl	d4cf0 <log_message>
                if (impl->connectedCallback_) {
   d5cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5cfe:	2b00      	cmp	r3, #0
   d5d00:	d0ef      	beq.n	d5ce2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d5d02:	a904      	add	r1, sp, #16
   d5d04:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5d08:	f7ff fef5 	bl	d5af6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d5d0c:	e7e9      	b.n	d5ce2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5d0e:	89a9      	ldrh	r1, [r5, #12]
   d5d10:	4620      	mov	r0, r4
   d5d12:	f7ff fcf9 	bl	d5708 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5d16:	4606      	mov	r6, r0
   d5d18:	2800      	cmp	r0, #0
   d5d1a:	d08f      	beq.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d5d1c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d5d1e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d26:	802a      	strh	r2, [r5, #0]
   d5d28:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d5d2c:	4299      	cmp	r1, r3
   d5d2e:	d003      	beq.n	d5d38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d5d30:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5d34:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d5d36:	e7f9      	b.n	d5d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d5d38:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d5d3c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5d40:	45b8      	cmp	r8, r7
   d5d42:	d004      	beq.n	d5d4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d5d44:	1d38      	adds	r0, r7, #4
   d5d46:	f7ff fe6a 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d4a:	3708      	adds	r7, #8
   d5d4c:	e7f8      	b.n	d5d40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d5d4e:	2300      	movs	r3, #0
   d5d50:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d5d52:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d5d56:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5d5a:	45b8      	cmp	r8, r7
   d5d5c:	d004      	beq.n	d5d68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d5d5e:	1d38      	adds	r0, r7, #4
   d5d60:	f7ff fe5d 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d64:	3708      	adds	r7, #8
   d5d66:	e7f8      	b.n	d5d5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d5d68:	2300      	movs	r3, #0
   d5d6a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d5d6c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d5d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d70:	b123      	cbz	r3, d5d7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d5d72:	4631      	mov	r1, r6
   d5d74:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5d78:	f7ff febd 	bl	d5af6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d5d7c:	2300      	movs	r3, #0
   d5d7e:	2220      	movs	r2, #32
   d5d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5d84:	4a11      	ldr	r2, [pc, #68]	; (d5dcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d5d86:	9200      	str	r2, [sp, #0]
   d5d88:	490e      	ldr	r1, [pc, #56]	; (d5dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5d8a:	aa06      	add	r2, sp, #24
   d5d8c:	2001      	movs	r0, #1
   d5d8e:	f7fe ffaf 	bl	d4cf0 <log_message>
                    impl->peers_.removeOne(*peer);
   d5d92:	4631      	mov	r1, r6
   d5d94:	f104 0018 	add.w	r0, r4, #24
   d5d98:	f7ff fee0 	bl	d5b5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5d9c:	e74e      	b.n	d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d5d9e:	2e0f      	cmp	r6, #15
   d5da0:	f47f af6f 	bne.w	d5c82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d5da4:	686b      	ldr	r3, [r5, #4]
   d5da6:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5da8:	7a2b      	ldrb	r3, [r5, #8]
   d5daa:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d5dae:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d5db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5db6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5dba:	2308      	movs	r3, #8
   d5dbc:	e760      	b.n	d5c80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d5dbe:	bf00      	nop
   d5dc0:	000d7177 	.word	0x000d7177
   d5dc4:	000d7138 	.word	0x000d7138
   d5dc8:	000d719d 	.word	0x000d719d
   d5dcc:	000d71ba 	.word	0x000d71ba

000d5dd0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d5dd0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d5dd2:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d5dd4:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5dd6:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d5dda:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5dde:	6823      	ldr	r3, [r4, #0]
   d5de0:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5de2:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5de4:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d5de6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d5de8:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d5dea:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d5dec:	f7ff fe17 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d5df0:	4620      	mov	r0, r4
   d5df2:	b002      	add	sp, #8
   d5df4:	bd10      	pop	{r4, pc}

000d5df6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5df6:	b513      	push	{r0, r1, r4, lr}
   d5df8:	460b      	mov	r3, r1
   d5dfa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dfc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5e00:	466c      	mov	r4, sp
   d5e02:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e06:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e0a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e16:	b002      	add	sp, #8
   d5e18:	bd10      	pop	{r4, pc}

000d5e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d5e1a:	b538      	push	{r3, r4, r5, lr}
   d5e1c:	4605      	mov	r5, r0
   d5e1e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d5e20:	f7ff ffe9 	bl	d5df6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e24:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5e26:	68a2      	ldr	r2, [r4, #8]
   d5e28:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e2a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e2c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5e2e:	68e2      	ldr	r2, [r4, #12]
   d5e30:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e32:	60e3      	str	r3, [r4, #12]
      }
   d5e34:	bd38      	pop	{r3, r4, r5, pc}

000d5e36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d5e36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5e38:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d5e3a:	4604      	mov	r4, r0
   d5e3c:	4608      	mov	r0, r1
	__x.swap(*this);
   d5e3e:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d5e40:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d5e42:	f7ff ffea 	bl	d5e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d5e46:	4621      	mov	r1, r4
   d5e48:	4668      	mov	r0, sp
   d5e4a:	f7ff ffe6 	bl	d5e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d5e4e:	4668      	mov	r0, sp
   d5e50:	f7ff fa20 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
      }
   d5e54:	4620      	mov	r0, r4
   d5e56:	b004      	add	sp, #16
   d5e58:	bd10      	pop	{r4, pc}

000d5e5a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d5e5a:	b570      	push	{r4, r5, r6, lr}
   d5e5c:	460e      	mov	r6, r1
   d5e5e:	b088      	sub	sp, #32
   d5e60:	4604      	mov	r4, r0
   d5e62:	9201      	str	r2, [sp, #4]
   d5e64:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d5e66:	f7ff fc2f 	bl	d56c8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d5e6a:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d5e6c:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d5e6e:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d5e70:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5e74:	f7ff f8cd 	bl	d5012 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d5e78:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d5e7c:	b185      	cbz	r5, d5ea0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d5e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5e80:	9502      	str	r5, [sp, #8]
   d5e82:	a902      	add	r1, sp, #8
   d5e84:	a804      	add	r0, sp, #16
   d5e86:	9303      	str	r3, [sp, #12]
   d5e88:	f7ff fd88 	bl	d599c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d5e8c:	a904      	add	r1, sp, #16
   d5e8e:	4630      	mov	r0, r6
   d5e90:	f7ff ffd1 	bl	d5e36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d5e94:	a804      	add	r0, sp, #16
   d5e96:	f7ff f9fd 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
    }
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	b008      	add	sp, #32
   d5e9e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d5ea0:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d5ea2:	e7f3      	b.n	d5e8c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d5ea4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ea8:	b086      	sub	sp, #24
   d5eaa:	4607      	mov	r7, r0
   d5eac:	461d      	mov	r5, r3
   d5eae:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	4689      	mov	r9, r1
   d5eb4:	4692      	mov	sl, r2
   d5eb6:	9304      	str	r3, [sp, #16]
   d5eb8:	f7fe f8eb 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5ebc:	1e06      	subs	r6, r0, #0
   d5ebe:	f106 080c 	add.w	r8, r6, #12
   d5ec2:	d01d      	beq.n	d5f00 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d5ec4:	2301      	movs	r3, #1
	: _M_impl(__a)
   d5ec6:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d5ec8:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d5ecc:	4b15      	ldr	r3, [pc, #84]	; (d5f24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d5ece:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d5ed2:	f89a 3000 	ldrb.w	r3, [sl]
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d5ed6:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d5eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5edc:	9300      	str	r3, [sp, #0]
   d5ede:	464a      	mov	r2, r9
   d5ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5ee2:	a903      	add	r1, sp, #12
   d5ee4:	4640      	mov	r0, r8
   d5ee6:	f7ff ffb8 	bl	d5e5a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d5eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eee:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d5ef0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d5ef2:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d5ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ef6:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d5efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5efc:	682b      	ldr	r3, [r5, #0]
   d5efe:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d5f00:	a904      	add	r1, sp, #16
   d5f02:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d5f04:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d5f08:	f7ff ff62 	bl	d5dd0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d5f0c:	a805      	add	r0, sp, #20
   d5f0e:	f7ff fd86 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d5f12:	6839      	ldr	r1, [r7, #0]
   d5f14:	b919      	cbnz	r1, d5f1e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d5f16:	4a04      	ldr	r2, [pc, #16]	; (d5f28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d5f18:	200a      	movs	r0, #10
   d5f1a:	f7fe fee1 	bl	d4ce0 <panic_>
}
   d5f1e:	b006      	add	sp, #24
   d5f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5f24:	000d7234 	.word	0x000d7234
   d5f28:	000d4a21 	.word	0x000d4a21

000d5f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5f2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f30:	4604      	mov	r4, r0
   d5f32:	460d      	mov	r5, r1
   d5f34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5f36:	d914      	bls.n	d5f62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5f38:	4290      	cmp	r0, r2
   d5f3a:	d213      	bcs.n	d5f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5f3c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5f40:	1a75      	subs	r5, r6, r1
   d5f42:	f1a1 0708 	sub.w	r7, r1, #8
   d5f46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5f48:	42b7      	cmp	r7, r6
   d5f4a:	d018      	beq.n	d5f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5f4c:	b11c      	cbz	r4, d5f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d5f4e:	4631      	mov	r1, r6
   d5f50:	4620      	mov	r0, r4
   d5f52:	f7ff fd50 	bl	d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5f56:	1d30      	adds	r0, r6, #4
   d5f58:	f7ff fd61 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5f5c:	3e08      	subs	r6, #8
   d5f5e:	3c08      	subs	r4, #8
   d5f60:	e7f2      	b.n	d5f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5f62:	d00c      	beq.n	d5f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5f64:	42b5      	cmp	r5, r6
   d5f66:	d00a      	beq.n	d5f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5f68:	b11c      	cbz	r4, d5f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	f7ff fd42 	bl	d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5f72:	1d28      	adds	r0, r5, #4
   d5f74:	f7ff fd53 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5f78:	3508      	adds	r5, #8
   d5f7a:	3408      	adds	r4, #8
   d5f7c:	e7f2      	b.n	d5f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5f80:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5f82:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5f84:	4605      	mov	r5, r0
        if (n > 0) {
   d5f86:	dd11      	ble.n	d5fac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5f88:	00f0      	lsls	r0, r6, #3
   d5f8a:	f7fe ff4d 	bl	d4e28 <malloc>
            if (!d) {
   d5f8e:	4604      	mov	r4, r0
   d5f90:	b158      	cbz	r0, d5faa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5f92:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5f96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5f9a:	f7ff ffc7 	bl	d5f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5f9e:	6828      	ldr	r0, [r5, #0]
   d5fa0:	f7fe ff4a 	bl	d4e38 <free>
        data_ = d;
   d5fa4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5fa6:	60ae      	str	r6, [r5, #8]
        return true;
   d5fa8:	2001      	movs	r0, #1
    }
   d5faa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5fac:	2400      	movs	r4, #0
   d5fae:	e7f6      	b.n	d5f9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fb2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5fb4:	6845      	ldr	r5, [r0, #4]
   d5fb6:	4668      	mov	r0, sp
   d5fb8:	f7ff fd1d 	bl	d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5fbc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5fc0:	4299      	cmp	r1, r3
   d5fc2:	da10      	bge.n	d5fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d5fc4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5fc6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5fc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5fcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5fd0:	4629      	mov	r1, r5
   d5fd2:	f105 0008 	add.w	r0, r5, #8
   d5fd6:	f7ff ffa9 	bl	d5f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5fda:	b98d      	cbnz	r5, d6000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d5fdc:	6863      	ldr	r3, [r4, #4]
   d5fde:	3301      	adds	r3, #1
   d5fe0:	6063      	str	r3, [r4, #4]
    return true;
   d5fe2:	2601      	movs	r6, #1
   d5fe4:	e006      	b.n	d5ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5fe6:	3101      	adds	r1, #1
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7ff ffc9 	bl	d5f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5fee:	4606      	mov	r6, r0
   d5ff0:	2800      	cmp	r0, #0
   d5ff2:	d1e7      	bne.n	d5fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d5ff4:	a801      	add	r0, sp, #4
   d5ff6:	f7ff fd12 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5ffa:	4630      	mov	r0, r6
   d5ffc:	b002      	add	sp, #8
   d5ffe:	bd70      	pop	{r4, r5, r6, pc}
   d6000:	4669      	mov	r1, sp
   d6002:	4628      	mov	r0, r5
   d6004:	f7ff fcf7 	bl	d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6008:	e7e8      	b.n	d5fdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d600a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d600a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d600e:	4604      	mov	r4, r0
   d6010:	460d      	mov	r5, r1
   d6012:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6014:	d914      	bls.n	d6040 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6016:	4290      	cmp	r0, r2
   d6018:	d213      	bcs.n	d6042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d601a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d601e:	1a75      	subs	r5, r6, r1
   d6020:	f1a1 0708 	sub.w	r7, r1, #8
   d6024:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6026:	42b7      	cmp	r7, r6
   d6028:	d018      	beq.n	d605c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d602a:	b11c      	cbz	r4, d6034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d602c:	4631      	mov	r1, r6
   d602e:	4620      	mov	r0, r4
   d6030:	f7ff fcd3 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6034:	1d30      	adds	r0, r6, #4
   d6036:	f7ff fcf2 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d603a:	3e08      	subs	r6, #8
   d603c:	3c08      	subs	r4, #8
   d603e:	e7f2      	b.n	d6026 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6040:	d00c      	beq.n	d605c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6042:	42b5      	cmp	r5, r6
   d6044:	d00a      	beq.n	d605c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6046:	b11c      	cbz	r4, d6050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6048:	4629      	mov	r1, r5
   d604a:	4620      	mov	r0, r4
   d604c:	f7ff fcc5 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6050:	1d28      	adds	r0, r5, #4
   d6052:	f7ff fce4 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6056:	3508      	adds	r5, #8
   d6058:	3408      	adds	r4, #8
   d605a:	e7f2      	b.n	d6042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d605e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d605e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6060:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6062:	4605      	mov	r5, r0
        if (n > 0) {
   d6064:	dd11      	ble.n	d608a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6066:	00f0      	lsls	r0, r6, #3
   d6068:	f7fe fede 	bl	d4e28 <malloc>
            if (!d) {
   d606c:	4604      	mov	r4, r0
   d606e:	b158      	cbz	r0, d6088 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6070:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6074:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6078:	f7ff ffc7 	bl	d600a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d607c:	6828      	ldr	r0, [r5, #0]
   d607e:	f7fe fedb 	bl	d4e38 <free>
        data_ = d;
   d6082:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6084:	60ae      	str	r6, [r5, #8]
        return true;
   d6086:	2001      	movs	r0, #1
    }
   d6088:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d608a:	2400      	movs	r4, #0
   d608c:	e7f6      	b.n	d607c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d608e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d608e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6090:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6092:	6845      	ldr	r5, [r0, #4]
   d6094:	4668      	mov	r0, sp
   d6096:	f7ff fca0 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d609a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d609e:	4299      	cmp	r1, r3
   d60a0:	da10      	bge.n	d60c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d60a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d60a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d60a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d60aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d60ae:	4629      	mov	r1, r5
   d60b0:	f105 0008 	add.w	r0, r5, #8
   d60b4:	f7ff ffa9 	bl	d600a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d60b8:	b98d      	cbnz	r5, d60de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d60ba:	6863      	ldr	r3, [r4, #4]
   d60bc:	3301      	adds	r3, #1
   d60be:	6063      	str	r3, [r4, #4]
    return true;
   d60c0:	2601      	movs	r6, #1
   d60c2:	e006      	b.n	d60d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d60c4:	3101      	adds	r1, #1
   d60c6:	4620      	mov	r0, r4
   d60c8:	f7ff ffc9 	bl	d605e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d60cc:	4606      	mov	r6, r0
   d60ce:	2800      	cmp	r0, #0
   d60d0:	d1e7      	bne.n	d60a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d60d2:	a801      	add	r0, sp, #4
   d60d4:	f7ff fca3 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d60d8:	4630      	mov	r0, r6
   d60da:	b002      	add	sp, #8
   d60dc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d60de:	4669      	mov	r1, sp
   d60e0:	4628      	mov	r0, r5
   d60e2:	f7ff fc7a 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
   d60e6:	e7e8      	b.n	d60ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d60e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d60e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60ec:	4617      	mov	r7, r2
   d60ee:	b0a1      	sub	sp, #132	; 0x84
   d60f0:	4680      	mov	r8, r0
    WiringBleLock lk;
   d60f2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d60f4:	460e      	mov	r6, r1
    WiringBleLock lk;
   d60f6:	f7ff f8f6 	bl	d52e6 <_ZN8particle3ble13WiringBleLockC1Ev>
   d60fa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d60fc:	7923      	ldrb	r3, [r4, #4]
   d60fe:	b953      	cbnz	r3, d6116 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d6100:	4639      	mov	r1, r7
   d6102:	4640      	mov	r0, r8
   d6104:	f7ff fc69 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d6108:	a80a      	add	r0, sp, #40	; 0x28
   d610a:	f7ff f8f4 	bl	d52f6 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d610e:	4640      	mov	r0, r8
   d6110:	b021      	add	sp, #132	; 0x84
   d6112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6116:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d6118:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d611c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6120:	9303      	str	r3, [sp, #12]
   d6122:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d6126:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d612a:	9b03      	ldr	r3, [sp, #12]
   d612c:	429d      	cmp	r5, r3
   d612e:	d021      	beq.n	d6174 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d6130:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d6134:	4658      	mov	r0, fp
   d6136:	f109 0114 	add.w	r1, r9, #20
   d613a:	f7ff f9fe 	bl	d553a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d613e:	b1b8      	cbz	r0, d6170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d6140:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6144:	4650      	mov	r0, sl
   d6146:	f7ff f9f8 	bl	d553a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d614a:	b188      	cbz	r0, d6170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d614c:	6823      	ldr	r3, [r4, #0]
   d614e:	f8d9 2000 	ldr.w	r2, [r9]
   d6152:	4053      	eors	r3, r2
   d6154:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6158:	d10a      	bne.n	d6170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d615a:	2220      	movs	r2, #32
   d615c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d6160:	4a5e      	ldr	r2, [pc, #376]	; (d62dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d6162:	9200      	str	r2, [sp, #0]
   d6164:	aa15      	add	r2, sp, #84	; 0x54
   d6166:	495e      	ldr	r1, [pc, #376]	; (d62e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d6168:	2032      	movs	r0, #50	; 0x32
   d616a:	f7fe fdc1 	bl	d4cf0 <log_message>
   d616e:	e7c7      	b.n	d6100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d6170:	3508      	adds	r5, #8
   d6172:	e7da      	b.n	d612a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d6174:	4650      	mov	r0, sl
   d6176:	f7ff f9ab 	bl	d54d0 <_ZNK8particle7BleUuid7isValidEv>
   d617a:	b960      	cbnz	r0, d6196 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d617c:	4959      	ldr	r1, [pc, #356]	; (d62e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d617e:	2201      	movs	r2, #1
   d6180:	a815      	add	r0, sp, #84	; 0x54
   d6182:	ad15      	add	r5, sp, #84	; 0x54
   d6184:	f7ff f97b 	bl	d547e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d618a:	46d4      	mov	ip, sl
   d618c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6190:	682b      	ldr	r3, [r5, #0]
   d6192:	f8cc 3000 	str.w	r3, [ip]
   d6196:	6833      	ldr	r3, [r6, #0]
   d6198:	e9d3 5300 	ldrd	r5, r3, [r3]
   d619c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d61a0:	455d      	cmp	r5, fp
   d61a2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d61a4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d61a6:	d06e      	beq.n	d6286 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d61a8:	f855 0b08 	ldr.w	r0, [r5], #8
   d61ac:	f7ff f9c5 	bl	d553a <_ZNK8particle7BleUuideqERKS0_>
   d61b0:	2800      	cmp	r0, #0
   d61b2:	d0f5      	beq.n	d61a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d61b4:	f104 0a14 	add.w	sl, r4, #20
   d61b8:	4650      	mov	r0, sl
   d61ba:	f7ff f989 	bl	d54d0 <_ZNK8particle7BleUuid7isValidEv>
   d61be:	b988      	cbnz	r0, d61e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d61c0:	4b49      	ldr	r3, [pc, #292]	; (d62e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d61c2:	4948      	ldr	r1, [pc, #288]	; (d62e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d61c4:	881a      	ldrh	r2, [r3, #0]
   d61c6:	3201      	adds	r2, #1
   d61c8:	b292      	uxth	r2, r2
   d61ca:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d61cc:	a815      	add	r0, sp, #84	; 0x54
   d61ce:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d61d0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d61d2:	f7ff f973 	bl	d54bc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d61d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61d8:	46d4      	mov	ip, sl
   d61da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d61de:	682b      	ldr	r3, [r5, #0]
   d61e0:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d61e4:	2228      	movs	r2, #40	; 0x28
   d61e6:	2100      	movs	r1, #0
   d61e8:	a816      	add	r0, sp, #88	; 0x58
   d61ea:	f000 fe97 	bl	d6f1c <memset>
    charInit.version = BLE_API_VERSION;
   d61ee:	4b3f      	ldr	r3, [pc, #252]	; (d62ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d61f0:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d61f2:	4651      	mov	r1, sl
   d61f4:	a804      	add	r0, sp, #16
   d61f6:	f7ff f97d 	bl	d54f4 <_ZN8particle7BleUuid7halUUIDEv>
   d61fa:	ab04      	add	r3, sp, #16
   d61fc:	aa18      	add	r2, sp, #96	; 0x60
   d61fe:	f10d 0c20 	add.w	ip, sp, #32
   d6202:	6818      	ldr	r0, [r3, #0]
   d6204:	6859      	ldr	r1, [r3, #4]
   d6206:	4615      	mov	r5, r2
   d6208:	c503      	stmia	r5!, {r0, r1}
   d620a:	3308      	adds	r3, #8
   d620c:	4563      	cmp	r3, ip
   d620e:	462a      	mov	r2, r5
   d6210:	d1f7      	bne.n	d6202 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d6212:	6818      	ldr	r0, [r3, #0]
   d6214:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d6216:	7923      	ldrb	r3, [r4, #4]
   d6218:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d621c:	f8d9 3000 	ldr.w	r3, [r9]
   d6220:	8a9b      	ldrh	r3, [r3, #20]
   d6222:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6228:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d622a:	4b31      	ldr	r3, [pc, #196]	; (d62f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d622c:	2200      	movs	r2, #0
   d622e:	1da1      	adds	r1, r4, #6
   d6230:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d6232:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6236:	f7fe fc4f 	bl	d4ad8 <hal_ble_gatt_server_add_characteristic>
   d623a:	2800      	cmp	r0, #0
   d623c:	f47f af60 	bne.w	d6100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d6240:	2301      	movs	r3, #1
   d6242:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d6244:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d6246:	4639      	mov	r1, r7
        return characteristics_;
   d6248:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d624a:	a80d      	add	r0, sp, #52	; 0x34
   d624c:	f7ff fbc5 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6250:	4620      	mov	r0, r4
   d6252:	a90d      	add	r1, sp, #52	; 0x34
   d6254:	f7ff ff1b 	bl	d608e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6258:	4604      	mov	r4, r0
   d625a:	a80e      	add	r0, sp, #56	; 0x38
   d625c:	f7ff fbdf 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6260:	2c00      	cmp	r4, #0
   d6262:	f47f af4d 	bne.w	d6100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6266:	2320      	movs	r3, #32
   d6268:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d626c:	4b21      	ldr	r3, [pc, #132]	; (d62f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d626e:	9300      	str	r3, [sp, #0]
   d6270:	aa0d      	add	r2, sp, #52	; 0x34
   d6272:	4623      	mov	r3, r4
   d6274:	e777      	b.n	d6166 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6276:	4639      	mov	r1, r7
   d6278:	4640      	mov	r0, r8
   d627a:	f7ff fbae 	bl	d59da <_ZN8particle17BleCharacteristicC1ERKS0_>
   d627e:	a80c      	add	r0, sp, #48	; 0x30
   d6280:	f7ff fbcd 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6284:	e740      	b.n	d6108 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6286:	a80b      	add	r0, sp, #44	; 0x2c
   d6288:	f7ff fa50 	bl	d572c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d628c:	4651      	mov	r1, sl
   d628e:	a815      	add	r0, sp, #84	; 0x54
   d6290:	f7ff f930 	bl	d54f4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6296:	2300      	movs	r3, #0
   d6298:	3214      	adds	r2, #20
   d629a:	a915      	add	r1, sp, #84	; 0x54
   d629c:	2001      	movs	r0, #1
   d629e:	f7fe fc11 	bl	d4ac4 <hal_ble_gatt_server_add_service>
   d62a2:	2800      	cmp	r0, #0
   d62a4:	d1e7      	bne.n	d6276 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d62a6:	6835      	ldr	r5, [r6, #0]
   d62a8:	a90b      	add	r1, sp, #44	; 0x2c
   d62aa:	a80d      	add	r0, sp, #52	; 0x34
   d62ac:	f7ff fba3 	bl	d59f6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d62b0:	4628      	mov	r0, r5
   d62b2:	a90d      	add	r1, sp, #52	; 0x34
   d62b4:	f7ff fe7c 	bl	d5fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d62b8:	4605      	mov	r5, r0
   d62ba:	a80e      	add	r0, sp, #56	; 0x38
   d62bc:	f7ff fbaf 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62c0:	2d00      	cmp	r5, #0
   d62c2:	d0d8      	beq.n	d6276 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d62c4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d62c6:	6853      	ldr	r3, [r2, #4]
   d62c8:	6812      	ldr	r2, [r2, #0]
   d62ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d62ce:	3b01      	subs	r3, #1
   d62d0:	a80c      	add	r0, sp, #48	; 0x30
   d62d2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d62d6:	f7ff fba2 	bl	d5a1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62da:	e76b      	b.n	d61b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d62dc:	000d71d9 	.word	0x000d71d9
   d62e0:	000d7138 	.word	0x000d7138
   d62e4:	000d7298 	.word	0x000d7298
   d62e8:	2003e654 	.word	0x2003e654
   d62ec:	002c0001 	.word	0x002c0001
   d62f0:	000d58bd 	.word	0x000d58bd
   d62f4:	000d7204 	.word	0x000d7204

000d62f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d62f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d62fa:	4c06      	ldr	r4, [pc, #24]	; (d6314 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d62fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d62fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6300:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6302:	f7fe fbfd 	bl	d4b00 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6306:	4620      	mov	r0, r4
   d6308:	4a03      	ldr	r2, [pc, #12]	; (d6318 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d630a:	4904      	ldr	r1, [pc, #16]	; (d631c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6310:	f000 bca2 	b.w	d6c58 <__aeabi_atexit>
   d6314:	2003e658 	.word	0x2003e658
   d6318:	2003e59c 	.word	0x2003e59c
   d631c:	000d50f7 	.word	0x000d50f7

000d6320 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6322:	4606      	mov	r6, r0
   d6324:	460d      	mov	r5, r1
  size_t n = 0;
   d6326:	188f      	adds	r7, r1, r2
   d6328:	2400      	movs	r4, #0
  while (size--) {
   d632a:	42bd      	cmp	r5, r7
   d632c:	d00c      	beq.n	d6348 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d632e:	6833      	ldr	r3, [r6, #0]
   d6330:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6334:	689b      	ldr	r3, [r3, #8]
   d6336:	4630      	mov	r0, r6
   d6338:	4798      	blx	r3
     if (chunk>=0)
   d633a:	1e03      	subs	r3, r0, #0
   d633c:	db01      	blt.n	d6342 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d633e:	441c      	add	r4, r3
  while (size--) {
   d6340:	e7f3      	b.n	d632a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6342:	2c00      	cmp	r4, #0
   d6344:	bf08      	it	eq
   d6346:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6348:	4620      	mov	r0, r4
   d634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d634c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d634c:	b513      	push	{r0, r1, r4, lr}
   d634e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6350:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6352:	b159      	cbz	r1, d636c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6354:	9101      	str	r1, [sp, #4]
   d6356:	f000 fe17 	bl	d6f88 <strlen>
   d635a:	6823      	ldr	r3, [r4, #0]
   d635c:	9901      	ldr	r1, [sp, #4]
   d635e:	68db      	ldr	r3, [r3, #12]
   d6360:	4602      	mov	r2, r0
   d6362:	4620      	mov	r0, r4
    }
   d6364:	b002      	add	sp, #8
   d6366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d636a:	4718      	bx	r3
    }
   d636c:	b002      	add	sp, #8
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6370:	6803      	ldr	r3, [r0, #0]
   d6372:	689b      	ldr	r3, [r3, #8]
   d6374:	4718      	bx	r3

000d6376 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6376:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6378:	210d      	movs	r1, #13
{
   d637a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d637c:	f7ff fff8 	bl	d6370 <_ZN5Print5printEc>
  n += print('\n');
   d6380:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6382:	4604      	mov	r4, r0
  n += print('\n');
   d6384:	4628      	mov	r0, r5
   d6386:	f7ff fff3 	bl	d6370 <_ZN5Print5printEc>
  return n;
}
   d638a:	4420      	add	r0, r4
   d638c:	bd38      	pop	{r3, r4, r5, pc}

000d638e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d638e:	b530      	push	{r4, r5, lr}
   d6390:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6392:	2300      	movs	r3, #0
   d6394:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6398:	2a01      	cmp	r2, #1
   d639a:	bf98      	it	ls
   d639c:	220a      	movls	r2, #10
   d639e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d63a0:	460d      	mov	r5, r1
   d63a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d63a6:	fb01 5312 	mls	r3, r1, r2, r5
   d63aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d63ae:	2b09      	cmp	r3, #9
   d63b0:	bf94      	ite	ls
   d63b2:	3330      	addls	r3, #48	; 0x30
   d63b4:	3337      	addhi	r3, #55	; 0x37
   d63b6:	b2db      	uxtb	r3, r3
  } while(n);
   d63b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d63ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d63be:	d9ef      	bls.n	d63a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d63c0:	4621      	mov	r1, r4
   d63c2:	f7ff ffc3 	bl	d634c <_ZN5Print5writeEPKc>
}
   d63c6:	b00b      	add	sp, #44	; 0x2c
   d63c8:	bd30      	pop	{r4, r5, pc}

000d63ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d63ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63ce:	b086      	sub	sp, #24
   d63d0:	af00      	add	r7, sp, #0
   d63d2:	4605      	mov	r5, r0
   d63d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d63d6:	1d38      	adds	r0, r7, #4
   d63d8:	2114      	movs	r1, #20
{
   d63da:	4614      	mov	r4, r2
    va_copy(args2, args);
   d63dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d63de:	f7fe fd3b 	bl	d4e58 <vsnprintf>

    if (n<bufsize)
   d63e2:	2813      	cmp	r0, #19
   d63e4:	d80e      	bhi.n	d6404 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d63e6:	1d39      	adds	r1, r7, #4
   d63e8:	4628      	mov	r0, r5
   d63ea:	f7ff ffaf 	bl	d634c <_ZN5Print5writeEPKc>
   d63ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d63f0:	b11e      	cbz	r6, d63fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d63f2:	4628      	mov	r0, r5
   d63f4:	f7ff ffbf 	bl	d6376 <_ZN5Print7printlnEv>
   d63f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d63fa:	4620      	mov	r0, r4
   d63fc:	3718      	adds	r7, #24
   d63fe:	46bd      	mov	sp, r7
   d6400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6404:	f100 0308 	add.w	r3, r0, #8
   d6408:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d640c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d640e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6412:	4622      	mov	r2, r4
   d6414:	1c41      	adds	r1, r0, #1
   d6416:	683b      	ldr	r3, [r7, #0]
   d6418:	4668      	mov	r0, sp
   d641a:	f7fe fd1d 	bl	d4e58 <vsnprintf>
  return write(str);
   d641e:	4669      	mov	r1, sp
   d6420:	4628      	mov	r0, r5
   d6422:	f7ff ff93 	bl	d634c <_ZN5Print5writeEPKc>
   d6426:	4604      	mov	r4, r0
   d6428:	46c5      	mov	sp, r8
   d642a:	e7e1      	b.n	d63f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d642c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d642c:	2300      	movs	r3, #0
   d642e:	6840      	ldr	r0, [r0, #4]
   d6430:	461a      	mov	r2, r3
   d6432:	4619      	mov	r1, r3
   d6434:	f7fe bca8 	b.w	d4d88 <network_on>

000d6438 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6438:	4b01      	ldr	r3, [pc, #4]	; (d6440 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d643a:	4a02      	ldr	r2, [pc, #8]	; (d6444 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d643c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d643e:	4770      	bx	lr
   d6440:	2003e660 	.word	0x2003e660
   d6444:	000d72b8 	.word	0x000d72b8

000d6448 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6448:	4b02      	ldr	r3, [pc, #8]	; (d6454 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	4b02      	ldr	r3, [pc, #8]	; (d6458 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d644e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6450:	4770      	bx	lr
   d6452:	bf00      	nop
   d6454:	2003e534 	.word	0x2003e534
   d6458:	2003e664 	.word	0x2003e664

000d645c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d645c:	2100      	movs	r1, #0
   d645e:	f7fe bc57 	b.w	d4d10 <system_delay_ms>

000d6462 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6462:	b510      	push	{r4, lr}
   d6464:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d6466:	f7fe ff15 	bl	d5294 <_ZNSt14_Function_baseD1Ev>
   d646a:	4620      	mov	r0, r4
   d646c:	bd10      	pop	{r4, pc}
	...

000d6470 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6470:	4803      	ldr	r0, [pc, #12]	; (d6480 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6472:	4a04      	ldr	r2, [pc, #16]	; (d6484 <_GLOBAL__sub_I_RGB+0x14>)
   d6474:	4904      	ldr	r1, [pc, #16]	; (d6488 <_GLOBAL__sub_I_RGB+0x18>)
   d6476:	2300      	movs	r3, #0
   d6478:	6083      	str	r3, [r0, #8]
   d647a:	f000 bbed 	b.w	d6c58 <__aeabi_atexit>
   d647e:	bf00      	nop
   d6480:	2003e668 	.word	0x2003e668
   d6484:	2003e59c 	.word	0x2003e59c
   d6488:	000d6463 	.word	0x000d6463

000d648c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d648c:	4b01      	ldr	r3, [pc, #4]	; (d6494 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d648e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6490:	4770      	bx	lr
   d6492:	bf00      	nop
   d6494:	2003e538 	.word	0x2003e538

000d6498 <serialEventRun>:
{
   d6498:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d649a:	4b0b      	ldr	r3, [pc, #44]	; (d64c8 <serialEventRun+0x30>)
   d649c:	b143      	cbz	r3, d64b0 <serialEventRun+0x18>
   d649e:	f000 f95f 	bl	d6760 <_Z16_fetch_usbserialv>
   d64a2:	6803      	ldr	r3, [r0, #0]
   d64a4:	691b      	ldr	r3, [r3, #16]
   d64a6:	4798      	blx	r3
   d64a8:	2800      	cmp	r0, #0
   d64aa:	dd01      	ble.n	d64b0 <serialEventRun+0x18>
        serialEvent();
   d64ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d64b0:	4b06      	ldr	r3, [pc, #24]	; (d64cc <serialEventRun+0x34>)
   d64b2:	b143      	cbz	r3, d64c6 <serialEventRun+0x2e>
   d64b4:	f000 f9d2 	bl	d685c <_Z22__fetch_global_Serial1v>
   d64b8:	6803      	ldr	r3, [r0, #0]
   d64ba:	691b      	ldr	r3, [r3, #16]
   d64bc:	4798      	blx	r3
   d64be:	2800      	cmp	r0, #0
   d64c0:	dd01      	ble.n	d64c6 <serialEventRun+0x2e>
        serialEvent1();
   d64c2:	f3af 8000 	nop.w
}
   d64c6:	bd08      	pop	{r3, pc}
	...

000d64d0 <_post_loop>:
{
   d64d0:	b508      	push	{r3, lr}
	serialEventRun();
   d64d2:	f7ff ffe1 	bl	d6498 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d64d6:	f7fe fab3 	bl	d4a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d64da:	4b01      	ldr	r3, [pc, #4]	; (d64e0 <_post_loop+0x10>)
   d64dc:	6018      	str	r0, [r3, #0]
}
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	2003e7d4 	.word	0x2003e7d4

000d64e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d64e4:	4802      	ldr	r0, [pc, #8]	; (d64f0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d64e6:	4a03      	ldr	r2, [pc, #12]	; (d64f4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d64e8:	4903      	ldr	r1, [pc, #12]	; (d64f8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d64ea:	1a12      	subs	r2, r2, r0
   d64ec:	f000 bcee 	b.w	d6ecc <memcpy>
   d64f0:	2003f400 	.word	0x2003f400
   d64f4:	2003f404 	.word	0x2003f404
   d64f8:	000d7510 	.word	0x000d7510

000d64fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d64fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64fe:	2300      	movs	r3, #0
   d6500:	9300      	str	r3, [sp, #0]
   d6502:	461a      	mov	r2, r3
   d6504:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6508:	f7fe fc14 	bl	d4d34 <system_ctrl_set_result>
}
   d650c:	b003      	add	sp, #12
   d650e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6514 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6514:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6516:	8843      	ldrh	r3, [r0, #2]
   d6518:	2b0a      	cmp	r3, #10
   d651a:	d008      	beq.n	d652e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d651c:	2b50      	cmp	r3, #80	; 0x50
   d651e:	d10b      	bne.n	d6538 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6520:	4b09      	ldr	r3, [pc, #36]	; (d6548 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6522:	681b      	ldr	r3, [r3, #0]
   d6524:	b14b      	cbz	r3, d653a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6526:	b003      	add	sp, #12
   d6528:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d652c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d652e:	f7ff ffe5 	bl	d64fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6532:	b003      	add	sp, #12
   d6534:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6538:	2300      	movs	r3, #0
   d653a:	9300      	str	r3, [sp, #0]
   d653c:	461a      	mov	r2, r3
   d653e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6542:	f7fe fbf7 	bl	d4d34 <system_ctrl_set_result>
}
   d6546:	e7f4      	b.n	d6532 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6548:	2003e67c 	.word	0x2003e67c

000d654c <module_user_init_hook>:
{
   d654c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d654e:	4c12      	ldr	r4, [pc, #72]	; (d6598 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6550:	4812      	ldr	r0, [pc, #72]	; (d659c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6552:	4d13      	ldr	r5, [pc, #76]	; (d65a0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6554:	2100      	movs	r1, #0
   d6556:	f7fe fc8f 	bl	d4e78 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d655a:	6823      	ldr	r3, [r4, #0]
   d655c:	42ab      	cmp	r3, r5
   d655e:	4b11      	ldr	r3, [pc, #68]	; (d65a4 <module_user_init_hook+0x58>)
   d6560:	bf0c      	ite	eq
   d6562:	2201      	moveq	r2, #1
   d6564:	2200      	movne	r2, #0
   d6566:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6568:	d002      	beq.n	d6570 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d656a:	f7ff ffbb 	bl	d64e4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d656e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6570:	f7fe fa4e 	bl	d4a10 <HAL_RNG_GetRandomNumber>
   d6574:	4604      	mov	r4, r0
    srand(seed);
   d6576:	f000 fcd9 	bl	d6f2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d657a:	4b0b      	ldr	r3, [pc, #44]	; (d65a8 <module_user_init_hook+0x5c>)
   d657c:	b113      	cbz	r3, d6584 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d657e:	4620      	mov	r0, r4
   d6580:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6584:	2100      	movs	r1, #0
   d6586:	4808      	ldr	r0, [pc, #32]	; (d65a8 <module_user_init_hook+0x5c>)
   d6588:	f7fe fc46 	bl	d4e18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d658c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6590:	4806      	ldr	r0, [pc, #24]	; (d65ac <module_user_init_hook+0x60>)
   d6592:	2100      	movs	r1, #0
   d6594:	f7fe bbc4 	b.w	d4d20 <system_ctrl_set_app_request_handler>
   d6598:	2003f400 	.word	0x2003f400
   d659c:	000d648d 	.word	0x000d648d
   d65a0:	9a271c1e 	.word	0x9a271c1e
   d65a4:	2003e678 	.word	0x2003e678
   d65a8:	00000000 	.word	0x00000000
   d65ac:	000d6515 	.word	0x000d6515

000d65b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d65b0:	4770      	bx	lr

000d65b2 <_ZN9IPAddressD0Ev>:
   d65b2:	b510      	push	{r4, lr}
   d65b4:	2118      	movs	r1, #24
   d65b6:	4604      	mov	r4, r0
   d65b8:	f000 fb53 	bl	d6c62 <_ZdlPvj>
   d65bc:	4620      	mov	r0, r4
   d65be:	bd10      	pop	{r4, pc}

000d65c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65c2:	7d03      	ldrb	r3, [r0, #20]
   d65c4:	2b06      	cmp	r3, #6
{
   d65c6:	b08d      	sub	sp, #52	; 0x34
   d65c8:	460e      	mov	r6, r1
   d65ca:	f100 0704 	add.w	r7, r0, #4
   d65ce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d65d2:	d012      	beq.n	d65fa <_ZNK9IPAddress7printToER5Print+0x3a>
   d65d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d65d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d65dc:	220a      	movs	r2, #10
   d65de:	4630      	mov	r0, r6
   d65e0:	f7ff fed5 	bl	d638e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d65e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d65e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d65e8:	d019      	beq.n	d661e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d65ea:	2c00      	cmp	r4, #0
   d65ec:	d0f4      	beq.n	d65d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d65ee:	212e      	movs	r1, #46	; 0x2e
   d65f0:	4630      	mov	r0, r6
   d65f2:	f7ff febd 	bl	d6370 <_ZN5Print5printEc>
   d65f6:	4404      	add	r4, r0
   d65f8:	e7ee      	b.n	d65d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65fa:	232f      	movs	r3, #47	; 0x2f
   d65fc:	466a      	mov	r2, sp
   d65fe:	4639      	mov	r1, r7
   d6600:	200a      	movs	r0, #10
		buf[0] = 0;
   d6602:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6606:	f7fe fa9b 	bl	d4b40 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d660a:	4668      	mov	r0, sp
   d660c:	f000 fcbc 	bl	d6f88 <strlen>
   d6610:	6833      	ldr	r3, [r6, #0]
   d6612:	4602      	mov	r2, r0
   d6614:	68db      	ldr	r3, [r3, #12]
   d6616:	4669      	mov	r1, sp
   d6618:	4630      	mov	r0, r6
   d661a:	4798      	blx	r3
   d661c:	4604      	mov	r4, r0
    }
    return n;
}
   d661e:	4620      	mov	r0, r4
   d6620:	b00d      	add	sp, #52	; 0x34
   d6622:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6624 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6624:	b510      	push	{r4, lr}
   d6626:	4b05      	ldr	r3, [pc, #20]	; (d663c <_ZN9IPAddressC1Ev+0x18>)
   d6628:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d662a:	2211      	movs	r2, #17
   d662c:	f840 3b04 	str.w	r3, [r0], #4
   d6630:	2100      	movs	r1, #0
   d6632:	f000 fc73 	bl	d6f1c <memset>
}
   d6636:	4620      	mov	r0, r4
   d6638:	bd10      	pop	{r4, pc}
   d663a:	bf00      	nop
   d663c:	000d72e0 	.word	0x000d72e0

000d6640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6640:	4603      	mov	r3, r0
   d6642:	4a07      	ldr	r2, [pc, #28]	; (d6660 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6644:	b510      	push	{r4, lr}
   d6646:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d664a:	f101 0210 	add.w	r2, r1, #16
   d664e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6652:	f843 4b04 	str.w	r4, [r3], #4
   d6656:	4291      	cmp	r1, r2
   d6658:	d1f9      	bne.n	d664e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d665a:	780a      	ldrb	r2, [r1, #0]
   d665c:	701a      	strb	r2, [r3, #0]
}
   d665e:	bd10      	pop	{r4, pc}
   d6660:	000d72e0 	.word	0x000d72e0

000d6664 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6664:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6666:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d666a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d666e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6672:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6676:	2304      	movs	r3, #4
   d6678:	6041      	str	r1, [r0, #4]
   d667a:	7503      	strb	r3, [r0, #20]
}
   d667c:	bd10      	pop	{r4, pc}
	...

000d6680 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6680:	b513      	push	{r0, r1, r4, lr}
   d6682:	4b05      	ldr	r3, [pc, #20]	; (d6698 <_ZN9IPAddressC1EPKh+0x18>)
   d6684:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6686:	78cb      	ldrb	r3, [r1, #3]
   d6688:	9300      	str	r3, [sp, #0]
   d668a:	788b      	ldrb	r3, [r1, #2]
   d668c:	784a      	ldrb	r2, [r1, #1]
   d668e:	7809      	ldrb	r1, [r1, #0]
   d6690:	f7ff ffe8 	bl	d6664 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6694:	b002      	add	sp, #8
   d6696:	bd10      	pop	{r4, pc}
   d6698:	000d72e0 	.word	0x000d72e0

000d669c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d669c:	7441      	strb	r1, [r0, #17]
}
   d669e:	4770      	bx	lr

000d66a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d66a0:	4770      	bx	lr

000d66a2 <_ZN9USBSerial4readEv>:
{
   d66a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d66a4:	2100      	movs	r1, #0
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7fe fafa 	bl	d4ca0 <HAL_USB_USART_Receive_Data>
}
   d66ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66b0:	bd08      	pop	{r3, pc}

000d66b2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d66b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d66b4:	2101      	movs	r1, #1
   d66b6:	7c00      	ldrb	r0, [r0, #16]
   d66b8:	f7fe faf2 	bl	d4ca0 <HAL_USB_USART_Receive_Data>
}
   d66bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66c0:	bd08      	pop	{r3, pc}

000d66c2 <_ZN9USBSerial17availableForWriteEv>:
{
   d66c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d66c4:	7c00      	ldrb	r0, [r0, #16]
   d66c6:	f7fe fae3 	bl	d4c90 <HAL_USB_USART_Available_Data_For_Write>
}
   d66ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66ce:	bd08      	pop	{r3, pc}

000d66d0 <_ZN9USBSerial9availableEv>:
{
   d66d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d66d2:	7c00      	ldrb	r0, [r0, #16]
   d66d4:	f7fe fad4 	bl	d4c80 <HAL_USB_USART_Available_Data>
}
   d66d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66dc:	bd08      	pop	{r3, pc}

000d66de <_ZN9USBSerial5writeEh>:
{
   d66de:	b513      	push	{r0, r1, r4, lr}
   d66e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e2:	7c00      	ldrb	r0, [r0, #16]
{
   d66e4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e6:	f7fe fad3 	bl	d4c90 <HAL_USB_USART_Available_Data_For_Write>
   d66ea:	2800      	cmp	r0, #0
   d66ec:	9901      	ldr	r1, [sp, #4]
   d66ee:	dc01      	bgt.n	d66f4 <_ZN9USBSerial5writeEh+0x16>
   d66f0:	7c60      	ldrb	r0, [r4, #17]
   d66f2:	b120      	cbz	r0, d66fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d66f4:	7c20      	ldrb	r0, [r4, #16]
   d66f6:	f7fe fadb 	bl	d4cb0 <HAL_USB_USART_Send_Data>
   d66fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d66fe:	b002      	add	sp, #8
   d6700:	bd10      	pop	{r4, pc}

000d6702 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6702:	7c00      	ldrb	r0, [r0, #16]
   d6704:	f7fe badc 	b.w	d4cc0 <HAL_USB_USART_Flush_Data>

000d6708 <_ZN9USBSerialD0Ev>:
   d6708:	b510      	push	{r4, lr}
   d670a:	2114      	movs	r1, #20
   d670c:	4604      	mov	r4, r0
   d670e:	f000 faa8 	bl	d6c62 <_ZdlPvj>
   d6712:	4620      	mov	r0, r4
   d6714:	bd10      	pop	{r4, pc}
	...

000d6718 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6718:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d671a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d671e:	4604      	mov	r4, r0
   d6720:	4608      	mov	r0, r1
   d6722:	2100      	movs	r1, #0
   d6724:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6728:	4b04      	ldr	r3, [pc, #16]	; (d673c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d672a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d672c:	2301      	movs	r3, #1
  _serial = serial;
   d672e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6730:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6732:	4611      	mov	r1, r2
   d6734:	f7fe fa94 	bl	d4c60 <HAL_USB_USART_Init>
}
   d6738:	4620      	mov	r0, r4
   d673a:	bd10      	pop	{r4, pc}
   d673c:	000d72f4 	.word	0x000d72f4

000d6740 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6740:	7c00      	ldrb	r0, [r0, #16]
   d6742:	2200      	movs	r2, #0
   d6744:	f7fe ba94 	b.w	d4c70 <HAL_USB_USART_Begin>

000d6748 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d6748:	7c00      	ldrb	r0, [r0, #16]
   d674a:	f7fe bac1 	b.w	d4cd0 <HAL_USB_USART_Is_Connected>

000d674e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d674e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6750:	2214      	movs	r2, #20
{
   d6752:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6754:	2100      	movs	r1, #0
   d6756:	f000 fbe1 	bl	d6f1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d675a:	4620      	mov	r0, r4
   d675c:	bd10      	pop	{r4, pc}
	...

000d6760 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6760:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6762:	4c10      	ldr	r4, [pc, #64]	; (d67a4 <_Z16_fetch_usbserialv+0x44>)
{
   d6764:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6766:	a803      	add	r0, sp, #12
   d6768:	f7ff fff1 	bl	d674e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d676c:	7821      	ldrb	r1, [r4, #0]
   d676e:	f3bf 8f5b 	dmb	ish
   d6772:	f011 0101 	ands.w	r1, r1, #1
   d6776:	d111      	bne.n	d679c <_Z16_fetch_usbserialv+0x3c>
   d6778:	4620      	mov	r0, r4
   d677a:	9101      	str	r1, [sp, #4]
   d677c:	f7fd fc8f 	bl	d409e <__cxa_guard_acquire>
   d6780:	9901      	ldr	r1, [sp, #4]
   d6782:	b158      	cbz	r0, d679c <_Z16_fetch_usbserialv+0x3c>
   d6784:	aa03      	add	r2, sp, #12
   d6786:	4808      	ldr	r0, [pc, #32]	; (d67a8 <_Z16_fetch_usbserialv+0x48>)
   d6788:	f7ff ffc6 	bl	d6718 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d678c:	4620      	mov	r0, r4
   d678e:	f7fd fc8b 	bl	d40a8 <__cxa_guard_release>
   d6792:	4a06      	ldr	r2, [pc, #24]	; (d67ac <_Z16_fetch_usbserialv+0x4c>)
   d6794:	4906      	ldr	r1, [pc, #24]	; (d67b0 <_Z16_fetch_usbserialv+0x50>)
   d6796:	4804      	ldr	r0, [pc, #16]	; (d67a8 <_Z16_fetch_usbserialv+0x48>)
   d6798:	f000 fa5e 	bl	d6c58 <__aeabi_atexit>
	return _usbserial;
}
   d679c:	4802      	ldr	r0, [pc, #8]	; (d67a8 <_Z16_fetch_usbserialv+0x48>)
   d679e:	b008      	add	sp, #32
   d67a0:	bd10      	pop	{r4, pc}
   d67a2:	bf00      	nop
   d67a4:	2003e680 	.word	0x2003e680
   d67a8:	2003e684 	.word	0x2003e684
   d67ac:	2003e59c 	.word	0x2003e59c
   d67b0:	000d66a1 	.word	0x000d66a1

000d67b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d67b4:	4770      	bx	lr

000d67b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d67b6:	7441      	strb	r1, [r0, #17]
}
   d67b8:	4770      	bx	lr

000d67ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d67ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d67bc:	7c00      	ldrb	r0, [r0, #16]
   d67be:	f7fe f9ff 	bl	d4bc0 <hal_usart_available_data_for_write>
}
   d67c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67c6:	bd08      	pop	{r3, pc}

000d67c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d67c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d67ca:	7c00      	ldrb	r0, [r0, #16]
   d67cc:	f7fe f9d0 	bl	d4b70 <hal_usart_available>
}
   d67d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67d4:	bd08      	pop	{r3, pc}

000d67d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d67d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d67d8:	7c00      	ldrb	r0, [r0, #16]
   d67da:	f7fe f9d9 	bl	d4b90 <hal_usart_peek>
}
   d67de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d67e2:	bd08      	pop	{r3, pc}

000d67e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d67e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d67e6:	7c00      	ldrb	r0, [r0, #16]
   d67e8:	f7fe f9ca 	bl	d4b80 <hal_usart_read>
}
   d67ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d67f0:	bd08      	pop	{r3, pc}

000d67f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d67f2:	7c00      	ldrb	r0, [r0, #16]
   d67f4:	f7fe b9d4 	b.w	d4ba0 <hal_usart_flush>

000d67f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d67f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d67fa:	7c45      	ldrb	r5, [r0, #17]
{
   d67fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d67fe:	b12d      	cbz	r5, d680c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6800:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6802:	b003      	add	sp, #12
   d6804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6808:	f7fe b9aa 	b.w	d4b60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d680c:	7c00      	ldrb	r0, [r0, #16]
   d680e:	9101      	str	r1, [sp, #4]
   d6810:	f7fe f9d6 	bl	d4bc0 <hal_usart_available_data_for_write>
   d6814:	2800      	cmp	r0, #0
   d6816:	9901      	ldr	r1, [sp, #4]
   d6818:	dcf2      	bgt.n	d6800 <_ZN11USARTSerial5writeEh+0x8>
}
   d681a:	4628      	mov	r0, r5
   d681c:	b003      	add	sp, #12
   d681e:	bd30      	pop	{r4, r5, pc}

000d6820 <_ZN11USARTSerialD0Ev>:
   d6820:	b510      	push	{r4, lr}
   d6822:	2114      	movs	r1, #20
   d6824:	4604      	mov	r4, r0
   d6826:	f000 fa1c 	bl	d6c62 <_ZdlPvj>
   d682a:	4620      	mov	r0, r4
   d682c:	bd10      	pop	{r4, pc}
	...

000d6830 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6830:	b510      	push	{r4, lr}
   d6832:	f04f 0c00 	mov.w	ip, #0
   d6836:	4604      	mov	r4, r0
   d6838:	4608      	mov	r0, r1
   d683a:	4611      	mov	r1, r2
   d683c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6840:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6844:	4a04      	ldr	r2, [pc, #16]	; (d6858 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6846:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6848:	2201      	movs	r2, #1
  _serial = serial;
   d684a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d684c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d684e:	461a      	mov	r2, r3
   d6850:	f7fe f97e 	bl	d4b50 <hal_usart_init>
}
   d6854:	4620      	mov	r0, r4
   d6856:	bd10      	pop	{r4, pc}
   d6858:	000d7324 	.word	0x000d7324

000d685c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d685c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d685e:	4c0e      	ldr	r4, [pc, #56]	; (d6898 <_Z22__fetch_global_Serial1v+0x3c>)
   d6860:	7821      	ldrb	r1, [r4, #0]
   d6862:	f3bf 8f5b 	dmb	ish
   d6866:	f011 0101 	ands.w	r1, r1, #1
   d686a:	d112      	bne.n	d6892 <_Z22__fetch_global_Serial1v+0x36>
   d686c:	4620      	mov	r0, r4
   d686e:	9101      	str	r1, [sp, #4]
   d6870:	f7fd fc15 	bl	d409e <__cxa_guard_acquire>
   d6874:	9901      	ldr	r1, [sp, #4]
   d6876:	b160      	cbz	r0, d6892 <_Z22__fetch_global_Serial1v+0x36>
   d6878:	4a08      	ldr	r2, [pc, #32]	; (d689c <_Z22__fetch_global_Serial1v+0x40>)
   d687a:	4b09      	ldr	r3, [pc, #36]	; (d68a0 <_Z22__fetch_global_Serial1v+0x44>)
   d687c:	4809      	ldr	r0, [pc, #36]	; (d68a4 <_Z22__fetch_global_Serial1v+0x48>)
   d687e:	f7ff ffd7 	bl	d6830 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6882:	4620      	mov	r0, r4
   d6884:	f7fd fc10 	bl	d40a8 <__cxa_guard_release>
   d6888:	4a07      	ldr	r2, [pc, #28]	; (d68a8 <_Z22__fetch_global_Serial1v+0x4c>)
   d688a:	4908      	ldr	r1, [pc, #32]	; (d68ac <_Z22__fetch_global_Serial1v+0x50>)
   d688c:	4805      	ldr	r0, [pc, #20]	; (d68a4 <_Z22__fetch_global_Serial1v+0x48>)
   d688e:	f000 f9e3 	bl	d6c58 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6892:	4804      	ldr	r0, [pc, #16]	; (d68a4 <_Z22__fetch_global_Serial1v+0x48>)
   d6894:	b002      	add	sp, #8
   d6896:	bd10      	pop	{r4, pc}
   d6898:	2003e698 	.word	0x2003e698
   d689c:	2003e69c 	.word	0x2003e69c
   d68a0:	2003e720 	.word	0x2003e720
   d68a4:	2003e7a4 	.word	0x2003e7a4
   d68a8:	2003e59c 	.word	0x2003e59c
   d68ac:	000d67b5 	.word	0x000d67b5

000d68b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d68b0:	4770      	bx	lr

000d68b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d68b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68b4:	4606      	mov	r6, r0
   d68b6:	4615      	mov	r5, r2
   d68b8:	460c      	mov	r4, r1
   d68ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d68bc:	42bc      	cmp	r4, r7
   d68be:	d006      	beq.n	d68ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d68c0:	6833      	ldr	r3, [r6, #0]
   d68c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d68c6:	689b      	ldr	r3, [r3, #8]
   d68c8:	4630      	mov	r0, r6
   d68ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d68cc:	e7f6      	b.n	d68bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d68ce:	4628      	mov	r0, r5
   d68d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d68d2:	7c00      	ldrb	r0, [r0, #16]
   d68d4:	2200      	movs	r2, #0
   d68d6:	f7fe b97b 	b.w	d4bd0 <hal_i2c_write>

000d68da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d68da:	7c00      	ldrb	r0, [r0, #16]
   d68dc:	2100      	movs	r1, #0
   d68de:	f7fe b97f 	b.w	d4be0 <hal_i2c_available>

000d68e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d68e2:	7c00      	ldrb	r0, [r0, #16]
   d68e4:	2100      	movs	r1, #0
   d68e6:	f7fe b983 	b.w	d4bf0 <hal_i2c_read>

000d68ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d68ea:	7c00      	ldrb	r0, [r0, #16]
   d68ec:	2100      	movs	r1, #0
   d68ee:	f7fe b987 	b.w	d4c00 <hal_i2c_peek>

000d68f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d68f2:	7c00      	ldrb	r0, [r0, #16]
   d68f4:	2100      	movs	r1, #0
   d68f6:	f7fe b98b 	b.w	d4c10 <hal_i2c_flush>

000d68fa <_ZN7TwoWireD0Ev>:
   d68fa:	b510      	push	{r4, lr}
   d68fc:	2114      	movs	r1, #20
   d68fe:	4604      	mov	r4, r0
   d6900:	f000 f9af 	bl	d6c62 <_ZdlPvj>
   d6904:	4620      	mov	r0, r4
   d6906:	bd10      	pop	{r4, pc}

000d6908 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6908:	b510      	push	{r4, lr}
   d690a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d690e:	4604      	mov	r4, r0
   d6910:	4608      	mov	r0, r1
   d6912:	2100      	movs	r1, #0
   d6914:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6918:	4b03      	ldr	r3, [pc, #12]	; (d6928 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d691a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d691c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d691e:	4611      	mov	r1, r2
   d6920:	f7fe f986 	bl	d4c30 <hal_i2c_init>
}
   d6924:	4620      	mov	r0, r4
   d6926:	bd10      	pop	{r4, pc}
   d6928:	000d7354 	.word	0x000d7354

000d692c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d692c:	2200      	movs	r2, #0
   d692e:	6840      	ldr	r0, [r0, #4]
   d6930:	4611      	mov	r1, r2
   d6932:	f7fe ba21 	b.w	d4d78 <network_ready>

000d6936 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6936:	2200      	movs	r2, #0
   d6938:	6840      	ldr	r0, [r0, #4]
   d693a:	4611      	mov	r1, r2
   d693c:	f7fe ba3c 	b.w	d4db8 <network_listening>

000d6940 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6940:	2200      	movs	r2, #0
   d6942:	6840      	ldr	r0, [r0, #4]
   d6944:	4611      	mov	r1, r2
   d6946:	f7fe ba47 	b.w	d4dd8 <network_get_listen_timeout>

000d694a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d694a:	6840      	ldr	r0, [r0, #4]
   d694c:	2200      	movs	r2, #0
   d694e:	f7fe ba3b 	b.w	d4dc8 <network_set_listen_timeout>

000d6952 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6952:	6840      	ldr	r0, [r0, #4]
   d6954:	2200      	movs	r2, #0
   d6956:	f081 0101 	eor.w	r1, r1, #1
   d695a:	f7fe ba25 	b.w	d4da8 <network_listen>

000d695e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d695e:	2300      	movs	r3, #0
   d6960:	6840      	ldr	r0, [r0, #4]
   d6962:	461a      	mov	r2, r3
   d6964:	4619      	mov	r1, r3
   d6966:	f7fe ba17 	b.w	d4d98 <network_off>

000d696a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d696a:	2200      	movs	r2, #0
   d696c:	6840      	ldr	r0, [r0, #4]
   d696e:	4611      	mov	r1, r2
   d6970:	f7fe b9f2 	b.w	d4d58 <network_connecting>

000d6974 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6974:	6840      	ldr	r0, [r0, #4]
   d6976:	2200      	movs	r2, #0
   d6978:	2102      	movs	r1, #2
   d697a:	f7fe b9f5 	b.w	d4d68 <network_disconnect>

000d697e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d697e:	2300      	movs	r3, #0
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	461a      	mov	r2, r3
   d6984:	f7fe b9e0 	b.w	d4d48 <network_connect>

000d6988 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6988:	4b02      	ldr	r3, [pc, #8]	; (d6994 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d698a:	2204      	movs	r2, #4
   d698c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d698e:	4a02      	ldr	r2, [pc, #8]	; (d6998 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6990:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6992:	4770      	bx	lr
   d6994:	2003e7b8 	.word	0x2003e7b8
   d6998:	000d737c 	.word	0x000d737c

000d699c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d699c:	2300      	movs	r3, #0
   d699e:	6840      	ldr	r0, [r0, #4]
   d69a0:	461a      	mov	r2, r3
   d69a2:	f7fe b9d1 	b.w	d4d48 <network_connect>

000d69a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d69a6:	6840      	ldr	r0, [r0, #4]
   d69a8:	2200      	movs	r2, #0
   d69aa:	2102      	movs	r1, #2
   d69ac:	f7fe b9dc 	b.w	d4d68 <network_disconnect>

000d69b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d69b0:	2200      	movs	r2, #0
   d69b2:	6840      	ldr	r0, [r0, #4]
   d69b4:	4611      	mov	r1, r2
   d69b6:	f7fe b9cf 	b.w	d4d58 <network_connecting>

000d69ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d69ba:	2200      	movs	r2, #0
   d69bc:	6840      	ldr	r0, [r0, #4]
   d69be:	4611      	mov	r1, r2
   d69c0:	f7fe b9da 	b.w	d4d78 <network_ready>

000d69c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d69c4:	2300      	movs	r3, #0
   d69c6:	6840      	ldr	r0, [r0, #4]
   d69c8:	461a      	mov	r2, r3
   d69ca:	4619      	mov	r1, r3
   d69cc:	f7fe b9dc 	b.w	d4d88 <network_on>

000d69d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d69d0:	2300      	movs	r3, #0
   d69d2:	6840      	ldr	r0, [r0, #4]
   d69d4:	461a      	mov	r2, r3
   d69d6:	4619      	mov	r1, r3
   d69d8:	f7fe b9de 	b.w	d4d98 <network_off>

000d69dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d69dc:	6840      	ldr	r0, [r0, #4]
   d69de:	2100      	movs	r1, #0
   d69e0:	f7fe ba02 	b.w	d4de8 <network_is_on>

000d69e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	2100      	movs	r1, #0
   d69e8:	f7fe ba06 	b.w	d4df8 <network_is_off>

000d69ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d69ec:	6840      	ldr	r0, [r0, #4]
   d69ee:	2200      	movs	r2, #0
   d69f0:	f081 0101 	eor.w	r1, r1, #1
   d69f4:	f7fe b9d8 	b.w	d4da8 <network_listen>

000d69f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d69f8:	6840      	ldr	r0, [r0, #4]
   d69fa:	2200      	movs	r2, #0
   d69fc:	f7fe b9e4 	b.w	d4dc8 <network_set_listen_timeout>

000d6a00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6a00:	2200      	movs	r2, #0
   d6a02:	6840      	ldr	r0, [r0, #4]
   d6a04:	4611      	mov	r1, r2
   d6a06:	f7fe b9e7 	b.w	d4dd8 <network_get_listen_timeout>

000d6a0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6a0a:	2200      	movs	r2, #0
   d6a0c:	6840      	ldr	r0, [r0, #4]
   d6a0e:	4611      	mov	r1, r2
   d6a10:	f7fe b9d2 	b.w	d4db8 <network_listening>

000d6a14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a18:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6a1a:	b095      	sub	sp, #84	; 0x54
   d6a1c:	4616      	mov	r6, r2
   d6a1e:	460d      	mov	r5, r1
   d6a20:	4607      	mov	r7, r0
    IPAddress addr;
   d6a22:	f7ff fdff 	bl	d6624 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6a26:	4621      	mov	r1, r4
   d6a28:	2218      	movs	r2, #24
   d6a2a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6a2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a2e:	f000 fa75 	bl	d6f1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a32:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6a34:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a38:	4621      	mov	r1, r4
   d6a3a:	466b      	mov	r3, sp
   d6a3c:	aa0c      	add	r2, sp, #48	; 0x30
   d6a3e:	4630      	mov	r0, r6
   d6a40:	f7fd ffbe 	bl	d49c0 <netdb_getaddrinfo>
    if (!r) {
   d6a44:	4604      	mov	r4, r0
   d6a46:	2800      	cmp	r0, #0
   d6a48:	d14c      	bne.n	d6ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a4a:	4602      	mov	r2, r0
   d6a4c:	2101      	movs	r1, #1
   d6a4e:	6868      	ldr	r0, [r5, #4]
   d6a50:	f7fe f992 	bl	d4d78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a58:	4622      	mov	r2, r4
   d6a5a:	6868      	ldr	r0, [r5, #4]
   d6a5c:	f7fe f98c 	bl	d4d78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a62:	4681      	mov	r9, r0
        bool ok = false;
   d6a64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a66:	2e00      	cmp	r6, #0
   d6a68:	d03c      	beq.n	d6ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6a6a:	2900      	cmp	r1, #0
   d6a6c:	d13a      	bne.n	d6ae4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6a6e:	6873      	ldr	r3, [r6, #4]
   d6a70:	2b02      	cmp	r3, #2
   d6a72:	d003      	beq.n	d6a7c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6a74:	2b0a      	cmp	r3, #10
   d6a76:	d011      	beq.n	d6a9c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a78:	69f6      	ldr	r6, [r6, #28]
   d6a7a:	e7f4      	b.n	d6a66 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6a7c:	f1b8 0f00 	cmp.w	r8, #0
   d6a80:	d00a      	beq.n	d6a98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6a82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6a84:	a806      	add	r0, sp, #24
   d6a86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6a88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6a8a:	f7ff fdf9 	bl	d6680 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a90:	1d3c      	adds	r4, r7, #4
   d6a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a94:	682b      	ldr	r3, [r5, #0]
   d6a96:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6a98:	4641      	mov	r1, r8
   d6a9a:	e7ed      	b.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6a9c:	f1b9 0f00 	cmp.w	r9, #0
   d6aa0:	d101      	bne.n	d6aa6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6aa2:	4649      	mov	r1, r9
   d6aa4:	e7e8      	b.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6aa6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6aa8:	2210      	movs	r2, #16
   d6aaa:	a801      	add	r0, sp, #4
   d6aac:	f000 fa36 	bl	d6f1c <memset>
                    a.v = 6;
   d6ab0:	2306      	movs	r3, #6
   d6ab2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ab6:	ad01      	add	r5, sp, #4
   d6ab8:	f104 0308 	add.w	r3, r4, #8
   d6abc:	3418      	adds	r4, #24
   d6abe:	6818      	ldr	r0, [r3, #0]
   d6ac0:	6859      	ldr	r1, [r3, #4]
   d6ac2:	462a      	mov	r2, r5
   d6ac4:	c203      	stmia	r2!, {r0, r1}
   d6ac6:	3308      	adds	r3, #8
   d6ac8:	42a3      	cmp	r3, r4
   d6aca:	4615      	mov	r5, r2
   d6acc:	d1f7      	bne.n	d6abe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6ace:	a901      	add	r1, sp, #4
   d6ad0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6ad2:	ad07      	add	r5, sp, #28
   d6ad4:	f7ff fdb4 	bl	d6640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ada:	1d3c      	adds	r4, r7, #4
   d6adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ade:	682b      	ldr	r3, [r5, #0]
   d6ae0:	7023      	strb	r3, [r4, #0]
   d6ae2:	e7de      	b.n	d6aa2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ae4:	9800      	ldr	r0, [sp, #0]
   d6ae6:	f7fd ff63 	bl	d49b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6aea:	4638      	mov	r0, r7
   d6aec:	b015      	add	sp, #84	; 0x54
   d6aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6af4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6af4:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6af6:	4a03      	ldr	r2, [pc, #12]	; (d6b04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6af8:	601a      	str	r2, [r3, #0]
   d6afa:	2200      	movs	r2, #0
   d6afc:	605a      	str	r2, [r3, #4]

} // spark
   d6afe:	4770      	bx	lr
   d6b00:	2003e7c0 	.word	0x2003e7c0
   d6b04:	000d73b8 	.word	0x000d73b8

000d6b08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6b08:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6b0a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6b0c:	d902      	bls.n	d6b14 <pinAvailable+0xc>
    return false;
   d6b0e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6b10:	b002      	add	sp, #8
   d6b12:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6b14:	f1a0 030b 	sub.w	r3, r0, #11
   d6b18:	2b02      	cmp	r3, #2
   d6b1a:	d81a      	bhi.n	d6b52 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6b1c:	4c17      	ldr	r4, [pc, #92]	; (d6b7c <pinAvailable+0x74>)
   d6b1e:	7821      	ldrb	r1, [r4, #0]
   d6b20:	f3bf 8f5b 	dmb	ish
   d6b24:	f011 0101 	ands.w	r1, r1, #1
   d6b28:	d10b      	bne.n	d6b42 <pinAvailable+0x3a>
   d6b2a:	4620      	mov	r0, r4
   d6b2c:	9101      	str	r1, [sp, #4]
   d6b2e:	f7fd fab6 	bl	d409e <__cxa_guard_acquire>
   d6b32:	9901      	ldr	r1, [sp, #4]
   d6b34:	b128      	cbz	r0, d6b42 <pinAvailable+0x3a>
   d6b36:	4812      	ldr	r0, [pc, #72]	; (d6b80 <pinAvailable+0x78>)
   d6b38:	f7fe f9e4 	bl	d4f04 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f7fd fab3 	bl	d40a8 <__cxa_guard_release>
   d6b42:	4b0f      	ldr	r3, [pc, #60]	; (d6b80 <pinAvailable+0x78>)
   d6b44:	7818      	ldrb	r0, [r3, #0]
   d6b46:	f7fe f883 	bl	d4c50 <hal_spi_is_enabled>
   d6b4a:	2800      	cmp	r0, #0
   d6b4c:	d1df      	bne.n	d6b0e <pinAvailable+0x6>
  return true; // 'pin' is available
   d6b4e:	2001      	movs	r0, #1
   d6b50:	e7de      	b.n	d6b10 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6b52:	2801      	cmp	r0, #1
   d6b54:	d809      	bhi.n	d6b6a <pinAvailable+0x62>
   d6b56:	f000 f857 	bl	d6c08 <_Z19__fetch_global_Wirev>
   d6b5a:	2100      	movs	r1, #0
   d6b5c:	7c00      	ldrb	r0, [r0, #16]
   d6b5e:	f7fe f85f 	bl	d4c20 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6b62:	f080 0001 	eor.w	r0, r0, #1
   d6b66:	b2c0      	uxtb	r0, r0
   d6b68:	e7d2      	b.n	d6b10 <pinAvailable+0x8>
   d6b6a:	3809      	subs	r0, #9
   d6b6c:	2801      	cmp	r0, #1
   d6b6e:	d8ee      	bhi.n	d6b4e <pinAvailable+0x46>
   d6b70:	f7ff fe74 	bl	d685c <_Z22__fetch_global_Serial1v>
   d6b74:	7c00      	ldrb	r0, [r0, #16]
   d6b76:	f7fe f81b 	bl	d4bb0 <hal_usart_is_enabled>
   d6b7a:	e7f2      	b.n	d6b62 <pinAvailable+0x5a>
   d6b7c:	2003e7c8 	.word	0x2003e7c8
   d6b80:	2003e7cc 	.word	0x2003e7cc

000d6b84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b84:	2823      	cmp	r0, #35	; 0x23
{
   d6b86:	b538      	push	{r3, r4, r5, lr}
   d6b88:	4604      	mov	r4, r0
   d6b8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b8c:	d80a      	bhi.n	d6ba4 <pinMode+0x20>
   d6b8e:	29ff      	cmp	r1, #255	; 0xff
   d6b90:	d008      	beq.n	d6ba4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6b92:	f7ff ffb9 	bl	d6b08 <pinAvailable>
   d6b96:	b128      	cbz	r0, d6ba4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6b98:	4629      	mov	r1, r5
   d6b9a:	4620      	mov	r0, r4
}
   d6b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ba0:	f7fd bf1e 	b.w	d49e0 <HAL_Pin_Mode>
}
   d6ba4:	bd38      	pop	{r3, r4, r5, pc}

000d6ba6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ba6:	b538      	push	{r3, r4, r5, lr}
   d6ba8:	4604      	mov	r4, r0
   d6baa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bac:	f7fd ff20 	bl	d49f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6bb0:	28ff      	cmp	r0, #255	; 0xff
   d6bb2:	d010      	beq.n	d6bd6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6bb4:	2806      	cmp	r0, #6
   d6bb6:	d804      	bhi.n	d6bc2 <digitalWrite+0x1c>
   d6bb8:	234d      	movs	r3, #77	; 0x4d
   d6bba:	fa23 f000 	lsr.w	r0, r3, r0
   d6bbe:	07c3      	lsls	r3, r0, #31
   d6bc0:	d409      	bmi.n	d6bd6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6bc2:	4620      	mov	r0, r4
   d6bc4:	f7ff ffa0 	bl	d6b08 <pinAvailable>
   d6bc8:	b128      	cbz	r0, d6bd6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6bca:	4629      	mov	r1, r5
   d6bcc:	4620      	mov	r0, r4
}
   d6bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6bd2:	f7fd bf15 	b.w	d4a00 <HAL_GPIO_Write>
}
   d6bd6:	bd38      	pop	{r3, r4, r5, pc}

000d6bd8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6bd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6bda:	2300      	movs	r3, #0
   d6bdc:	2520      	movs	r5, #32
   d6bde:	8043      	strh	r3, [r0, #2]
   d6be0:	2314      	movs	r3, #20
{
   d6be2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6be4:	8003      	strh	r3, [r0, #0]
   d6be6:	6085      	str	r5, [r0, #8]
   d6be8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bea:	4906      	ldr	r1, [pc, #24]	; (d6c04 <_Z17acquireWireBufferv+0x2c>)
   d6bec:	4628      	mov	r0, r5
   d6bee:	f000 f83a 	bl	d6c66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bf2:	4904      	ldr	r1, [pc, #16]	; (d6c04 <_Z17acquireWireBufferv+0x2c>)
	};
   d6bf4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bf6:	4628      	mov	r0, r5
   d6bf8:	f000 f835 	bl	d6c66 <_ZnajRKSt9nothrow_t>
	};
   d6bfc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6bfe:	4620      	mov	r0, r4
   d6c00:	bd38      	pop	{r3, r4, r5, pc}
   d6c02:	bf00      	nop
   d6c04:	000d73ec 	.word	0x000d73ec

000d6c08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c0a:	4d0f      	ldr	r5, [pc, #60]	; (d6c48 <_Z19__fetch_global_Wirev+0x40>)
   d6c0c:	7829      	ldrb	r1, [r5, #0]
   d6c0e:	f3bf 8f5b 	dmb	ish
   d6c12:	f011 0401 	ands.w	r4, r1, #1
{
   d6c16:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c18:	d113      	bne.n	d6c42 <_Z19__fetch_global_Wirev+0x3a>
   d6c1a:	4628      	mov	r0, r5
   d6c1c:	f7fd fa3f 	bl	d409e <__cxa_guard_acquire>
   d6c20:	b178      	cbz	r0, d6c42 <_Z19__fetch_global_Wirev+0x3a>
   d6c22:	a801      	add	r0, sp, #4
   d6c24:	f7ff ffd8 	bl	d6bd8 <_Z17acquireWireBufferv>
   d6c28:	aa01      	add	r2, sp, #4
   d6c2a:	4621      	mov	r1, r4
   d6c2c:	4807      	ldr	r0, [pc, #28]	; (d6c4c <_Z19__fetch_global_Wirev+0x44>)
   d6c2e:	f7ff fe6b 	bl	d6908 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6c32:	4628      	mov	r0, r5
   d6c34:	f7fd fa38 	bl	d40a8 <__cxa_guard_release>
   d6c38:	4a05      	ldr	r2, [pc, #20]	; (d6c50 <_Z19__fetch_global_Wirev+0x48>)
   d6c3a:	4906      	ldr	r1, [pc, #24]	; (d6c54 <_Z19__fetch_global_Wirev+0x4c>)
   d6c3c:	4803      	ldr	r0, [pc, #12]	; (d6c4c <_Z19__fetch_global_Wirev+0x44>)
   d6c3e:	f000 f80b 	bl	d6c58 <__aeabi_atexit>
	return wire;
}
   d6c42:	4802      	ldr	r0, [pc, #8]	; (d6c4c <_Z19__fetch_global_Wirev+0x44>)
   d6c44:	b007      	add	sp, #28
   d6c46:	bd30      	pop	{r4, r5, pc}
   d6c48:	2003e7d8 	.word	0x2003e7d8
   d6c4c:	2003e7dc 	.word	0x2003e7dc
   d6c50:	2003e59c 	.word	0x2003e59c
   d6c54:	000d68b1 	.word	0x000d68b1

000d6c58 <__aeabi_atexit>:
   d6c58:	460b      	mov	r3, r1
   d6c5a:	4601      	mov	r1, r0
   d6c5c:	4618      	mov	r0, r3
   d6c5e:	f000 b919 	b.w	d6e94 <__cxa_atexit>

000d6c62 <_ZdlPvj>:
   d6c62:	f7fd ba1a 	b.w	d409a <_ZdlPv>

000d6c66 <_ZnajRKSt9nothrow_t>:
   d6c66:	f7fd ba16 	b.w	d4096 <_Znaj>

000d6c6a <_ZSt25__throw_bad_function_callv>:
   d6c6a:	b508      	push	{r3, lr}
   d6c6c:	f7fe f8fc 	bl	d4e68 <abort>

000d6c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6c70:	4901      	ldr	r1, [pc, #4]	; (d6c78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6c72:	f000 b8f9 	b.w	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6c76:	bf00      	nop
   d6c78:	000d7408 	.word	0x000d7408

000d6c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6c7e:	2400      	movs	r4, #0
   d6c80:	2310      	movs	r3, #16
   d6c82:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6c86:	6803      	ldr	r3, [r0, #0]
   d6c88:	9400      	str	r4, [sp, #0]
   d6c8a:	699e      	ldr	r6, [r3, #24]
   d6c8c:	f88d 4004 	strb.w	r4, [sp, #4]
   d6c90:	4615      	mov	r5, r2
   d6c92:	466b      	mov	r3, sp
   d6c94:	6812      	ldr	r2, [r2, #0]
   d6c96:	47b0      	blx	r6
   d6c98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6c9c:	f003 0306 	and.w	r3, r3, #6
   d6ca0:	2b06      	cmp	r3, #6
   d6ca2:	bf03      	ittte	eq
   d6ca4:	9b00      	ldreq	r3, [sp, #0]
   d6ca6:	602b      	streq	r3, [r5, #0]
   d6ca8:	2001      	moveq	r0, #1
   d6caa:	4620      	movne	r0, r4
   d6cac:	b004      	add	sp, #16
   d6cae:	bd70      	pop	{r4, r5, r6, pc}

000d6cb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6cb0:	9800      	ldr	r0, [sp, #0]
   d6cb2:	4290      	cmp	r0, r2
   d6cb4:	bf14      	ite	ne
   d6cb6:	2001      	movne	r0, #1
   d6cb8:	2006      	moveq	r0, #6
   d6cba:	4770      	bx	lr

000d6cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6cbc:	b510      	push	{r4, lr}
   d6cbe:	4b03      	ldr	r3, [pc, #12]	; (d6ccc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6cc0:	6003      	str	r3, [r0, #0]
   d6cc2:	4604      	mov	r4, r0
   d6cc4:	f000 f8cd 	bl	d6e62 <_ZNSt9type_infoD1Ev>
   d6cc8:	4620      	mov	r0, r4
   d6cca:	bd10      	pop	{r4, pc}
   d6ccc:	000d7448 	.word	0x000d7448

000d6cd0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6cd0:	b510      	push	{r4, lr}
   d6cd2:	4604      	mov	r4, r0
   d6cd4:	f7ff fff2 	bl	d6cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6cd8:	4620      	mov	r0, r4
   d6cda:	2108      	movs	r1, #8
   d6cdc:	f7ff ffc1 	bl	d6c62 <_ZdlPvj>
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	bd10      	pop	{r4, pc}

000d6ce4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ce8:	461f      	mov	r7, r3
   d6cea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6cee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6cf2:	4598      	cmp	r8, r3
   d6cf4:	4606      	mov	r6, r0
   d6cf6:	4615      	mov	r5, r2
   d6cf8:	d107      	bne.n	d6d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6cfa:	9907      	ldr	r1, [sp, #28]
   d6cfc:	f000 f8b4 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6d00:	b118      	cbz	r0, d6d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6d02:	7165      	strb	r5, [r4, #5]
   d6d04:	2000      	movs	r0, #0
   d6d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d0a:	4639      	mov	r1, r7
   d6d0c:	4630      	mov	r0, r6
   d6d0e:	f000 f8ab 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6d12:	2800      	cmp	r0, #0
   d6d14:	d0f6      	beq.n	d6d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6d16:	2301      	movs	r3, #1
   d6d18:	f8c4 8000 	str.w	r8, [r4]
   d6d1c:	7125      	strb	r5, [r4, #4]
   d6d1e:	71a3      	strb	r3, [r4, #6]
   d6d20:	e7f0      	b.n	d6d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6d22:	b538      	push	{r3, r4, r5, lr}
   d6d24:	4615      	mov	r5, r2
   d6d26:	461c      	mov	r4, r3
   d6d28:	f000 f89e 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6d2c:	b120      	cbz	r0, d6d38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6d2e:	2308      	movs	r3, #8
   d6d30:	60e3      	str	r3, [r4, #12]
   d6d32:	2306      	movs	r3, #6
   d6d34:	6025      	str	r5, [r4, #0]
   d6d36:	7123      	strb	r3, [r4, #4]
   d6d38:	bd38      	pop	{r3, r4, r5, pc}

000d6d3a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d3c:	4605      	mov	r5, r0
   d6d3e:	460c      	mov	r4, r1
   d6d40:	9201      	str	r2, [sp, #4]
   d6d42:	461e      	mov	r6, r3
   d6d44:	f000 f890 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6d48:	b950      	cbnz	r0, d6d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6d4a:	2e03      	cmp	r6, #3
   d6d4c:	d808      	bhi.n	d6d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6d4e:	6823      	ldr	r3, [r4, #0]
   d6d50:	9a01      	ldr	r2, [sp, #4]
   d6d52:	695b      	ldr	r3, [r3, #20]
   d6d54:	4629      	mov	r1, r5
   d6d56:	4620      	mov	r0, r4
   d6d58:	b002      	add	sp, #8
   d6d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6d5e:	4718      	bx	r3
   d6d60:	b002      	add	sp, #8
   d6d62:	bd70      	pop	{r4, r5, r6, pc}

000d6d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6d64:	b510      	push	{r4, lr}
   d6d66:	4b03      	ldr	r3, [pc, #12]	; (d6d74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6d68:	6003      	str	r3, [r0, #0]
   d6d6a:	4604      	mov	r4, r0
   d6d6c:	f7ff ffa6 	bl	d6cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6d70:	4620      	mov	r0, r4
   d6d72:	bd10      	pop	{r4, pc}
   d6d74:	000d74a8 	.word	0x000d74a8

000d6d78 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6d78:	b510      	push	{r4, lr}
   d6d7a:	4604      	mov	r4, r0
   d6d7c:	f7ff fff2 	bl	d6d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6d80:	4620      	mov	r0, r4
   d6d82:	210c      	movs	r1, #12
   d6d84:	f7ff ff6d 	bl	d6c62 <_ZdlPvj>
   d6d88:	4620      	mov	r0, r4
   d6d8a:	bd10      	pop	{r4, pc}

000d6d8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6d8e:	9f08      	ldr	r7, [sp, #32]
   d6d90:	4297      	cmp	r7, r2
   d6d92:	4605      	mov	r5, r0
   d6d94:	460e      	mov	r6, r1
   d6d96:	4614      	mov	r4, r2
   d6d98:	d00a      	beq.n	d6db0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6d9a:	68a8      	ldr	r0, [r5, #8]
   d6d9c:	6802      	ldr	r2, [r0, #0]
   d6d9e:	9708      	str	r7, [sp, #32]
   d6da0:	6a15      	ldr	r5, [r2, #32]
   d6da2:	4631      	mov	r1, r6
   d6da4:	4622      	mov	r2, r4
   d6da6:	46ac      	mov	ip, r5
   d6da8:	b003      	add	sp, #12
   d6daa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6dae:	4760      	bx	ip
   d6db0:	4619      	mov	r1, r3
   d6db2:	9301      	str	r3, [sp, #4]
   d6db4:	f000 f858 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6db8:	9b01      	ldr	r3, [sp, #4]
   d6dba:	2800      	cmp	r0, #0
   d6dbc:	d0ed      	beq.n	d6d9a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6dbe:	2006      	movs	r0, #6
   d6dc0:	b003      	add	sp, #12
   d6dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6dc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6dc8:	460d      	mov	r5, r1
   d6dca:	4619      	mov	r1, r3
   d6dcc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6dd0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6dd4:	4681      	mov	r9, r0
   d6dd6:	4617      	mov	r7, r2
   d6dd8:	4698      	mov	r8, r3
   d6dda:	f000 f845 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6dde:	b190      	cbz	r0, d6e06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6de0:	2d00      	cmp	r5, #0
   d6de2:	6034      	str	r4, [r6, #0]
   d6de4:	7137      	strb	r7, [r6, #4]
   d6de6:	db09      	blt.n	d6dfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6de8:	1961      	adds	r1, r4, r5
   d6dea:	458a      	cmp	sl, r1
   d6dec:	bf0c      	ite	eq
   d6dee:	2106      	moveq	r1, #6
   d6df0:	2101      	movne	r1, #1
   d6df2:	71b1      	strb	r1, [r6, #6]
   d6df4:	2000      	movs	r0, #0
   d6df6:	b001      	add	sp, #4
   d6df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dfc:	3502      	adds	r5, #2
   d6dfe:	d1f9      	bne.n	d6df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e00:	2301      	movs	r3, #1
   d6e02:	71b3      	strb	r3, [r6, #6]
   d6e04:	e7f6      	b.n	d6df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e06:	4554      	cmp	r4, sl
   d6e08:	d106      	bne.n	d6e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6e0a:	4659      	mov	r1, fp
   d6e0c:	4648      	mov	r0, r9
   d6e0e:	f000 f82b 	bl	d6e68 <_ZNKSt9type_infoeqERKS_>
   d6e12:	b108      	cbz	r0, d6e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6e14:	7177      	strb	r7, [r6, #5]
   d6e16:	e7ed      	b.n	d6df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e18:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6e1c:	6803      	ldr	r3, [r0, #0]
   d6e1e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6e22:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6e26:	69dc      	ldr	r4, [r3, #28]
   d6e28:	463a      	mov	r2, r7
   d6e2a:	4643      	mov	r3, r8
   d6e2c:	4629      	mov	r1, r5
   d6e2e:	46a4      	mov	ip, r4
   d6e30:	b001      	add	sp, #4
   d6e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e36:	4760      	bx	ip

000d6e38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e3c:	4607      	mov	r7, r0
   d6e3e:	460c      	mov	r4, r1
   d6e40:	4615      	mov	r5, r2
   d6e42:	461e      	mov	r6, r3
   d6e44:	f7ff ff6d 	bl	d6d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6e48:	b948      	cbnz	r0, d6e5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6e4a:	68b8      	ldr	r0, [r7, #8]
   d6e4c:	6803      	ldr	r3, [r0, #0]
   d6e4e:	699f      	ldr	r7, [r3, #24]
   d6e50:	462a      	mov	r2, r5
   d6e52:	4633      	mov	r3, r6
   d6e54:	4621      	mov	r1, r4
   d6e56:	46bc      	mov	ip, r7
   d6e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6e5c:	4760      	bx	ip
   d6e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e62 <_ZNSt9type_infoD1Ev>:
   d6e62:	4770      	bx	lr

000d6e64 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6e64:	2000      	movs	r0, #0
   d6e66:	4770      	bx	lr

000d6e68 <_ZNKSt9type_infoeqERKS_>:
   d6e68:	4281      	cmp	r1, r0
   d6e6a:	b508      	push	{r3, lr}
   d6e6c:	d00e      	beq.n	d6e8c <_ZNKSt9type_infoeqERKS_+0x24>
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	7803      	ldrb	r3, [r0, #0]
   d6e72:	2b2a      	cmp	r3, #42	; 0x2a
   d6e74:	d00c      	beq.n	d6e90 <_ZNKSt9type_infoeqERKS_+0x28>
   d6e76:	6849      	ldr	r1, [r1, #4]
   d6e78:	780b      	ldrb	r3, [r1, #0]
   d6e7a:	2b2a      	cmp	r3, #42	; 0x2a
   d6e7c:	bf08      	it	eq
   d6e7e:	3101      	addeq	r1, #1
   d6e80:	f000 f878 	bl	d6f74 <strcmp>
   d6e84:	fab0 f080 	clz	r0, r0
   d6e88:	0940      	lsrs	r0, r0, #5
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	2001      	movs	r0, #1
   d6e8e:	e7fc      	b.n	d6e8a <_ZNKSt9type_infoeqERKS_+0x22>
   d6e90:	2000      	movs	r0, #0
   d6e92:	e7fa      	b.n	d6e8a <_ZNKSt9type_infoeqERKS_+0x22>

000d6e94 <__cxa_atexit>:
   d6e94:	b510      	push	{r4, lr}
   d6e96:	4c05      	ldr	r4, [pc, #20]	; (d6eac <__cxa_atexit+0x18>)
   d6e98:	4613      	mov	r3, r2
   d6e9a:	b12c      	cbz	r4, d6ea8 <__cxa_atexit+0x14>
   d6e9c:	460a      	mov	r2, r1
   d6e9e:	4601      	mov	r1, r0
   d6ea0:	2002      	movs	r0, #2
   d6ea2:	f3af 8000 	nop.w
   d6ea6:	bd10      	pop	{r4, pc}
   d6ea8:	4620      	mov	r0, r4
   d6eaa:	e7fc      	b.n	d6ea6 <__cxa_atexit+0x12>
   d6eac:	00000000 	.word	0x00000000

000d6eb0 <memcmp>:
   d6eb0:	b530      	push	{r4, r5, lr}
   d6eb2:	3901      	subs	r1, #1
   d6eb4:	2400      	movs	r4, #0
   d6eb6:	42a2      	cmp	r2, r4
   d6eb8:	d101      	bne.n	d6ebe <memcmp+0xe>
   d6eba:	2000      	movs	r0, #0
   d6ebc:	e005      	b.n	d6eca <memcmp+0x1a>
   d6ebe:	5d03      	ldrb	r3, [r0, r4]
   d6ec0:	3401      	adds	r4, #1
   d6ec2:	5d0d      	ldrb	r5, [r1, r4]
   d6ec4:	42ab      	cmp	r3, r5
   d6ec6:	d0f6      	beq.n	d6eb6 <memcmp+0x6>
   d6ec8:	1b58      	subs	r0, r3, r5
   d6eca:	bd30      	pop	{r4, r5, pc}

000d6ecc <memcpy>:
   d6ecc:	440a      	add	r2, r1
   d6ece:	4291      	cmp	r1, r2
   d6ed0:	f100 33ff 	add.w	r3, r0, #4294967295
   d6ed4:	d100      	bne.n	d6ed8 <memcpy+0xc>
   d6ed6:	4770      	bx	lr
   d6ed8:	b510      	push	{r4, lr}
   d6eda:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6ede:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6ee2:	4291      	cmp	r1, r2
   d6ee4:	d1f9      	bne.n	d6eda <memcpy+0xe>
   d6ee6:	bd10      	pop	{r4, pc}

000d6ee8 <memmove>:
   d6ee8:	4288      	cmp	r0, r1
   d6eea:	b510      	push	{r4, lr}
   d6eec:	eb01 0402 	add.w	r4, r1, r2
   d6ef0:	d902      	bls.n	d6ef8 <memmove+0x10>
   d6ef2:	4284      	cmp	r4, r0
   d6ef4:	4623      	mov	r3, r4
   d6ef6:	d807      	bhi.n	d6f08 <memmove+0x20>
   d6ef8:	1e43      	subs	r3, r0, #1
   d6efa:	42a1      	cmp	r1, r4
   d6efc:	d008      	beq.n	d6f10 <memmove+0x28>
   d6efe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f02:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6f06:	e7f8      	b.n	d6efa <memmove+0x12>
   d6f08:	4402      	add	r2, r0
   d6f0a:	4601      	mov	r1, r0
   d6f0c:	428a      	cmp	r2, r1
   d6f0e:	d100      	bne.n	d6f12 <memmove+0x2a>
   d6f10:	bd10      	pop	{r4, pc}
   d6f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6f1a:	e7f7      	b.n	d6f0c <memmove+0x24>

000d6f1c <memset>:
   d6f1c:	4402      	add	r2, r0
   d6f1e:	4603      	mov	r3, r0
   d6f20:	4293      	cmp	r3, r2
   d6f22:	d100      	bne.n	d6f26 <memset+0xa>
   d6f24:	4770      	bx	lr
   d6f26:	f803 1b01 	strb.w	r1, [r3], #1
   d6f2a:	e7f9      	b.n	d6f20 <memset+0x4>

000d6f2c <srand>:
   d6f2c:	b538      	push	{r3, r4, r5, lr}
   d6f2e:	4b0d      	ldr	r3, [pc, #52]	; (d6f64 <srand+0x38>)
   d6f30:	681d      	ldr	r5, [r3, #0]
   d6f32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f34:	4604      	mov	r4, r0
   d6f36:	b97b      	cbnz	r3, d6f58 <srand+0x2c>
   d6f38:	2018      	movs	r0, #24
   d6f3a:	f7fd ff75 	bl	d4e28 <malloc>
   d6f3e:	4a0a      	ldr	r2, [pc, #40]	; (d6f68 <srand+0x3c>)
   d6f40:	4b0a      	ldr	r3, [pc, #40]	; (d6f6c <srand+0x40>)
   d6f42:	63a8      	str	r0, [r5, #56]	; 0x38
   d6f44:	e9c0 2300 	strd	r2, r3, [r0]
   d6f48:	4b09      	ldr	r3, [pc, #36]	; (d6f70 <srand+0x44>)
   d6f4a:	6083      	str	r3, [r0, #8]
   d6f4c:	230b      	movs	r3, #11
   d6f4e:	8183      	strh	r3, [r0, #12]
   d6f50:	2201      	movs	r2, #1
   d6f52:	2300      	movs	r3, #0
   d6f54:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f58:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f5a:	2200      	movs	r2, #0
   d6f5c:	611c      	str	r4, [r3, #16]
   d6f5e:	615a      	str	r2, [r3, #20]
   d6f60:	bd38      	pop	{r3, r4, r5, pc}
   d6f62:	bf00      	nop
   d6f64:	2003e538 	.word	0x2003e538
   d6f68:	abcd330e 	.word	0xabcd330e
   d6f6c:	e66d1234 	.word	0xe66d1234
   d6f70:	0005deec 	.word	0x0005deec

000d6f74 <strcmp>:
   d6f74:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f78:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f7c:	2a01      	cmp	r2, #1
   d6f7e:	bf28      	it	cs
   d6f80:	429a      	cmpcs	r2, r3
   d6f82:	d0f7      	beq.n	d6f74 <strcmp>
   d6f84:	1ad0      	subs	r0, r2, r3
   d6f86:	4770      	bx	lr

000d6f88 <strlen>:
   d6f88:	4603      	mov	r3, r0
   d6f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f8e:	2a00      	cmp	r2, #0
   d6f90:	d1fb      	bne.n	d6f8a <strlen+0x2>
   d6f92:	1a18      	subs	r0, r3, r0
   d6f94:	3801      	subs	r0, #1
   d6f96:	4770      	bx	lr

000d6f98 <strnlen>:
   d6f98:	b510      	push	{r4, lr}
   d6f9a:	4602      	mov	r2, r0
   d6f9c:	4401      	add	r1, r0
   d6f9e:	428a      	cmp	r2, r1
   d6fa0:	4613      	mov	r3, r2
   d6fa2:	d101      	bne.n	d6fa8 <strnlen+0x10>
   d6fa4:	1a18      	subs	r0, r3, r0
   d6fa6:	bd10      	pop	{r4, pc}
   d6fa8:	781c      	ldrb	r4, [r3, #0]
   d6faa:	3201      	adds	r2, #1
   d6fac:	2c00      	cmp	r4, #0
   d6fae:	d1f6      	bne.n	d6f9e <strnlen+0x6>
   d6fb0:	e7f8      	b.n	d6fa4 <strnlen+0xc>

000d6fb2 <link_code_end>:
	...

000d6fb4 <dynalib_user>:
   d6fb4:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6fc4:	0000 0000 6552 6563 7669 6465 6420 7461     ....Received dat
   d6fd4:	2061 7266 6d6f 203a 3025 5832 253a 3230     a from: %02X:%02
   d6fe4:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   d6ff4:	253a 3230 2058 000a 3a31 3020 2578 3230     :%02X ..1: 0x%02
   d7004:	2c58 3220 203a 7830 3025 5832 202c 3a33     X, 2: 0x%02X, 3:
   d7014:	3020 2578 3230 0a58 6200 7479 2065 6925      0x%02X..byte %i
   d7024:	202c 6f63 6f6c 2072 3025 5836 000a 7453     , color %06X..St
   d7034:	7261 6974 676e 7520 2070 4c42 2045 6f43     arting up BLE Co
   d7044:	6e6e 6365 6974 6e6f 0a20 4100 6772 6e6f     nnection ..Argon
   d7054:	4220 454c 4120 6464 6572 7373 203a 7325      BLE Address: %s
   d7064:	000a 4536 3034 3030 3130 422d 4135 2d33     ..6E400001-B5A3-
   d7074:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   d7084:	4344 4143 4539 3600 3445 3030 3030 2d32     DCCA9E.6E400002-
   d7094:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   d70a4:	3035 3245 4434 4343 3941 0045 4536 3034     50E24DCCA9E.6E40
   d70b4:	3030 3330 422d 4135 2d33 3346 3339 452d     0003-B5A3-F393-E
   d70c4:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   d70d4:	7400 0078 7872 0000 c000 4001 1000 4002     .tx.rx.....@...@
   d70e4:	2000 4002                                   . .@

000d70e8 <CSWTCH.60>:
   d70e8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d70f8:	0050 0000                                   P...

000d70fc <_ZTVN5spark13EthernetClassE>:
	...
   d7104:	4ee7 000d 4edd 000d 4ed3 000d 4ec9 000d     .N...N...N...N..
   d7114:	4ebd 000d 4eb1 000d 69dd 000d 69e5 000d     .N...N...i...i..
   d7124:	4ea5 000d 4e9d 000d 4e93 000d 4e89 000d     .N...N...N...N..
   d7134:	6a15 000d 6977 6972 676e 622e 656c 5300     .j..wiring.ble.S
   d7144:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d7154:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   d7164:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   d7174:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   d7184:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   d7194:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   d71a4:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   d71b4:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   d71c4:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   d71d4:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   d71e4:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d71f4:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d7204:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   d7214:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   d7224:	7369 6974 2e63 0000                         istic...

000d722c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7234:	503d 000d 50a1 000d 52a7 000d 50cb 000d     =P...P...R...P..
   d7244:	5041 000d                                   AP..

000d7248 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7250:	5039 000d 50af 000d 503b 000d 50cf 000d     9P...P..;P...P..
   d7260:	5061 000d                                   aP..

000d7264 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d726c:	5037 000d 50bd 000d 5a8d 000d 50d3 000d     7P...P...Z...P..
   d727c:	5081 000d                                   .P..

000d7280 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7288:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d7298 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d7298:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d72a8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d72a8:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d72b8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d72c8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d72d8 <_ZTV9IPAddress>:
	...
   d72e0:	65c1 000d 65b1 000d 65b3 000d               .e...e...e..

000d72ec <_ZTV9USBSerial>:
	...
   d72f4:	66a1 000d 6709 000d 66df 000d 6321 000d     .f...g...f..!c..
   d7304:	66d1 000d 66a3 000d 66b3 000d 6703 000d     .f...f...f...g..
   d7314:	66c3 000d 669d 000d                         .f...f..

000d731c <_ZTV11USARTSerial>:
	...
   d7324:	67b5 000d 6821 000d 67f9 000d 6321 000d     .g..!h...g..!c..
   d7334:	67c9 000d 67e5 000d 67d7 000d 67f3 000d     .g...g...g...g..
   d7344:	67b7 000d 67bb 000d                         .g...g..

000d734c <_ZTV7TwoWire>:
	...
   d7354:	68b1 000d 68fb 000d 68d3 000d 68b3 000d     .h...h...h...h..
   d7364:	68db 000d 68e3 000d 68eb 000d 68f3 000d     .h...h...h...h..

000d7374 <_ZTVN5spark9WiFiClassE>:
	...
   d737c:	697f 000d 6975 000d 696b 000d 692d 000d     .i..ui..ki..-i..
   d738c:	642d 000d 695f 000d 69dd 000d 69e5 000d     -d.._i...i...i..
   d739c:	6953 000d 694b 000d 6941 000d 6937 000d     Si..Ki..Ai..7i..
   d73ac:	6a15 000d                                   .j..

000d73b0 <_ZTVN5spark12NetworkClassE>:
	...
   d73b8:	699d 000d 69a7 000d 69b1 000d 69bb 000d     .i...i...i...i..
   d73c8:	69c5 000d 69d1 000d 69dd 000d 69e5 000d     .i...i...i...i..
   d73d8:	69ed 000d 69f9 000d 6a01 000d 6a0b 000d     .i...i...j...j..
   d73e8:	6a15 000d                                   .j..

000d73ec <_ZSt7nothrow>:
	...

000d73ed <_ZTSSt19_Sp_make_shared_tag>:
   d73ed:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d73fd:	6572 5f64 6174 0067 0000                     red_tag....

000d7408 <_ZTISt19_Sp_make_shared_tag>:
   d7408:	7448 000d 73ed 000d                         Ht...s..

000d7410 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7410:	74a8 000d 741c 000d 74cc 000d               .t...t...t..

000d741c <_ZTSN10__cxxabiv117__class_type_infoE>:
   d741c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d742c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d743c:	0045 0000                                   E...

000d7440 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7440:	0000 0000 7410 000d 6cbd 000d 6cd1 000d     .....t...l...l..
   d7450:	6e65 000d 6e65 000d 6d3b 000d 6c7d 000d     en..en..;m..}l..
   d7460:	6d23 000d 6ce5 000d 6cb1 000d               #m...l...l..

000d746c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d746c:	74a8 000d 7478 000d 7410 000d               .t..xt...t..

000d7478 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7478:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d7488:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d7498:	666e 456f 0000 0000                         nfoE....

000d74a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d74a0:	0000 0000 746c 000d 6d65 000d 6d79 000d     ....lt..em..ym..
   d74b0:	6e65 000d 6e65 000d 6d3b 000d 6c7d 000d     en..en..;m..}l..
   d74c0:	6e39 000d 6dc5 000d 6d8d 000d               9n...m...m..

000d74cc <_ZTISt9type_info>:
   d74cc:	7448 000d 74d4 000d                         Ht...t..

000d74d4 <_ZTSSt9type_info>:
   d74d4:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d74e1 <link_const_variable_data_end>:
   d74e1:	00          	.byte	0x00
	...

000d74e4 <link_constructors_location>:
   d74e4:	000d43a1 	.word	0x000d43a1
   d74e8:	000d49a1 	.word	0x000d49a1
   d74ec:	000d4ef1 	.word	0x000d4ef1
   d74f0:	000d4f19 	.word	0x000d4f19
   d74f4:	000d62f9 	.word	0x000d62f9
   d74f8:	000d6439 	.word	0x000d6439
   d74fc:	000d6449 	.word	0x000d6449
   d7500:	000d6471 	.word	0x000d6471
   d7504:	000d6989 	.word	0x000d6989
   d7508:	000d6af5 	.word	0x000d6af5

000d750c <link_constructors_end>:
   d750c:	00000000 	.word	0x00000000

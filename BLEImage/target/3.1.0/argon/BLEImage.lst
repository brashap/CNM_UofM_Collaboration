
c:/Users/IoT_Instructor/Documents/jarvis/BLEImage/target/3.1.0/argon/BLEImage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003574  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7590  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e534  000b7594  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000254  2003e59c  2003e59c  0002e59c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b75fc  000b75fc  000275fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7624  000b7624  00027624  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010b37b  00000000  00000000  00027628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011ce4  00000000  00000000  001329a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00035575  00000000  00000000  00144687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d08  00000000  00000000  00179bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009ca8  00000000  00000000  0017c904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036b94  00000000  00000000  001865ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003a531  00000000  00000000  001bd140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001247eb  00000000  00000000  001f7671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007e5c  00000000  00000000  0031be5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 ff3f 	bl	b6eb0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 ff61 	bl	b6f00 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e534 	.word	0x2003e534
   b4048:	000b7594 	.word	0x000b7594
   b404c:	2003e59c 	.word	0x2003e59c
   b4050:	2003e59c 	.word	0x2003e59c
   b4054:	2003e7f0 	.word	0x2003e7f0

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fa69 	bl	b6534 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7568 	.word	0x000b7568
   b407c:	000b7590 	.word	0x000b7590

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8d0 	b.w	b4224 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f95f 	bl	b4348 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 ba09 	b.w	b64a4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bec5 	b.w	b4e20 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bec3 	b.w	b4e20 <malloc>

000b409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409a:	f000 bec9 	b.w	b4e30 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40ae:	b510      	push	{r4, lr}
   b40b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40b2:	6800      	ldr	r0, [r0, #0]
   b40b4:	b108      	cbz	r0, b40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40b6:	f000 febb 	bl	b4e30 <free>
class SystemClass {
   b40ba:	4620      	mov	r0, r4
   b40bc:	bd10      	pop	{r4, pc}

000b40be <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40be:	b40e      	push	{r1, r2, r3}
   b40c0:	b503      	push	{r0, r1, lr}
   b40c2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40cc:	f002 f967 	bl	b639e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d0:	b002      	add	sp, #8
   b40d2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d6:	b003      	add	sp, #12
   b40d8:	4770      	bx	lr
	...

000b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void loop() {

}

//onDataReceived is used to recieve data from Bluefruit Connect App
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b40dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b40e0:	b092      	sub	sp, #72	; 0x48
   b40e2:	4614      	mov	r4, r2
   b40e4:	460d      	mov	r5, r1
   b40e6:	4607      	mov	r7, r0
    //int pixelcount,pixelcolor;
    uint8_t i,j;
    int color;

    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b40e8:	f002 fb30 	bl	b674c <_Z16_fetch_usbserialv>
   b40ec:	4621      	mov	r1, r4
   b40ee:	4606      	mov	r6, r0
   b40f0:	a806      	add	r0, sp, #24
   b40f2:	f001 fb55 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b40f6:	2100      	movs	r1, #0
   b40f8:	a806      	add	r0, sp, #24
   b40fa:	f001 f8fd 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b40fe:	4621      	mov	r1, r4
   b4100:	9005      	str	r0, [sp, #20]
   b4102:	a808      	add	r0, sp, #32
   b4104:	f001 fb4c 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b4108:	2101      	movs	r1, #1
   b410a:	a808      	add	r0, sp, #32
   b410c:	f001 f8f4 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b4110:	4621      	mov	r1, r4
   b4112:	9004      	str	r0, [sp, #16]
   b4114:	a80a      	add	r0, sp, #40	; 0x28
   b4116:	f001 fb43 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b411a:	2102      	movs	r1, #2
   b411c:	a80a      	add	r0, sp, #40	; 0x28
   b411e:	f001 f8eb 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b4122:	4621      	mov	r1, r4
   b4124:	4680      	mov	r8, r0
   b4126:	a80c      	add	r0, sp, #48	; 0x30
   b4128:	f001 fb3a 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b412c:	2103      	movs	r1, #3
   b412e:	a80c      	add	r0, sp, #48	; 0x30
   b4130:	f001 f8e2 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b4134:	4621      	mov	r1, r4
   b4136:	4681      	mov	r9, r0
   b4138:	a80e      	add	r0, sp, #56	; 0x38
   b413a:	f001 fb31 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b413e:	2104      	movs	r1, #4
   b4140:	a80e      	add	r0, sp, #56	; 0x38
   b4142:	f001 f8d9 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b4146:	4621      	mov	r1, r4
   b4148:	4682      	mov	sl, r0
   b414a:	a810      	add	r0, sp, #64	; 0x40
   b414c:	f001 fb28 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b4150:	2105      	movs	r1, #5
   b4152:	a810      	add	r0, sp, #64	; 0x40
   b4154:	f001 f8d0 	bl	b52f8 <_ZNK8particle10BleAddressixEh>
   b4158:	e9cd 8900 	strd	r8, r9, [sp]
   b415c:	e9cd a002 	strd	sl, r0, [sp, #8]
   b4160:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4164:	4928      	ldr	r1, [pc, #160]	; (b4208 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
    for (i = 0; i < len; i++) {
        Serial.printf("%02X\n",data[i]);
   b4166:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b4218 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>
    Serial.printf("Received data from: %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1],peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b416a:	4630      	mov	r0, r6
   b416c:	f7ff ffa7 	bl	b40be <_ZN5Print6printfEPKcz>
   b4170:	2400      	movs	r4, #0
    for (i = 0; i < len; i++) {
   b4172:	b2e6      	uxtb	r6, r4
   b4174:	42b5      	cmp	r5, r6
   b4176:	f104 0401 	add.w	r4, r4, #1
   b417a:	d906      	bls.n	b418a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        Serial.printf("%02X\n",data[i]);
   b417c:	f002 fae6 	bl	b674c <_Z16_fetch_usbserialv>
   b4180:	5dba      	ldrb	r2, [r7, r6]
   b4182:	4641      	mov	r1, r8
   b4184:	f7ff ff9b 	bl	b40be <_ZN5Print6printfEPKcz>
    for (i = 0; i < len; i++) {
   b4188:	e7f3      	b.n	b4172 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
    }
    Serial.printf("\n");
   b418a:	f002 fadf 	bl	b674c <_Z16_fetch_usbserialv>
   b418e:	491f      	ldr	r1, [pc, #124]	; (b420c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)

    pixel.setBrightness(128);
    pixel.clear();
    for (i=0;i<64;i++) {
      j = 7+(i*3);
      memcpy(imgBuf,&data[j],3);
   b4190:	4d1f      	ldr	r5, [pc, #124]	; (b4210 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
      Serial.printf("1: 0x%02X, 2: 0x%02X, 3: 0x%02X\n",imgBuf[0],imgBuf[1],imgBuf[2]);
   b4192:	f8df 9088 	ldr.w	r9, [pc, #136]	; b421c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
      color = imgBuf[0]<<16 | imgBuf[1]<<8 | imgBuf[2];
      Serial.printf("byte %i, color %06X\n",i,color);
   b4196:	f8df 8088 	ldr.w	r8, [pc, #136]	; b4220 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
    Serial.printf("\n");
   b419a:	f7ff ff90 	bl	b40be <_ZN5Print6printfEPKcz>
    pixel.setBrightness(128);
   b419e:	481d      	ldr	r0, [pc, #116]	; (b4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b41a0:	2180      	movs	r1, #128	; 0x80
   b41a2:	f000 fbce 	bl	b4942 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.clear();
   b41a6:	481b      	ldr	r0, [pc, #108]	; (b4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b41a8:	f000 fbf1 	bl	b498e <_ZN17Adafruit_NeoPixel5clearEv>
   b41ac:	2600      	movs	r6, #0
      memcpy(imgBuf,&data[j],3);
   b41ae:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   b41b2:	1dfb      	adds	r3, r7, #7
   b41b4:	1899      	adds	r1, r3, r2
   b41b6:	5a9b      	ldrh	r3, [r3, r2]
   b41b8:	802b      	strh	r3, [r5, #0]
   b41ba:	788b      	ldrb	r3, [r1, #2]
   b41bc:	70ab      	strb	r3, [r5, #2]
      Serial.printf("1: 0x%02X, 2: 0x%02X, 3: 0x%02X\n",imgBuf[0],imgBuf[1],imgBuf[2]);
   b41be:	f002 fac5 	bl	b674c <_Z16_fetch_usbserialv>
   b41c2:	78ab      	ldrb	r3, [r5, #2]
   b41c4:	9300      	str	r3, [sp, #0]
   b41c6:	782a      	ldrb	r2, [r5, #0]
   b41c8:	786b      	ldrb	r3, [r5, #1]
   b41ca:	4649      	mov	r1, r9
   b41cc:	f7ff ff77 	bl	b40be <_ZN5Print6printfEPKcz>
      color = imgBuf[0]<<16 | imgBuf[1]<<8 | imgBuf[2];
   b41d0:	786c      	ldrb	r4, [r5, #1]
   b41d2:	782b      	ldrb	r3, [r5, #0]
   b41d4:	0224      	lsls	r4, r4, #8
   b41d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b41da:	78ab      	ldrb	r3, [r5, #2]
   b41dc:	431c      	orrs	r4, r3
      Serial.printf("byte %i, color %06X\n",i,color);
   b41de:	f002 fab5 	bl	b674c <_Z16_fetch_usbserialv>
   b41e2:	4632      	mov	r2, r6
   b41e4:	4623      	mov	r3, r4
   b41e6:	4641      	mov	r1, r8
   b41e8:	f7ff ff69 	bl	b40be <_ZN5Print6printfEPKcz>
      pixel.setPixelColor(i,color);
   b41ec:	b2b1      	uxth	r1, r6
   b41ee:	4809      	ldr	r0, [pc, #36]	; (b4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b41f0:	4622      	mov	r2, r4
    for (i=0;i<64;i++) {
   b41f2:	3601      	adds	r6, #1
      pixel.setPixelColor(i,color);
   b41f4:	f000 fb62 	bl	b48bc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (i=0;i<64;i++) {
   b41f8:	2e40      	cmp	r6, #64	; 0x40
   b41fa:	d1d8      	bne.n	b41ae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd2>
    }
    pixel.show();
   b41fc:	4805      	ldr	r0, [pc, #20]	; (b4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b41fe:	b012      	add	sp, #72	; 0x48
   b4200:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pixel.show();
   b4204:	f000 b9ae 	b.w	b4564 <_ZN17Adafruit_NeoPixel4showEv>
   b4208:	000b6fbc 	.word	0x000b6fbc
   b420c:	000b6fee 	.word	0x000b6fee
   b4210:	2003e60c 	.word	0x2003e60c
   b4214:	2003e610 	.word	0x2003e610
   b4218:	000b700b 	.word	0x000b700b
   b421c:	000b6ff0 	.word	0x000b6ff0
   b4220:	000b7011 	.word	0x000b7011

000b4224 <setup>:
void setup() { 
   b4224:	b530      	push	{r4, r5, lr}
   b4226:	b08f      	sub	sp, #60	; 0x3c
    Serial.begin();
   b4228:	f002 fa90 	bl	b674c <_Z16_fetch_usbserialv>
   b422c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4230:	f002 fa7c 	bl	b672c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4234:	2000      	movs	r0, #0
   b4236:	f000 fc07 	bl	b4a48 <hal_timer_millis>
        while (_while() && !_condition()) {
   b423a:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b423e:	4604      	mov	r4, r0
   b4240:	2000      	movs	r0, #0
   b4242:	f000 fc01 	bl	b4a48 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4246:	1b00      	subs	r0, r0, r4
   b4248:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b424c:	42a8      	cmp	r0, r5
   b424e:	f171 0300 	sbcs.w	r3, r1, #0
   b4252:	d207      	bcs.n	b4264 <setup+0x40>
    waitFor(Serial.isConnected, 15000);  
   b4254:	f002 fa7a 	bl	b674c <_Z16_fetch_usbserialv>
   b4258:	f002 fa6c 	bl	b6734 <_ZN9USBSerial11isConnectedEv>
   b425c:	b910      	cbnz	r0, b4264 <setup+0x40>
            spark_process();
   b425e:	f000 fdcf 	bl	b4e00 <spark_process>
        while (_while() && !_condition()) {
   b4262:	e7ed      	b.n	b4240 <setup+0x1c>
   b4264:	f002 fa72 	bl	b674c <_Z16_fetch_usbserialv>
   b4268:	f002 fa64 	bl	b6734 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
   b426c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4270:	f002 f8de 	bl	b6430 <delay>
    BLE.on();
   b4274:	f001 faf8 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4278:	f001 fb44 	bl	b5904 <_ZNK8particle14BleLocalDevice2onEv>
    Serial.printf("Starting up BLE Connection \n");
   b427c:	f002 fa66 	bl	b674c <_Z16_fetch_usbserialv>
   b4280:	492b      	ldr	r1, [pc, #172]	; (b4330 <setup+0x10c>)
   b4282:	f7ff ff1c 	bl	b40be <_ZN5Print6printfEPKcz>
    BLE.addCharacteristic(txCharacteristic);
   b4286:	f001 faef 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b428a:	4a2a      	ldr	r2, [pc, #168]	; (b4334 <setup+0x110>)
   b428c:	4601      	mov	r1, r0
   b428e:	a809      	add	r0, sp, #36	; 0x24
   b4290:	f001 ff14 	bl	b60bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4294:	a809      	add	r0, sp, #36	; 0x24
   b4296:	f001 fbc0 	bl	b5a1a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b429a:	f001 fae5 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b429e:	4a26      	ldr	r2, [pc, #152]	; (b4338 <setup+0x114>)
   b42a0:	4601      	mov	r1, r0
   b42a2:	a809      	add	r0, sp, #36	; 0x24
   b42a4:	f001 ff0a 	bl	b60bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b42a8:	a809      	add	r0, sp, #36	; 0x24
   b42aa:	f001 fbb6 	bl	b5a1a <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b42ae:	4923      	ldr	r1, [pc, #140]	; (b433c <setup+0x118>)
   b42b0:	a804      	add	r0, sp, #16
   b42b2:	f001 f8cf 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b42b6:	a904      	add	r1, sp, #16
   b42b8:	a809      	add	r0, sp, #36	; 0x24
   b42ba:	f001 f8cb 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42be:	a809      	add	r0, sp, #36	; 0x24
   b42c0:	f001 f90e 	bl	b54e0 <_ZNK8particle7BleUuid4typeEv>
   b42c4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b42c6:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42c8:	bb4c      	cbnz	r4, b431e <setup+0xfa>
            uint16_t uuid16 = tempUUID.shorted();
   b42ca:	f001 f925 	bl	b5518 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42ce:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b42d0:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42d4:	2302      	movs	r3, #2
   b42d6:	f10d 020e 	add.w	r2, sp, #14
   b42da:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b42dc:	4818      	ldr	r0, [pc, #96]	; (b4340 <setup+0x11c>)
   b42de:	f001 f9a9 	bl	b5634 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b42e2:	f001 fac1 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42e6:	2200      	movs	r2, #0
   b42e8:	4915      	ldr	r1, [pc, #84]	; (b4340 <setup+0x11c>)
   b42ea:	f001 fb3a 	bl	b5962 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.printf("Argon BLE Address: %s\n",BLE.address().toString().c_str());
   b42ee:	f002 fa2d 	bl	b674c <_Z16_fetch_usbserialv>
   b42f2:	4604      	mov	r4, r0
   b42f4:	f001 fab8 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42f8:	4601      	mov	r1, r0
   b42fa:	a804      	add	r0, sp, #16
   b42fc:	f001 fb09 	bl	b5912 <_ZNK8particle14BleLocalDevice7addressEv>
   b4300:	a904      	add	r1, sp, #16
   b4302:	a809      	add	r0, sp, #36	; 0x24
   b4304:	2200      	movs	r2, #0
   b4306:	f001 f884 	bl	b5412 <_ZNK8particle10BleAddress8toStringEb>
   b430a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b430c:	490d      	ldr	r1, [pc, #52]	; (b4344 <setup+0x120>)
   b430e:	4620      	mov	r0, r4
   b4310:	f7ff fed5 	bl	b40be <_ZN5Print6printfEPKcz>
   b4314:	a809      	add	r0, sp, #36	; 0x24
   b4316:	f000 fe21 	bl	b4f5c <_ZN6StringD1Ev>
}
   b431a:	b00f      	add	sp, #60	; 0x3c
   b431c:	bd30      	pop	{r4, r5, pc}
   b431e:	f001 f8fd 	bl	b551c <_ZNK8particle7BleUuid8rawBytesEv>
   b4322:	2300      	movs	r3, #0
   b4324:	9300      	str	r3, [sp, #0]
   b4326:	4602      	mov	r2, r0
   b4328:	2310      	movs	r3, #16
   b432a:	2107      	movs	r1, #7
   b432c:	e7d6      	b.n	b42dc <setup+0xb8>
   b432e:	bf00      	nop
   b4330:	000b7026 	.word	0x000b7026
   b4334:	2003e62c 	.word	0x2003e62c
   b4338:	2003e624 	.word	0x2003e624
   b433c:	2003e5ac 	.word	0x2003e5ac
   b4340:	2003e5e8 	.word	0x2003e5e8
   b4344:	000b7043 	.word	0x000b7043

000b4348 <loop>:
}
   b4348:	4770      	bx	lr

000b434a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b434a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b434c:	4616      	mov	r6, r2
   b434e:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4350:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4352:	e9c0 2200 	strd	r2, r2, [r0]
   b4356:	4604      	mov	r4, r0
   b4358:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b435a:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b435c:	4619      	mov	r1, r3
   b435e:	a806      	add	r0, sp, #24
   b4360:	f001 f878 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b4364:	9916      	ldr	r1, [sp, #88]	; 0x58
   b4366:	4638      	mov	r0, r7
   b4368:	f001 f874 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b436c:	7833      	ldrb	r3, [r6, #0]
   b436e:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4372:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b4374:	9302      	str	r3, [sp, #8]
   b4376:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b4378:	4620      	mov	r0, r4
   b437a:	e9cd 7300 	strd	r7, r3, [sp]
   b437e:	aa05      	add	r2, sp, #20
   b4380:	ab06      	add	r3, sp, #24
   b4382:	4629      	mov	r1, r5
   b4384:	f001 fd70 	bl	b5e68 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4388:	4620      	mov	r0, r4
   b438a:	b011      	add	sp, #68	; 0x44
   b438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b4390 <_GLOBAL__sub_I_txBuf>:
   b4390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4394:	4d35      	ldr	r5, [pc, #212]	; (b446c <_GLOBAL__sub_I_txBuf+0xdc>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4396:	f8df 8118 	ldr.w	r8, [pc, #280]	; b44b0 <_GLOBAL__sub_I_txBuf+0x120>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b439a:	4c35      	ldr	r4, [pc, #212]	; (b4470 <_GLOBAL__sub_I_txBuf+0xe0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b439c:	4935      	ldr	r1, [pc, #212]	; (b4474 <_GLOBAL__sub_I_txBuf+0xe4>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b439e:	f8df 9114 	ldr.w	r9, [pc, #276]	; b44b4 <_GLOBAL__sub_I_txBuf+0x124>
   b43a2:	4e35      	ldr	r6, [pc, #212]	; (b4478 <_GLOBAL__sub_I_txBuf+0xe8>)
   b43a4:	4f35      	ldr	r7, [pc, #212]	; (b447c <_GLOBAL__sub_I_txBuf+0xec>)
   b43a6:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b43a8:	4628      	mov	r0, r5
   b43aa:	f001 f937 	bl	b561c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b43ae:	4934      	ldr	r1, [pc, #208]	; (b4480 <_GLOBAL__sub_I_txBuf+0xf0>)
   b43b0:	4640      	mov	r0, r8
   b43b2:	f001 f933 	bl	b561c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b43b6:	4933      	ldr	r1, [pc, #204]	; (b4484 <_GLOBAL__sub_I_txBuf+0xf4>)
   b43b8:	4620      	mov	r0, r4
   b43ba:	f001 f92f 	bl	b561c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   b43be:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b43c0:	4621      	mov	r1, r4
   b43c2:	a806      	add	r0, sp, #24
   b43c4:	f88d 3014 	strb.w	r3, [sp, #20]
   b43c8:	f001 f844 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
   b43cc:	4629      	mov	r1, r5
   b43ce:	a80b      	add	r0, sp, #44	; 0x2c
   b43d0:	f001 f840 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
   b43d4:	2400      	movs	r4, #0
   b43d6:	ab0b      	add	r3, sp, #44	; 0x2c
   b43d8:	9300      	str	r3, [sp, #0]
   b43da:	aa05      	add	r2, sp, #20
   b43dc:	ab06      	add	r3, sp, #24
   b43de:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b43e2:	4929      	ldr	r1, [pc, #164]	; (b4488 <_GLOBAL__sub_I_txBuf+0xf8>)
   b43e4:	4648      	mov	r0, r9
   b43e6:	f7ff ffb0 	bl	b434a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b43ea:	4632      	mov	r2, r6
   b43ec:	4639      	mov	r1, r7
   b43ee:	4648      	mov	r0, r9
   b43f0:	f002 fc22 	bl	b6c38 <__aeabi_atexit>
   b43f4:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b43f6:	4641      	mov	r1, r8
   b43f8:	a806      	add	r0, sp, #24
   b43fa:	f88d 3014 	strb.w	r3, [sp, #20]
   b43fe:	f001 f829 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
   b4402:	4629      	mov	r1, r5
   b4404:	a80b      	add	r0, sp, #44	; 0x2c
   b4406:	f001 f825 	bl	b5454 <_ZN8particle7BleUuidC1ERKS0_>
   b440a:	4d20      	ldr	r5, [pc, #128]	; (b448c <_GLOBAL__sub_I_txBuf+0xfc>)
   b440c:	4b20      	ldr	r3, [pc, #128]	; (b4490 <_GLOBAL__sub_I_txBuf+0x100>)
   b440e:	9301      	str	r3, [sp, #4]
   b4410:	ab0b      	add	r3, sp, #44	; 0x2c
   b4412:	9300      	str	r3, [sp, #0]
   b4414:	aa05      	add	r2, sp, #20
   b4416:	ab06      	add	r3, sp, #24
   b4418:	491e      	ldr	r1, [pc, #120]	; (b4494 <_GLOBAL__sub_I_txBuf+0x104>)
   b441a:	9402      	str	r4, [sp, #8]
   b441c:	4628      	mov	r0, r5
   b441e:	f7ff ff94 	bl	b434a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4422:	4632      	mov	r2, r6
   b4424:	4639      	mov	r1, r7
   b4426:	4628      	mov	r0, r5
   b4428:	f002 fc06 	bl	b6c38 <__aeabi_atexit>
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   b442c:	4d1a      	ldr	r5, [pc, #104]	; (b4498 <_GLOBAL__sub_I_txBuf+0x108>)
BleAdvertisingData data;
   b442e:	481b      	ldr	r0, [pc, #108]	; (b449c <_GLOBAL__sub_I_txBuf+0x10c>)
   b4430:	f001 f90b 	bl	b564a <_ZN8particle18BleAdvertisingDataC1Ev>
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   b4434:	2302      	movs	r3, #2
   b4436:	461a      	mov	r2, r3
   b4438:	2164      	movs	r1, #100	; 0x64
   b443a:	4628      	mov	r0, r5
   b443c:	f000 f881 	bl	b4542 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4440:	4632      	mov	r2, r6
   b4442:	4917      	ldr	r1, [pc, #92]	; (b44a0 <_GLOBAL__sub_I_txBuf+0x110>)
   b4444:	4628      	mov	r0, r5
              error_(SYSTEM_ERROR_NONE) {
   b4446:	4d17      	ldr	r5, [pc, #92]	; (b44a4 <_GLOBAL__sub_I_txBuf+0x114>)
   b4448:	f002 fbf6 	bl	b6c38 <__aeabi_atexit>
    SleepResult() {}
   b444c:	4b16      	ldr	r3, [pc, #88]	; (b44a8 <_GLOBAL__sub_I_txBuf+0x118>)
   b444e:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4450:	e9c5 4400 	strd	r4, r4, [r5]
        set_system_mode(mode);
   b4454:	2002      	movs	r0, #2
   b4456:	f000 fc4f 	bl	b4cf8 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC); //Using BLE and not Wifi
   b445a:	4914      	ldr	r1, [pc, #80]	; (b44ac <_GLOBAL__sub_I_txBuf+0x11c>)
   b445c:	4632      	mov	r2, r6
   b445e:	4628      	mov	r0, r5
   b4460:	b011      	add	sp, #68	; 0x44
   b4462:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
SYSTEM_MODE(SEMI_AUTOMATIC); //Using BLE and not Wifi
   b4466:	f002 bbe7 	b.w	b6c38 <__aeabi_atexit>
   b446a:	bf00      	nop
   b446c:	2003e5ac 	.word	0x2003e5ac
   b4470:	2003e5d4 	.word	0x2003e5d4
   b4474:	000b705a 	.word	0x000b705a
   b4478:	2003e59c 	.word	0x2003e59c
   b447c:	000b5a1b 	.word	0x000b5a1b
   b4480:	000b707f 	.word	0x000b707f
   b4484:	000b70a4 	.word	0x000b70a4
   b4488:	000b70c9 	.word	0x000b70c9
   b448c:	2003e624 	.word	0x2003e624
   b4490:	000b40dd 	.word	0x000b40dd
   b4494:	000b70cc 	.word	0x000b70cc
   b4498:	2003e610 	.word	0x2003e610
   b449c:	2003e5e8 	.word	0x2003e5e8
   b44a0:	000b44b9 	.word	0x000b44b9
   b44a4:	2003e5a0 	.word	0x2003e5a0
   b44a8:	ffff0000 	.word	0xffff0000
   b44ac:	000b40af 	.word	0x000b40af
   b44b0:	2003e5c0 	.word	0x2003e5c0
   b44b4:	2003e62c 	.word	0x2003e62c

000b44b8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   b44bc:	68c0      	ldr	r0, [r0, #12]
   b44be:	b108      	cbz	r0, b44c4 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   b44c0:	f000 fcb6 	bl	b4e30 <free>
  if (begun) pinMode(pin, INPUT);
   b44c4:	7823      	ldrb	r3, [r4, #0]
   b44c6:	b11b      	cbz	r3, b44d0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   b44c8:	79e0      	ldrb	r0, [r4, #7]
   b44ca:	2100      	movs	r1, #0
   b44cc:	f002 fb4c 	bl	b6b68 <pinMode>
}
   b44d0:	4620      	mov	r0, r4
   b44d2:	bd10      	pop	{r4, pc}

000b44d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b44d4:	b538      	push	{r3, r4, r5, lr}
   b44d6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b44d8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b44da:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b44dc:	b108      	cbz	r0, b44e2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b44de:	f000 fca7 	bl	b4e30 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b44e2:	79a3      	ldrb	r3, [r4, #6]
   b44e4:	2b06      	cmp	r3, #6
   b44e6:	bf0c      	ite	eq
   b44e8:	2004      	moveq	r0, #4
   b44ea:	2003      	movne	r0, #3
   b44ec:	fb10 f005 	smulbb	r0, r0, r5
   b44f0:	b280      	uxth	r0, r0
   b44f2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b44f4:	f000 fc94 	bl	b4e20 <malloc>
   b44f8:	60e0      	str	r0, [r4, #12]
   b44fa:	b128      	cbz	r0, b4508 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b44fc:	88a2      	ldrh	r2, [r4, #4]
   b44fe:	2100      	movs	r1, #0
   b4500:	f002 fcfe 	bl	b6f00 <memset>
    numLEDs = n;
   b4504:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4506:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4508:	80a0      	strh	r0, [r4, #4]
   b450a:	8060      	strh	r0, [r4, #2]
}
   b450c:	e7fb      	b.n	b4506 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b450e <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b450e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4510:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4512:	4605      	mov	r5, r0
   b4514:	460c      	mov	r4, r1
    if (begun) {
   b4516:	b11b      	cbz	r3, b4520 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4518:	79c0      	ldrb	r0, [r0, #7]
   b451a:	2100      	movs	r1, #0
   b451c:	f002 fb24 	bl	b6b68 <pinMode>
    }
    pin = p;
    if (begun) {
   b4520:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4522:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4524:	b15b      	cbz	r3, b453e <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4526:	b2a0      	uxth	r0, r4
   b4528:	2101      	movs	r1, #1
   b452a:	9001      	str	r0, [sp, #4]
   b452c:	f002 fb1c 	bl	b6b68 <pinMode>
        digitalWrite(p, LOW);
   b4530:	9801      	ldr	r0, [sp, #4]
   b4532:	2100      	movs	r1, #0
    }
}
   b4534:	b003      	add	sp, #12
   b4536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b453a:	f002 bb26 	b.w	b6b8a <digitalWrite>
}
   b453e:	b003      	add	sp, #12
   b4540:	bd30      	pop	{r4, r5, pc}

000b4542 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4542:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4544:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4546:	4604      	mov	r4, r0
   b4548:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b454a:	7183      	strb	r3, [r0, #6]
   b454c:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4550:	7005      	strb	r5, [r0, #0]
   b4552:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4554:	f7ff ffbe 	bl	b44d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4558:	4620      	mov	r0, r4
   b455a:	4631      	mov	r1, r6
   b455c:	f7ff ffd7 	bl	b450e <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4560:	4620      	mov	r0, r4
   b4562:	bd70      	pop	{r4, r5, r6, pc}

000b4564 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4564:	68c3      	ldr	r3, [r0, #12]
   b4566:	2b00      	cmp	r3, #0
   b4568:	f000 81a4 	beq.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4570:	7983      	ldrb	r3, [r0, #6]
   b4572:	3b02      	subs	r3, #2
   b4574:	b2db      	uxtb	r3, r3
   b4576:	2b04      	cmp	r3, #4
   b4578:	bf9c      	itt	ls
   b457a:	4abf      	ldrls	r2, [pc, #764]	; (b4878 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b457c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4580:	b085      	sub	sp, #20
   b4582:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4584:	bf88      	it	hi
   b4586:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4588:	f000 fa4e 	bl	b4a28 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b458c:	692b      	ldr	r3, [r5, #16]
   b458e:	1ac0      	subs	r0, r0, r3
   b4590:	42a0      	cmp	r0, r4
   b4592:	d3f9      	bcc.n	b4588 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4594:	4cb9      	ldr	r4, [pc, #740]	; (b487c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4596:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4598:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b459c:	b91b      	cbnz	r3, b45a6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b459e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b45a2:	2b00      	cmp	r3, #0
   b45a4:	db7e      	blt.n	b46a4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b45a6:	4cb6      	ldr	r4, [pc, #728]	; (b4880 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b45a8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ac:	b923      	cbnz	r3, b45b8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ae:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b45b2:	2b00      	cmp	r3, #0
   b45b4:	f2c0 816e 	blt.w	b4894 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b45b8:	4cb2      	ldr	r4, [pc, #712]	; (b4884 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b45ba:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45be:	2b00      	cmp	r3, #0
   b45c0:	f000 8144 	beq.w	b484c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45c4:	79eb      	ldrb	r3, [r5, #7]
   b45c6:	4ab0      	ldr	r2, [pc, #704]	; (b4888 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b45c8:	4cb0      	ldr	r4, [pc, #704]	; (b488c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45ca:	6812      	ldr	r2, [r2, #0]
   b45cc:	0119      	lsls	r1, r3, #4
   b45ce:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b45d2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b45d4:	49ae      	ldr	r1, [pc, #696]	; (b4890 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45d6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b45d8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b45dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b45e0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b45e4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45e6:	f003 031f 	and.w	r3, r3, #31
   b45ea:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b45ee:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b45f0:	433a      	orrs	r2, r7
   b45f2:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b45f4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b45f6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b45fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45fe:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4600:	2900      	cmp	r1, #0
   b4602:	d044      	beq.n	b468e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4604:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4608:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b460a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b460e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4612:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4614:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4616:	6863      	ldr	r3, [r4, #4]
   b4618:	1a9b      	subs	r3, r3, r2
   b461a:	2b46      	cmp	r3, #70	; 0x46
   b461c:	d9fb      	bls.n	b4616 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b461e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4620:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4624:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4628:	ea43 0307 	orr.w	r3, r3, r7
   b462c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4630:	d02f      	beq.n	b4692 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4632:	6863      	ldr	r3, [r4, #4]
   b4634:	1a9b      	subs	r3, r3, r2
   b4636:	2b28      	cmp	r3, #40	; 0x28
   b4638:	d9fb      	bls.n	b4632 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b463a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b463e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4640:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4644:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4648:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b464c:	d1e3      	bne.n	b4616 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b464e:	88ab      	ldrh	r3, [r5, #4]
   b4650:	f10e 0e01 	add.w	lr, lr, #1
   b4654:	fa1f fe8e 	uxth.w	lr, lr
   b4658:	4573      	cmp	r3, lr
   b465a:	d8d8      	bhi.n	b460e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b465c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4660:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4664:	6863      	ldr	r3, [r4, #4]
   b4666:	1a9b      	subs	r3, r3, r2
   b4668:	2b46      	cmp	r3, #70	; 0x46
   b466a:	d9fb      	bls.n	b4664 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b466c:	6863      	ldr	r3, [r4, #4]
   b466e:	eba3 0909 	sub.w	r9, r3, r9
   b4672:	4589      	cmp	r9, r1
   b4674:	f0c0 80e4 	bcc.w	b4840 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4678:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b467c:	f000 f9cc 	bl	b4a18 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4680:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4682:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4686:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b468a:	2900      	cmp	r1, #0
   b468c:	d1ba      	bne.n	b4604 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b468e:	460a      	mov	r2, r1
   b4690:	e7e8      	b.n	b4664 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4692:	6863      	ldr	r3, [r4, #4]
   b4694:	1a9b      	subs	r3, r3, r2
   b4696:	2b11      	cmp	r3, #17
   b4698:	d8cf      	bhi.n	b463a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b469a:	6863      	ldr	r3, [r4, #4]
   b469c:	1a9b      	subs	r3, r3, r2
   b469e:	2b11      	cmp	r3, #17
   b46a0:	d9f7      	bls.n	b4692 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b46a2:	e7ca      	b.n	b463a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46a4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46a8:	2b00      	cmp	r3, #0
   b46aa:	f6bf af7c 	bge.w	b45a6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ae:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46b2:	2b00      	cmp	r3, #0
   b46b4:	f6bf af77 	bge.w	b45a6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b46b8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46bc:	2b00      	cmp	r3, #0
   b46be:	f6bf af72 	bge.w	b45a6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b46c2:	0136      	lsls	r6, r6, #4
   b46c4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b46c6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b46c8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b46ca:	f000 fba9 	bl	b4e20 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b46ce:	2800      	cmp	r0, #0
   b46d0:	f43f af78 	beq.w	b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b46d4:	88ab      	ldrh	r3, [r5, #4]
   b46d6:	2b00      	cmp	r3, #0
   b46d8:	f000 80ed 	beq.w	b48b6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b46dc:	68ea      	ldr	r2, [r5, #12]
   b46de:	3b01      	subs	r3, #1
   b46e0:	fa12 f783 	uxtah	r7, r2, r3
   b46e4:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b46e8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46ea:	f248 0206 	movw	r2, #32774	; 0x8006
   b46ee:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b46f2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46f6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b46fa:	bf0c      	ite	eq
   b46fc:	4693      	moveq	fp, r2
   b46fe:	468b      	movne	fp, r1
   b4700:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4704:	bf0c      	ite	eq
   b4706:	4616      	moveq	r6, r2
   b4708:	460e      	movne	r6, r1
   b470a:	f01c 0f20 	tst.w	ip, #32
   b470e:	bf0c      	ite	eq
   b4710:	4690      	moveq	r8, r2
   b4712:	4688      	movne	r8, r1
        pos++;
   b4714:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4718:	f8cd 8008 	str.w	r8, [sp, #8]
   b471c:	9601      	str	r6, [sp, #4]
        pos++;
   b471e:	f103 0802 	add.w	r8, r3, #2
   b4722:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4726:	9e01      	ldr	r6, [sp, #4]
   b4728:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b472c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4730:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4734:	9e02      	ldr	r6, [sp, #8]
   b4736:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b473a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b473e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4742:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4746:	bf0c      	ite	eq
   b4748:	4693      	moveq	fp, r2
   b474a:	468b      	movne	fp, r1
   b474c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4750:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4754:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4758:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b475c:	bf0c      	ite	eq
   b475e:	4693      	moveq	fp, r2
   b4760:	468b      	movne	fp, r1
   b4762:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4766:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b476a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b476e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4772:	bf0c      	ite	eq
   b4774:	4693      	moveq	fp, r2
   b4776:	468b      	movne	fp, r1
   b4778:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b477c:	f103 0a08 	add.w	sl, r3, #8
   b4780:	f103 0806 	add.w	r8, r3, #6
   b4784:	3307      	adds	r3, #7
   b4786:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4788:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b478c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4790:	bf0c      	ite	eq
   b4792:	4693      	moveq	fp, r2
   b4794:	468b      	movne	fp, r1
        pos++;
   b4796:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b479a:	f01c 0f01 	tst.w	ip, #1
   b479e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b47a2:	bf15      	itete	ne
   b47a4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b47a8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b47ac:	fa1f f38a 	uxthne.w	r3, sl
   b47b0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b47b4:	4577      	cmp	r7, lr
   b47b6:	d19c      	bne.n	b46f2 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47b8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47ba:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47bc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47be:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47c0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47c2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47c4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b47c8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b47ca:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47cc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b47ce:	4b2e      	ldr	r3, [pc, #184]	; (b4888 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b47d0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b47d2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b47d4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b47d6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b47d8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b47dc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b47e0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b47e4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b47e8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b47ec:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b47f0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b47f4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b47f8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b47fc:	79eb      	ldrb	r3, [r5, #7]
   b47fe:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4802:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4804:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4806:	5cfe      	ldrb	r6, [r7, r3]
   b4808:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b480c:	f003 031f 	and.w	r3, r3, #31
   b4810:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4814:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4818:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b481c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4820:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4822:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4826:	2b00      	cmp	r3, #0
   b4828:	d0fb      	beq.n	b4822 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b482a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b482c:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4830:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4834:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4838:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b483c:	f000 faf8 	bl	b4e30 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4840:	f000 f8f2 	bl	b4a28 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4844:	6128      	str	r0, [r5, #16]
}
   b4846:	b005      	add	sp, #20
   b4848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b484c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4850:	2b00      	cmp	r3, #0
   b4852:	f6bf aeb7 	bge.w	b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4856:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b485a:	2b00      	cmp	r3, #0
   b485c:	f6bf aeb2 	bge.w	b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4860:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4864:	2b00      	cmp	r3, #0
   b4866:	f6bf aead 	bge.w	b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b486a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b486e:	2b00      	cmp	r3, #0
   b4870:	f6bf aea8 	bge.w	b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4874:	e725      	b.n	b46c2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4876:	bf00      	nop
   b4878:	000b70d0 	.word	0x000b70d0
   b487c:	4001c000 	.word	0x4001c000
   b4880:	40021000 	.word	0x40021000
   b4884:	40022000 	.word	0x40022000
   b4888:	2003e634 	.word	0x2003e634
   b488c:	e0001000 	.word	0xe0001000
   b4890:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4894:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4898:	2b00      	cmp	r3, #0
   b489a:	f6bf ae8d 	bge.w	b45b8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b489e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48a2:	2b00      	cmp	r3, #0
   b48a4:	f6bf ae88 	bge.w	b45b8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b48a8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48ac:	2b00      	cmp	r3, #0
   b48ae:	f6bf ae83 	bge.w	b45b8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b48b2:	e706      	b.n	b46c2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b48b4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b48b6:	2304      	movs	r3, #4
   b48b8:	2102      	movs	r1, #2
   b48ba:	e783      	b.n	b47c4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b48bc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b48bc:	8843      	ldrh	r3, [r0, #2]
   b48be:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b48c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b48c2:	d92d      	bls.n	b4920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b48c4:	7a06      	ldrb	r6, [r0, #8]
   b48c6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b48ca:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b48ce:	b2d5      	uxtb	r5, r2
   b48d0:	b13e      	cbz	r6, b48e2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b48d2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b48d4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b48d6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b48d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b48dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b48e0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b48e2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b48e6:	68c7      	ldr	r7, [r0, #12]
   b48e8:	f1bc 0f06 	cmp.w	ip, #6
   b48ec:	bf0c      	ite	eq
   b48ee:	2604      	moveq	r6, #4
   b48f0:	2603      	movne	r6, #3
   b48f2:	434e      	muls	r6, r1
   b48f4:	f1ac 0c02 	sub.w	ip, ip, #2
   b48f8:	19b9      	adds	r1, r7, r6
    switch(type) {
   b48fa:	f1bc 0f06 	cmp.w	ip, #6
   b48fe:	d81d      	bhi.n	b493c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4900:	e8df f00c 	tbb	[pc, ip]
   b4904:	04081c04 	.word	0x04081c04
   b4908:	040f      	.short	0x040f
   b490a:	04          	.byte	0x04
   b490b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b490c:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b490e:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4910:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4912:	e005      	b.n	b4920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4914:	2bfe      	cmp	r3, #254	; 0xfe
   b4916:	bf28      	it	cs
   b4918:	23fe      	movcs	r3, #254	; 0xfe
   b491a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b491c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b491e:	708c      	strb	r4, [r1, #2]
}
   b4920:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4922:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4924:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4926:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4928:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b492a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b492c:	b913      	cbnz	r3, b4934 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b492e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4930:	70ca      	strb	r2, [r1, #3]
        } break;
   b4932:	e7f5      	b.n	b4920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4934:	435a      	muls	r2, r3
   b4936:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b493a:	e7f9      	b.n	b4930 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b493c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b493e:	704c      	strb	r4, [r1, #1]
   b4940:	e7e6      	b.n	b4910 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4942 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4942:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4944:	1c4a      	adds	r2, r1, #1
   b4946:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4948:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b494a:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b494c:	d01e      	beq.n	b498c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b494e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4950:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4954:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4956:	d00c      	beq.n	b4972 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4958:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b495a:	bf1f      	itttt	ne
   b495c:	0211      	lslne	r1, r2, #8
   b495e:	f101 31ff 	addne.w	r1, r1, #4294967295
   b4962:	fbb1 f3f3 	udivne	r3, r1, r3
   b4966:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4968:	bf04      	itt	eq
   b496a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b496e:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4972:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4974:	8886      	ldrh	r6, [r0, #4]
   b4976:	1b29      	subs	r1, r5, r4
   b4978:	b289      	uxth	r1, r1
   b497a:	428e      	cmp	r6, r1
   b497c:	d905      	bls.n	b498a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b497e:	7829      	ldrb	r1, [r5, #0]
   b4980:	4359      	muls	r1, r3
   b4982:	1209      	asrs	r1, r1, #8
   b4984:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4988:	e7f4      	b.n	b4974 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b498a:	7202      	strb	r2, [r0, #8]
  }
}
   b498c:	bd70      	pop	{r4, r5, r6, pc}

000b498e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b498e:	8882      	ldrh	r2, [r0, #4]
   b4990:	68c0      	ldr	r0, [r0, #12]
   b4992:	2100      	movs	r1, #0
   b4994:	f002 bab4 	b.w	b6f00 <memset>

000b4998 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4998:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b499a:	f000 f815 	bl	b49c8 <HAL_Pin_Map>
   b499e:	4b01      	ldr	r3, [pc, #4]	; (b49a4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b49a0:	6018      	str	r0, [r3, #0]
}
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	2003e634 	.word	0x2003e634

000b49a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <netdb_freeaddrinfo+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	689b      	ldr	r3, [r3, #8]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030268 	.word	0x00030268

000b49b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <netdb_getaddrinfo+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	68db      	ldr	r3, [r3, #12]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030268 	.word	0x00030268

000b49c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <HAL_Pin_Map+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	681b      	ldr	r3, [r3, #0]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	0003022c 	.word	0x0003022c

000b49d8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <HAL_Pin_Mode+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	689b      	ldr	r3, [r3, #8]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	0003022c 	.word	0x0003022c

000b49e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <HAL_Get_Pin_Mode+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	68db      	ldr	r3, [r3, #12]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	0003022c 	.word	0x0003022c

000b49f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <HAL_GPIO_Write+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	691b      	ldr	r3, [r3, #16]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	0003022c 	.word	0x0003022c

000b4a08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <HAL_RNG_GetRandomNumber+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	685b      	ldr	r3, [r3, #4]
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030218 	.word	0x00030218

000b4a18 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <HAL_Delay_Microseconds+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	68db      	ldr	r3, [r3, #12]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030218 	.word	0x00030218

000b4a28 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	691b      	ldr	r3, [r3, #16]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030218 	.word	0x00030218

000b4a38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	695b      	ldr	r3, [r3, #20]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030218 	.word	0x00030218

000b4a48 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_timer_millis+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030218 	.word	0x00030218

000b4a58 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_ble_stack_init+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	689b      	ldr	r3, [r3, #8]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030278 	.word	0x00030278

000b4a68 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_ble_gap_get_device_address+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	69db      	ldr	r3, [r3, #28]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	00030278 	.word	0x00030278

000b4a78 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_ble_gap_set_advertising_data+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	00030278 	.word	0x00030278

000b4a88 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_ble_gap_set_scan_response_data+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	00030278 	.word	0x00030278

000b4a98 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_ble_gap_start_advertising+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	00030278 	.word	0x00030278

000b4aa8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b03      	ldr	r3, [pc, #12]	; (b4ab8 <hal_ble_gap_disconnect+0x10>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4ab2:	9301      	str	r3, [sp, #4]
   b4ab4:	bd08      	pop	{r3, pc}
   b4ab6:	0000      	.short	0x0000
   b4ab8:	00030278 	.word	0x00030278

000b4abc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b03      	ldr	r3, [pc, #12]	; (b4acc <hal_ble_gatt_server_add_service+0x10>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4ac6:	9301      	str	r3, [sp, #4]
   b4ac8:	bd08      	pop	{r3, pc}
   b4aca:	0000      	.short	0x0000
   b4acc:	00030278 	.word	0x00030278

000b4ad0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b03      	ldr	r3, [pc, #12]	; (b4ae0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4ada:	9301      	str	r3, [sp, #4]
   b4adc:	bd08      	pop	{r3, pc}
   b4ade:	0000      	.short	0x0000
   b4ae0:	00030278 	.word	0x00030278

000b4ae4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b03      	ldr	r3, [pc, #12]	; (b4af4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4aee:	9301      	str	r3, [sp, #4]
   b4af0:	bd08      	pop	{r3, pc}
   b4af2:	0000      	.short	0x0000
   b4af4:	00030278 	.word	0x00030278

000b4af8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <os_mutex_recursive_create+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030248 	.word	0x00030248

000b4b08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <os_mutex_recursive_destroy+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030248 	.word	0x00030248

000b4b18 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <os_mutex_recursive_lock+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030248 	.word	0x00030248

000b4b28 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <os_mutex_recursive_unlock+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030248 	.word	0x00030248

000b4b38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <inet_inet_ntop+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	695b      	ldr	r3, [r3, #20]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030264 	.word	0x00030264

000b4b48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <hal_usart_init+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	681b      	ldr	r3, [r3, #0]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	0003023c 	.word	0x0003023c

000b4b58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <hal_usart_write+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	68db      	ldr	r3, [r3, #12]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	0003023c 	.word	0x0003023c

000b4b68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <hal_usart_available+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	691b      	ldr	r3, [r3, #16]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	0003023c 	.word	0x0003023c

000b4b78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <hal_usart_read+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	695b      	ldr	r3, [r3, #20]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	0003023c 	.word	0x0003023c

000b4b88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <hal_usart_peek+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	699b      	ldr	r3, [r3, #24]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	0003023c 	.word	0x0003023c

000b4b98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <hal_usart_flush+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	69db      	ldr	r3, [r3, #28]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	0003023c 	.word	0x0003023c

000b4ba8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <hal_usart_is_enabled+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6a1b      	ldr	r3, [r3, #32]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	0003023c 	.word	0x0003023c

000b4bb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <hal_usart_available_data_for_write+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003023c 	.word	0x0003023c

000b4bc8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <hal_i2c_write+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6a1b      	ldr	r3, [r3, #32]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030228 	.word	0x00030228

000b4bd8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_i2c_available+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030228 	.word	0x00030228

000b4be8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_i2c_read+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030228 	.word	0x00030228

000b4bf8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <hal_i2c_peek+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030228 	.word	0x00030228

000b4c08 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <hal_i2c_flush+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030228 	.word	0x00030228

000b4c18 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <hal_i2c_is_enabled+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030228 	.word	0x00030228

000b4c28 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <hal_i2c_init+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030228 	.word	0x00030228

000b4c38 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <hal_spi_init+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	69db      	ldr	r3, [r3, #28]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030230 	.word	0x00030230

000b4c48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <hal_spi_is_enabled+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6a1b      	ldr	r3, [r3, #32]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030230 	.word	0x00030230

000b4c58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <HAL_USB_USART_Init+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	681b      	ldr	r3, [r3, #0]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	0003024c 	.word	0x0003024c

000b4c68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <HAL_USB_USART_Begin+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	685b      	ldr	r3, [r3, #4]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	0003024c 	.word	0x0003024c

000b4c78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <HAL_USB_USART_Available_Data+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	691b      	ldr	r3, [r3, #16]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	0003024c 	.word	0x0003024c

000b4c88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	695b      	ldr	r3, [r3, #20]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	0003024c 	.word	0x0003024c

000b4c98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <HAL_USB_USART_Receive_Data+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	699b      	ldr	r3, [r3, #24]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	0003024c 	.word	0x0003024c

000b4ca8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <HAL_USB_USART_Send_Data+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	69db      	ldr	r3, [r3, #28]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	0003024c 	.word	0x0003024c

000b4cb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <HAL_USB_USART_Flush_Data+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6a1b      	ldr	r3, [r3, #32]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	0003024c 	.word	0x0003024c

000b4cc8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <HAL_USB_USART_Is_Connected+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	0003024c 	.word	0x0003024c

000b4cd8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <panic_+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030260 	.word	0x00030260

000b4ce8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <log_message+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030260 	.word	0x00030260

000b4cf8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <set_system_mode+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	685b      	ldr	r3, [r3, #4]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030220 	.word	0x00030220

000b4d08 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <system_delay_ms+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	695b      	ldr	r3, [r3, #20]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030220 	.word	0x00030220

000b4d18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b03      	ldr	r3, [pc, #12]	; (b4d28 <system_ctrl_set_app_request_handler+0x10>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d22:	9301      	str	r3, [sp, #4]
   b4d24:	bd08      	pop	{r3, pc}
   b4d26:	0000      	.short	0x0000
   b4d28:	00030220 	.word	0x00030220

000b4d2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b03      	ldr	r3, [pc, #12]	; (b4d3c <system_ctrl_set_result+0x10>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d36:	9301      	str	r3, [sp, #4]
   b4d38:	bd08      	pop	{r3, pc}
   b4d3a:	0000      	.short	0x0000
   b4d3c:	00030220 	.word	0x00030220

000b4d40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <network_connect+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	685b      	ldr	r3, [r3, #4]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030240 	.word	0x00030240

000b4d50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <network_connecting+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	689b      	ldr	r3, [r3, #8]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030240 	.word	0x00030240

000b4d60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <network_disconnect+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	68db      	ldr	r3, [r3, #12]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030240 	.word	0x00030240

000b4d70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <network_ready+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	691b      	ldr	r3, [r3, #16]
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030240 	.word	0x00030240

000b4d80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <network_on+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	695b      	ldr	r3, [r3, #20]
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	00030240 	.word	0x00030240

000b4d90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <network_off+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	699b      	ldr	r3, [r3, #24]
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	00030240 	.word	0x00030240

000b4da0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <network_listen+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	69db      	ldr	r3, [r3, #28]
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	00030240 	.word	0x00030240

000b4db0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <network_listening+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6a1b      	ldr	r3, [r3, #32]
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	00030240 	.word	0x00030240

000b4dc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <network_set_listen_timeout+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	00030240 	.word	0x00030240

000b4dd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <network_get_listen_timeout+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	00030240 	.word	0x00030240

000b4de0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <network_is_on+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	00030240 	.word	0x00030240

000b4df0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <network_is_off+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	00030240 	.word	0x00030240

000b4e00 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4e00:	b508      	push	{r3, lr}
   b4e02:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <spark_process+0xc>)
   b4e04:	681b      	ldr	r3, [r3, #0]
   b4e06:	689b      	ldr	r3, [r3, #8]
   b4e08:	9301      	str	r3, [sp, #4]
   b4e0a:	bd08      	pop	{r3, pc}
   b4e0c:	00030244 	.word	0x00030244

000b4e10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	00030244 	.word	0x00030244

000b4e20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <malloc+0xc>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	681b      	ldr	r3, [r3, #0]
   b4e28:	9301      	str	r3, [sp, #4]
   b4e2a:	bd08      	pop	{r3, pc}
   b4e2c:	0003021c 	.word	0x0003021c

000b4e30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e30:	b508      	push	{r3, lr}
   b4e32:	4b02      	ldr	r3, [pc, #8]	; (b4e3c <free+0xc>)
   b4e34:	681b      	ldr	r3, [r3, #0]
   b4e36:	685b      	ldr	r3, [r3, #4]
   b4e38:	9301      	str	r3, [sp, #4]
   b4e3a:	bd08      	pop	{r3, pc}
   b4e3c:	0003021c 	.word	0x0003021c

000b4e40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e40:	b508      	push	{r3, lr}
   b4e42:	4b02      	ldr	r3, [pc, #8]	; (b4e4c <realloc+0xc>)
   b4e44:	681b      	ldr	r3, [r3, #0]
   b4e46:	689b      	ldr	r3, [r3, #8]
   b4e48:	9301      	str	r3, [sp, #4]
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	0003021c 	.word	0x0003021c

000b4e50 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <vsnprintf+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	0003021c 	.word	0x0003021c

000b4e60 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <abort+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	0003021c 	.word	0x0003021c

000b4e70 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <__assert_func+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	0003021c 	.word	0x0003021c

000b4e80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <newlib_impure_ptr_callback+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	0003021c 	.word	0x0003021c

000b4e90 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e90:	2200      	movs	r2, #0
   b4e92:	6840      	ldr	r0, [r0, #4]
   b4e94:	4611      	mov	r1, r2
   b4e96:	f7ff bf8b 	b.w	b4db0 <network_listening>

000b4e9a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e9a:	2200      	movs	r2, #0
   b4e9c:	6840      	ldr	r0, [r0, #4]
   b4e9e:	4611      	mov	r1, r2
   b4ea0:	f7ff bf96 	b.w	b4dd0 <network_get_listen_timeout>

000b4ea4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ea4:	6840      	ldr	r0, [r0, #4]
   b4ea6:	2200      	movs	r2, #0
   b4ea8:	f7ff bf8a 	b.w	b4dc0 <network_set_listen_timeout>

000b4eac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4eac:	6840      	ldr	r0, [r0, #4]
   b4eae:	2200      	movs	r2, #0
   b4eb0:	f081 0101 	eor.w	r1, r1, #1
   b4eb4:	f7ff bf74 	b.w	b4da0 <network_listen>

000b4eb8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4eb8:	2300      	movs	r3, #0
   b4eba:	6840      	ldr	r0, [r0, #4]
   b4ebc:	461a      	mov	r2, r3
   b4ebe:	4619      	mov	r1, r3
   b4ec0:	f7ff bf66 	b.w	b4d90 <network_off>

000b4ec4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ec4:	2300      	movs	r3, #0
   b4ec6:	6840      	ldr	r0, [r0, #4]
   b4ec8:	461a      	mov	r2, r3
   b4eca:	4619      	mov	r1, r3
   b4ecc:	f7ff bf58 	b.w	b4d80 <network_on>

000b4ed0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4ed0:	2200      	movs	r2, #0
   b4ed2:	6840      	ldr	r0, [r0, #4]
   b4ed4:	4611      	mov	r1, r2
   b4ed6:	f7ff bf4b 	b.w	b4d70 <network_ready>

000b4eda <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4eda:	2200      	movs	r2, #0
   b4edc:	6840      	ldr	r0, [r0, #4]
   b4ede:	4611      	mov	r1, r2
   b4ee0:	f7ff bf36 	b.w	b4d50 <network_connecting>

000b4ee4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ee4:	6840      	ldr	r0, [r0, #4]
   b4ee6:	2200      	movs	r2, #0
   b4ee8:	2102      	movs	r1, #2
   b4eea:	f7ff bf39 	b.w	b4d60 <network_disconnect>

000b4eee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4eee:	2300      	movs	r3, #0
   b4ef0:	6840      	ldr	r0, [r0, #4]
   b4ef2:	461a      	mov	r2, r3
   b4ef4:	f7ff bf24 	b.w	b4d40 <network_connect>

000b4ef8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ef8:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4efa:	2203      	movs	r2, #3
   b4efc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4efe:	4a02      	ldr	r2, [pc, #8]	; (b4f08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f00:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f02:	4770      	bx	lr
   b4f04:	2003e638 	.word	0x2003e638
   b4f08:	000b70ec 	.word	0x000b70ec

000b4f0c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4f0c:	b510      	push	{r4, lr}
   b4f0e:	4604      	mov	r4, r0
   b4f10:	4608      	mov	r0, r1
{
    _spi = spi;
   b4f12:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4f14:	f7ff fe90 	bl	b4c38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4f18:	2300      	movs	r3, #0
   b4f1a:	6063      	str	r3, [r4, #4]
}
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bd10      	pop	{r4, pc}

000b4f20 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b4f20:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4f22:	4b09      	ldr	r3, [pc, #36]	; (b4f48 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4f24:	4c09      	ldr	r4, [pc, #36]	; (b4f4c <_GLOBAL__sub_I_System+0x2c>)
   b4f26:	2202      	movs	r2, #2
   b4f28:	601a      	str	r2, [r3, #0]
   b4f2a:	2000      	movs	r0, #0
    SleepResult() {}
   b4f2c:	4b08      	ldr	r3, [pc, #32]	; (b4f50 <_GLOBAL__sub_I_System+0x30>)
   b4f2e:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4f30:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4f34:	f7ff fee0 	bl	b4cf8 <set_system_mode>
SystemClass System;
   b4f38:	4620      	mov	r0, r4
   b4f3a:	4a06      	ldr	r2, [pc, #24]	; (b4f54 <_GLOBAL__sub_I_System+0x34>)
   b4f3c:	4906      	ldr	r1, [pc, #24]	; (b4f58 <_GLOBAL__sub_I_System+0x38>)
   b4f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b4f42:	f001 be79 	b.w	b6c38 <__aeabi_atexit>
   b4f46:	bf00      	nop
   b4f48:	2003e64c 	.word	0x2003e64c
   b4f4c:	2003e640 	.word	0x2003e640
   b4f50:	ffff0000 	.word	0xffff0000
   b4f54:	2003e59c 	.word	0x2003e59c
   b4f58:	000b40af 	.word	0x000b40af

000b4f5c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4f5c:	b510      	push	{r4, lr}
   b4f5e:	4604      	mov	r4, r0
{
	free(buffer);
   b4f60:	6800      	ldr	r0, [r0, #0]
   b4f62:	f7ff ff65 	bl	b4e30 <free>
}
   b4f66:	4620      	mov	r0, r4
   b4f68:	bd10      	pop	{r4, pc}

000b4f6a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4f6a:	b510      	push	{r4, lr}
   b4f6c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4f6e:	6800      	ldr	r0, [r0, #0]
   b4f70:	b108      	cbz	r0, b4f76 <_ZN6String10invalidateEv+0xc>
   b4f72:	f7ff ff5d 	bl	b4e30 <free>
	buffer = NULL;
   b4f76:	2300      	movs	r3, #0
	capacity = len = 0;
   b4f78:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4f7c:	6023      	str	r3, [r4, #0]
}
   b4f7e:	bd10      	pop	{r4, pc}

000b4f80 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4f80:	b538      	push	{r3, r4, r5, lr}
   b4f82:	4604      	mov	r4, r0
   b4f84:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4f86:	6800      	ldr	r0, [r0, #0]
   b4f88:	3101      	adds	r1, #1
   b4f8a:	f7ff ff59 	bl	b4e40 <realloc>
	if (newbuffer) {
   b4f8e:	b110      	cbz	r0, b4f96 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4f90:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4f94:	2001      	movs	r0, #1
	}
	return 0;
}
   b4f96:	bd38      	pop	{r3, r4, r5, pc}

000b4f98 <_ZN6String7reserveEj>:
{
   b4f98:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4f9a:	6803      	ldr	r3, [r0, #0]
{
   b4f9c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4f9e:	b123      	cbz	r3, b4faa <_ZN6String7reserveEj+0x12>
   b4fa0:	6843      	ldr	r3, [r0, #4]
   b4fa2:	428b      	cmp	r3, r1
   b4fa4:	d301      	bcc.n	b4faa <_ZN6String7reserveEj+0x12>
   b4fa6:	2001      	movs	r0, #1
}
   b4fa8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4faa:	4620      	mov	r0, r4
   b4fac:	f7ff ffe8 	bl	b4f80 <_ZN6String12changeBufferEj>
   b4fb0:	2800      	cmp	r0, #0
   b4fb2:	d0f9      	beq.n	b4fa8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4fb4:	68a3      	ldr	r3, [r4, #8]
   b4fb6:	2b00      	cmp	r3, #0
   b4fb8:	d1f5      	bne.n	b4fa6 <_ZN6String7reserveEj+0xe>
   b4fba:	6822      	ldr	r2, [r4, #0]
   b4fbc:	7013      	strb	r3, [r2, #0]
   b4fbe:	e7f2      	b.n	b4fa6 <_ZN6String7reserveEj+0xe>

000b4fc0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fc2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4fc4:	4611      	mov	r1, r2
   b4fc6:	9201      	str	r2, [sp, #4]
{
   b4fc8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4fca:	f7ff ffe5 	bl	b4f98 <_ZN6String7reserveEj>
   b4fce:	9a01      	ldr	r2, [sp, #4]
   b4fd0:	b928      	cbnz	r0, b4fde <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	f7ff ffc9 	bl	b4f6a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	b003      	add	sp, #12
   b4fdc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4fde:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4fe0:	4629      	mov	r1, r5
   b4fe2:	6820      	ldr	r0, [r4, #0]
   b4fe4:	f001 ff64 	bl	b6eb0 <memcpy>
	buffer[len] = 0;
   b4fe8:	6822      	ldr	r2, [r4, #0]
   b4fea:	68a3      	ldr	r3, [r4, #8]
   b4fec:	2100      	movs	r1, #0
   b4fee:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4ff0:	e7f2      	b.n	b4fd8 <_ZN6String4copyEPKcj+0x18>

000b4ff2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4ff2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4ff4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4ff6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4ffa:	4604      	mov	r4, r0
	len = 0;
   b4ffc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4ffe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5000:	b141      	cbz	r1, b5014 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5002:	4608      	mov	r0, r1
   b5004:	9101      	str	r1, [sp, #4]
   b5006:	f001 ffbb 	bl	b6f80 <strlen>
   b500a:	9901      	ldr	r1, [sp, #4]
   b500c:	4602      	mov	r2, r0
   b500e:	4620      	mov	r0, r4
   b5010:	f7ff ffd6 	bl	b4fc0 <_ZN6String4copyEPKcj>
}
   b5014:	4620      	mov	r0, r4
   b5016:	b002      	add	sp, #8
   b5018:	bd10      	pop	{r4, pc}

000b501a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b501a:	b513      	push	{r0, r1, r4, lr}
   b501c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b501e:	b159      	cbz	r1, b5038 <_ZN6StringaSEPKc+0x1e>
   b5020:	4608      	mov	r0, r1
   b5022:	9101      	str	r1, [sp, #4]
   b5024:	f001 ffac 	bl	b6f80 <strlen>
   b5028:	9901      	ldr	r1, [sp, #4]
   b502a:	4602      	mov	r2, r0
   b502c:	4620      	mov	r0, r4
   b502e:	f7ff ffc7 	bl	b4fc0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5032:	4620      	mov	r0, r4
   b5034:	b002      	add	sp, #8
   b5036:	bd10      	pop	{r4, pc}
	else invalidate();
   b5038:	f7ff ff97 	bl	b4f6a <_ZN6String10invalidateEv>
   b503c:	e7f9      	b.n	b5032 <_ZN6StringaSEPKc+0x18>

000b503e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b503e:	4770      	bx	lr

000b5040 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5040:	4770      	bx	lr

000b5042 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5042:	4770      	bx	lr

000b5044 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5044:	4770      	bx	lr
	...

000b5048 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5048:	4b06      	ldr	r3, [pc, #24]	; (b5064 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b504a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b504c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b504e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5052:	d005      	beq.n	b5060 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5054:	4608      	mov	r0, r1
   b5056:	f001 fdfb 	bl	b6c50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b505a:	2800      	cmp	r0, #0
   b505c:	bf08      	it	eq
   b505e:	2400      	moveq	r4, #0
      }
   b5060:	4620      	mov	r0, r4
   b5062:	bd10      	pop	{r4, pc}
   b5064:	000b7268 	.word	0x000b7268

000b5068 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5068:	4b06      	ldr	r3, [pc, #24]	; (b5084 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b506a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b506c:	b510      	push	{r4, lr}
   b506e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5072:	d005      	beq.n	b5080 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5074:	4608      	mov	r0, r1
   b5076:	f001 fdeb 	bl	b6c50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b507a:	2800      	cmp	r0, #0
   b507c:	bf08      	it	eq
   b507e:	2400      	moveq	r4, #0
      }
   b5080:	4620      	mov	r0, r4
   b5082:	bd10      	pop	{r4, pc}
   b5084:	000b7268 	.word	0x000b7268

000b5088 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5088:	4b06      	ldr	r3, [pc, #24]	; (b50a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b508a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b508c:	b510      	push	{r4, lr}
   b508e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5092:	d005      	beq.n	b50a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5094:	4608      	mov	r0, r1
   b5096:	f001 fddb 	bl	b6c50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b509a:	2800      	cmp	r0, #0
   b509c:	bf08      	it	eq
   b509e:	2400      	moveq	r4, #0
      }
   b50a0:	4620      	mov	r0, r4
   b50a2:	bd10      	pop	{r4, pc}
   b50a4:	000b7268 	.word	0x000b7268

000b50a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b50a8:	b510      	push	{r4, lr}
   b50aa:	2168      	movs	r1, #104	; 0x68
   b50ac:	4604      	mov	r4, r0
   b50ae:	f001 fdc8 	bl	b6c42 <_ZdlPvj>
   b50b2:	4620      	mov	r0, r4
   b50b4:	bd10      	pop	{r4, pc}

000b50b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b50b6:	b510      	push	{r4, lr}
   b50b8:	2128      	movs	r1, #40	; 0x28
   b50ba:	4604      	mov	r4, r0
   b50bc:	f001 fdc1 	bl	b6c42 <_ZdlPvj>
   b50c0:	4620      	mov	r0, r4
   b50c2:	bd10      	pop	{r4, pc}

000b50c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b50c4:	b510      	push	{r4, lr}
   b50c6:	2130      	movs	r1, #48	; 0x30
   b50c8:	4604      	mov	r4, r0
   b50ca:	f001 fdba 	bl	b6c42 <_ZdlPvj>
   b50ce:	4620      	mov	r0, r4
   b50d0:	bd10      	pop	{r4, pc}

000b50d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b50d2:	2168      	movs	r1, #104	; 0x68
   b50d4:	f001 bdb5 	b.w	b6c42 <_ZdlPvj>

000b50d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b50d8:	2128      	movs	r1, #40	; 0x28
   b50da:	f001 bdb2 	b.w	b6c42 <_ZdlPvj>

000b50de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b50de:	2130      	movs	r1, #48	; 0x30
   b50e0:	f001 bdaf 	b.w	b6c42 <_ZdlPvj>

000b50e4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b50e4:	b510      	push	{r4, lr}
   b50e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b50e8:	6800      	ldr	r0, [r0, #0]
   b50ea:	b108      	cbz	r0, b50f0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b50ec:	f7ff fd0c 	bl	b4b08 <os_mutex_recursive_destroy>
    }
   b50f0:	4620      	mov	r0, r4
   b50f2:	bd10      	pop	{r4, pc}

000b50f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b50f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b50f6:	2500      	movs	r5, #0
   b50f8:	1cec      	adds	r4, r5, #3
   b50fa:	428c      	cmp	r4, r1
   b50fc:	d80d      	bhi.n	b511a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b50fe:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5100:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5102:	5d87      	ldrb	r7, [r0, r6]
   b5104:	4297      	cmp	r7, r2
   b5106:	d105      	bne.n	b5114 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5108:	4426      	add	r6, r4
   b510a:	42b1      	cmp	r1, r6
   b510c:	d305      	bcc.n	b511a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b510e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5110:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5112:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5114:	3401      	adds	r4, #1
   b5116:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5118:	e7ee      	b.n	b50f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b511a:	2000      	movs	r0, #0
   b511c:	e7f9      	b.n	b5112 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b511e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b511e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5122:	4604      	mov	r4, r0
   b5124:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b5128:	461e      	mov	r6, r3
   b512a:	4689      	mov	r9, r1
   b512c:	ab01      	add	r3, sp, #4
   b512e:	4690      	mov	r8, r2
   b5130:	460a      	mov	r2, r1
   b5132:	6a01      	ldr	r1, [r0, #32]
   b5134:	f7ff ffde 	bl	b50f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b5138:	6a25      	ldr	r5, [r4, #32]
   b513a:	1cb3      	adds	r3, r6, #2
   b513c:	bb0f      	cbnz	r7, b5182 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b513e:	b300      	cbz	r0, b5182 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b5140:	195f      	adds	r7, r3, r5
   b5142:	1a3f      	subs	r7, r7, r0
   b5144:	2f1f      	cmp	r7, #31
   b5146:	d818      	bhi.n	b517a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b5148:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b514c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b5150:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b5154:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b5158:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b515a:	4448      	add	r0, r9
   b515c:	1821      	adds	r1, r4, r0
   b515e:	b292      	uxth	r2, r2
   b5160:	18e0      	adds	r0, r4, r3
   b5162:	f001 feb3 	bl	b6ecc <memmove>
            selfData_[offset] = len + 1;
   b5166:	1c73      	adds	r3, r6, #1
   b5168:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b516c:	4632      	mov	r2, r6
   b516e:	4641      	mov	r1, r8
   b5170:	eb04 000a 	add.w	r0, r4, sl
   b5174:	f001 fe9c 	bl	b6eb0 <memcpy>
            selfLen_ = staLen + len + 2;
   b5178:	6227      	str	r7, [r4, #32]
}
   b517a:	6a20      	ldr	r0, [r4, #32]
   b517c:	b002      	add	sp, #8
   b517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b5182:	442b      	add	r3, r5
   b5184:	2b1f      	cmp	r3, #31
   b5186:	d8f8      	bhi.n	b517a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b5188:	1c73      	adds	r3, r6, #1
   b518a:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b518c:	1ca8      	adds	r0, r5, #2
   b518e:	4425      	add	r5, r4
   b5190:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b5192:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b5194:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b5198:	4641      	mov	r1, r8
   b519a:	4420      	add	r0, r4
   b519c:	f001 fe88 	bl	b6eb0 <memcpy>
        selfLen_ += len;
   b51a0:	6a23      	ldr	r3, [r4, #32]
   b51a2:	4433      	add	r3, r6
   b51a4:	6223      	str	r3, [r4, #32]
   b51a6:	e7e8      	b.n	b517a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b51a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b51a8:	4a02      	ldr	r2, [pc, #8]	; (b51b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b51aa:	2100      	movs	r1, #0
   b51ac:	200a      	movs	r0, #10
   b51ae:	f7ff bd93 	b.w	b4cd8 <panic_>
   b51b2:	bf00      	nop
   b51b4:	000b4a19 	.word	0x000b4a19

000b51b8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b51b8:	b430      	push	{r4, r5}
   b51ba:	460d      	mov	r5, r1
   b51bc:	4611      	mov	r1, r2
   b51be:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b51c0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b51c2:	6809      	ldr	r1, [r1, #0]
   b51c4:	6828      	ldr	r0, [r5, #0]
   b51c6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b51ca:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b51cc:	bc30      	pop	{r4, r5}
   b51ce:	4760      	bx	ip

000b51d0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b51d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b51d2:	b538      	push	{r3, r4, r5, lr}
   b51d4:	4604      	mov	r4, r0
	switch (__op)
   b51d6:	d102      	bne.n	b51de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b51d8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b51da:	6023      	str	r3, [r4, #0]
	}
   b51dc:	e003      	b.n	b51e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b51de:	2a02      	cmp	r2, #2
   b51e0:	d003      	beq.n	b51ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b51e2:	2a03      	cmp	r2, #3
   b51e4:	d00d      	beq.n	b5202 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b51e6:	2000      	movs	r0, #0
   b51e8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b51ea:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b51ec:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b51ee:	f7fe ff50 	bl	b4092 <_Znwj>
   b51f2:	4603      	mov	r3, r0
   b51f4:	2800      	cmp	r0, #0
   b51f6:	d0f0      	beq.n	b51da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b51f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b51fc:	e883 0003 	stmia.w	r3, {r0, r1}
   b5200:	e7eb      	b.n	b51da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5202:	6800      	ldr	r0, [r0, #0]
   b5204:	2800      	cmp	r0, #0
   b5206:	d0ee      	beq.n	b51e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5208:	2108      	movs	r1, #8
   b520a:	f001 fd1a 	bl	b6c42 <_ZdlPvj>
   b520e:	e7ea      	b.n	b51e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b5210:	b510      	push	{r4, lr}
   b5212:	3801      	subs	r0, #1
   b5214:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b5218:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b521c:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b521e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b5222:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b5224:	bf88      	it	hi
   b5226:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b522a:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b522e:	7803      	ldrb	r3, [r0, #0]
   b5230:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b5234:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b5238:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b523a:	bf88      	it	hi
   b523c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b5240:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b5242:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b5246:	d1e7      	bne.n	b5218 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b5248:	bd10      	pop	{r4, pc}

000b524a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b524a:	b510      	push	{r4, lr}
      if (_M_manager)
   b524c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b524e:	4604      	mov	r4, r0
      if (_M_manager)
   b5250:	b113      	cbz	r3, b5258 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5252:	2203      	movs	r2, #3
   b5254:	4601      	mov	r1, r0
   b5256:	4798      	blx	r3
    }
   b5258:	4620      	mov	r0, r4
   b525a:	bd10      	pop	{r4, pc}

000b525c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b525c:	b510      	push	{r4, lr}
   b525e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5260:	3058      	adds	r0, #88	; 0x58
   b5262:	f7ff fff2 	bl	b524a <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5266:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b526a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b526e:	f7ff be75 	b.w	b4f5c <_ZN6StringD1Ev>

000b5272 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5272:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5274:	6843      	ldr	r3, [r0, #4]
   b5276:	3b01      	subs	r3, #1
    {
   b5278:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b527a:	6043      	str	r3, [r0, #4]
   b527c:	b963      	cbnz	r3, b5298 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b527e:	6803      	ldr	r3, [r0, #0]
   b5280:	689b      	ldr	r3, [r3, #8]
   b5282:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5284:	68a3      	ldr	r3, [r4, #8]
   b5286:	3b01      	subs	r3, #1
   b5288:	60a3      	str	r3, [r4, #8]
   b528a:	b92b      	cbnz	r3, b5298 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b528c:	6823      	ldr	r3, [r4, #0]
   b528e:	4620      	mov	r0, r4
   b5290:	68db      	ldr	r3, [r3, #12]
    }
   b5292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5296:	4718      	bx	r3
    }
   b5298:	bd10      	pop	{r4, pc}

000b529a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b529a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b529e:	b2da      	uxtb	r2, r3
   b52a0:	2a09      	cmp	r2, #9
   b52a2:	d801      	bhi.n	b52a8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b52a4:	4618      	mov	r0, r3
   b52a6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b52a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b52ac:	2b05      	cmp	r3, #5
   b52ae:	d801      	bhi.n	b52b4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b52b0:	3857      	subs	r0, #87	; 0x57
   b52b2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b52b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b52b8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b52ba:	bf94      	ite	ls
   b52bc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b52be:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b52c2:	4770      	bx	lr

000b52c4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b52c4:	b510      	push	{r4, lr}
            locked_(false) {
   b52c6:	2300      	movs	r3, #0
   b52c8:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b52ca:	4b04      	ldr	r3, [pc, #16]	; (b52dc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b52cc:	4604      	mov	r4, r0
   b52ce:	6818      	ldr	r0, [r3, #0]
   b52d0:	f7ff fc22 	bl	b4b18 <os_mutex_recursive_lock>
        locked_ = true;
   b52d4:	2301      	movs	r3, #1
   b52d6:	7023      	strb	r3, [r4, #0]
    }
   b52d8:	4620      	mov	r0, r4
   b52da:	bd10      	pop	{r4, pc}
   b52dc:	2003e658 	.word	0x2003e658

000b52e0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b52e0:	b510      	push	{r4, lr}
        if (locked_) {
   b52e2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b52e4:	4604      	mov	r4, r0
        if (locked_) {
   b52e6:	b11b      	cbz	r3, b52f0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b52e8:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b52ea:	6818      	ldr	r0, [r3, #0]
   b52ec:	f7ff fc1c 	bl	b4b28 <os_mutex_recursive_unlock>
    }
   b52f0:	4620      	mov	r0, r4
   b52f2:	bd10      	pop	{r4, pc}
   b52f4:	2003e658 	.word	0x2003e658

000b52f8 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b52f8:	2905      	cmp	r1, #5
    return address_.addr[i];
   b52fa:	bf94      	ite	ls
   b52fc:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b52fe:	2000      	movhi	r0, #0
}
   b5300:	4770      	bx	lr

000b5302 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5302:	b082      	sub	sp, #8
   b5304:	4603      	mov	r3, r0
    address_ = addr;
   b5306:	6808      	ldr	r0, [r1, #0]
   b5308:	6849      	ldr	r1, [r1, #4]
   b530a:	466a      	mov	r2, sp
   b530c:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b530e:	466a      	mov	r2, sp
   b5310:	ca03      	ldmia	r2!, {r0, r1}
   b5312:	6018      	str	r0, [r3, #0]
}
   b5314:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5316:	6059      	str	r1, [r3, #4]
}
   b5318:	b002      	add	sp, #8
   b531a:	4770      	bx	lr

000b531c <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b531c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b531e:	7982      	ldrb	r2, [r0, #6]
   b5320:	798b      	ldrb	r3, [r1, #6]
   b5322:	429a      	cmp	r2, r3
   b5324:	d106      	bne.n	b5334 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5326:	2206      	movs	r2, #6
   b5328:	f001 fdb2 	bl	b6e90 <memcmp>
   b532c:	fab0 f080 	clz	r0, r0
   b5330:	0940      	lsrs	r0, r0, #5
}
   b5332:	bd08      	pop	{r3, pc}
    return false;
   b5334:	2000      	movs	r0, #0
   b5336:	e7fc      	b.n	b5332 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5338 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5338:	f04f 33ff 	mov.w	r3, #4294967295
   b533c:	6003      	str	r3, [r0, #0]
   b533e:	8083      	strh	r3, [r0, #4]
}
   b5340:	2000      	movs	r0, #0
   b5342:	4770      	bx	lr

000b5344 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5344:	b508      	push	{r3, lr}
   b5346:	4602      	mov	r2, r0
        : address_{} {
   b5348:	2100      	movs	r1, #0
   b534a:	6001      	str	r1, [r0, #0]
   b534c:	6041      	str	r1, [r0, #4]
    clear();
   b534e:	f7ff fff3 	bl	b5338 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5352:	7191      	strb	r1, [r2, #6]
}
   b5354:	4610      	mov	r0, r2
   b5356:	bd08      	pop	{r3, pc}

000b5358 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b5358:	b510      	push	{r4, lr}
   b535a:	1d43      	adds	r3, r0, #5
   b535c:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b535e:	781c      	ldrb	r4, [r3, #0]
   b5360:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b5364:	4283      	cmp	r3, r0
   b5366:	f103 33ff 	add.w	r3, r3, #4294967295
   b536a:	d1f8      	bne.n	b535e <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b536c:	bd10      	pop	{r4, pc}

000b536e <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b536e:	b570      	push	{r4, r5, r6, lr}
   b5370:	4614      	mov	r4, r2
   b5372:	b088      	sub	sp, #32
   b5374:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b5376:	460d      	mov	r5, r1
   b5378:	2900      	cmp	r1, #0
   b537a:	d048      	beq.n	b540e <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b537c:	b1a4      	cbz	r4, b53a8 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b537e:	a901      	add	r1, sp, #4
   b5380:	f7ff ffea 	bl	b5358 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b5384:	b19a      	cbz	r2, b53ae <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b5386:	aa03      	add	r2, sp, #12
   b5388:	2106      	movs	r1, #6
   b538a:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b538c:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b538e:	f7ff ff3f 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b5392:	2e11      	cmp	r6, #17
   b5394:	bf28      	it	cs
   b5396:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b5398:	4632      	mov	r2, r6
   b539a:	a903      	add	r1, sp, #12
   b539c:	4628      	mov	r0, r5
   b539e:	f001 fd87 	bl	b6eb0 <memcpy>
    buf[len++] = '\0';
   b53a2:	2300      	movs	r3, #0
   b53a4:	55ab      	strb	r3, [r5, r6]
   b53a6:	1c74      	adds	r4, r6, #1
}
   b53a8:	4620      	mov	r0, r4
   b53aa:	b008      	add	sp, #32
   b53ac:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b53ae:	aa03      	add	r2, sp, #12
   b53b0:	2101      	movs	r1, #1
   b53b2:	a801      	add	r0, sp, #4
   b53b4:	f7ff ff2c 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b53b8:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b53ba:	f10d 020f 	add.w	r2, sp, #15
   b53be:	2101      	movs	r1, #1
   b53c0:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b53c4:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b53c8:	f7ff ff22 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b53cc:	f10d 0212 	add.w	r2, sp, #18
   b53d0:	2101      	movs	r1, #1
   b53d2:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b53d6:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b53da:	f7ff ff19 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b53de:	f10d 0215 	add.w	r2, sp, #21
   b53e2:	2101      	movs	r1, #1
   b53e4:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b53e8:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b53ec:	f7ff ff10 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b53f0:	aa06      	add	r2, sp, #24
   b53f2:	2101      	movs	r1, #1
   b53f4:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b53f6:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b53fa:	f7ff ff09 	bl	b5210 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b53fe:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b5402:	f10d 021b 	add.w	r2, sp, #27
   b5406:	2101      	movs	r1, #1
   b5408:	f10d 0009 	add.w	r0, sp, #9
   b540c:	e7be      	b.n	b538c <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b540e:	460c      	mov	r4, r1
   b5410:	e7ca      	b.n	b53a8 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b5412 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b5412:	b510      	push	{r4, lr}
   b5414:	b086      	sub	sp, #24
   b5416:	4604      	mov	r4, r0
   b5418:	4613      	mov	r3, r2
   b541a:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b541c:	2212      	movs	r2, #18
   b541e:	a901      	add	r1, sp, #4
   b5420:	f7ff ffa5 	bl	b536e <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b5424:	a901      	add	r1, sp, #4
   b5426:	4620      	mov	r0, r4
   b5428:	f7ff fde3 	bl	b4ff2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b542c:	4620      	mov	r0, r4
   b542e:	b006      	add	sp, #24
   b5430:	bd10      	pop	{r4, pc}
	...

000b5434 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5434:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5436:	2301      	movs	r3, #1
   b5438:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b543a:	4b05      	ldr	r3, [pc, #20]	; (b5450 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b543c:	4602      	mov	r2, r0
   b543e:	f103 0110 	add.w	r1, r3, #16
   b5442:	f853 4b04 	ldr.w	r4, [r3], #4
   b5446:	f842 4b04 	str.w	r4, [r2], #4
   b544a:	428b      	cmp	r3, r1
   b544c:	d1f9      	bne.n	b5442 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b544e:	bd10      	pop	{r4, pc}
   b5450:	000b7276 	.word	0x000b7276

000b5454 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b5454:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b5456:	690b      	ldr	r3, [r1, #16]
   b5458:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b545a:	f101 0210 	add.w	r2, r1, #16
   b545e:	4603      	mov	r3, r0
   b5460:	f851 4b04 	ldr.w	r4, [r1], #4
   b5464:	f843 4b04 	str.w	r4, [r3], #4
   b5468:	4291      	cmp	r1, r2
   b546a:	d1f9      	bne.n	b5460 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b546c:	bd10      	pop	{r4, pc}

000b546e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b546e:	b510      	push	{r4, lr}
    if (uuid128) {
   b5470:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5472:	4604      	mov	r4, r0
    if (uuid128) {
   b5474:	b1b1      	cbz	r1, b54a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5476:	2a01      	cmp	r2, #1
   b5478:	f101 0210 	add.w	r2, r1, #16
   b547c:	d10a      	bne.n	b5494 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b547e:	4601      	mov	r1, r0
   b5480:	f853 0b04 	ldr.w	r0, [r3], #4
   b5484:	f841 0b04 	str.w	r0, [r1], #4
   b5488:	4293      	cmp	r3, r2
   b548a:	d1f9      	bne.n	b5480 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b548c:	2301      	movs	r3, #1
   b548e:	6123      	str	r3, [r4, #16]
}
   b5490:	4620      	mov	r0, r4
   b5492:	bd10      	pop	{r4, pc}
   b5494:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5496:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b549a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b549e:	429a      	cmp	r2, r3
   b54a0:	d1f9      	bne.n	b5496 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b54a2:	e7f3      	b.n	b548c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b54a4:	2210      	movs	r2, #16
   b54a6:	f001 fd2b 	bl	b6f00 <memset>
   b54aa:	e7f1      	b.n	b5490 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b54ac <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b54ac:	b538      	push	{r3, r4, r5, lr}
   b54ae:	4604      	mov	r4, r0
   b54b0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b54b2:	461a      	mov	r2, r3
   b54b4:	f7ff ffdb 	bl	b546e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b54b8:	81a5      	strh	r5, [r4, #12]
}
   b54ba:	4620      	mov	r0, r4
   b54bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b54c0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b54c0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b54c2:	6902      	ldr	r2, [r0, #16]
   b54c4:	b922      	cbnz	r2, b54d0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b54c6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b54c8:	3800      	subs	r0, #0
   b54ca:	bf18      	it	ne
   b54cc:	2001      	movne	r0, #1
}
   b54ce:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b54d0:	4902      	ldr	r1, [pc, #8]	; (b54dc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b54d2:	2210      	movs	r2, #16
   b54d4:	f001 fcdc 	bl	b6e90 <memcmp>
   b54d8:	e7f6      	b.n	b54c8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b54da:	bf00      	nop
   b54dc:	000b7296 	.word	0x000b7296

000b54e0 <_ZNK8particle7BleUuid4typeEv>:
}
   b54e0:	6900      	ldr	r0, [r0, #16]
   b54e2:	4770      	bx	lr

000b54e4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b54e4:	b538      	push	{r3, r4, r5, lr}
   b54e6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b54e8:	2214      	movs	r2, #20
   b54ea:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b54ec:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b54ee:	f001 fd07 	bl	b6f00 <memset>
    if (type_ == BleUuidType::SHORT) {
   b54f2:	6923      	ldr	r3, [r4, #16]
   b54f4:	b91b      	cbnz	r3, b54fe <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b54f6:	89a3      	ldrh	r3, [r4, #12]
   b54f8:	802b      	strh	r3, [r5, #0]
}
   b54fa:	4628      	mov	r0, r5
   b54fc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b54fe:	2301      	movs	r3, #1
   b5500:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5502:	4621      	mov	r1, r4
   b5504:	462b      	mov	r3, r5
   b5506:	f104 0210 	add.w	r2, r4, #16
   b550a:	f851 0b04 	ldr.w	r0, [r1], #4
   b550e:	f843 0b04 	str.w	r0, [r3], #4
   b5512:	4291      	cmp	r1, r2
   b5514:	d1f9      	bne.n	b550a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5516:	e7f0      	b.n	b54fa <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5518 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5518:	8980      	ldrh	r0, [r0, #12]
   b551a:	4770      	bx	lr

000b551c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b551c:	4770      	bx	lr

000b551e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b551e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5520:	6902      	ldr	r2, [r0, #16]
   b5522:	690b      	ldr	r3, [r1, #16]
   b5524:	429a      	cmp	r2, r3
   b5526:	d106      	bne.n	b5536 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5528:	2210      	movs	r2, #16
   b552a:	f001 fcb1 	bl	b6e90 <memcmp>
   b552e:	fab0 f080 	clz	r0, r0
   b5532:	0940      	lsrs	r0, r0, #5
}
   b5534:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5536:	2000      	movs	r0, #0
   b5538:	e7fc      	b.n	b5534 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b553c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b553c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b553e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5542:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5544:	4b34      	ldr	r3, [pc, #208]	; (b5618 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5546:	460c      	mov	r4, r1
   b5548:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b554a:	4602      	mov	r2, r0
   b554c:	f103 0110 	add.w	r1, r3, #16
   b5550:	f853 0b04 	ldr.w	r0, [r3], #4
   b5554:	f842 0b04 	str.w	r0, [r2], #4
   b5558:	428b      	cmp	r3, r1
   b555a:	d1f9      	bne.n	b5550 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b555c:	b344      	cbz	r4, b55b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b555e:	2124      	movs	r1, #36	; 0x24
   b5560:	4620      	mov	r0, r4
   b5562:	f001 fd15 	bl	b6f90 <strnlen>
   b5566:	2804      	cmp	r0, #4
   b5568:	f04f 0500 	mov.w	r5, #0
   b556c:	d123      	bne.n	b55b6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b556e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5572:	af01      	add	r7, sp, #4
   b5574:	1ca5      	adds	r5, r4, #2
   b5576:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5578:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b557c:	f7ff fe8d 	bl	b529a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5580:	f1b0 0800 	subs.w	r8, r0, #0
   b5584:	db12      	blt.n	b55ac <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5586:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b558a:	f7ff fe86 	bl	b529a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b558e:	2800      	cmp	r0, #0
   b5590:	db0c      	blt.n	b55ac <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5592:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5594:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5598:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b559a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b559e:	d1eb      	bne.n	b5578 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b55a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b55a4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b55a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b55aa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b55ac:	2300      	movs	r3, #0
   b55ae:	6133      	str	r3, [r6, #16]
}
   b55b0:	b002      	add	sp, #8
   b55b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b55b6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b55ba:	2124      	movs	r1, #36	; 0x24
   b55bc:	4620      	mov	r0, r4
   b55be:	f001 fce7 	bl	b6f90 <strnlen>
   b55c2:	42a8      	cmp	r0, r5
   b55c4:	d807      	bhi.n	b55d6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b55c6:	4642      	mov	r2, r8
   b55c8:	2100      	movs	r1, #0
   b55ca:	4630      	mov	r0, r6
}
   b55cc:	b002      	add	sp, #8
   b55ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b55d2:	f001 bc95 	b.w	b6f00 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b55d6:	f1b8 0f00 	cmp.w	r8, #0
   b55da:	d0e9      	beq.n	b55b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b55dc:	5d60      	ldrb	r0, [r4, r5]
   b55de:	f7ff fe5c 	bl	b529a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b55e2:	0603      	lsls	r3, r0, #24
   b55e4:	d415      	bmi.n	b5612 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b55e6:	0100      	lsls	r0, r0, #4
   b55e8:	f108 38ff 	add.w	r8, r8, #4294967295
   b55ec:	b2c7      	uxtb	r7, r0
   b55ee:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b55f2:	2124      	movs	r1, #36	; 0x24
   b55f4:	4620      	mov	r0, r4
   b55f6:	f001 fccb 	bl	b6f90 <strnlen>
   b55fa:	3501      	adds	r5, #1
   b55fc:	42a8      	cmp	r0, r5
   b55fe:	d908      	bls.n	b5612 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5600:	5d60      	ldrb	r0, [r4, r5]
   b5602:	f7ff fe4a 	bl	b529a <_ZN8particle11hexToNibbleEc>
   b5606:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5608:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b560a:	bfa4      	itt	ge
   b560c:	4338      	orrge	r0, r7
   b560e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5612:	3501      	adds	r5, #1
   b5614:	e7d1      	b.n	b55ba <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5616:	bf00      	nop
   b5618:	000b7276 	.word	0x000b7276

000b561c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b561c:	b513      	push	{r0, r1, r4, lr}
   b561e:	4604      	mov	r4, r0
   b5620:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5622:	f7ff ff07 	bl	b5434 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5626:	4620      	mov	r0, r4
   b5628:	9901      	ldr	r1, [sp, #4]
   b562a:	f7ff ff87 	bl	b553c <_ZN8particle7BleUuid9constructEPKc>
}
   b562e:	4620      	mov	r0, r4
   b5630:	b002      	add	sp, #8
   b5632:	bd10      	pop	{r4, pc}

000b5634 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5634:	b430      	push	{r4, r5}
   b5636:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b563a:	b11a      	cbz	r2, b5644 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b563c:	9502      	str	r5, [sp, #8]
}
   b563e:	bc30      	pop	{r4, r5}
   b5640:	f7ff bd6d 	b.w	b511e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b5644:	6a00      	ldr	r0, [r0, #32]
}
   b5646:	bc30      	pop	{r4, r5}
   b5648:	4770      	bx	lr

000b564a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b564a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b564c:	4604      	mov	r4, r0
          selfLen_(0) {
   b564e:	221f      	movs	r2, #31
   b5650:	2100      	movs	r1, #0
   b5652:	f001 fc55 	bl	b6f00 <memset>
   b5656:	2300      	movs	r3, #0
   b5658:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b565a:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b565c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b565e:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5660:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5664:	4619      	mov	r1, r3
   b5666:	f10d 020f 	add.w	r2, sp, #15
   b566a:	4620      	mov	r0, r4
   b566c:	f7ff ffe2 	bl	b5634 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5670:	4620      	mov	r0, r4
   b5672:	b004      	add	sp, #16
   b5674:	bd10      	pop	{r4, pc}

000b5676 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5676:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b5678:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b567a:	460e      	mov	r6, r1
   b567c:	ab01      	add	r3, sp, #4
   b567e:	6a01      	ldr	r1, [r0, #32]
   b5680:	4604      	mov	r4, r0
   b5682:	f7ff fd37 	bl	b50f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5686:	4605      	mov	r5, r0
   b5688:	b178      	cbz	r0, b56aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b568a:	9801      	ldr	r0, [sp, #4]
   b568c:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b568e:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b5690:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b5692:	4421      	add	r1, r4
   b5694:	1b52      	subs	r2, r2, r5
   b5696:	4420      	add	r0, r4
   b5698:	f001 fc0a 	bl	b6eb0 <memcpy>
        selfLen_ -= len;
   b569c:	6a20      	ldr	r0, [r4, #32]
   b569e:	1b40      	subs	r0, r0, r5
   b56a0:	6220      	str	r0, [r4, #32]
        remove(type);
   b56a2:	4631      	mov	r1, r6
   b56a4:	4620      	mov	r0, r4
   b56a6:	f7ff ffe6 	bl	b5676 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b56aa:	b002      	add	sp, #8
   b56ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000b56b0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b56b0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b56b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b56b6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b56b8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b56ba:	8043      	strh	r3, [r0, #2]
   b56bc:	220e      	movs	r2, #14
   b56be:	4629      	mov	r1, r5
   b56c0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b56c2:	7105      	strb	r5, [r0, #4]
   b56c4:	3006      	adds	r0, #6
   b56c6:	f001 fc1b 	bl	b6f00 <memset>
   b56ca:	f104 0014 	add.w	r0, r4, #20
   b56ce:	f7ff feb1 	bl	b5434 <_ZN8particle7BleUuidC1Ev>
   b56d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b56d6:	f7ff fead 	bl	b5434 <_ZN8particle7BleUuidC1Ev>
   b56da:	4904      	ldr	r1, [pc, #16]	; (b56ec <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b56dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b56e0:	f7ff fc87 	bl	b4ff2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b56e4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b56e6:	4620      	mov	r0, r4
   b56e8:	bd38      	pop	{r3, r4, r5, pc}
   b56ea:	bf00      	nop
   b56ec:	000b6fef 	.word	0x000b6fef

000b56f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b56f0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b56f2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b56f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b56fa:	4293      	cmp	r3, r2
   b56fc:	4618      	mov	r0, r3
   b56fe:	d006      	beq.n	b570e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5700:	6804      	ldr	r4, [r0, #0]
   b5702:	8824      	ldrh	r4, [r4, #0]
   b5704:	428c      	cmp	r4, r1
   b5706:	f103 0308 	add.w	r3, r3, #8
   b570a:	d1f6      	bne.n	b56fa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b570c:	bd10      	pop	{r4, pc}
        return nullptr;
   b570e:	2000      	movs	r0, #0
   b5710:	e7fc      	b.n	b570c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5714 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5718:	2600      	movs	r6, #0
   b571a:	6006      	str	r6, [r0, #0]
   b571c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b571e:	2028      	movs	r0, #40	; 0x28
   b5720:	460c      	mov	r4, r1
   b5722:	f7fe fcb6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5726:	1e05      	subs	r5, r0, #0
   b5728:	f105 080c 	add.w	r8, r5, #12
   b572c:	d00f      	beq.n	b574e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b572e:	2301      	movs	r3, #1
   b5730:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5734:	4b08      	ldr	r3, [pc, #32]	; (b5758 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5736:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5738:	4640      	mov	r0, r8
   b573a:	f7ff fe7b 	bl	b5434 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b573e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5740:	622e      	str	r6, [r5, #32]
   b5742:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5746:	4646      	mov	r6, r8
   b5748:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b574a:	6823      	ldr	r3, [r4, #0]
   b574c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b574e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5752:	4638      	mov	r0, r7
   b5754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5758:	000b7238 	.word	0x000b7238

000b575c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b575c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b575e:	2500      	movs	r5, #0
   b5760:	6005      	str	r5, [r0, #0]
   b5762:	4606      	mov	r6, r0
   b5764:	2030      	movs	r0, #48	; 0x30
   b5766:	f7fe fc94 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b576a:	4604      	mov	r4, r0
   b576c:	b188      	cbz	r0, b5792 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b576e:	2301      	movs	r3, #1
   b5770:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5774:	4b09      	ldr	r3, [pc, #36]	; (b579c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5776:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5778:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b577c:	8183      	strh	r3, [r0, #12]
   b577e:	300e      	adds	r0, #14
   b5780:	f7ff fde0 	bl	b5344 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5784:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5788:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b578c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5790:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5792:	6074      	str	r4, [r6, #4]
   b5794:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5796:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5798:	4630      	mov	r0, r6
   b579a:	bd70      	pop	{r4, r5, r6, pc}
   b579c:	000b7254 	.word	0x000b7254

000b57a0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b57a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b57a2:	460d      	mov	r5, r1
   b57a4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b57a6:	a801      	add	r0, sp, #4
   b57a8:	f7ff fd8c 	bl	b52c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b57ac:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b57ae:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b57b2:	6023      	str	r3, [r4, #0]
   b57b4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b57b8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b57ba:	a801      	add	r0, sp, #4
   b57bc:	f7ff fd90 	bl	b52e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b57c0:	4620      	mov	r0, r4
   b57c2:	b003      	add	sp, #12
   b57c4:	bd30      	pop	{r4, r5, pc}

000b57c6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b57c6:	b530      	push	{r4, r5, lr}
   b57c8:	4605      	mov	r5, r0
   b57ca:	b087      	sub	sp, #28
   b57cc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b57ce:	a801      	add	r0, sp, #4
   b57d0:	f7ff fd78 	bl	b52c4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b57d4:	682a      	ldr	r2, [r5, #0]
   b57d6:	6823      	ldr	r3, [r4, #0]
   b57d8:	8812      	ldrh	r2, [r2, #0]
   b57da:	881b      	ldrh	r3, [r3, #0]
   b57dc:	429a      	cmp	r2, r3
   b57de:	d10d      	bne.n	b57fc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b57e0:	4629      	mov	r1, r5
   b57e2:	a802      	add	r0, sp, #8
   b57e4:	f7ff ffdc 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b57e8:	4621      	mov	r1, r4
   b57ea:	a804      	add	r0, sp, #16
   b57ec:	f7ff ffd8 	bl	b57a0 <_ZNK8particle13BlePeerDevice7addressEv>
   b57f0:	a904      	add	r1, sp, #16
   b57f2:	a802      	add	r0, sp, #8
   b57f4:	f7ff fd92 	bl	b531c <_ZNK8particle10BleAddresseqERKS0_>
   b57f8:	4604      	mov	r4, r0
   b57fa:	b900      	cbnz	r0, b57fe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b57fc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b57fe:	a801      	add	r0, sp, #4
   b5800:	f7ff fd6e 	bl	b52e0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5804:	4620      	mov	r0, r4
   b5806:	b007      	add	sp, #28
   b5808:	bd30      	pop	{r4, r5, pc}
	...

000b580c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b580c:	b510      	push	{r4, lr}
   b580e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5810:	2054      	movs	r0, #84	; 0x54
   b5812:	f7fe fc3e 	bl	b4092 <_Znwj>
   b5816:	4601      	mov	r1, r0
   b5818:	b160      	cbz	r0, b5834 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b581a:	2300      	movs	r3, #0
   b581c:	e9c0 3300 	strd	r3, r3, [r0]
   b5820:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5824:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5828:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b582c:	6203      	str	r3, [r0, #32]
   b582e:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5830:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5832:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5834:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5836:	b919      	cbnz	r1, b5840 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b5838:	4a09      	ldr	r2, [pc, #36]	; (b5860 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b583a:	200a      	movs	r0, #10
   b583c:	f7ff fa4c 	bl	b4cd8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5840:	2000      	movs	r0, #0
   b5842:	f7ff f909 	bl	b4a58 <hal_ble_stack_init>
   b5846:	b120      	cbz	r0, b5852 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b5848:	4a05      	ldr	r2, [pc, #20]	; (b5860 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b584a:	2100      	movs	r1, #0
   b584c:	200a      	movs	r0, #10
   b584e:	f7ff fa43 	bl	b4cd8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5852:	6821      	ldr	r1, [r4, #0]
   b5854:	4803      	ldr	r0, [pc, #12]	; (b5864 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5856:	2200      	movs	r2, #0
   b5858:	f7ff f944 	bl	b4ae4 <hal_ble_set_callback_on_periph_link_events>
}
   b585c:	4620      	mov	r0, r4
   b585e:	bd10      	pop	{r4, pc}
   b5860:	000b4a19 	.word	0x000b4a19
   b5864:	000b5c19 	.word	0x000b5c19

000b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5868:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b586a:	4c0b      	ldr	r4, [pc, #44]	; (b5898 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b586c:	7823      	ldrb	r3, [r4, #0]
   b586e:	f3bf 8f5b 	dmb	ish
   b5872:	07db      	lsls	r3, r3, #31
   b5874:	d40e      	bmi.n	b5894 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b5876:	4620      	mov	r0, r4
   b5878:	f7fe fc11 	bl	b409e <__cxa_guard_acquire>
   b587c:	b150      	cbz	r0, b5894 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b587e:	4807      	ldr	r0, [pc, #28]	; (b589c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5880:	f7ff ffc4 	bl	b580c <_ZN8particle14BleLocalDeviceC1Ev>
   b5884:	4620      	mov	r0, r4
   b5886:	f7fe fc0f 	bl	b40a8 <__cxa_guard_release>
   b588a:	4a05      	ldr	r2, [pc, #20]	; (b58a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b588c:	4905      	ldr	r1, [pc, #20]	; (b58a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b588e:	4803      	ldr	r0, [pc, #12]	; (b589c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5890:	f001 f9d2 	bl	b6c38 <__aeabi_atexit>
    return instance;
}
   b5894:	4801      	ldr	r0, [pc, #4]	; (b589c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5896:	bd10      	pop	{r4, pc}
   b5898:	2003e650 	.word	0x2003e650
   b589c:	2003e65c 	.word	0x2003e65c
   b58a0:	2003e59c 	.word	0x2003e59c
   b58a4:	000b5a85 	.word	0x000b5a85

000b58a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b58a8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b58aa:	6803      	ldr	r3, [r0, #0]
   b58ac:	3b09      	subs	r3, #9
   b58ae:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b58b0:	b08d      	sub	sp, #52	; 0x34
   b58b2:	4604      	mov	r4, r0
   b58b4:	460d      	mov	r5, r1
    switch (event->type) {
   b58b6:	d811      	bhi.n	b58dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b58b8:	f7ff ffd6 	bl	b5868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58bc:	88a1      	ldrh	r1, [r4, #4]
   b58be:	6800      	ldr	r0, [r0, #0]
   b58c0:	f7ff ff16 	bl	b56f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b58c4:	4603      	mov	r3, r0
   b58c6:	b958      	cbnz	r0, b58e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b58c8:	2220      	movs	r2, #32
   b58ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b58ce:	4a0b      	ldr	r2, [pc, #44]	; (b58fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b58d0:	9200      	str	r2, [sp, #0]
   b58d2:	490b      	ldr	r1, [pc, #44]	; (b5900 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b58d4:	aa04      	add	r2, sp, #16
   b58d6:	2032      	movs	r0, #50	; 0x32
   b58d8:	f7ff fa06 	bl	b4ce8 <log_message>
}
   b58dc:	b00d      	add	sp, #52	; 0x34
   b58de:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b58e0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b58e2:	2a00      	cmp	r2, #0
   b58e4:	d0fa      	beq.n	b58dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b58e6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b58ea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b58ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b58f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b58f4:	aa04      	add	r2, sp, #16
   b58f6:	a903      	add	r1, sp, #12
   b58f8:	47a0      	blx	r4
}
   b58fa:	e7ef      	b.n	b58dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b58fc:	000b7147 	.word	0x000b7147
   b5900:	000b7120 	.word	0x000b7120

000b5904 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5904:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5906:	2000      	movs	r0, #0
   b5908:	f7ff f8a6 	bl	b4a58 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b590c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5910:	bd08      	pop	{r3, pc}

000b5912 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   b5912:	b513      	push	{r0, r1, r4, lr}
   b5914:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   b5916:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b5918:	4668      	mov	r0, sp
    hal_ble_addr_t halAddr = {};
   b591a:	e9cd 1100 	strd	r1, r1, [sp]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   b591e:	f7ff f8a3 	bl	b4a68 <hal_ble_gap_get_device_address>
    address_ = addr;
   b5922:	466b      	mov	r3, sp
   b5924:	cb03      	ldmia	r3!, {r0, r1}
   b5926:	6020      	str	r0, [r4, #0]
    return BleAddress(halAddr);
}
   b5928:	4620      	mov	r0, r4
    address_ = addr;
   b592a:	6061      	str	r1, [r4, #4]
}
   b592c:	b002      	add	sp, #8
   b592e:	bd10      	pop	{r4, pc}

000b5930 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5930:	4608      	mov	r0, r1
   b5932:	b911      	cbnz	r1, b593a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5934:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5936:	f7ff b89f 	b.w	b4a78 <hal_ble_gap_set_advertising_data>
   b593a:	6a09      	ldr	r1, [r1, #32]
   b593c:	2200      	movs	r2, #0
   b593e:	e7fa      	b.n	b5936 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5940 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5940:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b5942:	4608      	mov	r0, r1
   b5944:	b929      	cbnz	r1, b5952 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5946:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b5948:	b003      	add	sp, #12
   b594a:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b594e:	f7ff b89b 	b.w	b4a88 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5952:	2101      	movs	r1, #1
   b5954:	9001      	str	r0, [sp, #4]
   b5956:	f7ff fe8e 	bl	b5676 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b595a:	9801      	ldr	r0, [sp, #4]
   b595c:	2200      	movs	r2, #0
   b595e:	6a01      	ldr	r1, [r0, #32]
   b5960:	e7f2      	b.n	b5948 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b5962 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5962:	b538      	push	{r3, r4, r5, lr}
   b5964:	4604      	mov	r4, r0
   b5966:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5968:	f7ff ffe2 	bl	b5930 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b596c:	2800      	cmp	r0, #0
   b596e:	db0a      	blt.n	b5986 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5970:	4629      	mov	r1, r5
   b5972:	4620      	mov	r0, r4
   b5974:	f7ff ffe4 	bl	b5940 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5978:	2800      	cmp	r0, #0
   b597a:	db04      	blt.n	b5986 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5980:	2000      	movs	r0, #0
   b5982:	f7ff b889 	b.w	b4a98 <hal_ble_gap_start_advertising>
}
   b5986:	bd38      	pop	{r3, r4, r5, pc}

000b5988 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5988:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b598a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b598c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b598e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5990:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5992:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5994:	f7fe fb7d 	bl	b4092 <_Znwj>
   b5998:	b118      	cbz	r0, b59a2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b599a:	682b      	ldr	r3, [r5, #0]
   b599c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b599e:	686b      	ldr	r3, [r5, #4]
   b59a0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b59a2:	4b03      	ldr	r3, [pc, #12]	; (b59b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b59a4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b59a6:	4b03      	ldr	r3, [pc, #12]	; (b59b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59a8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b59aa:	60a3      	str	r3, [r4, #8]
      }
   b59ac:	4620      	mov	r0, r4
   b59ae:	bd38      	pop	{r3, r4, r5, pc}
   b59b0:	000b51b9 	.word	0x000b51b9
   b59b4:	000b51d1 	.word	0x000b51d1

000b59b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b59b8:	680b      	ldr	r3, [r1, #0]
   b59ba:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b59bc:	b113      	cbz	r3, b59c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b59be:	685a      	ldr	r2, [r3, #4]
   b59c0:	3201      	adds	r2, #1
   b59c2:	605a      	str	r2, [r3, #4]
      }
   b59c4:	4770      	bx	lr

000b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b59c6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b59c8:	f851 3b04 	ldr.w	r3, [r1], #4
   b59cc:	4604      	mov	r4, r0
   b59ce:	f840 3b04 	str.w	r3, [r0], #4
   b59d2:	f7ff fff1 	bl	b59b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b59d6:	6823      	ldr	r3, [r4, #0]
   b59d8:	b90b      	cbnz	r3, b59de <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b59da:	f7ff fbe5 	bl	b51a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b59de:	4620      	mov	r0, r4
   b59e0:	bd10      	pop	{r4, pc}

000b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b59e2:	b510      	push	{r4, lr}
   b59e4:	f851 3b04 	ldr.w	r3, [r1], #4
   b59e8:	4604      	mov	r4, r0
   b59ea:	f840 3b04 	str.w	r3, [r0], #4
   b59ee:	f7ff ffe3 	bl	b59b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b59f2:	4620      	mov	r0, r4
   b59f4:	bd10      	pop	{r4, pc}

000b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b59f6:	b510      	push	{r4, lr}
   b59f8:	f851 3b04 	ldr.w	r3, [r1], #4
   b59fc:	4604      	mov	r4, r0
   b59fe:	f840 3b04 	str.w	r3, [r0], #4
   b5a02:	f7ff ffd9 	bl	b59b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5a06:	4620      	mov	r0, r4
   b5a08:	bd10      	pop	{r4, pc}

000b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5a0a:	b510      	push	{r4, lr}
   b5a0c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5a0e:	6800      	ldr	r0, [r0, #0]
   b5a10:	b108      	cbz	r0, b5a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5a12:	f7ff fc2e 	bl	b5272 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5a16:	4620      	mov	r0, r4
   b5a18:	bd10      	pop	{r4, pc}

000b5a1a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5a1a:	b510      	push	{r4, lr}
   b5a1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5a1e:	3004      	adds	r0, #4
   b5a20:	f7ff fff3 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a24:	4620      	mov	r0, r4
   b5a26:	bd10      	pop	{r4, pc}

000b5a28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5a2a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a2e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5a30:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5a34:	42ae      	cmp	r6, r5
   b5a36:	d004      	beq.n	b5a42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5a38:	1d28      	adds	r0, r5, #4
   b5a3a:	f7ff ffe6 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a3e:	3508      	adds	r5, #8
   b5a40:	e7f8      	b.n	b5a34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5a42:	6820      	ldr	r0, [r4, #0]
   b5a44:	f7ff f9f4 	bl	b4e30 <free>
}
   b5a48:	4620      	mov	r0, r4
   b5a4a:	bd70      	pop	{r4, r5, r6, pc}

000b5a4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5a4e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5a52:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5a54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5a58:	42ae      	cmp	r6, r5
   b5a5a:	d004      	beq.n	b5a66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5a5c:	1d28      	adds	r0, r5, #4
   b5a5e:	f7ff ffd4 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a62:	3508      	adds	r5, #8
   b5a64:	e7f8      	b.n	b5a58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5a66:	6820      	ldr	r0, [r4, #0]
   b5a68:	f7ff f9e2 	bl	b4e30 <free>
}
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	bd70      	pop	{r4, r5, r6, pc}

000b5a70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5a70:	b510      	push	{r4, lr}
   b5a72:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5a74:	3024      	adds	r0, #36	; 0x24
   b5a76:	f7ff ffe9 	bl	b5a4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5a7a:	f104 0018 	add.w	r0, r4, #24
   b5a7e:	f7ff ffd3 	bl	b5a28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5a82:	bd10      	pop	{r4, pc}

000b5a84 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b5a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b5a86:	6804      	ldr	r4, [r0, #0]
   b5a88:	4606      	mov	r6, r0
   b5a8a:	b324      	cbz	r4, b5ad6 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b5a8c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5a90:	f7ff fbdb 	bl	b524a <_ZNSt14_Function_baseD1Ev>
   b5a94:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5a98:	f7ff fbd7 	bl	b524a <_ZNSt14_Function_baseD1Ev>
   b5a9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5aa0:	f7ff fbd3 	bl	b524a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5aa4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5aa8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5aac:	42af      	cmp	r7, r5
   b5aae:	d004      	beq.n	b5aba <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b5ab0:	1d28      	adds	r0, r5, #4
   b5ab2:	f7ff ffaa 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ab6:	3508      	adds	r5, #8
   b5ab8:	e7f8      	b.n	b5aac <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b5aba:	69a0      	ldr	r0, [r4, #24]
   b5abc:	f7ff f9b8 	bl	b4e30 <free>
    ~BleLocalDeviceImpl() = default;
   b5ac0:	f104 000c 	add.w	r0, r4, #12
   b5ac4:	f7ff ffc2 	bl	b5a4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5ac8:	4620      	mov	r0, r4
   b5aca:	f7ff ffad 	bl	b5a28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5ace:	2154      	movs	r1, #84	; 0x54
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	f001 f8b6 	bl	b6c42 <_ZdlPvj>
   b5ad6:	4630      	mov	r0, r6
   b5ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ada <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5ada:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5adc:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5ade:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5ae2:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5ae6:	6803      	ldr	r3, [r0, #0]
   b5ae8:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5aea:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5aec:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5aee:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5af0:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5af2:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5af4:	f7ff ff89 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5af8:	b002      	add	sp, #8
   b5afa:	bd10      	pop	{r4, pc}

000b5afc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5afc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5afe:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b00:	b90a      	cbnz	r2, b5b06 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5b02:	f001 f8a2 	bl	b6c4a <_ZSt25__throw_bad_function_callv>
    }
   b5b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b0a:	68c3      	ldr	r3, [r0, #12]
   b5b0c:	4718      	bx	r3

000b5b0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5b0e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b12:	4604      	mov	r4, r0
   b5b14:	460d      	mov	r5, r1
   b5b16:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b18:	d914      	bls.n	b5b44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5b1a:	4290      	cmp	r0, r2
   b5b1c:	d213      	bcs.n	b5b46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5b1e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5b22:	1a75      	subs	r5, r6, r1
   b5b24:	f1a1 0708 	sub.w	r7, r1, #8
   b5b28:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b2a:	42b7      	cmp	r7, r6
   b5b2c:	d018      	beq.n	b5b60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5b2e:	b11c      	cbz	r4, b5b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5b30:	4631      	mov	r1, r6
   b5b32:	4620      	mov	r0, r4
   b5b34:	f7ff ff5f 	bl	b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5b38:	1d30      	adds	r0, r6, #4
   b5b3a:	f7ff ff66 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5b3e:	3e08      	subs	r6, #8
   b5b40:	3c08      	subs	r4, #8
   b5b42:	e7f2      	b.n	b5b2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5b44:	d00c      	beq.n	b5b60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5b46:	42b5      	cmp	r5, r6
   b5b48:	d00a      	beq.n	b5b60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5b4a:	b11c      	cbz	r4, b5b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5b4c:	4629      	mov	r1, r5
   b5b4e:	4620      	mov	r0, r4
   b5b50:	f7ff ff51 	bl	b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5b54:	1d28      	adds	r0, r5, #4
   b5b56:	f7ff ff58 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b5a:	3508      	adds	r5, #8
   b5b5c:	3408      	adds	r4, #8
   b5b5e:	e7f2      	b.n	b5b46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5b64:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5b66:	6846      	ldr	r6, [r0, #4]
   b5b68:	4668      	mov	r0, sp
   b5b6a:	f7ff ff44 	bl	b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b6e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5b72:	429f      	cmp	r7, r3
   b5b74:	db12      	blt.n	b5b9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5b76:	3701      	adds	r7, #1
        if (n > 0) {
   b5b78:	2f00      	cmp	r7, #0
   b5b7a:	dd29      	ble.n	b5bd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5b7c:	00f8      	lsls	r0, r7, #3
   b5b7e:	f7ff f94f 	bl	b4e20 <malloc>
            if (!d) {
   b5b82:	4605      	mov	r5, r0
   b5b84:	b1f0      	cbz	r0, b5bc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5b86:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5b8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5b8e:	f7ff ffbe 	bl	b5b0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5b92:	6820      	ldr	r0, [r4, #0]
   b5b94:	f7ff f94c 	bl	b4e30 <free>
        data_ = d;
   b5b98:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5b9a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5b9c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5b9e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5ba0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5ba4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5ba8:	4631      	mov	r1, r6
   b5baa:	f106 0008 	add.w	r0, r6, #8
   b5bae:	f7ff ffae 	bl	b5b0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5bb2:	b11e      	cbz	r6, b5bbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5bb4:	4669      	mov	r1, sp
   b5bb6:	4630      	mov	r0, r6
   b5bb8:	f7ff ff1d 	bl	b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5bbc:	6863      	ldr	r3, [r4, #4]
   b5bbe:	3301      	adds	r3, #1
   b5bc0:	6063      	str	r3, [r4, #4]
    return true;
   b5bc2:	2501      	movs	r5, #1
   b5bc4:	a801      	add	r0, sp, #4
   b5bc6:	f7ff ff20 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5bca:	4628      	mov	r0, r5
   b5bcc:	b003      	add	sp, #12
   b5bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5bd0:	2500      	movs	r5, #0
   b5bd2:	e7de      	b.n	b5b92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5bd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5bd6:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bda:	4605      	mov	r5, r0
   b5bdc:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5bde:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5be2:	42a6      	cmp	r6, r4
   b5be4:	d005      	beq.n	b5bf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5be6:	4639      	mov	r1, r7
   b5be8:	4620      	mov	r0, r4
   b5bea:	f7ff fdec 	bl	b57c6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5bee:	b108      	cbz	r0, b5bf4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5bf0:	b914      	cbnz	r4, b5bf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5bf4:	3408      	adds	r4, #8
   b5bf6:	e7f4      	b.n	b5be2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5bf8:	1d20      	adds	r0, r4, #4
   b5bfa:	f7ff ff06 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5bfe:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5c02:	f104 0108 	add.w	r1, r4, #8
   b5c06:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	f7ff ff7f 	bl	b5b0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5c10:	686b      	ldr	r3, [r5, #4]
   b5c12:	3b01      	subs	r3, #1
   b5c14:	606b      	str	r3, [r5, #4]
    return true;
   b5c16:	e7ec      	b.n	b5bf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b5c18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c1c:	4605      	mov	r5, r0
   b5c1e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5c20:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5c22:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5c24:	f7ff fb4e 	bl	b52c4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5c28:	682e      	ldr	r6, [r5, #0]
   b5c2a:	2e04      	cmp	r6, #4
   b5c2c:	d06d      	beq.n	b5d0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b5c2e:	d807      	bhi.n	b5c40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b5c30:	2e03      	cmp	r6, #3
   b5c32:	d02a      	beq.n	b5c8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b5c34:	a803      	add	r0, sp, #12
   b5c36:	f7ff fb53 	bl	b52e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5c3a:	b00e      	add	sp, #56	; 0x38
   b5c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b5c40:	f1a6 030c 	sub.w	r3, r6, #12
   b5c44:	2b04      	cmp	r3, #4
   b5c46:	d8f5      	bhi.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5c48:	89a9      	ldrh	r1, [r5, #12]
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	f7ff fd50 	bl	b56f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5c50:	4607      	mov	r7, r0
   b5c52:	2800      	cmp	r0, #0
   b5c54:	d0ee      	beq.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b5c56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5c58:	2b00      	cmp	r3, #0
   b5c5a:	d0eb      	beq.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b5c5c:	2210      	movs	r2, #16
   b5c5e:	2100      	movs	r1, #0
   b5c60:	a807      	add	r0, sp, #28
   b5c62:	f001 f94d 	bl	b6f00 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5c66:	2e0d      	cmp	r6, #13
                        };
   b5c68:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b5c6a:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5c6e:	d002      	beq.n	b5c76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b5c70:	2e10      	cmp	r6, #16
   b5c72:	f040 8092 	bne.w	b5d9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b5c76:	686b      	ldr	r3, [r5, #4]
   b5c78:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5c7a:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b5c7c:	9308      	str	r3, [sp, #32]
   b5c7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5c80:	a906      	add	r1, sp, #24
   b5c82:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5c86:	4798      	blx	r3
   b5c88:	e7d4      	b.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b5c8a:	a804      	add	r0, sp, #16
   b5c8c:	f7ff fd66 	bl	b575c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5c90:	9b04      	ldr	r3, [sp, #16]
   b5c92:	89aa      	ldrh	r2, [r5, #12]
   b5c94:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5c96:	6869      	ldr	r1, [r5, #4]
   b5c98:	9804      	ldr	r0, [sp, #16]
   b5c9a:	3108      	adds	r1, #8
   b5c9c:	3002      	adds	r0, #2
   b5c9e:	f7ff fb30 	bl	b5302 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5ca2:	a904      	add	r1, sp, #16
   b5ca4:	a806      	add	r0, sp, #24
   b5ca6:	f7ff fea6 	bl	b59f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5caa:	a906      	add	r1, sp, #24
   b5cac:	f104 0018 	add.w	r0, r4, #24
   b5cb0:	f7ff ff57 	bl	b5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5cb4:	4605      	mov	r5, r0
   b5cb6:	a807      	add	r0, sp, #28
   b5cb8:	f7ff fea7 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5cbc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5cbe:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5cc0:	b98d      	cbnz	r5, b5ce6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5cc2:	4b3e      	ldr	r3, [pc, #248]	; (b5dbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b5cc4:	493e      	ldr	r1, [pc, #248]	; (b5dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b5cc6:	9300      	str	r3, [sp, #0]
   b5cc8:	2032      	movs	r0, #50	; 0x32
   b5cca:	462b      	mov	r3, r5
   b5ccc:	aa06      	add	r2, sp, #24
   b5cce:	9507      	str	r5, [sp, #28]
   b5cd0:	f7ff f80a 	bl	b4ce8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5cd4:	9b04      	ldr	r3, [sp, #16]
   b5cd6:	4629      	mov	r1, r5
   b5cd8:	8818      	ldrh	r0, [r3, #0]
   b5cda:	f7fe fee5 	bl	b4aa8 <hal_ble_gap_disconnect>
   b5cde:	a805      	add	r0, sp, #20
   b5ce0:	f7ff fe93 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ce4:	e7a6      	b.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b5ce6:	4a37      	ldr	r2, [pc, #220]	; (b5dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b5ce8:	9200      	str	r2, [sp, #0]
   b5cea:	2300      	movs	r3, #0
   b5cec:	4934      	ldr	r1, [pc, #208]	; (b5dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b5cee:	9307      	str	r3, [sp, #28]
   b5cf0:	aa06      	add	r2, sp, #24
   b5cf2:	2001      	movs	r0, #1
   b5cf4:	f7fe fff8 	bl	b4ce8 <log_message>
                if (impl->connectedCallback_) {
   b5cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5cfa:	2b00      	cmp	r3, #0
   b5cfc:	d0ef      	beq.n	b5cde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b5cfe:	a904      	add	r1, sp, #16
   b5d00:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5d04:	f7ff fefa 	bl	b5afc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5d08:	e7e9      	b.n	b5cde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5d0a:	89a9      	ldrh	r1, [r5, #12]
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7ff fcef 	bl	b56f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5d12:	4606      	mov	r6, r0
   b5d14:	2800      	cmp	r0, #0
   b5d16:	d08d      	beq.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b5d18:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5d1a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5d22:	8029      	strh	r1, [r5, #0]
   b5d24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5d28:	429a      	cmp	r2, r3
   b5d2a:	d003      	beq.n	b5d34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b5d2c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5d30:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5d32:	e7f9      	b.n	b5d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b5d34:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5d38:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5d3c:	45b8      	cmp	r8, r7
   b5d3e:	d004      	beq.n	b5d4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b5d40:	1d38      	adds	r0, r7, #4
   b5d42:	f7ff fe62 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d46:	3708      	adds	r7, #8
   b5d48:	e7f8      	b.n	b5d3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5d4e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5d52:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5d56:	45b8      	cmp	r8, r7
   b5d58:	d004      	beq.n	b5d64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b5d5a:	1d38      	adds	r0, r7, #4
   b5d5c:	f7ff fe55 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d60:	3708      	adds	r7, #8
   b5d62:	e7f8      	b.n	b5d56 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b5d64:	2300      	movs	r3, #0
   b5d66:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5d68:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b5d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5d6c:	b123      	cbz	r3, b5d78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b5d6e:	4631      	mov	r1, r6
   b5d70:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5d74:	f7ff fec2 	bl	b5afc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b5d78:	2300      	movs	r3, #0
   b5d7a:	2220      	movs	r2, #32
   b5d7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5d80:	4a11      	ldr	r2, [pc, #68]	; (b5dc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b5d82:	9200      	str	r2, [sp, #0]
   b5d84:	490e      	ldr	r1, [pc, #56]	; (b5dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b5d86:	aa06      	add	r2, sp, #24
   b5d88:	2001      	movs	r0, #1
   b5d8a:	f7fe ffad 	bl	b4ce8 <log_message>
                    impl->peers_.removeOne(*peer);
   b5d8e:	4631      	mov	r1, r6
   b5d90:	f104 0018 	add.w	r0, r4, #24
   b5d94:	f7ff ff1e 	bl	b5bd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b5d98:	e74c      	b.n	b5c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5d9a:	2e0f      	cmp	r6, #15
   b5d9c:	f47f af6f 	bne.w	b5c7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b5da0:	686b      	ldr	r3, [r5, #4]
   b5da2:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b5da4:	7a2b      	ldrb	r3, [r5, #8]
   b5da6:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b5daa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b5dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b5db2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b5db6:	2308      	movs	r3, #8
   b5db8:	e760      	b.n	b5c7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b5dba:	bf00      	nop
   b5dbc:	000b715f 	.word	0x000b715f
   b5dc0:	000b7120 	.word	0x000b7120
   b5dc4:	000b7185 	.word	0x000b7185
   b5dc8:	000b71a2 	.word	0x000b71a2

000b5dcc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5dcc:	b513      	push	{r0, r1, r4, lr}
   b5dce:	460b      	mov	r3, r1
   b5dd0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5dd6:	466c      	mov	r4, sp
   b5dd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5ddc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5de0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5de4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5de8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5dec:	b002      	add	sp, #8
   b5dee:	bd10      	pop	{r4, pc}

000b5df0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5df0:	b538      	push	{r3, r4, r5, lr}
   b5df2:	4605      	mov	r5, r0
   b5df4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5df6:	f7ff ffe9 	bl	b5dcc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dfa:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5dfc:	68a2      	ldr	r2, [r4, #8]
   b5dfe:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e00:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e02:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5e04:	68e2      	ldr	r2, [r4, #12]
   b5e06:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e08:	60e3      	str	r3, [r4, #12]
      }
   b5e0a:	bd38      	pop	{r3, r4, r5, pc}

000b5e0c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5e0c:	b570      	push	{r4, r5, r6, lr}
   b5e0e:	460e      	mov	r6, r1
   b5e10:	b08c      	sub	sp, #48	; 0x30
   b5e12:	4604      	mov	r4, r0
   b5e14:	9201      	str	r2, [sp, #4]
   b5e16:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5e18:	f7ff fc4a 	bl	b56b0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5e1c:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b5e1e:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b5e20:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b5e22:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5e26:	f7ff f8f8 	bl	b501a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5e2a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5e2e:	b1cd      	cbz	r5, b5e64 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b5e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5e32:	9502      	str	r5, [sp, #8]
   b5e34:	a902      	add	r1, sp, #8
   b5e36:	a804      	add	r0, sp, #16
   b5e38:	9303      	str	r3, [sp, #12]
   b5e3a:	f7ff fda5 	bl	b5988 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5e3e:	2300      	movs	r3, #0
	__x.swap(*this);
   b5e40:	a908      	add	r1, sp, #32
   b5e42:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b5e44:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b5e46:	f7ff ffd3 	bl	b5df0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5e4a:	4631      	mov	r1, r6
   b5e4c:	a808      	add	r0, sp, #32
   b5e4e:	f7ff ffcf 	bl	b5df0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5e52:	a808      	add	r0, sp, #32
   b5e54:	f7ff f9f9 	bl	b524a <_ZNSt14_Function_baseD1Ev>
   b5e58:	a804      	add	r0, sp, #16
   b5e5a:	f7ff f9f6 	bl	b524a <_ZNSt14_Function_baseD1Ev>
    }
   b5e5e:	4620      	mov	r0, r4
   b5e60:	b00c      	add	sp, #48	; 0x30
   b5e62:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b5e64:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5e66:	e7ea      	b.n	b5e3e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b5e68 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e6c:	b089      	sub	sp, #36	; 0x24
   b5e6e:	461d      	mov	r5, r3
   b5e70:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b5e74:	4680      	mov	r8, r0
   b5e76:	468a      	mov	sl, r1
   b5e78:	4693      	mov	fp, r2
   b5e7a:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5e7c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5e7e:	2200      	movs	r2, #0
   b5e80:	2068      	movs	r0, #104	; 0x68
   b5e82:	9102      	str	r1, [sp, #8]
   b5e84:	9206      	str	r2, [sp, #24]
   b5e86:	f7fe f904 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5e8a:	1e06      	subs	r6, r0, #0
   b5e8c:	f106 090c 	add.w	r9, r6, #12
   b5e90:	d01c      	beq.n	b5ecc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b5e92:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5e94:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5e96:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b5e9a:	4a17      	ldr	r2, [pc, #92]	; (b5ef8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b5e9c:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5ea0:	9902      	ldr	r1, [sp, #8]
   b5ea2:	f89b 2000 	ldrb.w	r2, [fp]
   b5ea6:	9b03      	ldr	r3, [sp, #12]
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b5ea8:	f88d 2014 	strb.w	r2, [sp, #20]
   b5eac:	9100      	str	r1, [sp, #0]
   b5eae:	4652      	mov	r2, sl
   b5eb0:	a905      	add	r1, sp, #20
   b5eb2:	4648      	mov	r0, r9
   b5eb4:	f7ff ffaa 	bl	b5e0c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b5eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5eba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5ebc:	682b      	ldr	r3, [r5, #0]
   b5ebe:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5ec2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b5ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5ec8:	6823      	ldr	r3, [r4, #0]
   b5eca:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5ecc:	a906      	add	r1, sp, #24
   b5ece:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5ed0:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b5ed4:	f7ff fe01 	bl	b5ada <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b5ed8:	a807      	add	r0, sp, #28
   b5eda:	f7ff fd96 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5ede:	f8d8 1000 	ldr.w	r1, [r8]
   b5ee2:	b931      	cbnz	r1, b5ef2 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b5ee4:	4a05      	ldr	r2, [pc, #20]	; (b5efc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b5ee6:	200a      	movs	r0, #10
}
   b5ee8:	b009      	add	sp, #36	; 0x24
   b5eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5eee:	f7fe bef3 	b.w	b4cd8 <panic_>
}
   b5ef2:	b009      	add	sp, #36	; 0x24
   b5ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ef8:	000b721c 	.word	0x000b721c
   b5efc:	000b4a19 	.word	0x000b4a19

000b5f00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5f00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f04:	4604      	mov	r4, r0
   b5f06:	460d      	mov	r5, r1
   b5f08:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f0a:	d914      	bls.n	b5f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5f0c:	4290      	cmp	r0, r2
   b5f0e:	d213      	bcs.n	b5f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5f10:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5f14:	1a75      	subs	r5, r6, r1
   b5f16:	f1a1 0708 	sub.w	r7, r1, #8
   b5f1a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f1c:	42b7      	cmp	r7, r6
   b5f1e:	d018      	beq.n	b5f52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5f20:	b11c      	cbz	r4, b5f2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5f22:	4631      	mov	r1, r6
   b5f24:	4620      	mov	r0, r4
   b5f26:	f7ff fd5c 	bl	b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5f2a:	1d30      	adds	r0, r6, #4
   b5f2c:	f7ff fd6d 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5f30:	3e08      	subs	r6, #8
   b5f32:	3c08      	subs	r4, #8
   b5f34:	e7f2      	b.n	b5f1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5f36:	d00c      	beq.n	b5f52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5f38:	42b5      	cmp	r5, r6
   b5f3a:	d00a      	beq.n	b5f52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5f3c:	b11c      	cbz	r4, b5f46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5f3e:	4629      	mov	r1, r5
   b5f40:	4620      	mov	r0, r4
   b5f42:	f7ff fd4e 	bl	b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5f46:	1d28      	adds	r0, r5, #4
   b5f48:	f7ff fd5f 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5f4c:	3508      	adds	r5, #8
   b5f4e:	3408      	adds	r4, #8
   b5f50:	e7f2      	b.n	b5f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5f54:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5f56:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5f58:	4605      	mov	r5, r0
        if (n > 0) {
   b5f5a:	dd11      	ble.n	b5f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5f5c:	00f0      	lsls	r0, r6, #3
   b5f5e:	f7fe ff5f 	bl	b4e20 <malloc>
            if (!d) {
   b5f62:	4604      	mov	r4, r0
   b5f64:	b158      	cbz	r0, b5f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5f66:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5f6a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5f6e:	f7ff ffc7 	bl	b5f00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5f72:	6828      	ldr	r0, [r5, #0]
   b5f74:	f7fe ff5c 	bl	b4e30 <free>
        data_ = d;
   b5f78:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5f7a:	60ae      	str	r6, [r5, #8]
        return true;
   b5f7c:	2001      	movs	r0, #1
    }
   b5f7e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5f80:	2400      	movs	r4, #0
   b5f82:	e7f6      	b.n	b5f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5f84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f86:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5f88:	6845      	ldr	r5, [r0, #4]
   b5f8a:	4668      	mov	r0, sp
   b5f8c:	f7ff fd29 	bl	b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f90:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5f94:	4299      	cmp	r1, r3
   b5f96:	da10      	bge.n	b5fba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5f98:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5f9a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5f9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5fa0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5fa4:	4629      	mov	r1, r5
   b5fa6:	f105 0008 	add.w	r0, r5, #8
   b5faa:	f7ff ffa9 	bl	b5f00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5fae:	b98d      	cbnz	r5, b5fd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5fb0:	6863      	ldr	r3, [r4, #4]
   b5fb2:	3301      	adds	r3, #1
   b5fb4:	6063      	str	r3, [r4, #4]
    return true;
   b5fb6:	2601      	movs	r6, #1
   b5fb8:	e006      	b.n	b5fc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5fba:	3101      	adds	r1, #1
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	f7ff ffc9 	bl	b5f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5fc2:	4606      	mov	r6, r0
   b5fc4:	2800      	cmp	r0, #0
   b5fc6:	d1e7      	bne.n	b5f98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5fc8:	a801      	add	r0, sp, #4
   b5fca:	f7ff fd1e 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5fce:	4630      	mov	r0, r6
   b5fd0:	b002      	add	sp, #8
   b5fd2:	bd70      	pop	{r4, r5, r6, pc}
   b5fd4:	4669      	mov	r1, sp
   b5fd6:	4628      	mov	r0, r5
   b5fd8:	f7ff fd03 	bl	b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5fdc:	e7e8      	b.n	b5fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5fde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5fde:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fe2:	4604      	mov	r4, r0
   b5fe4:	460d      	mov	r5, r1
   b5fe6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5fe8:	d914      	bls.n	b6014 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5fea:	4290      	cmp	r0, r2
   b5fec:	d213      	bcs.n	b6016 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5fee:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5ff2:	1a75      	subs	r5, r6, r1
   b5ff4:	f1a1 0708 	sub.w	r7, r1, #8
   b5ff8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ffa:	42b7      	cmp	r7, r6
   b5ffc:	d018      	beq.n	b6030 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5ffe:	b11c      	cbz	r4, b6008 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6000:	4631      	mov	r1, r6
   b6002:	4620      	mov	r0, r4
   b6004:	f7ff fcdf 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6008:	1d30      	adds	r0, r6, #4
   b600a:	f7ff fcfe 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b600e:	3e08      	subs	r6, #8
   b6010:	3c08      	subs	r4, #8
   b6012:	e7f2      	b.n	b5ffa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6014:	d00c      	beq.n	b6030 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6016:	42b5      	cmp	r5, r6
   b6018:	d00a      	beq.n	b6030 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b601a:	b11c      	cbz	r4, b6024 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b601c:	4629      	mov	r1, r5
   b601e:	4620      	mov	r0, r4
   b6020:	f7ff fcd1 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6024:	1d28      	adds	r0, r5, #4
   b6026:	f7ff fcf0 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b602a:	3508      	adds	r5, #8
   b602c:	3408      	adds	r4, #8
   b602e:	e7f2      	b.n	b6016 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6032 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6032:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6034:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6036:	4605      	mov	r5, r0
        if (n > 0) {
   b6038:	dd11      	ble.n	b605e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b603a:	00f0      	lsls	r0, r6, #3
   b603c:	f7fe fef0 	bl	b4e20 <malloc>
            if (!d) {
   b6040:	4604      	mov	r4, r0
   b6042:	b158      	cbz	r0, b605c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6044:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6048:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b604c:	f7ff ffc7 	bl	b5fde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6050:	6828      	ldr	r0, [r5, #0]
   b6052:	f7fe feed 	bl	b4e30 <free>
        data_ = d;
   b6056:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6058:	60ae      	str	r6, [r5, #8]
        return true;
   b605a:	2001      	movs	r0, #1
    }
   b605c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b605e:	2400      	movs	r4, #0
   b6060:	e7f6      	b.n	b6050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6062 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6062:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6064:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6066:	6845      	ldr	r5, [r0, #4]
   b6068:	4668      	mov	r0, sp
   b606a:	f7ff fcac 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b606e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6072:	4299      	cmp	r1, r3
   b6074:	da10      	bge.n	b6098 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6076:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6078:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b607a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b607e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6082:	4629      	mov	r1, r5
   b6084:	f105 0008 	add.w	r0, r5, #8
   b6088:	f7ff ffa9 	bl	b5fde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b608c:	b98d      	cbnz	r5, b60b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b608e:	6863      	ldr	r3, [r4, #4]
   b6090:	3301      	adds	r3, #1
   b6092:	6063      	str	r3, [r4, #4]
    return true;
   b6094:	2601      	movs	r6, #1
   b6096:	e006      	b.n	b60a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6098:	3101      	adds	r1, #1
   b609a:	4620      	mov	r0, r4
   b609c:	f7ff ffc9 	bl	b6032 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b60a0:	4606      	mov	r6, r0
   b60a2:	2800      	cmp	r0, #0
   b60a4:	d1e7      	bne.n	b6076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b60a6:	a801      	add	r0, sp, #4
   b60a8:	f7ff fcaf 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b60ac:	4630      	mov	r0, r6
   b60ae:	b002      	add	sp, #8
   b60b0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b60b2:	4669      	mov	r1, sp
   b60b4:	4628      	mov	r0, r5
   b60b6:	f7ff fc86 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b60ba:	e7e8      	b.n	b608e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b60bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b60bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60c0:	4617      	mov	r7, r2
   b60c2:	b0a1      	sub	sp, #132	; 0x84
   b60c4:	4680      	mov	r8, r0
    WiringBleLock lk;
   b60c6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b60c8:	460e      	mov	r6, r1
    WiringBleLock lk;
   b60ca:	f7ff f8fb 	bl	b52c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b60ce:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b60d0:	7923      	ldrb	r3, [r4, #4]
   b60d2:	b953      	cbnz	r3, b60ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b60d4:	4639      	mov	r1, r7
   b60d6:	4640      	mov	r0, r8
   b60d8:	f7ff fc75 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b60dc:	a80a      	add	r0, sp, #40	; 0x28
   b60de:	f7ff f8ff 	bl	b52e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b60e2:	4640      	mov	r0, r8
   b60e4:	b021      	add	sp, #132	; 0x84
   b60e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b60ea:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b60ec:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b60f0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b60f4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b60f6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b60fa:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b60fe:	9b03      	ldr	r3, [sp, #12]
   b6100:	429d      	cmp	r5, r3
   b6102:	d021      	beq.n	b6148 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6104:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6108:	4658      	mov	r0, fp
   b610a:	f109 0114 	add.w	r1, r9, #20
   b610e:	f7ff fa06 	bl	b551e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b6112:	b1b8      	cbz	r0, b6144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b6114:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6118:	4650      	mov	r0, sl
   b611a:	f7ff fa00 	bl	b551e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b611e:	b188      	cbz	r0, b6144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6120:	6823      	ldr	r3, [r4, #0]
   b6122:	f8d9 2000 	ldr.w	r2, [r9]
   b6126:	4053      	eors	r3, r2
   b6128:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b612c:	d10a      	bne.n	b6144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b612e:	2220      	movs	r2, #32
   b6130:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6134:	4a5e      	ldr	r2, [pc, #376]	; (b62b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b6136:	9200      	str	r2, [sp, #0]
   b6138:	aa15      	add	r2, sp, #84	; 0x54
   b613a:	495e      	ldr	r1, [pc, #376]	; (b62b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b613c:	2032      	movs	r0, #50	; 0x32
   b613e:	f7fe fdd3 	bl	b4ce8 <log_message>
   b6142:	e7c7      	b.n	b60d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b6144:	3508      	adds	r5, #8
   b6146:	e7da      	b.n	b60fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6148:	4650      	mov	r0, sl
   b614a:	f7ff f9b9 	bl	b54c0 <_ZNK8particle7BleUuid7isValidEv>
   b614e:	b960      	cbnz	r0, b616a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b6150:	4959      	ldr	r1, [pc, #356]	; (b62b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b6152:	2201      	movs	r2, #1
   b6154:	a815      	add	r0, sp, #84	; 0x54
   b6156:	ad15      	add	r5, sp, #84	; 0x54
   b6158:	f7ff f989 	bl	b546e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b615c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b615e:	46d4      	mov	ip, sl
   b6160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6164:	682b      	ldr	r3, [r5, #0]
   b6166:	f8cc 3000 	str.w	r3, [ip]
   b616a:	6833      	ldr	r3, [r6, #0]
   b616c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6170:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b6174:	455d      	cmp	r5, fp
   b6176:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6178:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b617a:	d06e      	beq.n	b625a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b617c:	f855 0b08 	ldr.w	r0, [r5], #8
   b6180:	f7ff f9cd 	bl	b551e <_ZNK8particle7BleUuideqERKS0_>
   b6184:	2800      	cmp	r0, #0
   b6186:	d0f5      	beq.n	b6174 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6188:	f104 0a14 	add.w	sl, r4, #20
   b618c:	4650      	mov	r0, sl
   b618e:	f7ff f997 	bl	b54c0 <_ZNK8particle7BleUuid7isValidEv>
   b6192:	b988      	cbnz	r0, b61b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6194:	4b49      	ldr	r3, [pc, #292]	; (b62bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6196:	4948      	ldr	r1, [pc, #288]	; (b62b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6198:	881a      	ldrh	r2, [r3, #0]
   b619a:	3201      	adds	r2, #1
   b619c:	b292      	uxth	r2, r2
   b619e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b61a0:	a815      	add	r0, sp, #84	; 0x54
   b61a2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b61a4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b61a6:	f7ff f981 	bl	b54ac <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b61aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61ac:	46d4      	mov	ip, sl
   b61ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b61b2:	682b      	ldr	r3, [r5, #0]
   b61b4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b61b8:	4b41      	ldr	r3, [pc, #260]	; (b62c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b61ba:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b61bc:	2228      	movs	r2, #40	; 0x28
   b61be:	2100      	movs	r1, #0
   b61c0:	a816      	add	r0, sp, #88	; 0x58
   b61c2:	f000 fe9d 	bl	b6f00 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b61c6:	4651      	mov	r1, sl
   b61c8:	a804      	add	r0, sp, #16
   b61ca:	f7ff f98b 	bl	b54e4 <_ZN8particle7BleUuid7halUUIDEv>
   b61ce:	ab04      	add	r3, sp, #16
   b61d0:	aa18      	add	r2, sp, #96	; 0x60
   b61d2:	f10d 0c20 	add.w	ip, sp, #32
   b61d6:	6818      	ldr	r0, [r3, #0]
   b61d8:	6859      	ldr	r1, [r3, #4]
   b61da:	4615      	mov	r5, r2
   b61dc:	c503      	stmia	r5!, {r0, r1}
   b61de:	3308      	adds	r3, #8
   b61e0:	4563      	cmp	r3, ip
   b61e2:	462a      	mov	r2, r5
   b61e4:	d1f7      	bne.n	b61d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b61e6:	6818      	ldr	r0, [r3, #0]
   b61e8:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b61ea:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b61ec:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b61f0:	f8d9 3000 	ldr.w	r3, [r9]
   b61f4:	8a9b      	ldrh	r3, [r3, #20]
   b61f6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b61fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b61fc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b61fe:	4b31      	ldr	r3, [pc, #196]	; (b62c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6200:	2200      	movs	r2, #0
   b6202:	1da1      	adds	r1, r4, #6
   b6204:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6206:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b620a:	f7fe fc61 	bl	b4ad0 <hal_ble_gatt_server_add_characteristic>
   b620e:	2800      	cmp	r0, #0
   b6210:	f47f af60 	bne.w	b60d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6214:	2301      	movs	r3, #1
   b6216:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6218:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b621a:	4639      	mov	r1, r7
        return characteristics_;
   b621c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b621e:	a80d      	add	r0, sp, #52	; 0x34
   b6220:	f7ff fbd1 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6224:	4620      	mov	r0, r4
   b6226:	a90d      	add	r1, sp, #52	; 0x34
   b6228:	f7ff ff1b 	bl	b6062 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b622c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b622e:	a80e      	add	r0, sp, #56	; 0x38
   b6230:	f7ff fbeb 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6234:	2c00      	cmp	r4, #0
   b6236:	f47f af4d 	bne.w	b60d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b623a:	2320      	movs	r3, #32
   b623c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6240:	4b21      	ldr	r3, [pc, #132]	; (b62c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6242:	9300      	str	r3, [sp, #0]
   b6244:	aa0d      	add	r2, sp, #52	; 0x34
   b6246:	4623      	mov	r3, r4
   b6248:	e777      	b.n	b613a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b624a:	4639      	mov	r1, r7
   b624c:	4640      	mov	r0, r8
   b624e:	f7ff fbba 	bl	b59c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6252:	a80c      	add	r0, sp, #48	; 0x30
   b6254:	f7ff fbd9 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6258:	e740      	b.n	b60dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b625a:	a80b      	add	r0, sp, #44	; 0x2c
   b625c:	f7ff fa5a 	bl	b5714 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6260:	4651      	mov	r1, sl
   b6262:	a815      	add	r0, sp, #84	; 0x54
   b6264:	f7ff f93e 	bl	b54e4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b626a:	2300      	movs	r3, #0
   b626c:	3214      	adds	r2, #20
   b626e:	a915      	add	r1, sp, #84	; 0x54
   b6270:	2001      	movs	r0, #1
   b6272:	f7fe fc23 	bl	b4abc <hal_ble_gatt_server_add_service>
   b6276:	2800      	cmp	r0, #0
   b6278:	d1e7      	bne.n	b624a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b627a:	6835      	ldr	r5, [r6, #0]
   b627c:	a90b      	add	r1, sp, #44	; 0x2c
   b627e:	a80d      	add	r0, sp, #52	; 0x34
   b6280:	f7ff fbaf 	bl	b59e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6284:	4628      	mov	r0, r5
   b6286:	a90d      	add	r1, sp, #52	; 0x34
   b6288:	f7ff fe7c 	bl	b5f84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b628c:	4605      	mov	r5, r0
   b628e:	a80e      	add	r0, sp, #56	; 0x38
   b6290:	f7ff fbbb 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6294:	2d00      	cmp	r5, #0
   b6296:	d0d8      	beq.n	b624a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6298:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b629a:	6853      	ldr	r3, [r2, #4]
   b629c:	6812      	ldr	r2, [r2, #0]
   b629e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b62a2:	3b01      	subs	r3, #1
   b62a4:	a80c      	add	r0, sp, #48	; 0x30
   b62a6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b62aa:	f7ff fbae 	bl	b5a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b62ae:	e76b      	b.n	b6188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b62b0:	000b71c1 	.word	0x000b71c1
   b62b4:	000b7120 	.word	0x000b7120
   b62b8:	000b7286 	.word	0x000b7286
   b62bc:	2003e654 	.word	0x2003e654
   b62c0:	002c0003 	.word	0x002c0003
   b62c4:	000b58a9 	.word	0x000b58a9
   b62c8:	000b71ec 	.word	0x000b71ec

000b62cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b62cc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b62ce:	4c06      	ldr	r4, [pc, #24]	; (b62e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b62d0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b62d2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b62d4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b62d6:	f7fe fc0f 	bl	b4af8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b62da:	4620      	mov	r0, r4
   b62dc:	4a03      	ldr	r2, [pc, #12]	; (b62ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b62de:	4904      	ldr	r1, [pc, #16]	; (b62f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b62e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b62e4:	f000 bca8 	b.w	b6c38 <__aeabi_atexit>
   b62e8:	2003e658 	.word	0x2003e658
   b62ec:	2003e59c 	.word	0x2003e59c
   b62f0:	000b50e5 	.word	0x000b50e5

000b62f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b62f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62f6:	4606      	mov	r6, r0
   b62f8:	460d      	mov	r5, r1
  size_t n = 0;
   b62fa:	188f      	adds	r7, r1, r2
   b62fc:	2400      	movs	r4, #0
  while (size--) {
   b62fe:	42bd      	cmp	r5, r7
   b6300:	d00c      	beq.n	b631c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6302:	6833      	ldr	r3, [r6, #0]
   b6304:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6308:	689b      	ldr	r3, [r3, #8]
   b630a:	4630      	mov	r0, r6
   b630c:	4798      	blx	r3
     if (chunk>=0)
   b630e:	1e03      	subs	r3, r0, #0
   b6310:	db01      	blt.n	b6316 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6312:	441c      	add	r4, r3
  while (size--) {
   b6314:	e7f3      	b.n	b62fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6316:	2c00      	cmp	r4, #0
   b6318:	bf08      	it	eq
   b631a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b631c:	4620      	mov	r0, r4
   b631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6320 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6320:	b513      	push	{r0, r1, r4, lr}
   b6322:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6324:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6326:	b159      	cbz	r1, b6340 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6328:	9101      	str	r1, [sp, #4]
   b632a:	f000 fe29 	bl	b6f80 <strlen>
   b632e:	6823      	ldr	r3, [r4, #0]
   b6330:	9901      	ldr	r1, [sp, #4]
   b6332:	68db      	ldr	r3, [r3, #12]
   b6334:	4602      	mov	r2, r0
   b6336:	4620      	mov	r0, r4
    }
   b6338:	b002      	add	sp, #8
   b633a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b633e:	4718      	bx	r3
    }
   b6340:	b002      	add	sp, #8
   b6342:	bd10      	pop	{r4, pc}

000b6344 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6344:	6803      	ldr	r3, [r0, #0]
   b6346:	689b      	ldr	r3, [r3, #8]
   b6348:	4718      	bx	r3

000b634a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b634a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b634c:	210d      	movs	r1, #13
{
   b634e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6350:	f7ff fff8 	bl	b6344 <_ZN5Print5printEc>
  n += print('\n');
   b6354:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6356:	4604      	mov	r4, r0
  n += print('\n');
   b6358:	4628      	mov	r0, r5
   b635a:	f7ff fff3 	bl	b6344 <_ZN5Print5printEc>
  return n;
}
   b635e:	4420      	add	r0, r4
   b6360:	bd38      	pop	{r3, r4, r5, pc}

000b6362 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6362:	b530      	push	{r4, r5, lr}
   b6364:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6366:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6368:	2a01      	cmp	r2, #1
  *str = '\0';
   b636a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b636e:	bf98      	it	ls
   b6370:	220a      	movls	r2, #10
   b6372:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6374:	460d      	mov	r5, r1
   b6376:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b637a:	fb01 5312 	mls	r3, r1, r2, r5
   b637e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6382:	2b09      	cmp	r3, #9
   b6384:	bf94      	ite	ls
   b6386:	3330      	addls	r3, #48	; 0x30
   b6388:	3337      	addhi	r3, #55	; 0x37
   b638a:	b2db      	uxtb	r3, r3
  } while(n);
   b638c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b638e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6392:	d9ef      	bls.n	b6374 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6394:	4621      	mov	r1, r4
   b6396:	f7ff ffc3 	bl	b6320 <_ZN5Print5writeEPKc>
}
   b639a:	b00b      	add	sp, #44	; 0x2c
   b639c:	bd30      	pop	{r4, r5, pc}

000b639e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63a2:	b086      	sub	sp, #24
   b63a4:	af00      	add	r7, sp, #0
   b63a6:	4605      	mov	r5, r0
   b63a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b63aa:	1d38      	adds	r0, r7, #4
   b63ac:	2114      	movs	r1, #20
{
   b63ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b63b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b63b2:	f7fe fd4d 	bl	b4e50 <vsnprintf>

    if (n<bufsize)
   b63b6:	2813      	cmp	r0, #19
   b63b8:	d80e      	bhi.n	b63d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b63ba:	1d39      	adds	r1, r7, #4
   b63bc:	4628      	mov	r0, r5
   b63be:	f7ff ffaf 	bl	b6320 <_ZN5Print5writeEPKc>
   b63c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b63c4:	b11e      	cbz	r6, b63ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b63c6:	4628      	mov	r0, r5
   b63c8:	f7ff ffbf 	bl	b634a <_ZN5Print7printlnEv>
   b63cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b63ce:	4620      	mov	r0, r4
   b63d0:	3718      	adds	r7, #24
   b63d2:	46bd      	mov	sp, r7
   b63d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b63d8:	f100 0308 	add.w	r3, r0, #8
   b63dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b63e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b63e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b63e6:	4622      	mov	r2, r4
   b63e8:	1c41      	adds	r1, r0, #1
   b63ea:	683b      	ldr	r3, [r7, #0]
   b63ec:	4668      	mov	r0, sp
   b63ee:	f7fe fd2f 	bl	b4e50 <vsnprintf>
  return write(str);
   b63f2:	4669      	mov	r1, sp
   b63f4:	4628      	mov	r0, r5
   b63f6:	f7ff ff93 	bl	b6320 <_ZN5Print5writeEPKc>
   b63fa:	4604      	mov	r4, r0
   b63fc:	46c5      	mov	sp, r8
   b63fe:	e7e1      	b.n	b63c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6400 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b6400:	2300      	movs	r3, #0
   b6402:	6840      	ldr	r0, [r0, #4]
   b6404:	461a      	mov	r2, r3
   b6406:	4619      	mov	r1, r3
   b6408:	f7fe bcba 	b.w	b4d80 <network_on>

000b640c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b640c:	4b01      	ldr	r3, [pc, #4]	; (b6414 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b640e:	4a02      	ldr	r2, [pc, #8]	; (b6418 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6410:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6412:	4770      	bx	lr
   b6414:	2003e660 	.word	0x2003e660
   b6418:	000b72a6 	.word	0x000b72a6

000b641c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b641c:	4b02      	ldr	r3, [pc, #8]	; (b6428 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b641e:	681a      	ldr	r2, [r3, #0]
   b6420:	4b02      	ldr	r3, [pc, #8]	; (b642c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6422:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6424:	4770      	bx	lr
   b6426:	bf00      	nop
   b6428:	2003e534 	.word	0x2003e534
   b642c:	2003e664 	.word	0x2003e664

000b6430 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6430:	2100      	movs	r1, #0
   b6432:	f7fe bc69 	b.w	b4d08 <system_delay_ms>

000b6436 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b6436:	b510      	push	{r4, lr}
   b6438:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b643a:	f7fe ff06 	bl	b524a <_ZNSt14_Function_baseD1Ev>
   b643e:	4620      	mov	r0, r4
   b6440:	bd10      	pop	{r4, pc}
	...

000b6444 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6444:	4803      	ldr	r0, [pc, #12]	; (b6454 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b6446:	4a04      	ldr	r2, [pc, #16]	; (b6458 <_GLOBAL__sub_I_RGB+0x14>)
   b6448:	4904      	ldr	r1, [pc, #16]	; (b645c <_GLOBAL__sub_I_RGB+0x18>)
   b644a:	2300      	movs	r3, #0
   b644c:	6083      	str	r3, [r0, #8]
   b644e:	f000 bbf3 	b.w	b6c38 <__aeabi_atexit>
   b6452:	bf00      	nop
   b6454:	2003e668 	.word	0x2003e668
   b6458:	2003e59c 	.word	0x2003e59c
   b645c:	000b6437 	.word	0x000b6437

000b6460 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6460:	4b01      	ldr	r3, [pc, #4]	; (b6468 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6462:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6464:	4770      	bx	lr
   b6466:	bf00      	nop
   b6468:	2003e538 	.word	0x2003e538

000b646c <serialEventRun>:
{
   b646c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b646e:	4b0b      	ldr	r3, [pc, #44]	; (b649c <serialEventRun+0x30>)
   b6470:	b143      	cbz	r3, b6484 <serialEventRun+0x18>
   b6472:	f000 f96b 	bl	b674c <_Z16_fetch_usbserialv>
   b6476:	6803      	ldr	r3, [r0, #0]
   b6478:	691b      	ldr	r3, [r3, #16]
   b647a:	4798      	blx	r3
   b647c:	2800      	cmp	r0, #0
   b647e:	dd01      	ble.n	b6484 <serialEventRun+0x18>
        serialEvent();
   b6480:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6484:	4b06      	ldr	r3, [pc, #24]	; (b64a0 <serialEventRun+0x34>)
   b6486:	b143      	cbz	r3, b649a <serialEventRun+0x2e>
   b6488:	f000 f9de 	bl	b6848 <_Z22__fetch_global_Serial1v>
   b648c:	6803      	ldr	r3, [r0, #0]
   b648e:	691b      	ldr	r3, [r3, #16]
   b6490:	4798      	blx	r3
   b6492:	2800      	cmp	r0, #0
   b6494:	dd01      	ble.n	b649a <serialEventRun+0x2e>
        serialEvent1();
   b6496:	f3af 8000 	nop.w
}
   b649a:	bd08      	pop	{r3, pc}
	...

000b64a4 <_post_loop>:
{
   b64a4:	b508      	push	{r3, lr}
	serialEventRun();
   b64a6:	f7ff ffe1 	bl	b646c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b64aa:	f7fe fac5 	bl	b4a38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b64ae:	4b01      	ldr	r3, [pc, #4]	; (b64b4 <_post_loop+0x10>)
   b64b0:	6018      	str	r0, [r3, #0]
}
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	2003e7d4 	.word	0x2003e7d4

000b64b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b64b8:	4805      	ldr	r0, [pc, #20]	; (b64d0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b64ba:	4a06      	ldr	r2, [pc, #24]	; (b64d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b64bc:	4906      	ldr	r1, [pc, #24]	; (b64d8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b64be:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b64c0:	1a12      	subs	r2, r2, r0
   b64c2:	f000 fcf5 	bl	b6eb0 <memcpy>
    __backup_sram_signature = signature;
   b64c6:	4b05      	ldr	r3, [pc, #20]	; (b64dc <_Z33system_initialize_user_backup_ramv+0x24>)
   b64c8:	4a05      	ldr	r2, [pc, #20]	; (b64e0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b64ca:	601a      	str	r2, [r3, #0]
}
   b64cc:	bd08      	pop	{r3, pc}
   b64ce:	bf00      	nop
   b64d0:	2003f400 	.word	0x2003f400
   b64d4:	2003f404 	.word	0x2003f404
   b64d8:	000b7590 	.word	0x000b7590
   b64dc:	2003f400 	.word	0x2003f400
   b64e0:	9a271c1e 	.word	0x9a271c1e

000b64e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b64e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b64e6:	2300      	movs	r3, #0
   b64e8:	9300      	str	r3, [sp, #0]
   b64ea:	461a      	mov	r2, r3
   b64ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b64f0:	f7fe fc1c 	bl	b4d2c <system_ctrl_set_result>
}
   b64f4:	b003      	add	sp, #12
   b64f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b64fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b64fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b64fe:	8843      	ldrh	r3, [r0, #2]
   b6500:	2b0a      	cmp	r3, #10
   b6502:	d008      	beq.n	b6516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6504:	2b50      	cmp	r3, #80	; 0x50
   b6506:	d10b      	bne.n	b6520 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6508:	4b09      	ldr	r3, [pc, #36]	; (b6530 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b650a:	681b      	ldr	r3, [r3, #0]
   b650c:	b14b      	cbz	r3, b6522 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b650e:	b003      	add	sp, #12
   b6510:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6514:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6516:	f7ff ffe5 	bl	b64e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b651a:	b003      	add	sp, #12
   b651c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6520:	2300      	movs	r3, #0
   b6522:	9300      	str	r3, [sp, #0]
   b6524:	461a      	mov	r2, r3
   b6526:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b652a:	f7fe fbff 	bl	b4d2c <system_ctrl_set_result>
}
   b652e:	e7f4      	b.n	b651a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6530:	2003e67c 	.word	0x2003e67c

000b6534 <module_user_init_hook>:
{
   b6534:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6536:	4812      	ldr	r0, [pc, #72]	; (b6580 <module_user_init_hook+0x4c>)
   b6538:	2100      	movs	r1, #0
   b653a:	f7fe fca1 	bl	b4e80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b653e:	4b11      	ldr	r3, [pc, #68]	; (b6584 <module_user_init_hook+0x50>)
   b6540:	681a      	ldr	r2, [r3, #0]
   b6542:	4b11      	ldr	r3, [pc, #68]	; (b6588 <module_user_init_hook+0x54>)
   b6544:	429a      	cmp	r2, r3
   b6546:	4b11      	ldr	r3, [pc, #68]	; (b658c <module_user_init_hook+0x58>)
   b6548:	bf0c      	ite	eq
   b654a:	2201      	moveq	r2, #1
   b654c:	2200      	movne	r2, #0
   b654e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6550:	d001      	beq.n	b6556 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6552:	f7ff ffb1 	bl	b64b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6556:	f7fe fa57 	bl	b4a08 <HAL_RNG_GetRandomNumber>
   b655a:	4604      	mov	r4, r0
    srand(seed);
   b655c:	f000 fcd8 	bl	b6f10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6560:	4b0b      	ldr	r3, [pc, #44]	; (b6590 <module_user_init_hook+0x5c>)
   b6562:	b113      	cbz	r3, b656a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6564:	4620      	mov	r0, r4
   b6566:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b656a:	2100      	movs	r1, #0
   b656c:	4808      	ldr	r0, [pc, #32]	; (b6590 <module_user_init_hook+0x5c>)
   b656e:	f7fe fc4f 	bl	b4e10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6576:	4807      	ldr	r0, [pc, #28]	; (b6594 <module_user_init_hook+0x60>)
   b6578:	2100      	movs	r1, #0
   b657a:	f7fe bbcd 	b.w	b4d18 <system_ctrl_set_app_request_handler>
   b657e:	bf00      	nop
   b6580:	000b6461 	.word	0x000b6461
   b6584:	2003f400 	.word	0x2003f400
   b6588:	9a271c1e 	.word	0x9a271c1e
   b658c:	2003e678 	.word	0x2003e678
   b6590:	00000000 	.word	0x00000000
   b6594:	000b64fd 	.word	0x000b64fd

000b6598 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6598:	4770      	bx	lr

000b659a <_ZN9IPAddressD0Ev>:
   b659a:	b510      	push	{r4, lr}
   b659c:	2118      	movs	r1, #24
   b659e:	4604      	mov	r4, r0
   b65a0:	f000 fb4f 	bl	b6c42 <_ZdlPvj>
   b65a4:	4620      	mov	r0, r4
   b65a6:	bd10      	pop	{r4, pc}

000b65a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b65a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b65aa:	7d03      	ldrb	r3, [r0, #20]
   b65ac:	2b06      	cmp	r3, #6
{
   b65ae:	b08d      	sub	sp, #52	; 0x34
   b65b0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65b2:	f100 0704 	add.w	r7, r0, #4
   b65b6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b65ba:	d012      	beq.n	b65e2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b65bc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b65c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b65c4:	220a      	movs	r2, #10
   b65c6:	4630      	mov	r0, r6
   b65c8:	f7ff fecb 	bl	b6362 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b65cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b65ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b65d0:	d019      	beq.n	b6606 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b65d2:	2c00      	cmp	r4, #0
   b65d4:	d0f4      	beq.n	b65c0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b65d6:	212e      	movs	r1, #46	; 0x2e
   b65d8:	4630      	mov	r0, r6
   b65da:	f7ff feb3 	bl	b6344 <_ZN5Print5printEc>
   b65de:	4404      	add	r4, r0
   b65e0:	e7ee      	b.n	b65c0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65e2:	232f      	movs	r3, #47	; 0x2f
   b65e4:	466a      	mov	r2, sp
   b65e6:	4639      	mov	r1, r7
   b65e8:	200a      	movs	r0, #10
		buf[0] = 0;
   b65ea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65ee:	f7fe faa3 	bl	b4b38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b65f2:	4668      	mov	r0, sp
   b65f4:	f000 fcc4 	bl	b6f80 <strlen>
   b65f8:	6833      	ldr	r3, [r6, #0]
   b65fa:	4602      	mov	r2, r0
   b65fc:	68db      	ldr	r3, [r3, #12]
   b65fe:	4669      	mov	r1, sp
   b6600:	4630      	mov	r0, r6
   b6602:	4798      	blx	r3
   b6604:	4604      	mov	r4, r0
    }
    return n;
}
   b6606:	4620      	mov	r0, r4
   b6608:	b00d      	add	sp, #52	; 0x34
   b660a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b660c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b660c:	b510      	push	{r4, lr}
   b660e:	4b05      	ldr	r3, [pc, #20]	; (b6624 <_ZN9IPAddressC1Ev+0x18>)
   b6610:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6612:	2211      	movs	r2, #17
   b6614:	f840 3b04 	str.w	r3, [r0], #4
   b6618:	2100      	movs	r1, #0
   b661a:	f000 fc71 	bl	b6f00 <memset>
}
   b661e:	4620      	mov	r0, r4
   b6620:	bd10      	pop	{r4, pc}
   b6622:	bf00      	nop
   b6624:	000b72d0 	.word	0x000b72d0

000b6628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6628:	4603      	mov	r3, r0
   b662a:	4a07      	ldr	r2, [pc, #28]	; (b6648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b662c:	b510      	push	{r4, lr}
   b662e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6632:	f101 0210 	add.w	r2, r1, #16
   b6636:	f851 4b04 	ldr.w	r4, [r1], #4
   b663a:	f843 4b04 	str.w	r4, [r3], #4
   b663e:	4291      	cmp	r1, r2
   b6640:	d1f9      	bne.n	b6636 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6642:	780a      	ldrb	r2, [r1, #0]
   b6644:	701a      	strb	r2, [r3, #0]
}
   b6646:	bd10      	pop	{r4, pc}
   b6648:	000b72d0 	.word	0x000b72d0

000b664c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b664c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b664e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6652:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6656:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b665a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b665e:	2304      	movs	r3, #4
   b6660:	6041      	str	r1, [r0, #4]
   b6662:	7503      	strb	r3, [r0, #20]
}
   b6664:	bd10      	pop	{r4, pc}
	...

000b6668 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6668:	b507      	push	{r0, r1, r2, lr}
   b666a:	4b06      	ldr	r3, [pc, #24]	; (b6684 <_ZN9IPAddressC1EPKh+0x1c>)
   b666c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b666e:	78cb      	ldrb	r3, [r1, #3]
   b6670:	9300      	str	r3, [sp, #0]
   b6672:	788b      	ldrb	r3, [r1, #2]
   b6674:	784a      	ldrb	r2, [r1, #1]
   b6676:	7809      	ldrb	r1, [r1, #0]
   b6678:	f7ff ffe8 	bl	b664c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b667c:	b003      	add	sp, #12
   b667e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6682:	bf00      	nop
   b6684:	000b72d0 	.word	0x000b72d0

000b6688 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6688:	7441      	strb	r1, [r0, #17]
}
   b668a:	4770      	bx	lr

000b668c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b668c:	4770      	bx	lr

000b668e <_ZN9USBSerial4readEv>:
{
   b668e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6690:	2100      	movs	r1, #0
   b6692:	7c00      	ldrb	r0, [r0, #16]
   b6694:	f7fe fb00 	bl	b4c98 <HAL_USB_USART_Receive_Data>
}
   b6698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b669c:	bd08      	pop	{r3, pc}

000b669e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b669e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b66a0:	2101      	movs	r1, #1
   b66a2:	7c00      	ldrb	r0, [r0, #16]
   b66a4:	f7fe faf8 	bl	b4c98 <HAL_USB_USART_Receive_Data>
}
   b66a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66ac:	bd08      	pop	{r3, pc}

000b66ae <_ZN9USBSerial17availableForWriteEv>:
{
   b66ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b66b0:	7c00      	ldrb	r0, [r0, #16]
   b66b2:	f7fe fae9 	bl	b4c88 <HAL_USB_USART_Available_Data_For_Write>
}
   b66b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66ba:	bd08      	pop	{r3, pc}

000b66bc <_ZN9USBSerial9availableEv>:
{
   b66bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b66be:	7c00      	ldrb	r0, [r0, #16]
   b66c0:	f7fe fada 	bl	b4c78 <HAL_USB_USART_Available_Data>
}
   b66c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66c8:	bd08      	pop	{r3, pc}

000b66ca <_ZN9USBSerial5writeEh>:
{
   b66ca:	b513      	push	{r0, r1, r4, lr}
   b66cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66ce:	7c00      	ldrb	r0, [r0, #16]
{
   b66d0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66d2:	f7fe fad9 	bl	b4c88 <HAL_USB_USART_Available_Data_For_Write>
   b66d6:	2800      	cmp	r0, #0
   b66d8:	9901      	ldr	r1, [sp, #4]
   b66da:	dc01      	bgt.n	b66e0 <_ZN9USBSerial5writeEh+0x16>
   b66dc:	7c60      	ldrb	r0, [r4, #17]
   b66de:	b120      	cbz	r0, b66ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b66e0:	7c20      	ldrb	r0, [r4, #16]
   b66e2:	f7fe fae1 	bl	b4ca8 <HAL_USB_USART_Send_Data>
   b66e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b66ea:	b002      	add	sp, #8
   b66ec:	bd10      	pop	{r4, pc}

000b66ee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b66ee:	7c00      	ldrb	r0, [r0, #16]
   b66f0:	f7fe bae2 	b.w	b4cb8 <HAL_USB_USART_Flush_Data>

000b66f4 <_ZN9USBSerialD0Ev>:
   b66f4:	b510      	push	{r4, lr}
   b66f6:	2114      	movs	r1, #20
   b66f8:	4604      	mov	r4, r0
   b66fa:	f000 faa2 	bl	b6c42 <_ZdlPvj>
   b66fe:	4620      	mov	r0, r4
   b6700:	bd10      	pop	{r4, pc}
	...

000b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6704:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670a:	4604      	mov	r4, r0
   b670c:	4608      	mov	r0, r1
   b670e:	2100      	movs	r1, #0
   b6710:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6714:	4b04      	ldr	r3, [pc, #16]	; (b6728 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6716:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6718:	2301      	movs	r3, #1
  _serial = serial;
   b671a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b671c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b671e:	4611      	mov	r1, r2
   b6720:	f7fe fa9a 	bl	b4c58 <HAL_USB_USART_Init>
}
   b6724:	4620      	mov	r0, r4
   b6726:	bd10      	pop	{r4, pc}
   b6728:	000b72e4 	.word	0x000b72e4

000b672c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b672c:	7c00      	ldrb	r0, [r0, #16]
   b672e:	2200      	movs	r2, #0
   b6730:	f7fe ba9a 	b.w	b4c68 <HAL_USB_USART_Begin>

000b6734 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   b6734:	7c00      	ldrb	r0, [r0, #16]
   b6736:	f7fe bac7 	b.w	b4cc8 <HAL_USB_USART_Is_Connected>

000b673a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b673a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b673c:	2214      	movs	r2, #20
{
   b673e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b6740:	2100      	movs	r1, #0
   b6742:	f000 fbdd 	bl	b6f00 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b6746:	4620      	mov	r0, r4
   b6748:	bd10      	pop	{r4, pc}
	...

000b674c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b674c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b674e:	4c10      	ldr	r4, [pc, #64]	; (b6790 <_Z16_fetch_usbserialv+0x44>)
{
   b6750:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6752:	a803      	add	r0, sp, #12
   b6754:	f7ff fff1 	bl	b673a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6758:	7821      	ldrb	r1, [r4, #0]
   b675a:	f3bf 8f5b 	dmb	ish
   b675e:	f011 0101 	ands.w	r1, r1, #1
   b6762:	d111      	bne.n	b6788 <_Z16_fetch_usbserialv+0x3c>
   b6764:	4620      	mov	r0, r4
   b6766:	9101      	str	r1, [sp, #4]
   b6768:	f7fd fc99 	bl	b409e <__cxa_guard_acquire>
   b676c:	9901      	ldr	r1, [sp, #4]
   b676e:	b158      	cbz	r0, b6788 <_Z16_fetch_usbserialv+0x3c>
   b6770:	aa03      	add	r2, sp, #12
   b6772:	4808      	ldr	r0, [pc, #32]	; (b6794 <_Z16_fetch_usbserialv+0x48>)
   b6774:	f7ff ffc6 	bl	b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6778:	4620      	mov	r0, r4
   b677a:	f7fd fc95 	bl	b40a8 <__cxa_guard_release>
   b677e:	4a06      	ldr	r2, [pc, #24]	; (b6798 <_Z16_fetch_usbserialv+0x4c>)
   b6780:	4906      	ldr	r1, [pc, #24]	; (b679c <_Z16_fetch_usbserialv+0x50>)
   b6782:	4804      	ldr	r0, [pc, #16]	; (b6794 <_Z16_fetch_usbserialv+0x48>)
   b6784:	f000 fa58 	bl	b6c38 <__aeabi_atexit>
	return _usbserial;
}
   b6788:	4802      	ldr	r0, [pc, #8]	; (b6794 <_Z16_fetch_usbserialv+0x48>)
   b678a:	b008      	add	sp, #32
   b678c:	bd10      	pop	{r4, pc}
   b678e:	bf00      	nop
   b6790:	2003e680 	.word	0x2003e680
   b6794:	2003e684 	.word	0x2003e684
   b6798:	2003e59c 	.word	0x2003e59c
   b679c:	000b668d 	.word	0x000b668d

000b67a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b67a0:	4770      	bx	lr

000b67a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67a2:	7441      	strb	r1, [r0, #17]
}
   b67a4:	4770      	bx	lr

000b67a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b67a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b67a8:	7c00      	ldrb	r0, [r0, #16]
   b67aa:	f7fe fa05 	bl	b4bb8 <hal_usart_available_data_for_write>
}
   b67ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67b2:	bd08      	pop	{r3, pc}

000b67b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b67b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b67b6:	7c00      	ldrb	r0, [r0, #16]
   b67b8:	f7fe f9d6 	bl	b4b68 <hal_usart_available>
}
   b67bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67c0:	bd08      	pop	{r3, pc}

000b67c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b67c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b67c4:	7c00      	ldrb	r0, [r0, #16]
   b67c6:	f7fe f9df 	bl	b4b88 <hal_usart_peek>
}
   b67ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67ce:	bd08      	pop	{r3, pc}

000b67d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b67d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b67d2:	7c00      	ldrb	r0, [r0, #16]
   b67d4:	f7fe f9d0 	bl	b4b78 <hal_usart_read>
}
   b67d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67dc:	bd08      	pop	{r3, pc}

000b67de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b67de:	7c00      	ldrb	r0, [r0, #16]
   b67e0:	f7fe b9da 	b.w	b4b98 <hal_usart_flush>

000b67e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b67e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b67e6:	7c45      	ldrb	r5, [r0, #17]
{
   b67e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b67ea:	b12d      	cbz	r5, b67f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b67ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b67ee:	b003      	add	sp, #12
   b67f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b67f4:	f7fe b9b0 	b.w	b4b58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b67f8:	7c00      	ldrb	r0, [r0, #16]
   b67fa:	9101      	str	r1, [sp, #4]
   b67fc:	f7fe f9dc 	bl	b4bb8 <hal_usart_available_data_for_write>
   b6800:	2800      	cmp	r0, #0
   b6802:	9901      	ldr	r1, [sp, #4]
   b6804:	dcf2      	bgt.n	b67ec <_ZN11USARTSerial5writeEh+0x8>
}
   b6806:	4628      	mov	r0, r5
   b6808:	b003      	add	sp, #12
   b680a:	bd30      	pop	{r4, r5, pc}

000b680c <_ZN11USARTSerialD0Ev>:
   b680c:	b510      	push	{r4, lr}
   b680e:	2114      	movs	r1, #20
   b6810:	4604      	mov	r4, r0
   b6812:	f000 fa16 	bl	b6c42 <_ZdlPvj>
   b6816:	4620      	mov	r0, r4
   b6818:	bd10      	pop	{r4, pc}
	...

000b681c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b681c:	b510      	push	{r4, lr}
   b681e:	f04f 0c00 	mov.w	ip, #0
   b6822:	4604      	mov	r4, r0
   b6824:	4608      	mov	r0, r1
   b6826:	4611      	mov	r1, r2
   b6828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b682c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b6830:	4a04      	ldr	r2, [pc, #16]	; (b6844 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b6832:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b6834:	2201      	movs	r2, #1
  _serial = serial;
   b6836:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6838:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b683a:	461a      	mov	r2, r3
   b683c:	f7fe f984 	bl	b4b48 <hal_usart_init>
}
   b6840:	4620      	mov	r0, r4
   b6842:	bd10      	pop	{r4, pc}
   b6844:	000b7314 	.word	0x000b7314

000b6848 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b6848:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b684a:	4c0e      	ldr	r4, [pc, #56]	; (b6884 <_Z22__fetch_global_Serial1v+0x3c>)
   b684c:	7821      	ldrb	r1, [r4, #0]
   b684e:	f3bf 8f5b 	dmb	ish
   b6852:	f011 0101 	ands.w	r1, r1, #1
   b6856:	d112      	bne.n	b687e <_Z22__fetch_global_Serial1v+0x36>
   b6858:	4620      	mov	r0, r4
   b685a:	9101      	str	r1, [sp, #4]
   b685c:	f7fd fc1f 	bl	b409e <__cxa_guard_acquire>
   b6860:	9901      	ldr	r1, [sp, #4]
   b6862:	b160      	cbz	r0, b687e <_Z22__fetch_global_Serial1v+0x36>
   b6864:	4a08      	ldr	r2, [pc, #32]	; (b6888 <_Z22__fetch_global_Serial1v+0x40>)
   b6866:	4b09      	ldr	r3, [pc, #36]	; (b688c <_Z22__fetch_global_Serial1v+0x44>)
   b6868:	4809      	ldr	r0, [pc, #36]	; (b6890 <_Z22__fetch_global_Serial1v+0x48>)
   b686a:	f7ff ffd7 	bl	b681c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b686e:	4620      	mov	r0, r4
   b6870:	f7fd fc1a 	bl	b40a8 <__cxa_guard_release>
   b6874:	4a07      	ldr	r2, [pc, #28]	; (b6894 <_Z22__fetch_global_Serial1v+0x4c>)
   b6876:	4908      	ldr	r1, [pc, #32]	; (b6898 <_Z22__fetch_global_Serial1v+0x50>)
   b6878:	4805      	ldr	r0, [pc, #20]	; (b6890 <_Z22__fetch_global_Serial1v+0x48>)
   b687a:	f000 f9dd 	bl	b6c38 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b687e:	4804      	ldr	r0, [pc, #16]	; (b6890 <_Z22__fetch_global_Serial1v+0x48>)
   b6880:	b002      	add	sp, #8
   b6882:	bd10      	pop	{r4, pc}
   b6884:	2003e698 	.word	0x2003e698
   b6888:	2003e69c 	.word	0x2003e69c
   b688c:	2003e720 	.word	0x2003e720
   b6890:	2003e7a4 	.word	0x2003e7a4
   b6894:	2003e59c 	.word	0x2003e59c
   b6898:	000b67a1 	.word	0x000b67a1

000b689c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b689c:	4770      	bx	lr

000b689e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b689e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68a0:	4606      	mov	r6, r0
   b68a2:	4615      	mov	r5, r2
   b68a4:	460c      	mov	r4, r1
   b68a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b68a8:	42bc      	cmp	r4, r7
   b68aa:	d006      	beq.n	b68ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b68ac:	6833      	ldr	r3, [r6, #0]
   b68ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   b68b2:	689b      	ldr	r3, [r3, #8]
   b68b4:	4630      	mov	r0, r6
   b68b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b68b8:	e7f6      	b.n	b68a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b68ba:	4628      	mov	r0, r5
   b68bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b68be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b68be:	7c00      	ldrb	r0, [r0, #16]
   b68c0:	2200      	movs	r2, #0
   b68c2:	f7fe b981 	b.w	b4bc8 <hal_i2c_write>

000b68c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b68c6:	7c00      	ldrb	r0, [r0, #16]
   b68c8:	2100      	movs	r1, #0
   b68ca:	f7fe b985 	b.w	b4bd8 <hal_i2c_available>

000b68ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b68ce:	7c00      	ldrb	r0, [r0, #16]
   b68d0:	2100      	movs	r1, #0
   b68d2:	f7fe b989 	b.w	b4be8 <hal_i2c_read>

000b68d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b68d6:	7c00      	ldrb	r0, [r0, #16]
   b68d8:	2100      	movs	r1, #0
   b68da:	f7fe b98d 	b.w	b4bf8 <hal_i2c_peek>

000b68de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b68de:	7c00      	ldrb	r0, [r0, #16]
   b68e0:	2100      	movs	r1, #0
   b68e2:	f7fe b991 	b.w	b4c08 <hal_i2c_flush>

000b68e6 <_ZN7TwoWireD0Ev>:
   b68e6:	b510      	push	{r4, lr}
   b68e8:	2114      	movs	r1, #20
   b68ea:	4604      	mov	r4, r0
   b68ec:	f000 f9a9 	bl	b6c42 <_ZdlPvj>
   b68f0:	4620      	mov	r0, r4
   b68f2:	bd10      	pop	{r4, pc}

000b68f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b68f4:	b510      	push	{r4, lr}
   b68f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68fa:	4604      	mov	r4, r0
   b68fc:	4608      	mov	r0, r1
   b68fe:	2100      	movs	r1, #0
   b6900:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6904:	4b03      	ldr	r3, [pc, #12]	; (b6914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6906:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6908:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b690a:	4611      	mov	r1, r2
   b690c:	f7fe f98c 	bl	b4c28 <hal_i2c_init>
}
   b6910:	4620      	mov	r0, r4
   b6912:	bd10      	pop	{r4, pc}
   b6914:	000b7344 	.word	0x000b7344

000b6918 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6918:	2200      	movs	r2, #0
   b691a:	6840      	ldr	r0, [r0, #4]
   b691c:	4611      	mov	r1, r2
   b691e:	f7fe ba27 	b.w	b4d70 <network_ready>

000b6922 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6922:	2200      	movs	r2, #0
   b6924:	6840      	ldr	r0, [r0, #4]
   b6926:	4611      	mov	r1, r2
   b6928:	f7fe ba42 	b.w	b4db0 <network_listening>

000b692c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b692c:	2200      	movs	r2, #0
   b692e:	6840      	ldr	r0, [r0, #4]
   b6930:	4611      	mov	r1, r2
   b6932:	f7fe ba4d 	b.w	b4dd0 <network_get_listen_timeout>

000b6936 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6936:	6840      	ldr	r0, [r0, #4]
   b6938:	2200      	movs	r2, #0
   b693a:	f7fe ba41 	b.w	b4dc0 <network_set_listen_timeout>

000b693e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b693e:	6840      	ldr	r0, [r0, #4]
   b6940:	2200      	movs	r2, #0
   b6942:	f081 0101 	eor.w	r1, r1, #1
   b6946:	f7fe ba2b 	b.w	b4da0 <network_listen>

000b694a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b694a:	2300      	movs	r3, #0
   b694c:	6840      	ldr	r0, [r0, #4]
   b694e:	461a      	mov	r2, r3
   b6950:	4619      	mov	r1, r3
   b6952:	f7fe ba1d 	b.w	b4d90 <network_off>

000b6956 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6956:	2200      	movs	r2, #0
   b6958:	6840      	ldr	r0, [r0, #4]
   b695a:	4611      	mov	r1, r2
   b695c:	f7fe b9f8 	b.w	b4d50 <network_connecting>

000b6960 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6960:	6840      	ldr	r0, [r0, #4]
   b6962:	2200      	movs	r2, #0
   b6964:	2102      	movs	r1, #2
   b6966:	f7fe b9fb 	b.w	b4d60 <network_disconnect>

000b696a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b696a:	2300      	movs	r3, #0
   b696c:	6840      	ldr	r0, [r0, #4]
   b696e:	461a      	mov	r2, r3
   b6970:	f7fe b9e6 	b.w	b4d40 <network_connect>

000b6974 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6974:	4b02      	ldr	r3, [pc, #8]	; (b6980 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6976:	2204      	movs	r2, #4
   b6978:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b697a:	4a02      	ldr	r2, [pc, #8]	; (b6984 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b697c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b697e:	4770      	bx	lr
   b6980:	2003e7b8 	.word	0x2003e7b8
   b6984:	000b736c 	.word	0x000b736c

000b6988 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6988:	2300      	movs	r3, #0
   b698a:	6840      	ldr	r0, [r0, #4]
   b698c:	461a      	mov	r2, r3
   b698e:	f7fe b9d7 	b.w	b4d40 <network_connect>

000b6992 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6992:	6840      	ldr	r0, [r0, #4]
   b6994:	2200      	movs	r2, #0
   b6996:	2102      	movs	r1, #2
   b6998:	f7fe b9e2 	b.w	b4d60 <network_disconnect>

000b699c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b699c:	2200      	movs	r2, #0
   b699e:	6840      	ldr	r0, [r0, #4]
   b69a0:	4611      	mov	r1, r2
   b69a2:	f7fe b9d5 	b.w	b4d50 <network_connecting>

000b69a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b69a6:	2200      	movs	r2, #0
   b69a8:	6840      	ldr	r0, [r0, #4]
   b69aa:	4611      	mov	r1, r2
   b69ac:	f7fe b9e0 	b.w	b4d70 <network_ready>

000b69b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b69b0:	2300      	movs	r3, #0
   b69b2:	6840      	ldr	r0, [r0, #4]
   b69b4:	461a      	mov	r2, r3
   b69b6:	4619      	mov	r1, r3
   b69b8:	f7fe b9e2 	b.w	b4d80 <network_on>

000b69bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b69bc:	2300      	movs	r3, #0
   b69be:	6840      	ldr	r0, [r0, #4]
   b69c0:	461a      	mov	r2, r3
   b69c2:	4619      	mov	r1, r3
   b69c4:	f7fe b9e4 	b.w	b4d90 <network_off>

000b69c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b69c8:	6840      	ldr	r0, [r0, #4]
   b69ca:	2100      	movs	r1, #0
   b69cc:	f7fe ba08 	b.w	b4de0 <network_is_on>

000b69d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b69d0:	6840      	ldr	r0, [r0, #4]
   b69d2:	2100      	movs	r1, #0
   b69d4:	f7fe ba0c 	b.w	b4df0 <network_is_off>

000b69d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b69d8:	6840      	ldr	r0, [r0, #4]
   b69da:	2200      	movs	r2, #0
   b69dc:	f081 0101 	eor.w	r1, r1, #1
   b69e0:	f7fe b9de 	b.w	b4da0 <network_listen>

000b69e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b69e4:	6840      	ldr	r0, [r0, #4]
   b69e6:	2200      	movs	r2, #0
   b69e8:	f7fe b9ea 	b.w	b4dc0 <network_set_listen_timeout>

000b69ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b69ec:	2200      	movs	r2, #0
   b69ee:	6840      	ldr	r0, [r0, #4]
   b69f0:	4611      	mov	r1, r2
   b69f2:	f7fe b9ed 	b.w	b4dd0 <network_get_listen_timeout>

000b69f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b69f6:	2200      	movs	r2, #0
   b69f8:	6840      	ldr	r0, [r0, #4]
   b69fa:	4611      	mov	r1, r2
   b69fc:	f7fe b9d8 	b.w	b4db0 <network_listening>

000b6a00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a04:	b095      	sub	sp, #84	; 0x54
   b6a06:	4614      	mov	r4, r2
   b6a08:	460d      	mov	r5, r1
   b6a0a:	4607      	mov	r7, r0
    IPAddress addr;
   b6a0c:	f7ff fdfe 	bl	b660c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6a10:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6a12:	221c      	movs	r2, #28
   b6a14:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6a16:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6a18:	f000 fa72 	bl	b6f00 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6a1c:	2340      	movs	r3, #64	; 0x40
   b6a1e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6a20:	4620      	mov	r0, r4
   b6a22:	466b      	mov	r3, sp
   b6a24:	aa0c      	add	r2, sp, #48	; 0x30
   b6a26:	2100      	movs	r1, #0
   b6a28:	f7fd ffc6 	bl	b49b8 <netdb_getaddrinfo>
    if (!r) {
   b6a2c:	4604      	mov	r4, r0
   b6a2e:	2800      	cmp	r0, #0
   b6a30:	d14b      	bne.n	b6aca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a32:	4602      	mov	r2, r0
   b6a34:	2101      	movs	r1, #1
   b6a36:	6868      	ldr	r0, [r5, #4]
   b6a38:	f7fe f99a 	bl	b4d70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a3c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a3e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a40:	4622      	mov	r2, r4
   b6a42:	6868      	ldr	r0, [r5, #4]
   b6a44:	f7fe f994 	bl	b4d70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a48:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a4a:	4681      	mov	r9, r0
        bool ok = false;
   b6a4c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a4e:	2e00      	cmp	r6, #0
   b6a50:	d03b      	beq.n	b6aca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6a52:	2900      	cmp	r1, #0
   b6a54:	d139      	bne.n	b6aca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6a56:	6873      	ldr	r3, [r6, #4]
   b6a58:	2b02      	cmp	r3, #2
   b6a5a:	d003      	beq.n	b6a64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6a5c:	2b0a      	cmp	r3, #10
   b6a5e:	d011      	beq.n	b6a84 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a60:	69f6      	ldr	r6, [r6, #28]
   b6a62:	e7f4      	b.n	b6a4e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6a64:	f1b8 0f00 	cmp.w	r8, #0
   b6a68:	d0fa      	beq.n	b6a60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6a6a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6a6c:	a806      	add	r0, sp, #24
   b6a6e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6a70:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6a72:	f7ff fdf9 	bl	b6668 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a78:	1d3c      	adds	r4, r7, #4
   b6a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a7c:	682b      	ldr	r3, [r5, #0]
   b6a7e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a80:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6a82:	e7ed      	b.n	b6a60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6a84:	f1b9 0f00 	cmp.w	r9, #0
   b6a88:	d0ea      	beq.n	b6a60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6a8a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6a8c:	2210      	movs	r2, #16
   b6a8e:	a801      	add	r0, sp, #4
   b6a90:	f000 fa36 	bl	b6f00 <memset>
                    a.v = 6;
   b6a94:	2306      	movs	r3, #6
   b6a96:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6a9a:	ad01      	add	r5, sp, #4
   b6a9c:	f104 0308 	add.w	r3, r4, #8
   b6aa0:	3418      	adds	r4, #24
   b6aa2:	6818      	ldr	r0, [r3, #0]
   b6aa4:	6859      	ldr	r1, [r3, #4]
   b6aa6:	462a      	mov	r2, r5
   b6aa8:	c203      	stmia	r2!, {r0, r1}
   b6aaa:	3308      	adds	r3, #8
   b6aac:	42a3      	cmp	r3, r4
   b6aae:	4615      	mov	r5, r2
   b6ab0:	d1f7      	bne.n	b6aa2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6ab2:	a901      	add	r1, sp, #4
   b6ab4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6ab6:	ad07      	add	r5, sp, #28
   b6ab8:	f7ff fdb6 	bl	b6628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6abe:	1d3c      	adds	r4, r7, #4
   b6ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ac2:	682b      	ldr	r3, [r5, #0]
   b6ac4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ac6:	4649      	mov	r1, r9
   b6ac8:	e7ca      	b.n	b6a60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6aca:	9800      	ldr	r0, [sp, #0]
   b6acc:	f7fd ff6c 	bl	b49a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6ad0:	4638      	mov	r0, r7
   b6ad2:	b015      	add	sp, #84	; 0x54
   b6ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ad8:	4b02      	ldr	r3, [pc, #8]	; (b6ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6ada:	4a03      	ldr	r2, [pc, #12]	; (b6ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6adc:	601a      	str	r2, [r3, #0]
   b6ade:	2200      	movs	r2, #0
   b6ae0:	605a      	str	r2, [r3, #4]

} // spark
   b6ae2:	4770      	bx	lr
   b6ae4:	2003e7c0 	.word	0x2003e7c0
   b6ae8:	000b73a8 	.word	0x000b73a8

000b6aec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6aec:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6aee:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6af0:	d902      	bls.n	b6af8 <pinAvailable+0xc>
    return false;
   b6af2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6af4:	b002      	add	sp, #8
   b6af6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6af8:	f1a0 030b 	sub.w	r3, r0, #11
   b6afc:	2b02      	cmp	r3, #2
   b6afe:	d81a      	bhi.n	b6b36 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6b00:	4c17      	ldr	r4, [pc, #92]	; (b6b60 <pinAvailable+0x74>)
   b6b02:	7821      	ldrb	r1, [r4, #0]
   b6b04:	f3bf 8f5b 	dmb	ish
   b6b08:	f011 0101 	ands.w	r1, r1, #1
   b6b0c:	d10b      	bne.n	b6b26 <pinAvailable+0x3a>
   b6b0e:	4620      	mov	r0, r4
   b6b10:	9101      	str	r1, [sp, #4]
   b6b12:	f7fd fac4 	bl	b409e <__cxa_guard_acquire>
   b6b16:	9901      	ldr	r1, [sp, #4]
   b6b18:	b128      	cbz	r0, b6b26 <pinAvailable+0x3a>
   b6b1a:	4812      	ldr	r0, [pc, #72]	; (b6b64 <pinAvailable+0x78>)
   b6b1c:	f7fe f9f6 	bl	b4f0c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6b20:	4620      	mov	r0, r4
   b6b22:	f7fd fac1 	bl	b40a8 <__cxa_guard_release>
   b6b26:	4b0f      	ldr	r3, [pc, #60]	; (b6b64 <pinAvailable+0x78>)
   b6b28:	7818      	ldrb	r0, [r3, #0]
   b6b2a:	f7fe f88d 	bl	b4c48 <hal_spi_is_enabled>
   b6b2e:	2800      	cmp	r0, #0
   b6b30:	d1df      	bne.n	b6af2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6b32:	2001      	movs	r0, #1
   b6b34:	e7de      	b.n	b6af4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6b36:	2801      	cmp	r0, #1
   b6b38:	d809      	bhi.n	b6b4e <pinAvailable+0x62>
   b6b3a:	f000 f855 	bl	b6be8 <_Z19__fetch_global_Wirev>
   b6b3e:	2100      	movs	r1, #0
   b6b40:	7c00      	ldrb	r0, [r0, #16]
   b6b42:	f7fe f869 	bl	b4c18 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6b46:	f080 0001 	eor.w	r0, r0, #1
   b6b4a:	b2c0      	uxtb	r0, r0
   b6b4c:	e7d2      	b.n	b6af4 <pinAvailable+0x8>
   b6b4e:	3809      	subs	r0, #9
   b6b50:	2801      	cmp	r0, #1
   b6b52:	d8ee      	bhi.n	b6b32 <pinAvailable+0x46>
   b6b54:	f7ff fe78 	bl	b6848 <_Z22__fetch_global_Serial1v>
   b6b58:	7c00      	ldrb	r0, [r0, #16]
   b6b5a:	f7fe f825 	bl	b4ba8 <hal_usart_is_enabled>
   b6b5e:	e7f2      	b.n	b6b46 <pinAvailable+0x5a>
   b6b60:	2003e7c8 	.word	0x2003e7c8
   b6b64:	2003e7cc 	.word	0x2003e7cc

000b6b68 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6b68:	2823      	cmp	r0, #35	; 0x23
{
   b6b6a:	b538      	push	{r3, r4, r5, lr}
   b6b6c:	4604      	mov	r4, r0
   b6b6e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6b70:	d80a      	bhi.n	b6b88 <pinMode+0x20>
   b6b72:	29ff      	cmp	r1, #255	; 0xff
   b6b74:	d008      	beq.n	b6b88 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6b76:	f7ff ffb9 	bl	b6aec <pinAvailable>
   b6b7a:	b128      	cbz	r0, b6b88 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6b7c:	4629      	mov	r1, r5
   b6b7e:	4620      	mov	r0, r4
}
   b6b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6b84:	f7fd bf28 	b.w	b49d8 <HAL_Pin_Mode>
}
   b6b88:	bd38      	pop	{r3, r4, r5, pc}

000b6b8a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6b8a:	b538      	push	{r3, r4, r5, lr}
   b6b8c:	4604      	mov	r4, r0
   b6b8e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6b90:	f7fd ff2a 	bl	b49e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6b94:	28ff      	cmp	r0, #255	; 0xff
   b6b96:	d010      	beq.n	b6bba <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6b98:	2806      	cmp	r0, #6
   b6b9a:	d804      	bhi.n	b6ba6 <digitalWrite+0x1c>
   b6b9c:	234d      	movs	r3, #77	; 0x4d
   b6b9e:	fa23 f000 	lsr.w	r0, r3, r0
   b6ba2:	07c3      	lsls	r3, r0, #31
   b6ba4:	d409      	bmi.n	b6bba <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6ba6:	4620      	mov	r0, r4
   b6ba8:	f7ff ffa0 	bl	b6aec <pinAvailable>
   b6bac:	b128      	cbz	r0, b6bba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6bae:	4629      	mov	r1, r5
   b6bb0:	4620      	mov	r0, r4
}
   b6bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6bb6:	f7fd bf1f 	b.w	b49f8 <HAL_GPIO_Write>
}
   b6bba:	bd38      	pop	{r3, r4, r5, pc}

000b6bbc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b6bbc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6bbe:	2520      	movs	r5, #32
   b6bc0:	2314      	movs	r3, #20
{
   b6bc2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6bc4:	6003      	str	r3, [r0, #0]
   b6bc6:	6085      	str	r5, [r0, #8]
   b6bc8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6bca:	4906      	ldr	r1, [pc, #24]	; (b6be4 <_Z17acquireWireBufferv+0x28>)
   b6bcc:	4628      	mov	r0, r5
   b6bce:	f000 f83a 	bl	b6c46 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6bd2:	4904      	ldr	r1, [pc, #16]	; (b6be4 <_Z17acquireWireBufferv+0x28>)
	};
   b6bd4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6bd6:	4628      	mov	r0, r5
   b6bd8:	f000 f835 	bl	b6c46 <_ZnajRKSt9nothrow_t>
	};
   b6bdc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b6bde:	4620      	mov	r0, r4
   b6be0:	bd38      	pop	{r3, r4, r5, pc}
   b6be2:	bf00      	nop
   b6be4:	000b73dc 	.word	0x000b73dc

000b6be8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b6be8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6bea:	4d0f      	ldr	r5, [pc, #60]	; (b6c28 <_Z19__fetch_global_Wirev+0x40>)
   b6bec:	7829      	ldrb	r1, [r5, #0]
   b6bee:	f3bf 8f5b 	dmb	ish
   b6bf2:	f011 0401 	ands.w	r4, r1, #1
{
   b6bf6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6bf8:	d113      	bne.n	b6c22 <_Z19__fetch_global_Wirev+0x3a>
   b6bfa:	4628      	mov	r0, r5
   b6bfc:	f7fd fa4f 	bl	b409e <__cxa_guard_acquire>
   b6c00:	b178      	cbz	r0, b6c22 <_Z19__fetch_global_Wirev+0x3a>
   b6c02:	a801      	add	r0, sp, #4
   b6c04:	f7ff ffda 	bl	b6bbc <_Z17acquireWireBufferv>
   b6c08:	aa01      	add	r2, sp, #4
   b6c0a:	4621      	mov	r1, r4
   b6c0c:	4807      	ldr	r0, [pc, #28]	; (b6c2c <_Z19__fetch_global_Wirev+0x44>)
   b6c0e:	f7ff fe71 	bl	b68f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6c12:	4628      	mov	r0, r5
   b6c14:	f7fd fa48 	bl	b40a8 <__cxa_guard_release>
   b6c18:	4a05      	ldr	r2, [pc, #20]	; (b6c30 <_Z19__fetch_global_Wirev+0x48>)
   b6c1a:	4906      	ldr	r1, [pc, #24]	; (b6c34 <_Z19__fetch_global_Wirev+0x4c>)
   b6c1c:	4803      	ldr	r0, [pc, #12]	; (b6c2c <_Z19__fetch_global_Wirev+0x44>)
   b6c1e:	f000 f80b 	bl	b6c38 <__aeabi_atexit>
	return wire;
}
   b6c22:	4802      	ldr	r0, [pc, #8]	; (b6c2c <_Z19__fetch_global_Wirev+0x44>)
   b6c24:	b007      	add	sp, #28
   b6c26:	bd30      	pop	{r4, r5, pc}
   b6c28:	2003e7d8 	.word	0x2003e7d8
   b6c2c:	2003e7dc 	.word	0x2003e7dc
   b6c30:	2003e59c 	.word	0x2003e59c
   b6c34:	000b689d 	.word	0x000b689d

000b6c38 <__aeabi_atexit>:
   b6c38:	460b      	mov	r3, r1
   b6c3a:	4601      	mov	r1, r0
   b6c3c:	4618      	mov	r0, r3
   b6c3e:	f000 b919 	b.w	b6e74 <__cxa_atexit>

000b6c42 <_ZdlPvj>:
   b6c42:	f7fd ba2a 	b.w	b409a <_ZdlPv>

000b6c46 <_ZnajRKSt9nothrow_t>:
   b6c46:	f7fd ba26 	b.w	b4096 <_Znaj>

000b6c4a <_ZSt25__throw_bad_function_callv>:
   b6c4a:	b508      	push	{r3, lr}
   b6c4c:	f7fe f908 	bl	b4e60 <abort>

000b6c50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6c50:	4901      	ldr	r1, [pc, #4]	; (b6c58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6c52:	f000 b8f9 	b.w	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6c56:	bf00      	nop
   b6c58:	000b73f8 	.word	0x000b73f8

000b6c5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6c5e:	2400      	movs	r4, #0
   b6c60:	2310      	movs	r3, #16
   b6c62:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6c66:	6803      	ldr	r3, [r0, #0]
   b6c68:	4615      	mov	r5, r2
   b6c6a:	699e      	ldr	r6, [r3, #24]
   b6c6c:	6812      	ldr	r2, [r2, #0]
   b6c6e:	466b      	mov	r3, sp
   b6c70:	e9cd 4400 	strd	r4, r4, [sp]
   b6c74:	47b0      	blx	r6
   b6c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6c7a:	f003 0306 	and.w	r3, r3, #6
   b6c7e:	2b06      	cmp	r3, #6
   b6c80:	bf03      	ittte	eq
   b6c82:	9b00      	ldreq	r3, [sp, #0]
   b6c84:	602b      	streq	r3, [r5, #0]
   b6c86:	2001      	moveq	r0, #1
   b6c88:	4620      	movne	r0, r4
   b6c8a:	b004      	add	sp, #16
   b6c8c:	bd70      	pop	{r4, r5, r6, pc}

000b6c8e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6c8e:	9800      	ldr	r0, [sp, #0]
   b6c90:	4290      	cmp	r0, r2
   b6c92:	bf14      	ite	ne
   b6c94:	2001      	movne	r0, #1
   b6c96:	2006      	moveq	r0, #6
   b6c98:	4770      	bx	lr
	...

000b6c9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6c9c:	b510      	push	{r4, lr}
   b6c9e:	4b03      	ldr	r3, [pc, #12]	; (b6cac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6ca0:	6003      	str	r3, [r0, #0]
   b6ca2:	4604      	mov	r4, r0
   b6ca4:	f000 f8cd 	bl	b6e42 <_ZNSt9type_infoD1Ev>
   b6ca8:	4620      	mov	r0, r4
   b6caa:	bd10      	pop	{r4, pc}
   b6cac:	000b7438 	.word	0x000b7438

000b6cb0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6cb0:	b510      	push	{r4, lr}
   b6cb2:	4604      	mov	r4, r0
   b6cb4:	f7ff fff2 	bl	b6c9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	2108      	movs	r1, #8
   b6cbc:	f7ff ffc1 	bl	b6c42 <_ZdlPvj>
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	bd10      	pop	{r4, pc}

000b6cc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cc8:	461f      	mov	r7, r3
   b6cca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6cce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6cd2:	4598      	cmp	r8, r3
   b6cd4:	4606      	mov	r6, r0
   b6cd6:	4615      	mov	r5, r2
   b6cd8:	d107      	bne.n	b6cea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6cda:	9907      	ldr	r1, [sp, #28]
   b6cdc:	f000 f8b4 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6ce0:	b118      	cbz	r0, b6cea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6ce2:	7165      	strb	r5, [r4, #5]
   b6ce4:	2000      	movs	r0, #0
   b6ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6cea:	4639      	mov	r1, r7
   b6cec:	4630      	mov	r0, r6
   b6cee:	f000 f8ab 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6cf2:	2800      	cmp	r0, #0
   b6cf4:	d0f6      	beq.n	b6ce4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6cf6:	2301      	movs	r3, #1
   b6cf8:	f8c4 8000 	str.w	r8, [r4]
   b6cfc:	7125      	strb	r5, [r4, #4]
   b6cfe:	71a3      	strb	r3, [r4, #6]
   b6d00:	e7f0      	b.n	b6ce4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6d02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6d02:	b538      	push	{r3, r4, r5, lr}
   b6d04:	4615      	mov	r5, r2
   b6d06:	461c      	mov	r4, r3
   b6d08:	f000 f89e 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6d0c:	b120      	cbz	r0, b6d18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6d0e:	2308      	movs	r3, #8
   b6d10:	60e3      	str	r3, [r4, #12]
   b6d12:	2306      	movs	r3, #6
   b6d14:	6025      	str	r5, [r4, #0]
   b6d16:	7123      	strb	r3, [r4, #4]
   b6d18:	bd38      	pop	{r3, r4, r5, pc}

000b6d1a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6d1c:	4605      	mov	r5, r0
   b6d1e:	460c      	mov	r4, r1
   b6d20:	9201      	str	r2, [sp, #4]
   b6d22:	461e      	mov	r6, r3
   b6d24:	f000 f890 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6d28:	b950      	cbnz	r0, b6d40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6d2a:	2e03      	cmp	r6, #3
   b6d2c:	d808      	bhi.n	b6d40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6d2e:	6823      	ldr	r3, [r4, #0]
   b6d30:	9a01      	ldr	r2, [sp, #4]
   b6d32:	695b      	ldr	r3, [r3, #20]
   b6d34:	4629      	mov	r1, r5
   b6d36:	4620      	mov	r0, r4
   b6d38:	b002      	add	sp, #8
   b6d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6d3e:	4718      	bx	r3
   b6d40:	b002      	add	sp, #8
   b6d42:	bd70      	pop	{r4, r5, r6, pc}

000b6d44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6d44:	b510      	push	{r4, lr}
   b6d46:	4b03      	ldr	r3, [pc, #12]	; (b6d54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6d48:	6003      	str	r3, [r0, #0]
   b6d4a:	4604      	mov	r4, r0
   b6d4c:	f7ff ffa6 	bl	b6c9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6d50:	4620      	mov	r0, r4
   b6d52:	bd10      	pop	{r4, pc}
   b6d54:	000b7498 	.word	0x000b7498

000b6d58 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6d58:	b510      	push	{r4, lr}
   b6d5a:	4604      	mov	r4, r0
   b6d5c:	f7ff fff2 	bl	b6d44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6d60:	4620      	mov	r0, r4
   b6d62:	210c      	movs	r1, #12
   b6d64:	f7ff ff6d 	bl	b6c42 <_ZdlPvj>
   b6d68:	4620      	mov	r0, r4
   b6d6a:	bd10      	pop	{r4, pc}

000b6d6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6d6e:	9f08      	ldr	r7, [sp, #32]
   b6d70:	4297      	cmp	r7, r2
   b6d72:	4605      	mov	r5, r0
   b6d74:	460e      	mov	r6, r1
   b6d76:	4614      	mov	r4, r2
   b6d78:	d00a      	beq.n	b6d90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6d7a:	68a8      	ldr	r0, [r5, #8]
   b6d7c:	6802      	ldr	r2, [r0, #0]
   b6d7e:	9708      	str	r7, [sp, #32]
   b6d80:	6a15      	ldr	r5, [r2, #32]
   b6d82:	4631      	mov	r1, r6
   b6d84:	4622      	mov	r2, r4
   b6d86:	46ac      	mov	ip, r5
   b6d88:	b003      	add	sp, #12
   b6d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6d8e:	4760      	bx	ip
   b6d90:	4619      	mov	r1, r3
   b6d92:	9301      	str	r3, [sp, #4]
   b6d94:	f000 f858 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6d98:	9b01      	ldr	r3, [sp, #4]
   b6d9a:	2800      	cmp	r0, #0
   b6d9c:	d0ed      	beq.n	b6d7a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6d9e:	2006      	movs	r0, #6
   b6da0:	b003      	add	sp, #12
   b6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6da4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6da4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6da8:	460d      	mov	r5, r1
   b6daa:	4619      	mov	r1, r3
   b6dac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6db0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6db4:	4681      	mov	r9, r0
   b6db6:	4617      	mov	r7, r2
   b6db8:	4698      	mov	r8, r3
   b6dba:	f000 f845 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6dbe:	b190      	cbz	r0, b6de6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6dc0:	2d00      	cmp	r5, #0
   b6dc2:	6034      	str	r4, [r6, #0]
   b6dc4:	7137      	strb	r7, [r6, #4]
   b6dc6:	db09      	blt.n	b6ddc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6dc8:	1961      	adds	r1, r4, r5
   b6dca:	458a      	cmp	sl, r1
   b6dcc:	bf0c      	ite	eq
   b6dce:	2106      	moveq	r1, #6
   b6dd0:	2101      	movne	r1, #1
   b6dd2:	71b1      	strb	r1, [r6, #6]
   b6dd4:	2000      	movs	r0, #0
   b6dd6:	b001      	add	sp, #4
   b6dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6ddc:	3502      	adds	r5, #2
   b6dde:	d1f9      	bne.n	b6dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6de0:	2301      	movs	r3, #1
   b6de2:	71b3      	strb	r3, [r6, #6]
   b6de4:	e7f6      	b.n	b6dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6de6:	4554      	cmp	r4, sl
   b6de8:	d106      	bne.n	b6df8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6dea:	4659      	mov	r1, fp
   b6dec:	4648      	mov	r0, r9
   b6dee:	f000 f82b 	bl	b6e48 <_ZNKSt9type_infoeqERKS_>
   b6df2:	b108      	cbz	r0, b6df8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6df4:	7177      	strb	r7, [r6, #5]
   b6df6:	e7ed      	b.n	b6dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6df8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6dfc:	6803      	ldr	r3, [r0, #0]
   b6dfe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6e02:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6e06:	69dc      	ldr	r4, [r3, #28]
   b6e08:	463a      	mov	r2, r7
   b6e0a:	4643      	mov	r3, r8
   b6e0c:	4629      	mov	r1, r5
   b6e0e:	46a4      	mov	ip, r4
   b6e10:	b001      	add	sp, #4
   b6e12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e16:	4760      	bx	ip

000b6e18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e1c:	4607      	mov	r7, r0
   b6e1e:	460c      	mov	r4, r1
   b6e20:	4615      	mov	r5, r2
   b6e22:	461e      	mov	r6, r3
   b6e24:	f7ff ff6d 	bl	b6d02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6e28:	b948      	cbnz	r0, b6e3e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6e2a:	68b8      	ldr	r0, [r7, #8]
   b6e2c:	6803      	ldr	r3, [r0, #0]
   b6e2e:	699f      	ldr	r7, [r3, #24]
   b6e30:	462a      	mov	r2, r5
   b6e32:	4633      	mov	r3, r6
   b6e34:	4621      	mov	r1, r4
   b6e36:	46bc      	mov	ip, r7
   b6e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6e3c:	4760      	bx	ip
   b6e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6e42 <_ZNSt9type_infoD1Ev>:
   b6e42:	4770      	bx	lr

000b6e44 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6e44:	2000      	movs	r0, #0
   b6e46:	4770      	bx	lr

000b6e48 <_ZNKSt9type_infoeqERKS_>:
   b6e48:	4281      	cmp	r1, r0
   b6e4a:	b508      	push	{r3, lr}
   b6e4c:	d00e      	beq.n	b6e6c <_ZNKSt9type_infoeqERKS_+0x24>
   b6e4e:	6840      	ldr	r0, [r0, #4]
   b6e50:	7803      	ldrb	r3, [r0, #0]
   b6e52:	2b2a      	cmp	r3, #42	; 0x2a
   b6e54:	d00c      	beq.n	b6e70 <_ZNKSt9type_infoeqERKS_+0x28>
   b6e56:	6849      	ldr	r1, [r1, #4]
   b6e58:	780b      	ldrb	r3, [r1, #0]
   b6e5a:	2b2a      	cmp	r3, #42	; 0x2a
   b6e5c:	bf08      	it	eq
   b6e5e:	3101      	addeq	r1, #1
   b6e60:	f000 f884 	bl	b6f6c <strcmp>
   b6e64:	fab0 f080 	clz	r0, r0
   b6e68:	0940      	lsrs	r0, r0, #5
   b6e6a:	bd08      	pop	{r3, pc}
   b6e6c:	2001      	movs	r0, #1
   b6e6e:	e7fc      	b.n	b6e6a <_ZNKSt9type_infoeqERKS_+0x22>
   b6e70:	2000      	movs	r0, #0
   b6e72:	e7fa      	b.n	b6e6a <_ZNKSt9type_infoeqERKS_+0x22>

000b6e74 <__cxa_atexit>:
   b6e74:	b510      	push	{r4, lr}
   b6e76:	4c05      	ldr	r4, [pc, #20]	; (b6e8c <__cxa_atexit+0x18>)
   b6e78:	4613      	mov	r3, r2
   b6e7a:	b12c      	cbz	r4, b6e88 <__cxa_atexit+0x14>
   b6e7c:	460a      	mov	r2, r1
   b6e7e:	4601      	mov	r1, r0
   b6e80:	2002      	movs	r0, #2
   b6e82:	f3af 8000 	nop.w
   b6e86:	bd10      	pop	{r4, pc}
   b6e88:	4620      	mov	r0, r4
   b6e8a:	e7fc      	b.n	b6e86 <__cxa_atexit+0x12>
   b6e8c:	00000000 	.word	0x00000000

000b6e90 <memcmp>:
   b6e90:	b510      	push	{r4, lr}
   b6e92:	3901      	subs	r1, #1
   b6e94:	4402      	add	r2, r0
   b6e96:	4290      	cmp	r0, r2
   b6e98:	d101      	bne.n	b6e9e <memcmp+0xe>
   b6e9a:	2000      	movs	r0, #0
   b6e9c:	e005      	b.n	b6eaa <memcmp+0x1a>
   b6e9e:	7803      	ldrb	r3, [r0, #0]
   b6ea0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6ea4:	42a3      	cmp	r3, r4
   b6ea6:	d001      	beq.n	b6eac <memcmp+0x1c>
   b6ea8:	1b18      	subs	r0, r3, r4
   b6eaa:	bd10      	pop	{r4, pc}
   b6eac:	3001      	adds	r0, #1
   b6eae:	e7f2      	b.n	b6e96 <memcmp+0x6>

000b6eb0 <memcpy>:
   b6eb0:	440a      	add	r2, r1
   b6eb2:	4291      	cmp	r1, r2
   b6eb4:	f100 33ff 	add.w	r3, r0, #4294967295
   b6eb8:	d100      	bne.n	b6ebc <memcpy+0xc>
   b6eba:	4770      	bx	lr
   b6ebc:	b510      	push	{r4, lr}
   b6ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6ec6:	4291      	cmp	r1, r2
   b6ec8:	d1f9      	bne.n	b6ebe <memcpy+0xe>
   b6eca:	bd10      	pop	{r4, pc}

000b6ecc <memmove>:
   b6ecc:	4288      	cmp	r0, r1
   b6ece:	b510      	push	{r4, lr}
   b6ed0:	eb01 0402 	add.w	r4, r1, r2
   b6ed4:	d902      	bls.n	b6edc <memmove+0x10>
   b6ed6:	4284      	cmp	r4, r0
   b6ed8:	4623      	mov	r3, r4
   b6eda:	d807      	bhi.n	b6eec <memmove+0x20>
   b6edc:	1e43      	subs	r3, r0, #1
   b6ede:	42a1      	cmp	r1, r4
   b6ee0:	d008      	beq.n	b6ef4 <memmove+0x28>
   b6ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6eea:	e7f8      	b.n	b6ede <memmove+0x12>
   b6eec:	4402      	add	r2, r0
   b6eee:	4601      	mov	r1, r0
   b6ef0:	428a      	cmp	r2, r1
   b6ef2:	d100      	bne.n	b6ef6 <memmove+0x2a>
   b6ef4:	bd10      	pop	{r4, pc}
   b6ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6efe:	e7f7      	b.n	b6ef0 <memmove+0x24>

000b6f00 <memset>:
   b6f00:	4402      	add	r2, r0
   b6f02:	4603      	mov	r3, r0
   b6f04:	4293      	cmp	r3, r2
   b6f06:	d100      	bne.n	b6f0a <memset+0xa>
   b6f08:	4770      	bx	lr
   b6f0a:	f803 1b01 	strb.w	r1, [r3], #1
   b6f0e:	e7f9      	b.n	b6f04 <memset+0x4>

000b6f10 <srand>:
   b6f10:	b538      	push	{r3, r4, r5, lr}
   b6f12:	4b10      	ldr	r3, [pc, #64]	; (b6f54 <srand+0x44>)
   b6f14:	681d      	ldr	r5, [r3, #0]
   b6f16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f18:	4604      	mov	r4, r0
   b6f1a:	b9b3      	cbnz	r3, b6f4a <srand+0x3a>
   b6f1c:	2018      	movs	r0, #24
   b6f1e:	f7fd ff7f 	bl	b4e20 <malloc>
   b6f22:	4602      	mov	r2, r0
   b6f24:	63a8      	str	r0, [r5, #56]	; 0x38
   b6f26:	b920      	cbnz	r0, b6f32 <srand+0x22>
   b6f28:	4b0b      	ldr	r3, [pc, #44]	; (b6f58 <srand+0x48>)
   b6f2a:	480c      	ldr	r0, [pc, #48]	; (b6f5c <srand+0x4c>)
   b6f2c:	2142      	movs	r1, #66	; 0x42
   b6f2e:	f7fd ff9f 	bl	b4e70 <__assert_func>
   b6f32:	490b      	ldr	r1, [pc, #44]	; (b6f60 <srand+0x50>)
   b6f34:	4b0b      	ldr	r3, [pc, #44]	; (b6f64 <srand+0x54>)
   b6f36:	e9c0 1300 	strd	r1, r3, [r0]
   b6f3a:	4b0b      	ldr	r3, [pc, #44]	; (b6f68 <srand+0x58>)
   b6f3c:	6083      	str	r3, [r0, #8]
   b6f3e:	230b      	movs	r3, #11
   b6f40:	8183      	strh	r3, [r0, #12]
   b6f42:	2100      	movs	r1, #0
   b6f44:	2001      	movs	r0, #1
   b6f46:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6f4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f4c:	2200      	movs	r2, #0
   b6f4e:	611c      	str	r4, [r3, #16]
   b6f50:	615a      	str	r2, [r3, #20]
   b6f52:	bd38      	pop	{r3, r4, r5, pc}
   b6f54:	2003e538 	.word	0x2003e538
   b6f58:	000b74d1 	.word	0x000b74d1
   b6f5c:	000b74e8 	.word	0x000b74e8
   b6f60:	abcd330e 	.word	0xabcd330e
   b6f64:	e66d1234 	.word	0xe66d1234
   b6f68:	0005deec 	.word	0x0005deec

000b6f6c <strcmp>:
   b6f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6f70:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6f74:	2a01      	cmp	r2, #1
   b6f76:	bf28      	it	cs
   b6f78:	429a      	cmpcs	r2, r3
   b6f7a:	d0f7      	beq.n	b6f6c <strcmp>
   b6f7c:	1ad0      	subs	r0, r2, r3
   b6f7e:	4770      	bx	lr

000b6f80 <strlen>:
   b6f80:	4603      	mov	r3, r0
   b6f82:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6f86:	2a00      	cmp	r2, #0
   b6f88:	d1fb      	bne.n	b6f82 <strlen+0x2>
   b6f8a:	1a18      	subs	r0, r3, r0
   b6f8c:	3801      	subs	r0, #1
   b6f8e:	4770      	bx	lr

000b6f90 <strnlen>:
   b6f90:	b510      	push	{r4, lr}
   b6f92:	4602      	mov	r2, r0
   b6f94:	4401      	add	r1, r0
   b6f96:	428a      	cmp	r2, r1
   b6f98:	4613      	mov	r3, r2
   b6f9a:	d003      	beq.n	b6fa4 <strnlen+0x14>
   b6f9c:	781c      	ldrb	r4, [r3, #0]
   b6f9e:	3201      	adds	r2, #1
   b6fa0:	2c00      	cmp	r4, #0
   b6fa2:	d1f8      	bne.n	b6f96 <strnlen+0x6>
   b6fa4:	1a18      	subs	r0, r3, r0
   b6fa6:	bd10      	pop	{r4, pc}

000b6fa8 <dynalib_user>:
   b6fa8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6fb8:	0000 0000 6552 6563 7669 6465 6420 7461     ....Received dat
   b6fc8:	2061 7266 6d6f 203a 3025 5832 253a 3230     a from: %02X:%02
   b6fd8:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b6fe8:	253a 3230 2058 000a 3a31 3020 2578 3230     :%02X ..1: 0x%02
   b6ff8:	2c58 3220 203a 7830 3025 5832 202c 3a33     X, 2: 0x%02X, 3:
   b7008:	3020 2578 3230 0a58 6200 7479 2065 6925      0x%02X..byte %i
   b7018:	202c 6f63 6f6c 2072 3025 5836 000a 7453     , color %06X..St
   b7028:	7261 6974 676e 7520 2070 4c42 2045 6f43     arting up BLE Co
   b7038:	6e6e 6365 6974 6e6f 0a20 4100 6772 6e6f     nnection ..Argon
   b7048:	4220 454c 4120 6464 6572 7373 203a 7325      BLE Address: %s
   b7058:	000a 4536 3034 3030 3130 422d 4135 2d33     ..6E400001-B5A3-
   b7068:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   b7078:	4344 4143 4539 3600 3445 3030 3030 2d32     DCCA9E.6E400002-
   b7088:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   b7098:	3035 3245 4434 4343 3941 0045 4536 3034     50E24DCCA9E.6E40
   b70a8:	3030 3330 422d 4135 2d33 3346 3339 452d     0003-B5A3-F393-E
   b70b8:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   b70c8:	7400 0078 7872 0000                         .tx.rx..

000b70d0 <CSWTCH.60>:
   b70d0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b70e0:	0050 0000                                   P...

000b70e4 <_ZTVN5spark13EthernetClassE>:
	...
   b70ec:	4eef 000b 4ee5 000b 4edb 000b 4ed1 000b     .N...N...N...N..
   b70fc:	4ec5 000b 4eb9 000b 69c9 000b 69d1 000b     .N...N...i...i..
   b710c:	4ead 000b 4ea5 000b 4e9b 000b 4e91 000b     .N...N...N...N..
   b711c:	6a01 000b 6977 6972 676e 622e 656c 5300     .j..wiring.ble.S
   b712c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b713c:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b714c:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b715c:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   b716c:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b717c:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b718c:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b719c:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b71ac:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b71bc:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   b71cc:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   b71dc:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   b71ec:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b71fc:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   b720c:	7369 6974 2e63 0000                         istic...

000b7214 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b721c:	5045 000b 50a9 000b 525d 000b 50d3 000b     EP...P..]R...P..
   b722c:	5049 000b                                   IP..

000b7230 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7238:	5041 000b 50b7 000b 5043 000b 50d9 000b     AP...P..CP...P..
   b7248:	5069 000b                                   iP..

000b724c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7254:	503f 000b 50c5 000b 5a71 000b 50df 000b     ?P...P..qZ...P..
   b7264:	5089 000b                                   .P..

000b7268 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7274:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b7286 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b7286:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b7296 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b7296:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b72a6:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b72b6:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b72c8 <_ZTV9IPAddress>:
	...
   b72d0:	65a9 000b 6599 000b 659b 000b               .e...e...e..

000b72dc <_ZTV9USBSerial>:
	...
   b72e4:	668d 000b 66f5 000b 66cb 000b 62f5 000b     .f...f...f...b..
   b72f4:	66bd 000b 668f 000b 669f 000b 66ef 000b     .f...f...f...f..
   b7304:	66af 000b 6689 000b                         .f...f..

000b730c <_ZTV11USARTSerial>:
	...
   b7314:	67a1 000b 680d 000b 67e5 000b 62f5 000b     .g...h...g...b..
   b7324:	67b5 000b 67d1 000b 67c3 000b 67df 000b     .g...g...g...g..
   b7334:	67a3 000b 67a7 000b                         .g...g..

000b733c <_ZTV7TwoWire>:
	...
   b7344:	689d 000b 68e7 000b 68bf 000b 689f 000b     .h...h...h...h..
   b7354:	68c7 000b 68cf 000b 68d7 000b 68df 000b     .h...h...h...h..

000b7364 <_ZTVN5spark9WiFiClassE>:
	...
   b736c:	696b 000b 6961 000b 6957 000b 6919 000b     ki..ai..Wi...i..
   b737c:	6401 000b 694b 000b 69c9 000b 69d1 000b     .d..Ki...i...i..
   b738c:	693f 000b 6937 000b 692d 000b 6923 000b     ?i..7i..-i..#i..
   b739c:	6a01 000b                                   .j..

000b73a0 <_ZTVN5spark12NetworkClassE>:
	...
   b73a8:	6989 000b 6993 000b 699d 000b 69a7 000b     .i...i...i...i..
   b73b8:	69b1 000b 69bd 000b 69c9 000b 69d1 000b     .i...i...i...i..
   b73c8:	69d9 000b 69e5 000b 69ed 000b 69f7 000b     .i...i...i...i..
   b73d8:	6a01 000b                                   .j..

000b73dc <_ZSt7nothrow>:
	...

000b73dd <_ZTSSt19_Sp_make_shared_tag>:
   b73dd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b73ed:	6572 5f64 6174 0067 0000                     red_tag....

000b73f8 <_ZTISt19_Sp_make_shared_tag>:
   b73f8:	7438 000b 73dd 000b                         8t...s..

000b7400 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7400:	7498 000b 740c 000b 74bc 000b               .t...t...t..

000b740c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b740c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b741c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b742c:	0045 0000                                   E...

000b7430 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7430:	0000 0000 7400 000b 6c9d 000b 6cb1 000b     .....t...l...l..
   b7440:	6e45 000b 6e45 000b 6d1b 000b 6c5d 000b     En..En...m..]l..
   b7450:	6d03 000b 6cc5 000b 6c8f 000b               .m...l...l..

000b745c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b745c:	7498 000b 7468 000b 7400 000b               .t..ht...t..

000b7468 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7468:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7478:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7488:	666e 456f 0000 0000                         nfoE....

000b7490 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7490:	0000 0000 745c 000b 6d45 000b 6d59 000b     ....\t..Em..Ym..
   b74a0:	6e45 000b 6e45 000b 6d1b 000b 6c5d 000b     En..En...m..]l..
   b74b0:	6e19 000b 6da5 000b 6d6d 000b               .n...m..mm..

000b74bc <_ZTISt9type_info>:
   b74bc:	7438 000b 74c4 000b                         8t...t..

000b74c4 <_ZTSSt9type_info>:
   b74c4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b74d4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b74e4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b74f4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7504:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7514:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7524:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7534:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7544:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7554:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7565 <link_const_variable_data_end>:
   b7565:	00          	.byte	0x00
	...

000b7568 <link_constructors_location>:
   b7568:	000b4391 	.word	0x000b4391
   b756c:	000b4999 	.word	0x000b4999
   b7570:	000b4ef9 	.word	0x000b4ef9
   b7574:	000b4f21 	.word	0x000b4f21
   b7578:	000b62cd 	.word	0x000b62cd
   b757c:	000b640d 	.word	0x000b640d
   b7580:	000b641d 	.word	0x000b641d
   b7584:	000b6445 	.word	0x000b6445
   b7588:	000b6975 	.word	0x000b6975
   b758c:	000b6ad9 	.word	0x000b6ad9

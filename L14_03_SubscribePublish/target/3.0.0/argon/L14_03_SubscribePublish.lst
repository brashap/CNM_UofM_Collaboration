
c:/Users/IoT_Instructor/Documents/IoT/Cohort5/L14_03_SubscribePublish/target/3.0.0/argon/L14_03_SubscribePublish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003044  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7060  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e484  000d7064  0001e484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000304  2003e4ec  2003e4ec  0002e4ec  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d70cc  000d70cc  000270cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d70f4  000d70f4  000270f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a44c8  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019594  00000000  00000000  001cb5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000360ba  00000000  00000000  001e4b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002db8  00000000  00000000  0021ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009698  00000000  00000000  0021d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b753  00000000  00000000  0022705e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000425ad  00000000  00000000  002627b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00127ec0  00000000  00000000  002a4d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008088  00000000  00000000  003ccc20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fafd 	bl	d662c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb1f 	bl	d667c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e484 	.word	0x2003e484
   d4048:	000d7064 	.word	0x000d7064
   d404c:	2003e4ec 	.word	0x2003e4ec
   d4050:	2003e4ec 	.word	0x2003e4ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f98d 	bl	d537c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7030 	.word	0x000d7030
   d407c:	000d7058 	.word	0x000d7058

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b85c 	b.w	d413c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8e5 	bl	d4254 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b937 	b.w	d5300 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bf85 	b.w	d4fa0 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bf83 	b.w	d4fa0 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bf89 	b.w	d4fb0 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fed6 	bl	d4e58 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4be9 	.word	0x000d4be9

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c4:	4770      	bx	lr
	...

000d40c8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40c8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ca:	6984      	ldr	r4, [r0, #24]
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN9TCPClientD1Ev+0x30>)
   d40ce:	6003      	str	r3, [r0, #0]
   d40d0:	4605      	mov	r5, r0
   d40d2:	b17c      	cbz	r4, d40f4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	3b01      	subs	r3, #1
   d40d8:	6063      	str	r3, [r4, #4]
   d40da:	b95b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	4620      	mov	r0, r4
   d40e0:	689b      	ldr	r3, [r3, #8]
   d40e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e4:	68a3      	ldr	r3, [r4, #8]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	60a3      	str	r3, [r4, #8]
   d40ea:	b91b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	68db      	ldr	r3, [r3, #12]
   d40f2:	4798      	blx	r3
   d40f4:	4628      	mov	r0, r5
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	000d6d7c 	.word	0x000d6d7c

000d40fc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40fc:	b510      	push	{r4, lr}
   d40fe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4100:	6800      	ldr	r0, [r0, #0]
   d4102:	b108      	cbz	r0, d4108 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4104:	f000 ff54 	bl	d4fb0 <free>
class SystemClass {
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d410c:	b40e      	push	{r1, r2, r3}
   d410e:	b503      	push	{r0, r1, lr}
   d4110:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4112:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4114:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4118:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d411a:	f001 f86e 	bl	d51fa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d411e:	b002      	add	sp, #8
   d4120:	f85d eb04 	ldr.w	lr, [sp], #4
   d4124:	b003      	add	sp, #12
   d4126:	4770      	bx	lr

000d4128 <_ZN9TCPClientD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f7ff ffcc 	bl	d40c8 <_ZN9TCPClientD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	211c      	movs	r1, #28
   d4134:	f001 ff95 	bl	d6062 <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <setup>:
float value1;
int LEDValue;

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   d413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.begin(9600);
   d4140:	f001 fa3c 	bl	d55bc <_Z16_fetch_usbserialv>
   d4144:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4148:	f001 fa28 	bl	d559c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d414c:	2000      	movs	r0, #0
   d414e:	f000 fd5b 	bl	d4c08 <hal_timer_millis>
   d4152:	f04f 0900 	mov.w	r9, #0
   d4156:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4158:	f643 2697 	movw	r6, #14999	; 0x3a97
   d415c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d415e:	2000      	movs	r0, #0
   d4160:	f000 fd52 	bl	d4c08 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4164:	ebb0 0408 	subs.w	r4, r0, r8
   d4168:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d416c:	42af      	cmp	r7, r5
   d416e:	bf08      	it	eq
   d4170:	42a6      	cmpeq	r6, r4
   d4172:	d307      	bcc.n	d4184 <setup+0x48>
  waitFor(Serial.isConnected, 15000); //wait for Serial Monitor to startup
   d4174:	f001 fa22 	bl	d55bc <_Z16_fetch_usbserialv>
   d4178:	f001 fa14 	bl	d55a4 <_ZN9USBSerial11isConnectedEv>
   d417c:	b910      	cbnz	r0, d4184 <setup+0x48>
            spark_process();
   d417e:	f000 feff 	bl	d4f80 <spark_process>
        while (_while() && !_condition()) {
   d4182:	e7ec      	b.n	d415e <setup+0x22>
   d4184:	f001 fa1a 	bl	d55bc <_Z16_fetch_usbserialv>
   d4188:	f001 fa0c 	bl	d55a4 <_ZN9USBSerial11isConnectedEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d418c:	4c0e      	ldr	r4, [pc, #56]	; (d41c8 <setup+0x8c>)
  pinMode(D7,OUTPUT);
  //Connect to WiFi without going to Particle Cloud
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   d418e:	4d0f      	ldr	r5, [pc, #60]	; (d41cc <setup+0x90>)
  pinMode(D7,OUTPUT);
   d4190:	2101      	movs	r1, #1
   d4192:	2007      	movs	r0, #7
   d4194:	f001 fef6 	bl	d5f84 <pinMode>
   d4198:	2300      	movs	r3, #0
   d419a:	6860      	ldr	r0, [r4, #4]
   d419c:	461a      	mov	r2, r3
   d419e:	4619      	mov	r1, r3
   d41a0:	f000 fe8e 	bl	d4ec0 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d41a4:	2200      	movs	r2, #0
   d41a6:	6860      	ldr	r0, [r4, #4]
   d41a8:	4611      	mov	r1, r2
   d41aa:	f000 fe91 	bl	d4ed0 <network_connecting>
  while(WiFi.connecting()) {
   d41ae:	b128      	cbz	r0, d41bc <setup+0x80>
    Serial.printf(".");
   d41b0:	f001 fa04 	bl	d55bc <_Z16_fetch_usbserialv>
   d41b4:	4629      	mov	r1, r5
   d41b6:	f7ff ffa9 	bl	d410c <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   d41ba:	e7f3      	b.n	d41a4 <setup+0x68>
  }

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&LEDfeed);
}
   d41bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  mqtt.subscribe(&LEDfeed);
   d41c0:	4903      	ldr	r1, [pc, #12]	; (d41d0 <setup+0x94>)
   d41c2:	4804      	ldr	r0, [pc, #16]	; (d41d4 <setup+0x98>)
   d41c4:	f000 ba80 	b.w	d46c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d41c8:	2003e7b8 	.word	0x2003e7b8
   d41cc:	000d6b8b 	.word	0x000d6b8b
   d41d0:	2003e4f4 	.word	0x2003e4f4
   d41d4:	2003e55c 	.word	0x2003e55c

000d41d8 <_Z12MQTT_connectv>:
    }
  }
}

// Function to connect and reconnect as necessary to the MQTT server.
void MQTT_connect() {
   d41d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d41dc:	4818      	ldr	r0, [pc, #96]	; (d4240 <_Z12MQTT_connectv+0x68>)
   d41de:	f000 f919 	bl	d4414 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d41e2:	bb58      	cbnz	r0, d423c <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d41e4:	f001 f9ea 	bl	d55bc <_Z16_fetch_usbserialv>
   d41e8:	4916      	ldr	r1, [pc, #88]	; (d4244 <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d41ea:	4e15      	ldr	r6, [pc, #84]	; (d4240 <_Z12MQTT_connectv+0x68>)
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   d41ec:	f8df 8060 	ldr.w	r8, [pc, #96]	; d4250 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   d41f0:	4f15      	ldr	r7, [pc, #84]	; (d4248 <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   d41f2:	f000 ffc7 	bl	d5184 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d41f6:	4812      	ldr	r0, [pc, #72]	; (d4240 <_Z12MQTT_connectv+0x68>)
   d41f8:	f000 fc27 	bl	d4a4a <_ZN13Adafruit_MQTT7connectEv>
   d41fc:	4604      	mov	r4, r0
   d41fe:	b1c0      	cbz	r0, d4232 <_Z12MQTT_connectv+0x5a>
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   d4200:	f001 f9dc 	bl	d55bc <_Z16_fetch_usbserialv>
   d4204:	4621      	mov	r1, r4
   d4206:	4605      	mov	r5, r0
   d4208:	4630      	mov	r0, r6
   d420a:	f000 fa3b 	bl	d4684 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d420e:	4641      	mov	r1, r8
   d4210:	4602      	mov	r2, r0
   d4212:	4628      	mov	r0, r5
   d4214:	f7ff ff7a 	bl	d410c <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   d4218:	f001 f9d0 	bl	d55bc <_Z16_fetch_usbserialv>
   d421c:	4639      	mov	r1, r7
   d421e:	f7ff ff75 	bl	d410c <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   d4222:	4630      	mov	r0, r6
   d4224:	f000 fa3c 	bl	d46a0 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d4228:	f241 3088 	movw	r0, #5000	; 0x1388
   d422c:	f001 f82e 	bl	d528c <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d4230:	e7e1      	b.n	d41f6 <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   d4232:	f001 f9c3 	bl	d55bc <_Z16_fetch_usbserialv>
   d4236:	4905      	ldr	r1, [pc, #20]	; (d424c <_Z12MQTT_connectv+0x74>)
   d4238:	f7ff ff68 	bl	d410c <_ZN5Print6printfEPKcz>
   d423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4240:	2003e55c 	.word	0x2003e55c
   d4244:	000d68f8 	.word	0x000d68f8
   d4248:	000d6913 	.word	0x000d6913
   d424c:	000d693c 	.word	0x000d693c
   d4250:	000d690f 	.word	0x000d690f

000d4254 <loop>:
void loop() {
   d4254:	b570      	push	{r4, r5, r6, lr}
  if ((millis()-last)>120000) {
   d4256:	4c32      	ldr	r4, [pc, #200]	; (d4320 <loop+0xcc>)
  MQTT_connect();
   d4258:	f7ff ffbe 	bl	d41d8 <_Z12MQTT_connectv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d425c:	f000 fccc 	bl	d4bf8 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-last)>120000) {
   d4260:	6822      	ldr	r2, [r4, #0]
   d4262:	1a80      	subs	r0, r0, r2
   d4264:	4a2f      	ldr	r2, [pc, #188]	; (d4324 <loop+0xd0>)
   d4266:	4290      	cmp	r0, r2
   d4268:	d914      	bls.n	d4294 <loop+0x40>
      Serial.printf("Pinging MQTT \n");
   d426a:	f001 f9a7 	bl	d55bc <_Z16_fetch_usbserialv>
   d426e:	492e      	ldr	r1, [pc, #184]	; (d4328 <loop+0xd4>)
   d4270:	f7ff ff4c 	bl	d410c <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   d4274:	482d      	ldr	r0, [pc, #180]	; (d432c <loop+0xd8>)
   d4276:	2101      	movs	r1, #1
   d4278:	f000 fab8 	bl	d47ec <_ZN13Adafruit_MQTT4pingEh>
   d427c:	b938      	cbnz	r0, d428e <loop+0x3a>
        Serial.printf("Disconnecting \n");
   d427e:	f001 f99d 	bl	d55bc <_Z16_fetch_usbserialv>
   d4282:	492b      	ldr	r1, [pc, #172]	; (d4330 <loop+0xdc>)
   d4284:	f7ff ff42 	bl	d410c <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   d4288:	4828      	ldr	r0, [pc, #160]	; (d432c <loop+0xd8>)
   d428a:	f000 fa09 	bl	d46a0 <_ZN13Adafruit_MQTT10disconnectEv>
   d428e:	f000 fcb3 	bl	d4bf8 <HAL_Timer_Get_Milli_Seconds>
      last = millis();
   d4292:	6020      	str	r0, [r4, #0]
  value1 = random(0,100);
   d4294:	2164      	movs	r1, #100	; 0x64
   d4296:	2000      	movs	r0, #0
   d4298:	f001 fa81 	bl	d579e <_Z6randomii>
   d429c:	ee07 0a90 	vmov	s15, r0
   d42a0:	4e24      	ldr	r6, [pc, #144]	; (d4334 <loop+0xe0>)
  if((millis()-lastTime > 6000)) {
   d42a2:	4d25      	ldr	r5, [pc, #148]	; (d4338 <loop+0xe4>)
  value1 = random(0,100);
   d42a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42a8:	edc6 7a00 	vstr	s15, [r6]
   d42ac:	f000 fca4 	bl	d4bf8 <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime > 6000)) {
   d42b0:	682a      	ldr	r2, [r5, #0]
   d42b2:	1a80      	subs	r0, r0, r2
   d42b4:	f241 7270 	movw	r2, #6000	; 0x1770
   d42b8:	4290      	cmp	r0, r2
   d42ba:	d91b      	bls.n	d42f4 <loop+0xa0>
    if(mqtt.Update()) {
   d42bc:	481b      	ldr	r0, [pc, #108]	; (d432c <loop+0xd8>)
   d42be:	f000 f927 	bl	d4510 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d42c2:	b1a0      	cbz	r0, d42ee <loop+0x9a>
      randomFeed.publish(value1);
   d42c4:	6830      	ldr	r0, [r6, #0]
   d42c6:	f002 f947 	bl	d6558 <__aeabi_f2d>
   d42ca:	ec41 0b10 	vmov	d0, r0, r1
   d42ce:	2102      	movs	r1, #2
   d42d0:	481a      	ldr	r0, [pc, #104]	; (d433c <loop+0xe8>)
   d42d2:	f000 fc17 	bl	d4b04 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      Serial.printf("Publishing %0.2f \n",value1); 
   d42d6:	f001 f971 	bl	d55bc <_Z16_fetch_usbserialv>
   d42da:	4604      	mov	r4, r0
   d42dc:	6830      	ldr	r0, [r6, #0]
   d42de:	f002 f93b 	bl	d6558 <__aeabi_f2d>
   d42e2:	4602      	mov	r2, r0
   d42e4:	460b      	mov	r3, r1
   d42e6:	4620      	mov	r0, r4
   d42e8:	4915      	ldr	r1, [pc, #84]	; (d4340 <loop+0xec>)
   d42ea:	f7ff ff0f 	bl	d410c <_ZN5Print6printfEPKcz>
   d42ee:	f000 fc83 	bl	d4bf8 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   d42f2:	6028      	str	r0, [r5, #0]
  while ((subscription = mqtt.readSubscription(1000))) {
   d42f4:	4d0d      	ldr	r5, [pc, #52]	; (d432c <loop+0xd8>)
    if (subscription == &LEDfeed) {
   d42f6:	4c13      	ldr	r4, [pc, #76]	; (d4344 <loop+0xf0>)
  while ((subscription = mqtt.readSubscription(1000))) {
   d42f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d42fc:	4628      	mov	r0, r5
   d42fe:	f000 f9fe 	bl	d46fe <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d4302:	b158      	cbz	r0, d431c <loop+0xc8>
    if (subscription == &LEDfeed) {
   d4304:	42a0      	cmp	r0, r4
   d4306:	d1f7      	bne.n	d42f8 <loop+0xa4>
      LEDValue = atoi((char *)LEDfeed.lastread);
   d4308:	1d60      	adds	r0, r4, #5
   d430a:	f002 f97d 	bl	d6608 <atoi>
   d430e:	4b0e      	ldr	r3, [pc, #56]	; (d4348 <loop+0xf4>)
      digitalWrite(D7,LEDValue);
   d4310:	b2c1      	uxtb	r1, r0
      LEDValue = atoi((char *)LEDfeed.lastread);
   d4312:	6018      	str	r0, [r3, #0]
      digitalWrite(D7,LEDValue);
   d4314:	2007      	movs	r0, #7
   d4316:	f001 fe46 	bl	d5fa6 <digitalWrite>
   d431a:	e7ed      	b.n	d42f8 <loop+0xa4>
}
   d431c:	bd70      	pop	{r4, r5, r6, pc}
   d431e:	bf00      	nop
   d4320:	2003e554 	.word	0x2003e554
   d4324:	0001d4c0 	.word	0x0001d4c0
   d4328:	000d694d 	.word	0x000d694d
   d432c:	2003e55c 	.word	0x2003e55c
   d4330:	000d695c 	.word	0x000d695c
   d4334:	2003e63c 	.word	0x2003e63c
   d4338:	2003e558 	.word	0x2003e558
   d433c:	2003e630 	.word	0x2003e630
   d4340:	000d696c 	.word	0x000d696c
   d4344:	2003e4f4 	.word	0x2003e4f4
   d4348:	2003e4f0 	.word	0x2003e4f0

000d434c <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d434c:	b510      	push	{r4, lr}
   d434e:	21d4      	movs	r1, #212	; 0xd4
   d4350:	4604      	mov	r4, r0
   d4352:	f001 fe86 	bl	d6062 <_ZdlPvj>
   d4356:	4620      	mov	r0, r4
   d4358:	bd10      	pop	{r4, pc}
	...

000d435c <_GLOBAL__sub_I_TheClient>:
   d435c:	b573      	push	{r0, r1, r4, r5, r6, lr}
TCPClient TheClient; 
   d435e:	4e1e      	ldr	r6, [pc, #120]	; (d43d8 <_GLOBAL__sub_I_TheClient+0x7c>)
   d4360:	4d1e      	ldr	r5, [pc, #120]	; (d43dc <_GLOBAL__sub_I_TheClient+0x80>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4362:	4c1f      	ldr	r4, [pc, #124]	; (d43e0 <_GLOBAL__sub_I_TheClient+0x84>)
   d4364:	4630      	mov	r0, r6
   d4366:	f001 fc4f 	bl	d5c08 <_ZN9TCPClientC1Ev>
   d436a:	462a      	mov	r2, r5
   d436c:	491d      	ldr	r1, [pc, #116]	; (d43e4 <_GLOBAL__sub_I_TheClient+0x88>)
   d436e:	4630      	mov	r0, r6
   d4370:	f001 fe72 	bl	d6058 <__aeabi_atexit>
   d4374:	4b1c      	ldr	r3, [pc, #112]	; (d43e8 <_GLOBAL__sub_I_TheClient+0x8c>)
   d4376:	9300      	str	r3, [sp, #0]
   d4378:	491c      	ldr	r1, [pc, #112]	; (d43ec <_GLOBAL__sub_I_TheClient+0x90>)
   d437a:	4b1d      	ldr	r3, [pc, #116]	; (d43f0 <_GLOBAL__sub_I_TheClient+0x94>)
   d437c:	f240 725b 	movw	r2, #1883	; 0x75b
   d4380:	4620      	mov	r0, r4
   d4382:	f000 f8f9 	bl	d4578 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4386:	4b1b      	ldr	r3, [pc, #108]	; (d43f4 <_GLOBAL__sub_I_TheClient+0x98>)
   d4388:	6023      	str	r3, [r4, #0]
   d438a:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d438e:	462a      	mov	r2, r5
   d4390:	4919      	ldr	r1, [pc, #100]	; (d43f8 <_GLOBAL__sub_I_TheClient+0x9c>)
   d4392:	4620      	mov	r0, r4
   d4394:	f001 fe60 	bl	d6058 <__aeabi_atexit>
Adafruit_MQTT_Publish randomFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/randomNum");
   d4398:	4621      	mov	r1, r4
   d439a:	4a18      	ldr	r2, [pc, #96]	; (d43fc <_GLOBAL__sub_I_TheClient+0xa0>)
   d439c:	4818      	ldr	r0, [pc, #96]	; (d4400 <_GLOBAL__sub_I_TheClient+0xa4>)
   d439e:	2300      	movs	r3, #0
   d43a0:	f000 fbaa 	bl	d4af8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe LEDfeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ColorSend");
   d43a4:	4621      	mov	r1, r4
   d43a6:	4a17      	ldr	r2, [pc, #92]	; (d4404 <_GLOBAL__sub_I_TheClient+0xa8>)
              error_(SYSTEM_ERROR_NONE) {
   d43a8:	4c17      	ldr	r4, [pc, #92]	; (d4408 <_GLOBAL__sub_I_TheClient+0xac>)
   d43aa:	4818      	ldr	r0, [pc, #96]	; (d440c <_GLOBAL__sub_I_TheClient+0xb0>)
   d43ac:	2300      	movs	r3, #0
   d43ae:	f000 fbc5 	bl	d4b3c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d43b2:	2300      	movs	r3, #0
   d43b4:	6023      	str	r3, [r4, #0]
   d43b6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d43b8:	71a3      	strb	r3, [r4, #6]
   d43ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d43be:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d43c0:	2002      	movs	r0, #2
   d43c2:	f000 fd59 	bl	d4e78 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d43c6:	4912      	ldr	r1, [pc, #72]	; (d4410 <_GLOBAL__sub_I_TheClient+0xb4>)
   d43c8:	462a      	mov	r2, r5
   d43ca:	4620      	mov	r0, r4
   d43cc:	b002      	add	sp, #8
   d43ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   d43d2:	f001 be41 	b.w	d6058 <__aeabi_atexit>
   d43d6:	bf00      	nop
   d43d8:	2003e538 	.word	0x2003e538
   d43dc:	2003e4ec 	.word	0x2003e4ec
   d43e0:	2003e55c 	.word	0x2003e55c
   d43e4:	000d40c9 	.word	0x000d40c9
   d43e8:	000d6996 	.word	0x000d6996
   d43ec:	000d6986 	.word	0x000d6986
   d43f0:	000d697f 	.word	0x000d697f
   d43f4:	000d69f0 	.word	0x000d69f0
   d43f8:	000d40c5 	.word	0x000d40c5
   d43fc:	000d69b7 	.word	0x000d69b7
   d4400:	2003e630 	.word	0x2003e630
   d4404:	000d69ce 	.word	0x000d69ce
   d4408:	2003e52c 	.word	0x2003e52c
   d440c:	2003e4f4 	.word	0x2003e4f4
   d4410:	000d40fd 	.word	0x000d40fd

000d4414 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4414:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4416:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d441a:	6803      	ldr	r3, [r0, #0]
   d441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d441e:	4798      	blx	r3
}
   d4420:	3800      	subs	r0, #0
   d4422:	bf18      	it	ne
   d4424:	2001      	movne	r0, #1
   d4426:	bd08      	pop	{r3, pc}

000d4428 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d442a:	4606      	mov	r6, r0
   d442c:	460f      	mov	r7, r1
   d442e:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4430:	b1c4      	cbz	r4, d4464 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4432:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4436:	6803      	ldr	r3, [r0, #0]
   d4438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d443a:	4798      	blx	r3
   d443c:	b908      	cbnz	r0, d4442 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d443e:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d4440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d4442:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4446:	2cfa      	cmp	r4, #250	; 0xfa
   d4448:	6803      	ldr	r3, [r0, #0]
   d444a:	4625      	mov	r5, r4
   d444c:	bfa8      	it	ge
   d444e:	25fa      	movge	r5, #250	; 0xfa
   d4450:	68db      	ldr	r3, [r3, #12]
   d4452:	462a      	mov	r2, r5
   d4454:	4639      	mov	r1, r7
   d4456:	4798      	blx	r3
   d4458:	b283      	uxth	r3, r0
      len -= ret;
   d445a:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d445c:	429d      	cmp	r5, r3
      len -= ret;
   d445e:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d4460:	d0e6      	beq.n	d4430 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4462:	e7ec      	b.n	d443e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d4464:	2001      	movs	r0, #1
   d4466:	e7eb      	b.n	d4440 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d4468 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d4468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d446c:	4606      	mov	r6, r0
   d446e:	4688      	mov	r8, r1
   d4470:	4691      	mov	r9, r2
   d4472:	461f      	mov	r7, r3
   d4474:	461d      	mov	r5, r3
  uint16_t len = 0;
   d4476:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d4478:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d447c:	6803      	ldr	r3, [r0, #0]
   d447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4480:	4798      	blx	r3
   d4482:	b1d0      	cbz	r0, d44ba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4484:	2d00      	cmp	r5, #0
   d4486:	db18      	blt.n	d44ba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d4488:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d448c:	6803      	ldr	r3, [r0, #0]
   d448e:	691b      	ldr	r3, [r3, #16]
   d4490:	4798      	blx	r3
   d4492:	b160      	cbz	r0, d44ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d4494:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4498:	6803      	ldr	r3, [r0, #0]
   d449a:	695b      	ldr	r3, [r3, #20]
   d449c:	4798      	blx	r3
   d449e:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d44a2:	3401      	adds	r4, #1
   d44a4:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d44a6:	454c      	cmp	r4, r9
   d44a8:	d007      	beq.n	d44ba <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d44aa:	463d      	mov	r5, r7
   d44ac:	e7ec      	b.n	d4488 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d44ae:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d44b0:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d44b2:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d44b4:	f000 feea 	bl	d528c <delay>
  while (client->connected() && (timeout >= 0)) {
   d44b8:	e7de      	b.n	d4478 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d44ba:	4620      	mov	r0, r4
   d44bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d44c0 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d44c0:	b570      	push	{r4, r5, r6, lr}
   d44c2:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d44c4:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d44c8:	2296      	movs	r2, #150	; 0x96
   d44ca:	2100      	movs	r1, #0
   d44cc:	4628      	mov	r0, r5
   d44ce:	f002 f8d5 	bl	d667c <memset>
  strcpy((char *)buffer, servername);
   d44d2:	6861      	ldr	r1, [r4, #4]
   d44d4:	4628      	mov	r0, r5
   d44d6:	f002 f93b 	bl	d6750 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d44da:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d44de:	8922      	ldrh	r2, [r4, #8]
   d44e0:	6803      	ldr	r3, [r0, #0]
   d44e2:	4629      	mov	r1, r5
   d44e4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d44e6:	2300      	movs	r3, #0
   d44e8:	47b0      	blx	r6
}
   d44ea:	3800      	subs	r0, #0
   d44ec:	bf18      	it	ne
   d44ee:	2001      	movne	r0, #1
   d44f0:	bd70      	pop	{r4, r5, r6, pc}

000d44f2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d44f2:	b510      	push	{r4, lr}
   d44f4:	4604      	mov	r4, r0
  if (client->connected()) {
   d44f6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d44fa:	6803      	ldr	r3, [r0, #0]
   d44fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44fe:	4798      	blx	r3
   d4500:	b120      	cbz	r0, d450c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4502:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4506:	6803      	ldr	r3, [r0, #0]
   d4508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d450a:	4798      	blx	r3
}
   d450c:	2001      	movs	r0, #1
   d450e:	bd10      	pop	{r4, pc}

000d4510 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   d4510:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   d4512:	6803      	ldr	r3, [r0, #0]
   d4514:	689b      	ldr	r3, [r3, #8]
{
   d4516:	4604      	mov	r4, r0
    if (!connected())
   d4518:	4798      	blx	r3
   d451a:	b9c8      	cbnz	r0, d4550 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d451c:	4620      	mov	r0, r4
   d451e:	f000 fa94 	bl	d4a4a <_ZN13Adafruit_MQTT7connectEv>
   d4522:	2504      	movs	r5, #4
   d4524:	b170      	cbz	r0, d4544 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d4526:	3d01      	subs	r5, #1
   d4528:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d452c:	d00a      	beq.n	d4544 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   d452e:	4620      	mov	r0, r4
   d4530:	f000 f8b6 	bl	d46a0 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4534:	f241 3088 	movw	r0, #5000	; 0x1388
   d4538:	f000 fea8 	bl	d528c <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d453c:	4620      	mov	r0, r4
   d453e:	f000 fa84 	bl	d4a4a <_ZN13Adafruit_MQTT7connectEv>
   d4542:	e7ef      	b.n	d4524 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   d4544:	6823      	ldr	r3, [r4, #0]
   d4546:	4620      	mov	r0, r4
   d4548:	689b      	ldr	r3, [r3, #8]
}
   d454a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   d454e:	4718      	bx	r3
}
   d4550:	bd70      	pop	{r4, r5, r6, pc}

000d4552 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4552:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4554:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4556:	4608      	mov	r0, r1
   d4558:	9101      	str	r1, [sp, #4]
   d455a:	f002 f901 	bl	d6760 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d455e:	1203      	asrs	r3, r0, #8
   d4560:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4562:	7060      	strb	r0, [r4, #1]
   d4564:	b285      	uxth	r5, r0
   d4566:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d4568:	9901      	ldr	r1, [sp, #4]
   d456a:	462a      	mov	r2, r5
   d456c:	4620      	mov	r0, r4
   d456e:	f002 f921 	bl	d67b4 <strncpy>
  return p+len;
}
   d4572:	1960      	adds	r0, r4, r5
   d4574:	b003      	add	sp, #12
   d4576:	bd30      	pop	{r4, r5, pc}

000d4578 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d4578:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d457a:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d457c:	4a0a      	ldr	r2, [pc, #40]	; (d45a8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d457e:	4d0b      	ldr	r5, [pc, #44]	; (d45ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d4580:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d4584:	9b03      	ldr	r3, [sp, #12]
   d4586:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4588:	2300      	movs	r3, #0
  servername = server;
   d458a:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d458e:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d4592:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d4596:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d459a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d459e:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d45a0:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d45a4:	bd30      	pop	{r4, r5, pc}
   d45a6:	bf00      	nop
   d45a8:	000d695b 	.word	0x000d695b
   d45ac:	000d6bfc 	.word	0x000d6bfc

000d45b0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d45b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45b4:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d45b6:	6802      	ldr	r2, [r0, #0]
   d45b8:	b21b      	sxth	r3, r3
   d45ba:	6997      	ldr	r7, [r2, #24]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d45c0:	4605      	mov	r5, r0
   d45c2:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   d45c4:	47b8      	blx	r7
  if (rlen != 1) return 0;
   d45c6:	b2c7      	uxtb	r7, r0
   d45c8:	2f01      	cmp	r7, #1
   d45ca:	9b01      	ldr	r3, [sp, #4]
   d45cc:	d003      	beq.n	d45d6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   d45ce:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   d45d0:	b003      	add	sp, #12
   d45d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   d45d6:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   d45da:	f104 0a04 	add.w	sl, r4, #4
  uint32_t value = 0;
   d45de:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   d45e2:	682a      	ldr	r2, [r5, #0]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	f8d2 b018 	ldr.w	fp, [r2, #24]
   d45ea:	4641      	mov	r1, r8
   d45ec:	2201      	movs	r2, #1
   d45ee:	4628      	mov	r0, r5
   d45f0:	47d8      	blx	fp
    if (rlen != 1) return 0;
   d45f2:	b2c0      	uxtb	r0, r0
   d45f4:	2801      	cmp	r0, #1
   d45f6:	d1ea      	bne.n	d45ce <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    if (multiplier > (128UL*128UL*128UL)) {
   d45f8:	45c2      	cmp	sl, r8
    multiplier *= 128;
   d45fa:	ea4f 10c7 	mov.w	r0, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d45fe:	d0e6      	beq.n	d45ce <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4600:	f818 2b01 	ldrb.w	r2, [r8], #1
  } while (encodedByte & 0x80);
   d4604:	9b01      	ldr	r3, [sp, #4]
    uint32_t intermediate = encodedByte & 0x7F;
   d4606:	f002 017f 	and.w	r1, r2, #127	; 0x7f
  } while (encodedByte & 0x80);
   d460a:	f012 0f80 	tst.w	r2, #128	; 0x80
    value += intermediate;
   d460e:	fb01 9907 	mla	r9, r1, r7, r9
  } while (encodedByte & 0x80);
   d4612:	d116      	bne.n	d4642 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x92>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4614:	eba8 0404 	sub.w	r4, r8, r4
   d4618:	b2a7      	uxth	r7, r4
   d461a:	1b34      	subs	r4, r6, r4
   d461c:	682a      	ldr	r2, [r5, #0]
   d461e:	3c01      	subs	r4, #1
   d4620:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4622:	f8d2 a018 	ldr.w	sl, [r2, #24]
   d4626:	bf3d      	ittte	cc
   d4628:	f106 32ff 	addcc.w	r2, r6, #4294967295
   d462c:	1bd2      	subcc	r2, r2, r7
   d462e:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   d4630:	fa1f f289 	uxthcs.w	r2, r9
   d4634:	4641      	mov	r1, r8
   d4636:	4628      	mov	r0, r5
   d4638:	47d0      	blx	sl
   d463a:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   d463c:	4438      	add	r0, r7
   d463e:	b280      	uxth	r0, r0
   d4640:	e7c6      	b.n	d45d0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
   d4642:	4607      	mov	r7, r0
   d4644:	e7cd      	b.n	d45e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
	...

000d4648 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   d464c:	f8df 8030 	ldr.w	r8, [pc, #48]	; d4680 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4650:	4605      	mov	r5, r0
   d4652:	460c      	mov	r4, r1
   d4654:	4616      	mov	r6, r2
   d4656:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4658:	463b      	mov	r3, r7
   d465a:	2296      	movs	r2, #150	; 0x96
   d465c:	4621      	mov	r1, r4
   d465e:	4628      	mov	r0, r5
   d4660:	f7ff ffa6 	bl	d45b0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4664:	b148      	cbz	r0, d467a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   d4666:	7823      	ldrb	r3, [r4, #0]
   d4668:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d466c:	d005      	beq.n	d467a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   d466e:	f000 ffa5 	bl	d55bc <_Z16_fetch_usbserialv>
   d4672:	4641      	mov	r1, r8
   d4674:	f000 fd99 	bl	d51aa <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4678:	e7ee      	b.n	d4658 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   d467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d467e:	bf00      	nop
   d4680:	000d6a0c 	.word	0x000d6a0c

000d4684 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   d4684:	3102      	adds	r1, #2
   d4686:	b2c9      	uxtb	r1, r1
   d4688:	2909      	cmp	r1, #9
   d468a:	bf9a      	itte	ls
   d468c:	4b02      	ldrls	r3, [pc, #8]	; (d4698 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d468e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   d4692:	4802      	ldrhi	r0, [pc, #8]	; (d469c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d4694:	4770      	bx	lr
   d4696:	bf00      	nop
   d4698:	000d6c18 	.word	0x000d6c18
   d469c:	000d6a1d 	.word	0x000d6a1d

000d46a0 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d46a0:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d46a2:	23e0      	movs	r3, #224	; 0xe0
   d46a4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   d46a8:	4601      	mov	r1, r0
  packet[1] = 0;
   d46aa:	2300      	movs	r3, #0
   d46ac:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   d46b0:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   d46b4:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   d46b6:	695b      	ldr	r3, [r3, #20]
   d46b8:	2202      	movs	r2, #2
   d46ba:	4798      	blx	r3
  return disconnectServer();
   d46bc:	6823      	ldr	r3, [r4, #0]
   d46be:	4620      	mov	r0, r4
   d46c0:	691b      	ldr	r3, [r3, #16]
}
   d46c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   d46c6:	4718      	bx	r3

000d46c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d46c8:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d46cc:	b530      	push	{r4, r5, lr}
   d46ce:	4613      	mov	r3, r2
   d46d0:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   d46d4:	f853 5b04 	ldr.w	r5, [r3], #4
   d46d8:	428d      	cmp	r5, r1
   d46da:	d009      	beq.n	d46f0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d46dc:	42a3      	cmp	r3, r4
   d46de:	d1f9      	bne.n	d46d4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d46e0:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   d46e2:	f852 4b04 	ldr.w	r4, [r2], #4
   d46e6:	b92c      	cbnz	r4, d46f4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   d46e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d46ec:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   d46f0:	2001      	movs	r0, #1
   d46f2:	e003      	b.n	d46fc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d46f4:	3301      	adds	r3, #1
   d46f6:	2b05      	cmp	r3, #5
   d46f8:	d1f3      	bne.n	d46e2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   d46fa:	2000      	movs	r0, #0
}
   d46fc:	bd30      	pop	{r4, r5, pc}

000d46fe <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d46fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4702:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d4706:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4708:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d470a:	2296      	movs	r2, #150	; 0x96
   d470c:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d470e:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4710:	f7ff ff4e 	bl	d45b0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d4714:	4606      	mov	r6, r0
   d4716:	b1f0      	cbz	r0, d4756 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   d4718:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   d471c:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d471e:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   d4722:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4726:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   d472a:	f85a 4b04 	ldr.w	r4, [sl], #4
   d472e:	b16c      	cbz	r4, d474c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   d4730:	6821      	ldr	r1, [r4, #0]
   d4732:	9101      	str	r1, [sp, #4]
   d4734:	4608      	mov	r0, r1
   d4736:	f002 f813 	bl	d6760 <strlen>
   d473a:	42b8      	cmp	r0, r7
   d473c:	d106      	bne.n	d474c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d473e:	9901      	ldr	r1, [sp, #4]
   d4740:	463a      	mov	r2, r7
   d4742:	4658      	mov	r0, fp
   d4744:	f002 f814 	bl	d6770 <strncasecmp>
   d4748:	2800      	cmp	r0, #0
   d474a:	d045      	beq.n	d47d8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d474c:	f108 0801 	add.w	r8, r8, #1
   d4750:	f1b8 0f05 	cmp.w	r8, #5
   d4754:	d1e9      	bne.n	d472a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   d4756:	2000      	movs	r0, #0
   d4758:	e03b      	b.n	d47d2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd4>
    packetid = buffer[topiclen+4];
   d475a:	19ea      	adds	r2, r5, r7
   d475c:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   d4760:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   d4764:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d4768:	2214      	movs	r2, #20
   d476a:	2100      	movs	r1, #0
   d476c:	1d60      	adds	r0, r4, #5
   d476e:	f001 ff85 	bl	d667c <memset>
  datalen = len - topiclen - packet_id_len - 4;
   d4772:	9b00      	ldr	r3, [sp, #0]
   d4774:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   d4778:	34fc      	adds	r4, #252	; 0xfc
   d477a:	4426      	add	r6, r4
   d477c:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   d4780:	eba6 060b 	sub.w	r6, r6, fp
   d4784:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d4786:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d4788:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   d478c:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d4790:	bf28      	it	cs
   d4792:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d4794:	4459      	add	r1, fp
   d4796:	4632      	mov	r2, r6
   d4798:	4449      	add	r1, r9
   d479a:	3005      	adds	r0, #5
   d479c:	f001 ff54 	bl	d6648 <memmove>
  subscriptions[i]->datalen = datalen;
   d47a0:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   d47a4:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d47a6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   d47aa:	f003 0306 	and.w	r3, r3, #6
   d47ae:	2b02      	cmp	r3, #2
   d47b0:	d10d      	bne.n	d47ce <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd0>
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d47b2:	f44f 7310 	mov.w	r3, #576	; 0x240
   d47b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (!sendPacket(ackpacket, len))
   d47ba:	682b      	ldr	r3, [r5, #0]
  packet[2] = packetid >> 8;
   d47bc:	fa9a fa9a 	rev16.w	sl, sl
    if (!sendPacket(ackpacket, len))
   d47c0:	695b      	ldr	r3, [r3, #20]
  packet[2] = packetid >> 8;
   d47c2:	f8ad a00e 	strh.w	sl, [sp, #14]
    if (!sendPacket(ackpacket, len))
   d47c6:	2204      	movs	r2, #4
   d47c8:	a903      	add	r1, sp, #12
   d47ca:	4628      	mov	r0, r5
   d47cc:	4798      	blx	r3
  return subscriptions[i];
   d47ce:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   d47d2:	b005      	add	sp, #20
   d47d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   d47d8:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   d47dc:	f00b 0b06 	and.w	fp, fp, #6
   d47e0:	f1bb 0f02 	cmp.w	fp, #2
   d47e4:	d0b9      	beq.n	d475a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   d47e6:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   d47e8:	4683      	mov	fp, r0
   d47ea:	e7bd      	b.n	d4768 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000d47ec <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   d47ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d47f0:	4604      	mov	r4, r0
   d47f2:	460d      	mov	r5, r1
   d47f4:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   d47f8:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d47fc:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   d4800:	b1e5      	cbz	r5, d483c <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   d4802:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d4804:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d4808:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   d480c:	695b      	ldr	r3, [r3, #20]
   d480e:	2202      	movs	r2, #2
   d4810:	4639      	mov	r1, r7
   d4812:	4620      	mov	r0, r4
   d4814:	4798      	blx	r3
   d4816:	4606      	mov	r6, r0
   d4818:	b168      	cbz	r0, d4836 <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d481a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d481e:	220d      	movs	r2, #13
   d4820:	4639      	mov	r1, r7
   d4822:	4620      	mov	r0, r4
   d4824:	f7ff ff10 	bl	d4648 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d4828:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d482c:	2bd0      	cmp	r3, #208	; 0xd0
   d482e:	d102      	bne.n	d4836 <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   d4830:	4630      	mov	r0, r6
   d4832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4836:	3d01      	subs	r5, #1
   d4838:	b2ed      	uxtb	r5, r5
   d483a:	e7e1      	b.n	d4800 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   d483c:	462e      	mov	r6, r5
   d483e:	e7f7      	b.n	d4830 <_ZN13Adafruit_MQTT4pingEh+0x44>

000d4840 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4840:	b538      	push	{r3, r4, r5, lr}
   d4842:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4844:	4608      	mov	r0, r1
   d4846:	2310      	movs	r3, #16
   d4848:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d484c:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   d484e:	4929      	ldr	r1, [pc, #164]	; (d48f4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4850:	f7ff fe7f 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   d4854:	2304      	movs	r3, #4
   d4856:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   d4858:	2302      	movs	r3, #2
   d485a:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d485c:	69ab      	ldr	r3, [r5, #24]
   d485e:	b18b      	cbz	r3, d4884 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   d4860:	781b      	ldrb	r3, [r3, #0]
   d4862:	b17b      	cbz	r3, d4884 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   d4864:	2306      	movs	r3, #6
   d4866:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   d4868:	f895 3020 	ldrb.w	r3, [r5, #32]
   d486c:	2b01      	cmp	r3, #1
   d486e:	d139      	bne.n	d48e4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4870:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4872:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   d4874:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4878:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d487a:	bf02      	ittt	eq
   d487c:	7843      	ldrbeq	r3, [r0, #1]
   d487e:	f043 0320 	orreq.w	r3, r3, #32
   d4882:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   d4884:	692b      	ldr	r3, [r5, #16]
   d4886:	781b      	ldrb	r3, [r3, #0]
   d4888:	b11b      	cbz	r3, d4892 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d488a:	7843      	ldrb	r3, [r0, #1]
   d488c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4890:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d4892:	696b      	ldr	r3, [r5, #20]
   d4894:	781b      	ldrb	r3, [r3, #0]
   d4896:	b11b      	cbz	r3, d48a0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d4898:	7843      	ldrb	r3, [r0, #1]
   d489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d489e:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d48a0:	2301      	movs	r3, #1
   d48a2:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d48a4:	232c      	movs	r3, #44	; 0x2c
   d48a6:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   d48a8:	68e9      	ldr	r1, [r5, #12]
   d48aa:	780b      	ldrb	r3, [r1, #0]
   d48ac:	b1f3      	cbz	r3, d48ec <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   d48ae:	3004      	adds	r0, #4
   d48b0:	f7ff fe4f 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d48b4:	69a9      	ldr	r1, [r5, #24]
   d48b6:	b131      	cbz	r1, d48c6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   d48b8:	780b      	ldrb	r3, [r1, #0]
   d48ba:	b123      	cbz	r3, d48c6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   d48bc:	f7ff fe49 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   d48c0:	69e9      	ldr	r1, [r5, #28]
   d48c2:	f7ff fe46 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   d48c6:	6929      	ldr	r1, [r5, #16]
   d48c8:	780b      	ldrb	r3, [r1, #0]
   d48ca:	b10b      	cbz	r3, d48d0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   d48cc:	f7ff fe41 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   d48d0:	6969      	ldr	r1, [r5, #20]
   d48d2:	780b      	ldrb	r3, [r1, #0]
   d48d4:	b10b      	cbz	r3, d48da <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   d48d6:	f7ff fe3c 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   d48da:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d48dc:	b2c0      	uxtb	r0, r0
   d48de:	1e83      	subs	r3, r0, #2
   d48e0:	7063      	strb	r3, [r4, #1]
}
   d48e2:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   d48e4:	2b02      	cmp	r3, #2
   d48e6:	d1c5      	bne.n	d4874 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d48e8:	231e      	movs	r3, #30
   d48ea:	e7c2      	b.n	d4872 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   d48ec:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   d48ee:	7143      	strb	r3, [r0, #5]
      p++;
   d48f0:	3006      	adds	r0, #6
   d48f2:	e7df      	b.n	d48b4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   d48f4:	000d6a2b 	.word	0x000d6a2b

000d48f8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d48f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d48fc:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   d48fe:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4900:	460e      	mov	r6, r1
   d4902:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   d4904:	9201      	str	r2, [sp, #4]
   d4906:	f001 ff2b 	bl	d6760 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d490a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d490e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   d4912:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   d4914:	b284      	uxth	r4, r0
  if(qos > 0) { 
   d4916:	f1b9 0f00 	cmp.w	r9, #0
   d491a:	d135      	bne.n	d4988 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   d491c:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d491e:	ea4f 0349 	mov.w	r3, r9, lsl #1
   d4922:	4630      	mov	r0, r6
    len += 2; // qos packet id
   d4924:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4926:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   d492a:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d492c:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   d4930:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   d4932:	4622      	mov	r2, r4
   d4934:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   d4938:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   d493a:	bf88      	it	hi
   d493c:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   d4940:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   d4942:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   d4946:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   d494a:	d8f2      	bhi.n	d4932 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   d494c:	f7ff fe01 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
   d4950:	4603      	mov	r3, r0
  if(qos > 0) {
   d4952:	f1b9 0f00 	cmp.w	r9, #0
   d4956:	d00c      	beq.n	d4972 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d4958:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d495c:	0a12      	lsrs	r2, r2, #8
   d495e:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d4960:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4964:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   d4966:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d496a:	3201      	adds	r2, #1
    p+=2;
   d496c:	3302      	adds	r3, #2
    packet_id_counter++;
   d496e:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   d4972:	463a      	mov	r2, r7
   d4974:	4641      	mov	r1, r8
   d4976:	4618      	mov	r0, r3
   d4978:	f001 fe66 	bl	d6648 <memmove>
  p+= bLen;
   d497c:	4438      	add	r0, r7
  len = p - packet;
   d497e:	1b80      	subs	r0, r0, r6
}
   d4980:	b280      	uxth	r0, r0
   d4982:	b003      	add	sp, #12
   d4984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   d4988:	3404      	adds	r4, #4
   d498a:	e7c8      	b.n	d491e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000d498c <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d498c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d498e:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4992:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4996:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4998:	e9cd 3600 	strd	r3, r6, [sp]
   d499c:	4613      	mov	r3, r2
   d499e:	460a      	mov	r2, r1
   d49a0:	4629      	mov	r1, r5
   d49a2:	f7ff ffa9 	bl	d48f8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d49a6:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d49a8:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   d49aa:	695b      	ldr	r3, [r3, #20]
   d49ac:	4629      	mov	r1, r5
   d49ae:	4620      	mov	r0, r4
   d49b0:	4798      	blx	r3
   d49b2:	b910      	cbnz	r0, d49ba <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   d49b4:	2000      	movs	r0, #0
}
   d49b6:	b002      	add	sp, #8
   d49b8:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   d49ba:	2e00      	cmp	r6, #0
   d49bc:	d0fb      	beq.n	d49b6 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d49be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d49c2:	2296      	movs	r2, #150	; 0x96
   d49c4:	4629      	mov	r1, r5
   d49c6:	4620      	mov	r0, r4
   d49c8:	f7ff fdf2 	bl	d45b0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   d49cc:	2804      	cmp	r0, #4
   d49ce:	d1f1      	bne.n	d49b4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d49d0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d49d4:	111b      	asrs	r3, r3, #4
   d49d6:	2b04      	cmp	r3, #4
   d49d8:	d1ec      	bne.n	d49b4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    uint16_t packnum = buffer[2];
   d49da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   d49dc:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d49e0:	ba5b      	rev16	r3, r3
    packnum++;
   d49e2:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   d49e4:	b29b      	uxth	r3, r3
   d49e6:	1ac3      	subs	r3, r0, r3
   d49e8:	4258      	negs	r0, r3
   d49ea:	4158      	adcs	r0, r3
   d49ec:	e7e3      	b.n	d49b6 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000d49ee <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d49ee:	b530      	push	{r4, r5, lr}
   d49f0:	b085      	sub	sp, #20
   d49f2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d49f4:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d49f6:	461d      	mov	r5, r3
   d49f8:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d49fa:	9202      	str	r2, [sp, #8]
   d49fc:	f001 feb0 	bl	d6760 <strlen>
   d4a00:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d4a04:	b283      	uxth	r3, r0
   d4a06:	9500      	str	r5, [sp, #0]
   d4a08:	4620      	mov	r0, r4
   d4a0a:	f7ff ffbf 	bl	d498c <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d4a0e:	b005      	add	sp, #20
   d4a10:	bd30      	pop	{r4, r5, pc}

000d4a12 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   d4a12:	b538      	push	{r3, r4, r5, lr}
   d4a14:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d4a16:	2382      	movs	r3, #130	; 0x82
   d4a18:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d4a1a:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4a1e:	0a1b      	lsrs	r3, r3, #8
   d4a20:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   d4a22:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4a26:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   d4a28:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   d4a2c:	460c      	mov	r4, r1
  packet_id_counter++;
   d4a2e:	3301      	adds	r3, #1
   d4a30:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   d4a34:	4611      	mov	r1, r2
   d4a36:	1d20      	adds	r0, r4, #4
   d4a38:	f7ff fd8b 	bl	d4552 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   d4a3c:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   d4a40:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d4a42:	b2c0      	uxtb	r0, r0
   d4a44:	1e83      	subs	r3, r0, #2
   d4a46:	7063      	strb	r3, [r4, #1]
}
   d4a48:	bd38      	pop	{r3, r4, r5, pc}

000d4a4a <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   d4a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   d4a4e:	6803      	ldr	r3, [r0, #0]
   d4a50:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   d4a52:	4604      	mov	r4, r0
  if (!connectServer())
   d4a54:	4798      	blx	r3
   d4a56:	2800      	cmp	r0, #0
   d4a58:	d04b      	beq.n	d4af2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   d4a5a:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d4a5e:	4629      	mov	r1, r5
   d4a60:	4620      	mov	r0, r4
   d4a62:	f7ff feed 	bl	d4840 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d4a66:	6823      	ldr	r3, [r4, #0]
   d4a68:	b282      	uxth	r2, r0
   d4a6a:	695b      	ldr	r3, [r3, #20]
   d4a6c:	4629      	mov	r1, r5
   d4a6e:	4620      	mov	r0, r4
   d4a70:	4798      	blx	r3
   d4a72:	2800      	cmp	r0, #0
   d4a74:	d03d      	beq.n	d4af2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d4a76:	f241 7370 	movw	r3, #6000	; 0x1770
   d4a7a:	2296      	movs	r2, #150	; 0x96
   d4a7c:	4629      	mov	r1, r5
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f7ff fd96 	bl	d45b0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d4a84:	b2c0      	uxtb	r0, r0
   d4a86:	2804      	cmp	r0, #4
   d4a88:	d133      	bne.n	d4af2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4a8a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4a8c:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d4a90:	d12f      	bne.n	d4af2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   d4a92:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d4a96:	b110      	cbz	r0, d4a9e <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   d4a98:	b240      	sxtb	r0, r0
}
   d4a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a9e:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   d4aa2:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   d4aa6:	f857 3b04 	ldr.w	r3, [r7], #4
   d4aaa:	b1f3      	cbz	r3, d4aea <_ZN13Adafruit_MQTT7connectEv+0xa0>
   d4aac:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d4aae:	f857 2c04 	ldr.w	r2, [r7, #-4]
   d4ab2:	4629      	mov	r1, r5
   d4ab4:	7913      	ldrb	r3, [r2, #4]
   d4ab6:	6812      	ldr	r2, [r2, #0]
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f7ff ffaa 	bl	d4a12 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4abe:	6823      	ldr	r3, [r4, #0]
   d4ac0:	b282      	uxth	r2, r0
   d4ac2:	695b      	ldr	r3, [r3, #20]
   d4ac4:	4629      	mov	r1, r5
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	4798      	blx	r3
   d4aca:	b190      	cbz	r0, d4af2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4ad0:	2209      	movs	r2, #9
   d4ad2:	4629      	mov	r1, r5
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f7ff fdb7 	bl	d4648 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4ada:	b930      	cbnz	r0, d4aea <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d4adc:	3e01      	subs	r6, #1
   d4ade:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4ae2:	d1e4      	bne.n	d4aae <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   d4ae4:	f06f 0001 	mvn.w	r0, #1
   d4ae8:	e7d7      	b.n	d4a9a <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4aea:	45b8      	cmp	r8, r7
   d4aec:	d1db      	bne.n	d4aa6 <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   d4aee:	2000      	movs	r0, #0
   d4af0:	e7d3      	b.n	d4a9a <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   d4af2:	f04f 30ff 	mov.w	r0, #4294967295
   d4af6:	e7d0      	b.n	d4a9a <_ZN13Adafruit_MQTT7connectEv+0x50>

000d4af8 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d4af8:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d4afa:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d4afe:	7203      	strb	r3, [r0, #8]
}
   d4b00:	bd10      	pop	{r4, pc}
	...

000d4b04 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d4b04:	b5d0      	push	{r4, r6, r7, lr}
   d4b06:	ec57 6b10 	vmov	r6, r7, d0
   d4b0a:	b090      	sub	sp, #64	; 0x40
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   d4b10:	2200      	movs	r2, #0
   d4b12:	4909      	ldr	r1, [pc, #36]	; (d4b38 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   d4b14:	4668      	mov	r0, sp
   d4b16:	f000 fa53 	bl	d4fc0 <sprintf>
  sprintf(sout, fmt, val);
   d4b1a:	4632      	mov	r2, r6
   d4b1c:	463b      	mov	r3, r7
   d4b1e:	4669      	mov	r1, sp
   d4b20:	a805      	add	r0, sp, #20
   d4b22:	f000 fa4d 	bl	d4fc0 <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d4b26:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4b2a:	7a23      	ldrb	r3, [r4, #8]
   d4b2c:	aa05      	add	r2, sp, #20
   d4b2e:	f7ff ff5e 	bl	d49ee <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d4b32:	b010      	add	sp, #64	; 0x40
   d4b34:	bdd0      	pop	{r4, r6, r7, pc}
   d4b36:	bf00      	nop
   d4b38:	000d6a30 	.word	0x000d6a30

000d4b3c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d4b3c:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d4b3e:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d4b40:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   d4b42:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   d4b46:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   d4b4a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d4b4c:	6002      	str	r2, [r0, #0]
  datalen = 0;
   d4b4e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d4b50:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   d4b52:	6303      	str	r3, [r0, #48]	; 0x30
}
   d4b54:	bd10      	pop	{r4, pc}
	...

000d4b58 <_GLOBAL__sub_I_PIN_MAP2>:
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	f000 f815 	bl	d4b88 <HAL_Pin_Map>
   d4b5e:	4b01      	ldr	r3, [pc, #4]	; (d4b64 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4b60:	6018      	str	r0, [r3, #0]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	2003e640 	.word	0x2003e640

000d4b68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <netdb_freeaddrinfo+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	689b      	ldr	r3, [r3, #8]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	00030268 	.word	0x00030268

000d4b78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <netdb_getaddrinfo+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	68db      	ldr	r3, [r3, #12]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030268 	.word	0x00030268

000d4b88 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <HAL_Pin_Map+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	681b      	ldr	r3, [r3, #0]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003022c 	.word	0x0003022c

000d4b98 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <HAL_Pin_Mode+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	689b      	ldr	r3, [r3, #8]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003022c 	.word	0x0003022c

000d4ba8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <HAL_Get_Pin_Mode+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003022c 	.word	0x0003022c

000d4bb8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <HAL_GPIO_Write+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003022c 	.word	0x0003022c

000d4bc8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <if_index_to_name+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	0003026c 	.word	0x0003026c

000d4bd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <HAL_RNG_GetRandomNumber+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	685b      	ldr	r3, [r3, #4]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030218 	.word	0x00030218

000d4be8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <HAL_Delay_Microseconds+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	68db      	ldr	r3, [r3, #12]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030218 	.word	0x00030218

000d4bf8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	695b      	ldr	r3, [r3, #20]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030218 	.word	0x00030218

000d4c08 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <hal_timer_millis+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030218 	.word	0x00030218

000d4c18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <os_mutex_recursive_create+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030248 	.word	0x00030248

000d4c28 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <os_mutex_recursive_destroy+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030248 	.word	0x00030248

000d4c38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <inet_inet_ntop+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	695b      	ldr	r3, [r3, #20]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030264 	.word	0x00030264

000d4c48 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <inet_htonl+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	6a1b      	ldr	r3, [r3, #32]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030264 	.word	0x00030264

000d4c58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <inet_htons+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030264 	.word	0x00030264

000d4c68 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <hal_usart_init+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	681b      	ldr	r3, [r3, #0]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	0003023c 	.word	0x0003023c

000d4c78 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <hal_usart_write+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	68db      	ldr	r3, [r3, #12]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	0003023c 	.word	0x0003023c

000d4c88 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <hal_usart_available+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	691b      	ldr	r3, [r3, #16]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003023c 	.word	0x0003023c

000d4c98 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <hal_usart_read+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	695b      	ldr	r3, [r3, #20]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003023c 	.word	0x0003023c

000d4ca8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <hal_usart_peek+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	699b      	ldr	r3, [r3, #24]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003023c 	.word	0x0003023c

000d4cb8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <hal_usart_flush+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	69db      	ldr	r3, [r3, #28]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003023c 	.word	0x0003023c

000d4cc8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <hal_usart_is_enabled+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6a1b      	ldr	r3, [r3, #32]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003023c 	.word	0x0003023c

000d4cd8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <hal_usart_available_data_for_write+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003023c 	.word	0x0003023c

000d4ce8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <hal_i2c_write+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6a1b      	ldr	r3, [r3, #32]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030228 	.word	0x00030228

000d4cf8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <hal_i2c_available+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030228 	.word	0x00030228

000d4d08 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <hal_i2c_read+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030228 	.word	0x00030228

000d4d18 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <hal_i2c_peek+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030228 	.word	0x00030228

000d4d28 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <hal_i2c_flush+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030228 	.word	0x00030228

000d4d38 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <hal_i2c_is_enabled+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030228 	.word	0x00030228

000d4d48 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <hal_i2c_init+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030228 	.word	0x00030228

000d4d58 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <sock_setsockopt+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	699b      	ldr	r3, [r3, #24]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030238 	.word	0x00030238

000d4d68 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <sock_close+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	69db      	ldr	r3, [r3, #28]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030238 	.word	0x00030238

000d4d78 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <sock_connect+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	6a1b      	ldr	r3, [r3, #32]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030238 	.word	0x00030238

000d4d88 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <sock_recv+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030238 	.word	0x00030238

000d4d98 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <sock_send+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030238 	.word	0x00030238

000d4da8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <sock_socket+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	00030238 	.word	0x00030238

000d4db8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <hal_spi_init+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	69db      	ldr	r3, [r3, #28]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030230 	.word	0x00030230

000d4dc8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <hal_spi_is_enabled+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6a1b      	ldr	r3, [r3, #32]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030230 	.word	0x00030230

000d4dd8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <HAL_USB_USART_Init+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	681b      	ldr	r3, [r3, #0]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	0003024c 	.word	0x0003024c

000d4de8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <HAL_USB_USART_Begin+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	685b      	ldr	r3, [r3, #4]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	0003024c 	.word	0x0003024c

000d4df8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <HAL_USB_USART_Available_Data+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	691b      	ldr	r3, [r3, #16]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	0003024c 	.word	0x0003024c

000d4e08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	695b      	ldr	r3, [r3, #20]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	0003024c 	.word	0x0003024c

000d4e18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_USB_USART_Receive_Data+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	699b      	ldr	r3, [r3, #24]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	0003024c 	.word	0x0003024c

000d4e28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_USB_USART_Send_Data+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	69db      	ldr	r3, [r3, #28]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003024c 	.word	0x0003024c

000d4e38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_USB_USART_Flush_Data+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	6a1b      	ldr	r3, [r3, #32]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003024c 	.word	0x0003024c

000d4e48 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_USB_USART_Is_Connected+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003024c 	.word	0x0003024c

000d4e58 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <panic_+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030260 	.word	0x00030260

000d4e68 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <log_message+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030260 	.word	0x00030260

000d4e78 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <set_system_mode+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	685b      	ldr	r3, [r3, #4]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030220 	.word	0x00030220

000d4e88 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <system_delay_ms+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	695b      	ldr	r3, [r3, #20]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030220 	.word	0x00030220

000d4e98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b03      	ldr	r3, [pc, #12]	; (d4ea8 <system_ctrl_set_app_request_handler+0x10>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ea2:	9301      	str	r3, [sp, #4]
   d4ea4:	bd08      	pop	{r3, pc}
   d4ea6:	0000      	.short	0x0000
   d4ea8:	00030220 	.word	0x00030220

000d4eac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b03      	ldr	r3, [pc, #12]	; (d4ebc <system_ctrl_set_result+0x10>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4eb6:	9301      	str	r3, [sp, #4]
   d4eb8:	bd08      	pop	{r3, pc}
   d4eba:	0000      	.short	0x0000
   d4ebc:	00030220 	.word	0x00030220

000d4ec0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <network_connect+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	685b      	ldr	r3, [r3, #4]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030240 	.word	0x00030240

000d4ed0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <network_connecting+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	689b      	ldr	r3, [r3, #8]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030240 	.word	0x00030240

000d4ee0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <network_disconnect+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	68db      	ldr	r3, [r3, #12]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030240 	.word	0x00030240

000d4ef0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <network_ready+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	691b      	ldr	r3, [r3, #16]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030240 	.word	0x00030240

000d4f00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <network_on+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	695b      	ldr	r3, [r3, #20]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030240 	.word	0x00030240

000d4f10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <network_off+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	699b      	ldr	r3, [r3, #24]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030240 	.word	0x00030240

000d4f20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <network_listen+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	69db      	ldr	r3, [r3, #28]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030240 	.word	0x00030240

000d4f30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <network_listening+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	6a1b      	ldr	r3, [r3, #32]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030240 	.word	0x00030240

000d4f40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <network_set_listen_timeout+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030240 	.word	0x00030240

000d4f50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <network_get_listen_timeout+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030240 	.word	0x00030240

000d4f60 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <network_is_on+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030240 	.word	0x00030240

000d4f70 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <network_is_off+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030240 	.word	0x00030240

000d4f80 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <spark_process+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	689b      	ldr	r3, [r3, #8]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030244 	.word	0x00030244

000d4f90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030244 	.word	0x00030244

000d4fa0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <malloc+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	681b      	ldr	r3, [r3, #0]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003021c 	.word	0x0003021c

000d4fb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <free+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	685b      	ldr	r3, [r3, #4]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003021c 	.word	0x0003021c

000d4fc0 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <sprintf+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	68db      	ldr	r3, [r3, #12]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003021c 	.word	0x0003021c

000d4fd0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <vsnprintf+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	0003021c 	.word	0x0003021c

000d4fe0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <__errno+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	0003021c 	.word	0x0003021c

000d4ff0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <newlib_impure_ptr_callback+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	0003021c 	.word	0x0003021c

000d5000 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5000:	2200      	movs	r2, #0
   d5002:	6840      	ldr	r0, [r0, #4]
   d5004:	4611      	mov	r1, r2
   d5006:	f7ff bf93 	b.w	d4f30 <network_listening>

000d500a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d500a:	2200      	movs	r2, #0
   d500c:	6840      	ldr	r0, [r0, #4]
   d500e:	4611      	mov	r1, r2
   d5010:	f7ff bf9e 	b.w	d4f50 <network_get_listen_timeout>

000d5014 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5014:	6840      	ldr	r0, [r0, #4]
   d5016:	2200      	movs	r2, #0
   d5018:	f7ff bf92 	b.w	d4f40 <network_set_listen_timeout>

000d501c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d501c:	6840      	ldr	r0, [r0, #4]
   d501e:	2200      	movs	r2, #0
   d5020:	f081 0101 	eor.w	r1, r1, #1
   d5024:	f7ff bf7c 	b.w	d4f20 <network_listen>

000d5028 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5028:	2300      	movs	r3, #0
   d502a:	6840      	ldr	r0, [r0, #4]
   d502c:	461a      	mov	r2, r3
   d502e:	4619      	mov	r1, r3
   d5030:	f7ff bf6e 	b.w	d4f10 <network_off>

000d5034 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5034:	2300      	movs	r3, #0
   d5036:	6840      	ldr	r0, [r0, #4]
   d5038:	461a      	mov	r2, r3
   d503a:	4619      	mov	r1, r3
   d503c:	f7ff bf60 	b.w	d4f00 <network_on>

000d5040 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	6840      	ldr	r0, [r0, #4]
   d5044:	4611      	mov	r1, r2
   d5046:	f7ff bf53 	b.w	d4ef0 <network_ready>

000d504a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	6840      	ldr	r0, [r0, #4]
   d504e:	4611      	mov	r1, r2
   d5050:	f7ff bf3e 	b.w	d4ed0 <network_connecting>

000d5054 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5054:	6840      	ldr	r0, [r0, #4]
   d5056:	2200      	movs	r2, #0
   d5058:	2102      	movs	r1, #2
   d505a:	f7ff bf41 	b.w	d4ee0 <network_disconnect>

000d505e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d505e:	2300      	movs	r3, #0
   d5060:	6840      	ldr	r0, [r0, #4]
   d5062:	461a      	mov	r2, r3
   d5064:	f7ff bf2c 	b.w	d4ec0 <network_connect>

000d5068 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5068:	4b02      	ldr	r3, [pc, #8]	; (d5074 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d506a:	2203      	movs	r2, #3
   d506c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d506e:	4a02      	ldr	r2, [pc, #8]	; (d5078 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5070:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5072:	4770      	bx	lr
   d5074:	2003e644 	.word	0x2003e644
   d5078:	000d6c48 	.word	0x000d6c48

000d507c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	4608      	mov	r0, r1
{
    _spi = spi;
   d5082:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5084:	f7ff fe98 	bl	d4db8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5088:	2300      	movs	r3, #0
   d508a:	6063      	str	r3, [r4, #4]
}
   d508c:	4620      	mov	r0, r4
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5090:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5092:	4b09      	ldr	r3, [pc, #36]	; (d50b8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5094:	4c09      	ldr	r4, [pc, #36]	; (d50bc <_GLOBAL__sub_I_System+0x2c>)
   d5096:	2202      	movs	r2, #2
   d5098:	2000      	movs	r0, #0
   d509a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d509c:	4b08      	ldr	r3, [pc, #32]	; (d50c0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d509e:	6020      	str	r0, [r4, #0]
   d50a0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d50a2:	71a0      	strb	r0, [r4, #6]
   d50a4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50a6:	f7ff fee7 	bl	d4e78 <set_system_mode>
SystemClass System;
   d50aa:	4620      	mov	r0, r4
   d50ac:	4a05      	ldr	r2, [pc, #20]	; (d50c4 <_GLOBAL__sub_I_System+0x34>)
   d50ae:	4906      	ldr	r1, [pc, #24]	; (d50c8 <_GLOBAL__sub_I_System+0x38>)
   d50b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d50b4:	f000 bfd0 	b.w	d6058 <__aeabi_atexit>
   d50b8:	2003e658 	.word	0x2003e658
   d50bc:	2003e64c 	.word	0x2003e64c
   d50c0:	ffff0000 	.word	0xffff0000
   d50c4:	2003e4ec 	.word	0x2003e4ec
   d50c8:	000d40fd 	.word	0x000d40fd

000d50cc <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d50cc:	b570      	push	{r4, r5, r6, lr}
   d50ce:	b086      	sub	sp, #24
   d50d0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d50d2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d50d4:	4668      	mov	r0, sp
   d50d6:	f000 fa01 	bl	d54dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d50da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50dc:	1d34      	adds	r4, r6, #4
   d50de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50e0:	682b      	ldr	r3, [r5, #0]
   d50e2:	7023      	strb	r3, [r4, #0]
    }
   d50e4:	4630      	mov	r0, r6
   d50e6:	b006      	add	sp, #24
   d50e8:	bd70      	pop	{r4, r5, r6, pc}

000d50ea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d50ea:	b510      	push	{r4, lr}
   d50ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50ee:	6800      	ldr	r0, [r0, #0]
   d50f0:	b108      	cbz	r0, d50f6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50f2:	f7ff fd99 	bl	d4c28 <os_mutex_recursive_destroy>
    }
   d50f6:	4620      	mov	r0, r4
   d50f8:	bd10      	pop	{r4, pc}

000d50fa <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50fa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d50fc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d50fe:	4604      	mov	r4, r0
      if (_M_manager)
   d5100:	b113      	cbz	r3, d5108 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5102:	2203      	movs	r2, #3
   d5104:	4601      	mov	r1, r0
   d5106:	4798      	blx	r3
    }
   d5108:	4620      	mov	r0, r4
   d510a:	bd10      	pop	{r4, pc}

000d510c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d510c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d510e:	4c06      	ldr	r4, [pc, #24]	; (d5128 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5110:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5112:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5114:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5116:	f7ff fd7f 	bl	d4c18 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d511a:	4620      	mov	r0, r4
   d511c:	4a03      	ldr	r2, [pc, #12]	; (d512c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d511e:	4904      	ldr	r1, [pc, #16]	; (d5130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5124:	f000 bf98 	b.w	d6058 <__aeabi_atexit>
   d5128:	2003e65c 	.word	0x2003e65c
   d512c:	2003e4ec 	.word	0x2003e4ec
   d5130:	000d50eb 	.word	0x000d50eb

000d5134 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5136:	4606      	mov	r6, r0
   d5138:	460d      	mov	r5, r1
  size_t n = 0;
   d513a:	188f      	adds	r7, r1, r2
   d513c:	2400      	movs	r4, #0
  while (size--) {
   d513e:	42bd      	cmp	r5, r7
   d5140:	d00c      	beq.n	d515c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5142:	6833      	ldr	r3, [r6, #0]
   d5144:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5148:	689b      	ldr	r3, [r3, #8]
   d514a:	4630      	mov	r0, r6
   d514c:	4798      	blx	r3
     if (chunk>=0)
   d514e:	1e03      	subs	r3, r0, #0
   d5150:	db01      	blt.n	d5156 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5152:	441c      	add	r4, r3
  while (size--) {
   d5154:	e7f3      	b.n	d513e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5156:	2c00      	cmp	r4, #0
   d5158:	bf08      	it	eq
   d515a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d515c:	4620      	mov	r0, r4
   d515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5160 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5160:	b513      	push	{r0, r1, r4, lr}
   d5162:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5164:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5166:	b159      	cbz	r1, d5180 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5168:	9101      	str	r1, [sp, #4]
   d516a:	f001 faf9 	bl	d6760 <strlen>
   d516e:	6823      	ldr	r3, [r4, #0]
   d5170:	9901      	ldr	r1, [sp, #4]
   d5172:	68db      	ldr	r3, [r3, #12]
   d5174:	4602      	mov	r2, r0
   d5176:	4620      	mov	r0, r4
    }
   d5178:	b002      	add	sp, #8
   d517a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d517e:	4718      	bx	r3
    }
   d5180:	b002      	add	sp, #8
   d5182:	bd10      	pop	{r4, pc}

000d5184 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5184:	b508      	push	{r3, lr}
  return write(str);
   d5186:	f7ff ffeb 	bl	d5160 <_ZN5Print5writeEPKc>
}
   d518a:	bd08      	pop	{r3, pc}

000d518c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d518c:	6803      	ldr	r3, [r0, #0]
   d518e:	689b      	ldr	r3, [r3, #8]
   d5190:	4718      	bx	r3

000d5192 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5192:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5194:	210d      	movs	r1, #13
{
   d5196:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5198:	f7ff fff8 	bl	d518c <_ZN5Print5printEc>
  n += print('\n');
   d519c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d519e:	4604      	mov	r4, r0
  n += print('\n');
   d51a0:	4628      	mov	r0, r5
   d51a2:	f7ff fff3 	bl	d518c <_ZN5Print5printEc>
  return n;
}
   d51a6:	4420      	add	r0, r4
   d51a8:	bd38      	pop	{r3, r4, r5, pc}

000d51aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d51aa:	b538      	push	{r3, r4, r5, lr}
   d51ac:	4605      	mov	r5, r0
  return write(str);
   d51ae:	f7ff ffd7 	bl	d5160 <_ZN5Print5writeEPKc>
   d51b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d51b4:	4628      	mov	r0, r5
   d51b6:	f7ff ffec 	bl	d5192 <_ZN5Print7printlnEv>
  return n;
}
   d51ba:	4420      	add	r0, r4
   d51bc:	bd38      	pop	{r3, r4, r5, pc}

000d51be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d51be:	b530      	push	{r4, r5, lr}
   d51c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51c2:	2300      	movs	r3, #0
   d51c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51c8:	2a01      	cmp	r2, #1
   d51ca:	bf98      	it	ls
   d51cc:	220a      	movls	r2, #10
   d51ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d51d0:	460d      	mov	r5, r1
   d51d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d51d6:	fb01 5312 	mls	r3, r1, r2, r5
   d51da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51de:	2b09      	cmp	r3, #9
   d51e0:	bf94      	ite	ls
   d51e2:	3330      	addls	r3, #48	; 0x30
   d51e4:	3337      	addhi	r3, #55	; 0x37
   d51e6:	b2db      	uxtb	r3, r3
  } while(n);
   d51e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d51ee:	d9ef      	bls.n	d51d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d51f0:	4621      	mov	r1, r4
   d51f2:	f7ff ffb5 	bl	d5160 <_ZN5Print5writeEPKc>
}
   d51f6:	b00b      	add	sp, #44	; 0x2c
   d51f8:	bd30      	pop	{r4, r5, pc}

000d51fa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d51fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51fe:	b086      	sub	sp, #24
   d5200:	af00      	add	r7, sp, #0
   d5202:	4605      	mov	r5, r0
   d5204:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5206:	1d38      	adds	r0, r7, #4
   d5208:	2114      	movs	r1, #20
{
   d520a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d520c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d520e:	f7ff fedf 	bl	d4fd0 <vsnprintf>

    if (n<bufsize)
   d5212:	2813      	cmp	r0, #19
   d5214:	d80e      	bhi.n	d5234 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5216:	1d39      	adds	r1, r7, #4
   d5218:	4628      	mov	r0, r5
   d521a:	f7ff ffa1 	bl	d5160 <_ZN5Print5writeEPKc>
   d521e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5220:	b11e      	cbz	r6, d522a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5222:	4628      	mov	r0, r5
   d5224:	f7ff ffb5 	bl	d5192 <_ZN5Print7printlnEv>
   d5228:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d522a:	4620      	mov	r0, r4
   d522c:	3718      	adds	r7, #24
   d522e:	46bd      	mov	sp, r7
   d5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5234:	f100 0308 	add.w	r3, r0, #8
   d5238:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d523c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d523e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5242:	4622      	mov	r2, r4
   d5244:	1c41      	adds	r1, r0, #1
   d5246:	683b      	ldr	r3, [r7, #0]
   d5248:	4668      	mov	r0, sp
   d524a:	f7ff fec1 	bl	d4fd0 <vsnprintf>
  return write(str);
   d524e:	4669      	mov	r1, sp
   d5250:	4628      	mov	r0, r5
   d5252:	f7ff ff85 	bl	d5160 <_ZN5Print5writeEPKc>
   d5256:	4604      	mov	r4, r0
   d5258:	46c5      	mov	sp, r8
   d525a:	e7e1      	b.n	d5220 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d525c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d525c:	2300      	movs	r3, #0
   d525e:	6840      	ldr	r0, [r0, #4]
   d5260:	461a      	mov	r2, r3
   d5262:	4619      	mov	r1, r3
   d5264:	f7ff be4c 	b.w	d4f00 <network_on>

000d5268 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5268:	4b01      	ldr	r3, [pc, #4]	; (d5270 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d526a:	4a02      	ldr	r2, [pc, #8]	; (d5274 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d526c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d526e:	4770      	bx	lr
   d5270:	2003e660 	.word	0x2003e660
   d5274:	000d6c84 	.word	0x000d6c84

000d5278 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5278:	4b02      	ldr	r3, [pc, #8]	; (d5284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	4b02      	ldr	r3, [pc, #8]	; (d5288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d527e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5280:	4770      	bx	lr
   d5282:	bf00      	nop
   d5284:	2003e484 	.word	0x2003e484
   d5288:	2003e664 	.word	0x2003e664

000d528c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d528c:	2100      	movs	r1, #0
   d528e:	f7ff bdfb 	b.w	d4e88 <system_delay_ms>

000d5292 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5292:	b510      	push	{r4, lr}
   d5294:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5296:	f7ff ff30 	bl	d50fa <_ZNSt14_Function_baseD1Ev>
   d529a:	4620      	mov	r0, r4
   d529c:	bd10      	pop	{r4, pc}
	...

000d52a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d52a0:	4803      	ldr	r0, [pc, #12]	; (d52b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d52a2:	4a04      	ldr	r2, [pc, #16]	; (d52b4 <_GLOBAL__sub_I_RGB+0x14>)
   d52a4:	4904      	ldr	r1, [pc, #16]	; (d52b8 <_GLOBAL__sub_I_RGB+0x18>)
   d52a6:	2300      	movs	r3, #0
   d52a8:	6083      	str	r3, [r0, #8]
   d52aa:	f000 bed5 	b.w	d6058 <__aeabi_atexit>
   d52ae:	bf00      	nop
   d52b0:	2003e668 	.word	0x2003e668
   d52b4:	2003e4ec 	.word	0x2003e4ec
   d52b8:	000d5293 	.word	0x000d5293

000d52bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d52bc:	4b01      	ldr	r3, [pc, #4]	; (d52c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d52be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d52c0:	4770      	bx	lr
   d52c2:	bf00      	nop
   d52c4:	2003e488 	.word	0x2003e488

000d52c8 <serialEventRun>:
{
   d52c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d52ca:	4b0b      	ldr	r3, [pc, #44]	; (d52f8 <serialEventRun+0x30>)
   d52cc:	b143      	cbz	r3, d52e0 <serialEventRun+0x18>
   d52ce:	f000 f975 	bl	d55bc <_Z16_fetch_usbserialv>
   d52d2:	6803      	ldr	r3, [r0, #0]
   d52d4:	691b      	ldr	r3, [r3, #16]
   d52d6:	4798      	blx	r3
   d52d8:	2800      	cmp	r0, #0
   d52da:	dd01      	ble.n	d52e0 <serialEventRun+0x18>
        serialEvent();
   d52dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d52e0:	4b06      	ldr	r3, [pc, #24]	; (d52fc <serialEventRun+0x34>)
   d52e2:	b143      	cbz	r3, d52f6 <serialEventRun+0x2e>
   d52e4:	f000 f9e8 	bl	d56b8 <_Z22__fetch_global_Serial1v>
   d52e8:	6803      	ldr	r3, [r0, #0]
   d52ea:	691b      	ldr	r3, [r3, #16]
   d52ec:	4798      	blx	r3
   d52ee:	2800      	cmp	r0, #0
   d52f0:	dd01      	ble.n	d52f6 <serialEventRun+0x2e>
        serialEvent1();
   d52f2:	f3af 8000 	nop.w
}
   d52f6:	bd08      	pop	{r3, pc}
	...

000d5300 <_post_loop>:
{
   d5300:	b508      	push	{r3, lr}
	serialEventRun();
   d5302:	f7ff ffe1 	bl	d52c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5306:	f7ff fc77 	bl	d4bf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d530a:	4b01      	ldr	r3, [pc, #4]	; (d5310 <_post_loop+0x10>)
   d530c:	6018      	str	r0, [r3, #0]
}
   d530e:	bd08      	pop	{r3, pc}
   d5310:	2003e7d4 	.word	0x2003e7d4

000d5314 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5314:	4802      	ldr	r0, [pc, #8]	; (d5320 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5316:	4a03      	ldr	r2, [pc, #12]	; (d5324 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5318:	4903      	ldr	r1, [pc, #12]	; (d5328 <_Z33system_initialize_user_backup_ramv+0x14>)
   d531a:	1a12      	subs	r2, r2, r0
   d531c:	f001 b986 	b.w	d662c <memcpy>
   d5320:	2003f400 	.word	0x2003f400
   d5324:	2003f404 	.word	0x2003f404
   d5328:	000d7060 	.word	0x000d7060

000d532c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d532c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d532e:	2300      	movs	r3, #0
   d5330:	9300      	str	r3, [sp, #0]
   d5332:	461a      	mov	r2, r3
   d5334:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5338:	f7ff fdb8 	bl	d4eac <system_ctrl_set_result>
}
   d533c:	b003      	add	sp, #12
   d533e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5344 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5344:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5346:	8843      	ldrh	r3, [r0, #2]
   d5348:	2b0a      	cmp	r3, #10
   d534a:	d008      	beq.n	d535e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d534c:	2b50      	cmp	r3, #80	; 0x50
   d534e:	d10b      	bne.n	d5368 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5350:	4b09      	ldr	r3, [pc, #36]	; (d5378 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5352:	681b      	ldr	r3, [r3, #0]
   d5354:	b14b      	cbz	r3, d536a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5356:	b003      	add	sp, #12
   d5358:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d535c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d535e:	f7ff ffe5 	bl	d532c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5362:	b003      	add	sp, #12
   d5364:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5368:	2300      	movs	r3, #0
   d536a:	9300      	str	r3, [sp, #0]
   d536c:	461a      	mov	r2, r3
   d536e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5372:	f7ff fd9b 	bl	d4eac <system_ctrl_set_result>
}
   d5376:	e7f4      	b.n	d5362 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5378:	2003e67c 	.word	0x2003e67c

000d537c <module_user_init_hook>:
{
   d537c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d537e:	4c12      	ldr	r4, [pc, #72]	; (d53c8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5380:	4812      	ldr	r0, [pc, #72]	; (d53cc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5382:	4d13      	ldr	r5, [pc, #76]	; (d53d0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5384:	2100      	movs	r1, #0
   d5386:	f7ff fe33 	bl	d4ff0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d538a:	6823      	ldr	r3, [r4, #0]
   d538c:	42ab      	cmp	r3, r5
   d538e:	4b11      	ldr	r3, [pc, #68]	; (d53d4 <module_user_init_hook+0x58>)
   d5390:	bf0c      	ite	eq
   d5392:	2201      	moveq	r2, #1
   d5394:	2200      	movne	r2, #0
   d5396:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5398:	d002      	beq.n	d53a0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d539a:	f7ff ffbb 	bl	d5314 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d539e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d53a0:	f7ff fc1a 	bl	d4bd8 <HAL_RNG_GetRandomNumber>
   d53a4:	4604      	mov	r4, r0
    srand(seed);
   d53a6:	f001 f971 	bl	d668c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d53aa:	4b0b      	ldr	r3, [pc, #44]	; (d53d8 <module_user_init_hook+0x5c>)
   d53ac:	b113      	cbz	r3, d53b4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d53ae:	4620      	mov	r0, r4
   d53b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d53b4:	2100      	movs	r1, #0
   d53b6:	4808      	ldr	r0, [pc, #32]	; (d53d8 <module_user_init_hook+0x5c>)
   d53b8:	f7ff fdea 	bl	d4f90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d53bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d53c0:	4806      	ldr	r0, [pc, #24]	; (d53dc <module_user_init_hook+0x60>)
   d53c2:	2100      	movs	r1, #0
   d53c4:	f7ff bd68 	b.w	d4e98 <system_ctrl_set_app_request_handler>
   d53c8:	2003f400 	.word	0x2003f400
   d53cc:	000d52bd 	.word	0x000d52bd
   d53d0:	9a271c1e 	.word	0x9a271c1e
   d53d4:	2003e678 	.word	0x2003e678
   d53d8:	00000000 	.word	0x00000000
   d53dc:	000d5345 	.word	0x000d5345

000d53e0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d53e0:	4770      	bx	lr

000d53e2 <_ZN9IPAddressD0Ev>:
   d53e2:	b510      	push	{r4, lr}
   d53e4:	2118      	movs	r1, #24
   d53e6:	4604      	mov	r4, r0
   d53e8:	f000 fe3b 	bl	d6062 <_ZdlPvj>
   d53ec:	4620      	mov	r0, r4
   d53ee:	bd10      	pop	{r4, pc}

000d53f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53f2:	7d03      	ldrb	r3, [r0, #20]
   d53f4:	2b06      	cmp	r3, #6
{
   d53f6:	b08d      	sub	sp, #52	; 0x34
   d53f8:	460e      	mov	r6, r1
   d53fa:	f100 0704 	add.w	r7, r0, #4
   d53fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5402:	d012      	beq.n	d542a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5404:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d540c:	220a      	movs	r2, #10
   d540e:	4630      	mov	r0, r6
   d5410:	f7ff fed5 	bl	d51be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5414:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5416:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5418:	d019      	beq.n	d544e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d541a:	2c00      	cmp	r4, #0
   d541c:	d0f4      	beq.n	d5408 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d541e:	212e      	movs	r1, #46	; 0x2e
   d5420:	4630      	mov	r0, r6
   d5422:	f7ff feb3 	bl	d518c <_ZN5Print5printEc>
   d5426:	4404      	add	r4, r0
   d5428:	e7ee      	b.n	d5408 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d542a:	232f      	movs	r3, #47	; 0x2f
   d542c:	466a      	mov	r2, sp
   d542e:	4639      	mov	r1, r7
   d5430:	200a      	movs	r0, #10
		buf[0] = 0;
   d5432:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5436:	f7ff fbff 	bl	d4c38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d543a:	4668      	mov	r0, sp
   d543c:	f001 f990 	bl	d6760 <strlen>
   d5440:	6833      	ldr	r3, [r6, #0]
   d5442:	4602      	mov	r2, r0
   d5444:	68db      	ldr	r3, [r3, #12]
   d5446:	4669      	mov	r1, sp
   d5448:	4630      	mov	r0, r6
   d544a:	4798      	blx	r3
   d544c:	4604      	mov	r4, r0
    }
    return n;
}
   d544e:	4620      	mov	r0, r4
   d5450:	b00d      	add	sp, #52	; 0x34
   d5452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5454 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5454:	b510      	push	{r4, lr}
   d5456:	4b05      	ldr	r3, [pc, #20]	; (d546c <_ZN9IPAddressC1Ev+0x18>)
   d5458:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d545a:	2211      	movs	r2, #17
   d545c:	f840 3b04 	str.w	r3, [r0], #4
   d5460:	2100      	movs	r1, #0
   d5462:	f001 f90b 	bl	d667c <memset>
}
   d5466:	4620      	mov	r0, r4
   d5468:	bd10      	pop	{r4, pc}
   d546a:	bf00      	nop
   d546c:	000d6cac 	.word	0x000d6cac

000d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5470:	4603      	mov	r3, r0
   d5472:	4a07      	ldr	r2, [pc, #28]	; (d5490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5474:	b510      	push	{r4, lr}
   d5476:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d547a:	f101 0210 	add.w	r2, r1, #16
   d547e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5482:	f843 4b04 	str.w	r4, [r3], #4
   d5486:	4291      	cmp	r1, r2
   d5488:	d1f9      	bne.n	d547e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d548a:	780a      	ldrb	r2, [r1, #0]
   d548c:	701a      	strb	r2, [r3, #0]
}
   d548e:	bd10      	pop	{r4, pc}
   d5490:	000d6cac 	.word	0x000d6cac

000d5494 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5494:	7d03      	ldrb	r3, [r0, #20]
   d5496:	2b04      	cmp	r3, #4
   d5498:	d104      	bne.n	d54a4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d549a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d549c:	3800      	subs	r0, #0
   d549e:	bf18      	it	ne
   d54a0:	2001      	movne	r0, #1
   d54a2:	4770      	bx	lr
    } else if (version() == 6) {
   d54a4:	2b06      	cmp	r3, #6
   d54a6:	d107      	bne.n	d54b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d54a8:	6843      	ldr	r3, [r0, #4]
   d54aa:	b93b      	cbnz	r3, d54bc <_ZNK9IPAddresscvbEv+0x28>
   d54ac:	6883      	ldr	r3, [r0, #8]
   d54ae:	b92b      	cbnz	r3, d54bc <_ZNK9IPAddresscvbEv+0x28>
   d54b0:	68c3      	ldr	r3, [r0, #12]
   d54b2:	b91b      	cbnz	r3, d54bc <_ZNK9IPAddresscvbEv+0x28>
   d54b4:	6900      	ldr	r0, [r0, #16]
   d54b6:	e7f1      	b.n	d549c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d54b8:	2000      	movs	r0, #0
   d54ba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d54bc:	2001      	movs	r0, #1
}
   d54be:	4770      	bx	lr

000d54c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d54c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d54c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d54c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d54ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d54ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d54d2:	2304      	movs	r3, #4
   d54d4:	6041      	str	r1, [r0, #4]
   d54d6:	7503      	strb	r3, [r0, #20]
}
   d54d8:	bd10      	pop	{r4, pc}
	...

000d54dc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d54dc:	b513      	push	{r0, r1, r4, lr}
   d54de:	4b05      	ldr	r3, [pc, #20]	; (d54f4 <_ZN9IPAddressC1EPKh+0x18>)
   d54e0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d54e2:	78cb      	ldrb	r3, [r1, #3]
   d54e4:	9300      	str	r3, [sp, #0]
   d54e6:	788b      	ldrb	r3, [r1, #2]
   d54e8:	784a      	ldrb	r2, [r1, #1]
   d54ea:	7809      	ldrb	r1, [r1, #0]
   d54ec:	f7ff ffe8 	bl	d54c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d54f0:	b002      	add	sp, #8
   d54f2:	bd10      	pop	{r4, pc}
   d54f4:	000d6cac 	.word	0x000d6cac

000d54f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54f8:	7441      	strb	r1, [r0, #17]
}
   d54fa:	4770      	bx	lr

000d54fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54fc:	4770      	bx	lr

000d54fe <_ZN9USBSerial4readEv>:
{
   d54fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5500:	2100      	movs	r1, #0
   d5502:	7c00      	ldrb	r0, [r0, #16]
   d5504:	f7ff fc88 	bl	d4e18 <HAL_USB_USART_Receive_Data>
}
   d5508:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d550c:	bd08      	pop	{r3, pc}

000d550e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d550e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5510:	2101      	movs	r1, #1
   d5512:	7c00      	ldrb	r0, [r0, #16]
   d5514:	f7ff fc80 	bl	d4e18 <HAL_USB_USART_Receive_Data>
}
   d5518:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d551c:	bd08      	pop	{r3, pc}

000d551e <_ZN9USBSerial17availableForWriteEv>:
{
   d551e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5520:	7c00      	ldrb	r0, [r0, #16]
   d5522:	f7ff fc71 	bl	d4e08 <HAL_USB_USART_Available_Data_For_Write>
}
   d5526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d552a:	bd08      	pop	{r3, pc}

000d552c <_ZN9USBSerial9availableEv>:
{
   d552c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d552e:	7c00      	ldrb	r0, [r0, #16]
   d5530:	f7ff fc62 	bl	d4df8 <HAL_USB_USART_Available_Data>
}
   d5534:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5538:	bd08      	pop	{r3, pc}

000d553a <_ZN9USBSerial5writeEh>:
{
   d553a:	b513      	push	{r0, r1, r4, lr}
   d553c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d553e:	7c00      	ldrb	r0, [r0, #16]
{
   d5540:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5542:	f7ff fc61 	bl	d4e08 <HAL_USB_USART_Available_Data_For_Write>
   d5546:	2800      	cmp	r0, #0
   d5548:	9901      	ldr	r1, [sp, #4]
   d554a:	dc01      	bgt.n	d5550 <_ZN9USBSerial5writeEh+0x16>
   d554c:	7c60      	ldrb	r0, [r4, #17]
   d554e:	b120      	cbz	r0, d555a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5550:	7c20      	ldrb	r0, [r4, #16]
   d5552:	f7ff fc69 	bl	d4e28 <HAL_USB_USART_Send_Data>
   d5556:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d555a:	b002      	add	sp, #8
   d555c:	bd10      	pop	{r4, pc}

000d555e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d555e:	7c00      	ldrb	r0, [r0, #16]
   d5560:	f7ff bc6a 	b.w	d4e38 <HAL_USB_USART_Flush_Data>

000d5564 <_ZN9USBSerialD0Ev>:
   d5564:	b510      	push	{r4, lr}
   d5566:	2114      	movs	r1, #20
   d5568:	4604      	mov	r4, r0
   d556a:	f000 fd7a 	bl	d6062 <_ZdlPvj>
   d556e:	4620      	mov	r0, r4
   d5570:	bd10      	pop	{r4, pc}
	...

000d5574 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5574:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d557a:	4604      	mov	r4, r0
   d557c:	4608      	mov	r0, r1
   d557e:	2100      	movs	r1, #0
   d5580:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5584:	4b04      	ldr	r3, [pc, #16]	; (d5598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5586:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5588:	2301      	movs	r3, #1
  _serial = serial;
   d558a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d558c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d558e:	4611      	mov	r1, r2
   d5590:	f7ff fc22 	bl	d4dd8 <HAL_USB_USART_Init>
}
   d5594:	4620      	mov	r0, r4
   d5596:	bd10      	pop	{r4, pc}
   d5598:	000d6cc0 	.word	0x000d6cc0

000d559c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	2200      	movs	r2, #0
   d55a0:	f7ff bc22 	b.w	d4de8 <HAL_USB_USART_Begin>

000d55a4 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d55a4:	7c00      	ldrb	r0, [r0, #16]
   d55a6:	f7ff bc4f 	b.w	d4e48 <HAL_USB_USART_Is_Connected>

000d55aa <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55aa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55ac:	2214      	movs	r2, #20
{
   d55ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55b0:	2100      	movs	r1, #0
   d55b2:	f001 f863 	bl	d667c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55b6:	4620      	mov	r0, r4
   d55b8:	bd10      	pop	{r4, pc}
	...

000d55bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55be:	4c10      	ldr	r4, [pc, #64]	; (d5600 <_Z16_fetch_usbserialv+0x44>)
{
   d55c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55c2:	a803      	add	r0, sp, #12
   d55c4:	f7ff fff1 	bl	d55aa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55c8:	7821      	ldrb	r1, [r4, #0]
   d55ca:	f3bf 8f5b 	dmb	ish
   d55ce:	f011 0101 	ands.w	r1, r1, #1
   d55d2:	d111      	bne.n	d55f8 <_Z16_fetch_usbserialv+0x3c>
   d55d4:	4620      	mov	r0, r4
   d55d6:	9101      	str	r1, [sp, #4]
   d55d8:	f7fe fd6c 	bl	d40b4 <__cxa_guard_acquire>
   d55dc:	9901      	ldr	r1, [sp, #4]
   d55de:	b158      	cbz	r0, d55f8 <_Z16_fetch_usbserialv+0x3c>
   d55e0:	aa03      	add	r2, sp, #12
   d55e2:	4808      	ldr	r0, [pc, #32]	; (d5604 <_Z16_fetch_usbserialv+0x48>)
   d55e4:	f7ff ffc6 	bl	d5574 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55e8:	4620      	mov	r0, r4
   d55ea:	f7fe fd68 	bl	d40be <__cxa_guard_release>
   d55ee:	4a06      	ldr	r2, [pc, #24]	; (d5608 <_Z16_fetch_usbserialv+0x4c>)
   d55f0:	4906      	ldr	r1, [pc, #24]	; (d560c <_Z16_fetch_usbserialv+0x50>)
   d55f2:	4804      	ldr	r0, [pc, #16]	; (d5604 <_Z16_fetch_usbserialv+0x48>)
   d55f4:	f000 fd30 	bl	d6058 <__aeabi_atexit>
	return _usbserial;
}
   d55f8:	4802      	ldr	r0, [pc, #8]	; (d5604 <_Z16_fetch_usbserialv+0x48>)
   d55fa:	b008      	add	sp, #32
   d55fc:	bd10      	pop	{r4, pc}
   d55fe:	bf00      	nop
   d5600:	2003e680 	.word	0x2003e680
   d5604:	2003e684 	.word	0x2003e684
   d5608:	2003e4ec 	.word	0x2003e4ec
   d560c:	000d54fd 	.word	0x000d54fd

000d5610 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5610:	4770      	bx	lr

000d5612 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5612:	7441      	strb	r1, [r0, #17]
}
   d5614:	4770      	bx	lr

000d5616 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5616:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5618:	7c00      	ldrb	r0, [r0, #16]
   d561a:	f7ff fb5d 	bl	d4cd8 <hal_usart_available_data_for_write>
}
   d561e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5622:	bd08      	pop	{r3, pc}

000d5624 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5624:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5626:	7c00      	ldrb	r0, [r0, #16]
   d5628:	f7ff fb2e 	bl	d4c88 <hal_usart_available>
}
   d562c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5630:	bd08      	pop	{r3, pc}

000d5632 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5632:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5634:	7c00      	ldrb	r0, [r0, #16]
   d5636:	f7ff fb37 	bl	d4ca8 <hal_usart_peek>
}
   d563a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d563e:	bd08      	pop	{r3, pc}

000d5640 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5640:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5642:	7c00      	ldrb	r0, [r0, #16]
   d5644:	f7ff fb28 	bl	d4c98 <hal_usart_read>
}
   d5648:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d564c:	bd08      	pop	{r3, pc}

000d564e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d564e:	7c00      	ldrb	r0, [r0, #16]
   d5650:	f7ff bb32 	b.w	d4cb8 <hal_usart_flush>

000d5654 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5656:	7c45      	ldrb	r5, [r0, #17]
{
   d5658:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d565a:	b12d      	cbz	r5, d5668 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d565c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d565e:	b003      	add	sp, #12
   d5660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5664:	f7ff bb08 	b.w	d4c78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5668:	7c00      	ldrb	r0, [r0, #16]
   d566a:	9101      	str	r1, [sp, #4]
   d566c:	f7ff fb34 	bl	d4cd8 <hal_usart_available_data_for_write>
   d5670:	2800      	cmp	r0, #0
   d5672:	9901      	ldr	r1, [sp, #4]
   d5674:	dcf2      	bgt.n	d565c <_ZN11USARTSerial5writeEh+0x8>
}
   d5676:	4628      	mov	r0, r5
   d5678:	b003      	add	sp, #12
   d567a:	bd30      	pop	{r4, r5, pc}

000d567c <_ZN11USARTSerialD0Ev>:
   d567c:	b510      	push	{r4, lr}
   d567e:	2114      	movs	r1, #20
   d5680:	4604      	mov	r4, r0
   d5682:	f000 fcee 	bl	d6062 <_ZdlPvj>
   d5686:	4620      	mov	r0, r4
   d5688:	bd10      	pop	{r4, pc}
	...

000d568c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d568c:	b510      	push	{r4, lr}
   d568e:	f04f 0c00 	mov.w	ip, #0
   d5692:	4604      	mov	r4, r0
   d5694:	4608      	mov	r0, r1
   d5696:	4611      	mov	r1, r2
   d5698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d569c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d56a0:	4a04      	ldr	r2, [pc, #16]	; (d56b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d56a2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d56a4:	2201      	movs	r2, #1
  _serial = serial;
   d56a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d56a8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d56aa:	461a      	mov	r2, r3
   d56ac:	f7ff fadc 	bl	d4c68 <hal_usart_init>
}
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd10      	pop	{r4, pc}
   d56b4:	000d6cf0 	.word	0x000d6cf0

000d56b8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d56b8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d56ba:	4c0e      	ldr	r4, [pc, #56]	; (d56f4 <_Z22__fetch_global_Serial1v+0x3c>)
   d56bc:	7821      	ldrb	r1, [r4, #0]
   d56be:	f3bf 8f5b 	dmb	ish
   d56c2:	f011 0101 	ands.w	r1, r1, #1
   d56c6:	d112      	bne.n	d56ee <_Z22__fetch_global_Serial1v+0x36>
   d56c8:	4620      	mov	r0, r4
   d56ca:	9101      	str	r1, [sp, #4]
   d56cc:	f7fe fcf2 	bl	d40b4 <__cxa_guard_acquire>
   d56d0:	9901      	ldr	r1, [sp, #4]
   d56d2:	b160      	cbz	r0, d56ee <_Z22__fetch_global_Serial1v+0x36>
   d56d4:	4a08      	ldr	r2, [pc, #32]	; (d56f8 <_Z22__fetch_global_Serial1v+0x40>)
   d56d6:	4b09      	ldr	r3, [pc, #36]	; (d56fc <_Z22__fetch_global_Serial1v+0x44>)
   d56d8:	4809      	ldr	r0, [pc, #36]	; (d5700 <_Z22__fetch_global_Serial1v+0x48>)
   d56da:	f7ff ffd7 	bl	d568c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d56de:	4620      	mov	r0, r4
   d56e0:	f7fe fced 	bl	d40be <__cxa_guard_release>
   d56e4:	4a07      	ldr	r2, [pc, #28]	; (d5704 <_Z22__fetch_global_Serial1v+0x4c>)
   d56e6:	4908      	ldr	r1, [pc, #32]	; (d5708 <_Z22__fetch_global_Serial1v+0x50>)
   d56e8:	4805      	ldr	r0, [pc, #20]	; (d5700 <_Z22__fetch_global_Serial1v+0x48>)
   d56ea:	f000 fcb5 	bl	d6058 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d56ee:	4804      	ldr	r0, [pc, #16]	; (d5700 <_Z22__fetch_global_Serial1v+0x48>)
   d56f0:	b002      	add	sp, #8
   d56f2:	bd10      	pop	{r4, pc}
   d56f4:	2003e698 	.word	0x2003e698
   d56f8:	2003e69c 	.word	0x2003e69c
   d56fc:	2003e720 	.word	0x2003e720
   d5700:	2003e7a4 	.word	0x2003e7a4
   d5704:	2003e4ec 	.word	0x2003e4ec
   d5708:	000d5611 	.word	0x000d5611

000d570c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d570c:	4770      	bx	lr

000d570e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d570e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5710:	4606      	mov	r6, r0
   d5712:	4615      	mov	r5, r2
   d5714:	460c      	mov	r4, r1
   d5716:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5718:	42bc      	cmp	r4, r7
   d571a:	d006      	beq.n	d572a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d571c:	6833      	ldr	r3, [r6, #0]
   d571e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5722:	689b      	ldr	r3, [r3, #8]
   d5724:	4630      	mov	r0, r6
   d5726:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5728:	e7f6      	b.n	d5718 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d572a:	4628      	mov	r0, r5
   d572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d572e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d572e:	7c00      	ldrb	r0, [r0, #16]
   d5730:	2200      	movs	r2, #0
   d5732:	f7ff bad9 	b.w	d4ce8 <hal_i2c_write>

000d5736 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5736:	7c00      	ldrb	r0, [r0, #16]
   d5738:	2100      	movs	r1, #0
   d573a:	f7ff badd 	b.w	d4cf8 <hal_i2c_available>

000d573e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d573e:	7c00      	ldrb	r0, [r0, #16]
   d5740:	2100      	movs	r1, #0
   d5742:	f7ff bae1 	b.w	d4d08 <hal_i2c_read>

000d5746 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5746:	7c00      	ldrb	r0, [r0, #16]
   d5748:	2100      	movs	r1, #0
   d574a:	f7ff bae5 	b.w	d4d18 <hal_i2c_peek>

000d574e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d574e:	7c00      	ldrb	r0, [r0, #16]
   d5750:	2100      	movs	r1, #0
   d5752:	f7ff bae9 	b.w	d4d28 <hal_i2c_flush>

000d5756 <_ZN7TwoWireD0Ev>:
   d5756:	b510      	push	{r4, lr}
   d5758:	2114      	movs	r1, #20
   d575a:	4604      	mov	r4, r0
   d575c:	f000 fc81 	bl	d6062 <_ZdlPvj>
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5764:	b510      	push	{r4, lr}
   d5766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d576a:	4604      	mov	r4, r0
   d576c:	4608      	mov	r0, r1
   d576e:	2100      	movs	r1, #0
   d5770:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5774:	4b03      	ldr	r3, [pc, #12]	; (d5784 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5776:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5778:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d577a:	4611      	mov	r1, r2
   d577c:	f7ff fae4 	bl	d4d48 <hal_i2c_init>
}
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}
   d5784:	000d6d20 	.word	0x000d6d20

000d5788 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5788:	b510      	push	{r4, lr}
  if (0 == max) {
   d578a:	4604      	mov	r4, r0
   d578c:	b128      	cbz	r0, d579a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d578e:	f000 ffa1 	bl	d66d4 <rand>
   d5792:	fb90 f3f4 	sdiv	r3, r0, r4
   d5796:	fb03 0414 	mls	r4, r3, r4, r0
}
   d579a:	4620      	mov	r0, r4
   d579c:	bd10      	pop	{r4, pc}

000d579e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d579e:	4288      	cmp	r0, r1
{
   d57a0:	b510      	push	{r4, lr}
   d57a2:	4604      	mov	r4, r0
  if (min >= max) {
   d57a4:	da03      	bge.n	d57ae <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d57a6:	1a08      	subs	r0, r1, r0
   d57a8:	f7ff ffee 	bl	d5788 <_Z6randomi>
   d57ac:	4404      	add	r4, r0
}
   d57ae:	4620      	mov	r0, r4
   d57b0:	bd10      	pop	{r4, pc}

000d57b2 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d57b2:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d57b4:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d57b6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d57ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d57bc:	2201      	movs	r2, #1
   d57be:	f04f 33ff 	mov.w	r3, #4294967295
   d57c2:	f10d 0107 	add.w	r1, sp, #7
   d57c6:	47a0      	blx	r4
}
   d57c8:	b002      	add	sp, #8
   d57ca:	bd10      	pop	{r4, pc}

000d57cc <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d57cc:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d57ce:	6803      	ldr	r3, [r0, #0]
   d57d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d57d2:	f04f 33ff 	mov.w	r3, #4294967295
   d57d6:	46a4      	mov	ip, r4
}
   d57d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d57dc:	4760      	bx	ip

000d57de <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d57de:	b513      	push	{r0, r1, r4, lr}
   d57e0:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d57e2:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d57e4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d57e8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d57ea:	f10d 0107 	add.w	r1, sp, #7
   d57ee:	2201      	movs	r2, #1
   d57f0:	47a0      	blx	r4
}
   d57f2:	b002      	add	sp, #8
   d57f4:	bd10      	pop	{r4, pc}

000d57f6 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d57f6:	4770      	bx	lr

000d57f8 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d57f8:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d57fa:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d57fc:	681a      	ldr	r2, [r3, #0]
   d57fe:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5800:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5802:	da10      	bge.n	d5826 <_ZN9TCPClient9connectedEv+0x2e>
   d5804:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5808:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d580c:	429a      	cmp	r2, r3
   d580e:	d10a      	bne.n	d5826 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d5810:	6803      	ldr	r3, [r0, #0]
   d5812:	691b      	ldr	r3, [r3, #16]
   d5814:	4798      	blx	r3
        if (!rv) {
   d5816:	4604      	mov	r4, r0
   d5818:	b928      	cbnz	r0, d5826 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d581a:	682b      	ldr	r3, [r5, #0]
   d581c:	4628      	mov	r0, r5
   d581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5820:	4798      	blx	r3
        rv = available();
   d5822:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d5824:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d5826:	2001      	movs	r0, #1
   d5828:	e7fc      	b.n	d5824 <_ZN9TCPClient9connectedEv+0x2c>

000d582a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d582a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d582c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d582e:	43c0      	mvns	r0, r0
   d5830:	0fc0      	lsrs	r0, r0, #31
   d5832:	4770      	bx	lr

000d5834 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5834:	4770      	bx	lr
	...

000d5838 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5838:	4b06      	ldr	r3, [pc, #24]	; (d5854 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d583a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d583c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d583e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5842:	d005      	beq.n	d5850 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5844:	4608      	mov	r0, r1
   d5846:	f000 fc11 	bl	d606c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d584a:	2800      	cmp	r0, #0
	return nullptr;
   d584c:	bf08      	it	eq
   d584e:	2400      	moveq	r4, #0
      }
   d5850:	4620      	mov	r0, r4
   d5852:	bd10      	pop	{r4, pc}
   d5854:	000d6c7c 	.word	0x000d6c7c

000d5858 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5858:	b510      	push	{r4, lr}
   d585a:	21ac      	movs	r1, #172	; 0xac
   d585c:	4604      	mov	r4, r0
   d585e:	f000 fc00 	bl	d6062 <_ZdlPvj>
   d5862:	4620      	mov	r0, r4
   d5864:	bd10      	pop	{r4, pc}

000d5866 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5866:	f7fe bc18 	b.w	d409a <_ZdlPv>

000d586a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d586e:	f04f 0800 	mov.w	r8, #0
   d5872:	b086      	sub	sp, #24
   d5874:	461d      	mov	r5, r3
   d5876:	f8c0 8004 	str.w	r8, [r0, #4]
   d587a:	4604      	mov	r4, r0
   d587c:	460e      	mov	r6, r1
   d587e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5880:	4641      	mov	r1, r8
   d5882:	2210      	movs	r2, #16
   d5884:	a802      	add	r0, sp, #8
   d5886:	f000 fef9 	bl	d667c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d588a:	1c6b      	adds	r3, r5, #1
   d588c:	d009      	beq.n	d58a2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d588e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5892:	fbb5 f3f0 	udiv	r3, r5, r0
   d5896:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d589a:	fb00 5313 	mls	r3, r0, r3, r5
   d589e:	4358      	muls	r0, r3
   d58a0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d58a2:	6960      	ldr	r0, [r4, #20]
   d58a4:	2310      	movs	r3, #16
   d58a6:	9300      	str	r3, [sp, #0]
   d58a8:	6800      	ldr	r0, [r0, #0]
   d58aa:	ab02      	add	r3, sp, #8
   d58ac:	f241 0205 	movw	r2, #4101	; 0x1005
   d58b0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d58b4:	f7ff fa50 	bl	d4d58 <sock_setsockopt>
    if (ret < 0) {
   d58b8:	2800      	cmp	r0, #0
   d58ba:	da07      	bge.n	d58cc <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d58bc:	f7ff fb90 	bl	d4fe0 <__errno>
   d58c0:	6803      	ldr	r3, [r0, #0]
   d58c2:	6063      	str	r3, [r4, #4]
        return 0;
   d58c4:	2000      	movs	r0, #0
}
   d58c6:	b006      	add	sp, #24
   d58c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d58cc:	6960      	ldr	r0, [r4, #20]
   d58ce:	2300      	movs	r3, #0
   d58d0:	6800      	ldr	r0, [r0, #0]
   d58d2:	463a      	mov	r2, r7
   d58d4:	4631      	mov	r1, r6
   d58d6:	f7ff fa5f 	bl	d4d98 <sock_send>
    if (ret < 0) {
   d58da:	1e03      	subs	r3, r0, #0
   d58dc:	dbee      	blt.n	d58bc <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d58de:	4618      	mov	r0, r3
   d58e0:	e7f1      	b.n	d58c6 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d58e4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d58e4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d58e6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d58e8:	4b05      	ldr	r3, [pc, #20]	; (d5900 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d58ea:	4604      	mov	r4, r0
   d58ec:	358c      	adds	r5, #140	; 0x8c
   d58ee:	f844 3b04 	str.w	r3, [r4], #4
   d58f2:	4606      	mov	r6, r0
   d58f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58f8:	682b      	ldr	r3, [r5, #0]
   d58fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d58fc:	4630      	mov	r0, r6
   d58fe:	bd70      	pop	{r4, r5, r6, pc}
   d5900:	000d6cac 	.word	0x000d6cac

000d5904 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d5904:	b510      	push	{r4, lr}
   d5906:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5908:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d590c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5910:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d5912:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5914:	d005      	beq.n	d5922 <_ZN9TCPClient4peekEv+0x1e>
   d5916:	6963      	ldr	r3, [r4, #20]
   d5918:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d591c:	4413      	add	r3, r2
   d591e:	7918      	ldrb	r0, [r3, #4]
}
   d5920:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5922:	6803      	ldr	r3, [r0, #0]
   d5924:	691b      	ldr	r3, [r3, #16]
   d5926:	4798      	blx	r3
   d5928:	2800      	cmp	r0, #0
   d592a:	d1f4      	bne.n	d5916 <_ZN9TCPClient4peekEv+0x12>
   d592c:	f04f 30ff 	mov.w	r0, #4294967295
   d5930:	e7f6      	b.n	d5920 <_ZN9TCPClient4peekEv+0x1c>

000d5932 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5932:	b510      	push	{r4, lr}
   d5934:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5936:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d593a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d593e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5940:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5942:	d008      	beq.n	d5956 <_ZN9TCPClient4readEv+0x24>
   d5944:	6963      	ldr	r3, [r4, #20]
   d5946:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d594a:	1c51      	adds	r1, r2, #1
   d594c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5950:	4413      	add	r3, r2
   d5952:	7918      	ldrb	r0, [r3, #4]
}
   d5954:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5956:	6803      	ldr	r3, [r0, #0]
   d5958:	691b      	ldr	r3, [r3, #16]
   d595a:	4798      	blx	r3
   d595c:	2800      	cmp	r0, #0
   d595e:	d1f1      	bne.n	d5944 <_ZN9TCPClient4readEv+0x12>
   d5960:	f04f 30ff 	mov.w	r0, #4294967295
   d5964:	e7f6      	b.n	d5954 <_ZN9TCPClient4readEv+0x22>

000d5966 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5968:	6943      	ldr	r3, [r0, #20]
   d596a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d596c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5970:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5974:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5976:	4605      	mov	r5, r0
   d5978:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d597a:	d016      	beq.n	d59aa <_ZN9TCPClient4readEPhj+0x44>
   d597c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d597e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5982:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5986:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5988:	42bc      	cmp	r4, r7
   d598a:	bf28      	it	cs
   d598c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d598e:	3304      	adds	r3, #4
   d5990:	4622      	mov	r2, r4
   d5992:	4419      	add	r1, r3
   d5994:	4630      	mov	r0, r6
   d5996:	f000 fe49 	bl	d662c <memcpy>
   d599a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d599c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d59a0:	4423      	add	r3, r4
   d59a2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d59a6:	4620      	mov	r0, r4
   d59a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d59aa:	6803      	ldr	r3, [r0, #0]
   d59ac:	691b      	ldr	r3, [r3, #16]
   d59ae:	4798      	blx	r3
   d59b0:	2800      	cmp	r0, #0
   d59b2:	d1e3      	bne.n	d597c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d59b4:	f04f 34ff 	mov.w	r4, #4294967295
   d59b8:	e7f5      	b.n	d59a6 <_ZN9TCPClient4readEPhj+0x40>

000d59ba <_ZN9TCPClient12flush_bufferEv>:
   d59ba:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d59bc:	2300      	movs	r3, #0
   d59be:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d59c2:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d59c4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d59c8:	4770      	bx	lr

000d59ca <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d59ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59ce:	461f      	mov	r7, r3
    stop();
   d59d0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d59d2:	460c      	mov	r4, r1
    stop();
   d59d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d59d6:	b08a      	sub	sp, #40	; 0x28
   d59d8:	4605      	mov	r5, r0
   d59da:	4616      	mov	r6, r2
    stop();
   d59dc:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d59de:	7d23      	ldrb	r3, [r4, #20]
   d59e0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d59e4:	2b04      	cmp	r3, #4
   d59e6:	bf0c      	ite	eq
   d59e8:	2002      	moveq	r0, #2
   d59ea:	200a      	movne	r0, #10
   d59ec:	2206      	movs	r2, #6
   d59ee:	2101      	movs	r1, #1
   d59f0:	f7ff f9da 	bl	d4da8 <sock_socket>
   d59f4:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d59f8:	696b      	ldr	r3, [r5, #20]
   d59fa:	681b      	ldr	r3, [r3, #0]
   d59fc:	2b00      	cmp	r3, #0
   d59fe:	da08      	bge.n	d5a12 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d5a00:	682b      	ldr	r3, [r5, #0]
   d5a02:	4628      	mov	r0, r5
   d5a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5a06:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d5a08:	4798      	blx	r3
}
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	b00a      	add	sp, #40	; 0x28
   d5a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d5a12:	4628      	mov	r0, r5
   d5a14:	f7ff ffd1 	bl	d59ba <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d5a18:	b1b7      	cbz	r7, d5a48 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d5a1a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5a1c:	a903      	add	r1, sp, #12
   d5a1e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d5a20:	9303      	str	r3, [sp, #12]
   d5a22:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5a26:	f7ff f8cf 	bl	d4bc8 <if_index_to_name>
   d5a2a:	2800      	cmp	r0, #0
   d5a2c:	d1e8      	bne.n	d5a00 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5a2e:	6968      	ldr	r0, [r5, #20]
   d5a30:	2306      	movs	r3, #6
   d5a32:	9300      	str	r3, [sp, #0]
   d5a34:	6800      	ldr	r0, [r0, #0]
   d5a36:	ab03      	add	r3, sp, #12
   d5a38:	f241 020b 	movw	r2, #4107	; 0x100b
   d5a3c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5a40:	f7ff f98a 	bl	d4d58 <sock_setsockopt>
   d5a44:	2800      	cmp	r0, #0
   d5a46:	d1db      	bne.n	d5a00 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d5a48:	221c      	movs	r2, #28
   d5a4a:	2100      	movs	r1, #0
   d5a4c:	a803      	add	r0, sp, #12
   d5a4e:	f000 fe15 	bl	d667c <memset>
    if (ip.version() == 4) {
   d5a52:	7d23      	ldrb	r3, [r4, #20]
   d5a54:	2b04      	cmp	r3, #4
   d5a56:	d11d      	bne.n	d5a94 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d5a58:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5a5c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5a5e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5a62:	f7ff f8f9 	bl	d4c58 <inet_htons>
   d5a66:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5a6a:	6860      	ldr	r0, [r4, #4]
   d5a6c:	f7ff f8ec 	bl	d4c48 <inet_htonl>
   d5a70:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5a72:	696b      	ldr	r3, [r5, #20]
   d5a74:	221c      	movs	r2, #28
   d5a76:	6818      	ldr	r0, [r3, #0]
   d5a78:	a903      	add	r1, sp, #12
   d5a7a:	f7ff f97d 	bl	d4d78 <sock_connect>
   d5a7e:	2800      	cmp	r0, #0
   d5a80:	d1be      	bne.n	d5a00 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5a82:	3404      	adds	r4, #4
   d5a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a86:	696d      	ldr	r5, [r5, #20]
   d5a88:	358c      	adds	r5, #140	; 0x8c
   d5a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5a8c:	6823      	ldr	r3, [r4, #0]
   d5a8e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5a90:	2401      	movs	r4, #1
   d5a92:	e7ba      	b.n	d5a0a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d5a94:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d5a98:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d5a9a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5a9e:	f7ff f8db 	bl	d4c58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5aa2:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d5aa4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5aa8:	1d23      	adds	r3, r4, #4
   d5aaa:	f104 0714 	add.w	r7, r4, #20
   d5aae:	6818      	ldr	r0, [r3, #0]
   d5ab0:	6859      	ldr	r1, [r3, #4]
   d5ab2:	4632      	mov	r2, r6
   d5ab4:	c203      	stmia	r2!, {r0, r1}
   d5ab6:	3308      	adds	r3, #8
   d5ab8:	42bb      	cmp	r3, r7
   d5aba:	4616      	mov	r6, r2
   d5abc:	d1f7      	bne.n	d5aae <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5abe:	e7d8      	b.n	d5a72 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d5ac0 <_ZN9TCPClient9availableEv>:
{
   d5ac0:	b530      	push	{r4, r5, lr}
   d5ac2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d5ac4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d5ac8:	b08b      	sub	sp, #44	; 0x2c
   d5aca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d5acc:	b12b      	cbz	r3, d5ada <_ZN9TCPClient9availableEv+0x1a>
   d5ace:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5ad2:	429a      	cmp	r2, r3
   d5ad4:	d101      	bne.n	d5ada <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d5ad6:	f7ff ff70 	bl	d59ba <_ZN9TCPClient12flush_bufferEv>
   d5ada:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d5adc:	6808      	ldr	r0, [r1, #0]
   d5ade:	2800      	cmp	r0, #0
   d5ae0:	db18      	blt.n	d5b14 <_ZN9TCPClient9availableEv+0x54>
   d5ae2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d5ae6:	2d7f      	cmp	r5, #127	; 0x7f
   d5ae8:	d814      	bhi.n	d5b14 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5aea:	3104      	adds	r1, #4
   d5aec:	2308      	movs	r3, #8
   d5aee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5af2:	4429      	add	r1, r5
   d5af4:	f7ff f948 	bl	d4d88 <sock_recv>
            if (ret > 0) {
   d5af8:	2800      	cmp	r0, #0
   d5afa:	dd13      	ble.n	d5b24 <_ZN9TCPClient9availableEv+0x64>
   d5afc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5afe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5b02:	b90a      	cbnz	r2, d5b08 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d5b04:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5b08:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d5b0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5b0e:	4410      	add	r0, r2
   d5b10:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d5b14:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d5b16:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d5b1a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d5b1e:	1ac0      	subs	r0, r0, r3
   d5b20:	b00b      	add	sp, #44	; 0x2c
   d5b22:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5b24:	f7ff fa5c 	bl	d4fe0 <__errno>
   d5b28:	6803      	ldr	r3, [r0, #0]
   d5b2a:	2b0b      	cmp	r3, #11
   d5b2c:	d0f2      	beq.n	d5b14 <_ZN9TCPClient9availableEv+0x54>
   d5b2e:	f7ff fa57 	bl	d4fe0 <__errno>
   d5b32:	6803      	ldr	r3, [r0, #0]
   d5b34:	2b0b      	cmp	r3, #11
   d5b36:	d0ed      	beq.n	d5b14 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d5b38:	2320      	movs	r3, #32
   d5b3a:	2500      	movs	r5, #0
   d5b3c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d5b40:	f7ff fa4e 	bl	d4fe0 <__errno>
   d5b44:	6803      	ldr	r3, [r0, #0]
   d5b46:	9301      	str	r3, [sp, #4]
   d5b48:	4b08      	ldr	r3, [pc, #32]	; (d5b6c <_ZN9TCPClient9availableEv+0xac>)
   d5b4a:	4909      	ldr	r1, [pc, #36]	; (d5b70 <_ZN9TCPClient9availableEv+0xb0>)
   d5b4c:	9300      	str	r3, [sp, #0]
   d5b4e:	aa02      	add	r2, sp, #8
   d5b50:	462b      	mov	r3, r5
   d5b52:	2032      	movs	r0, #50	; 0x32
   d5b54:	f7ff f988 	bl	d4e68 <log_message>
                    sock_close(d_->sock);
   d5b58:	6963      	ldr	r3, [r4, #20]
   d5b5a:	6818      	ldr	r0, [r3, #0]
   d5b5c:	f7ff f904 	bl	d4d68 <sock_close>
   d5b60:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5b62:	f04f 32ff 	mov.w	r2, #4294967295
   d5b66:	601a      	str	r2, [r3, #0]
   d5b68:	e7d4      	b.n	d5b14 <_ZN9TCPClient9availableEv+0x54>
   d5b6a:	bf00      	nop
   d5b6c:	000d6d47 	.word	0x000d6d47
   d5b70:	000d6d40 	.word	0x000d6d40

000d5b74 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d5b74:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5b76:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5b78:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5b7a:	6818      	ldr	r0, [r3, #0]
   d5b7c:	2800      	cmp	r0, #0
   d5b7e:	db01      	blt.n	d5b84 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5b80:	f7ff f8f2 	bl	d4d68 <sock_close>
   d5b84:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d5b86:	f04f 32ff 	mov.w	r2, #4294967295
   d5b8a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d5b8c:	6960      	ldr	r0, [r4, #20]
   d5b8e:	2211      	movs	r2, #17
   d5b90:	2100      	movs	r1, #0
   d5b92:	308c      	adds	r0, #140	; 0x8c
   d5b94:	f000 fd72 	bl	d667c <memset>
    flush_buffer();
   d5b98:	4620      	mov	r0, r4
}
   d5b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5b9e:	f7ff bf0c 	b.w	d59ba <_ZN9TCPClient12flush_bufferEv>

000d5ba2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d5ba2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5ba4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d5ba6:	4604      	mov	r4, r0
          total(0) {
   d5ba8:	6001      	str	r1, [r0, #0]
   d5baa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5bae:	3088      	adds	r0, #136	; 0x88
   d5bb0:	f7ff fc50 	bl	d5454 <_ZN9IPAddressC1Ev>
}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d5bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5bba:	2300      	movs	r3, #0
   d5bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bc0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d5bc4:	4a0e      	ldr	r2, [pc, #56]	; (d5c00 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d5bc6:	6103      	str	r3, [r0, #16]
   d5bc8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5bca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d5bcc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5bce:	20ac      	movs	r0, #172	; 0xac
   d5bd0:	9101      	str	r1, [sp, #4]
   d5bd2:	f7fe fa5e 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5bd6:	1e05      	subs	r5, r0, #0
   d5bd8:	f105 060c 	add.w	r6, r5, #12
   d5bdc:	d008      	beq.n	d5bf0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d5bde:	2301      	movs	r3, #1
   d5be0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d5be4:	4b07      	ldr	r3, [pc, #28]	; (d5c04 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5be6:	9901      	ldr	r1, [sp, #4]
   d5be8:	602b      	str	r3, [r5, #0]
   d5bea:	4630      	mov	r0, r6
   d5bec:	f7ff ffd9 	bl	d5ba2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d5bf0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d5bf2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d5bf6:	f7ff fee0 	bl	d59ba <_ZN9TCPClient12flush_bufferEv>
}
   d5bfa:	b002      	add	sp, #8
   d5bfc:	bd70      	pop	{r4, r5, r6, pc}
   d5bfe:	bf00      	nop
   d5c00:	000d6d7c 	.word	0x000d6d7c
   d5c04:	000d6d60 	.word	0x000d6d60

000d5c08 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d5c08:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5c0a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d5c0e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5c10:	f7ff ffd2 	bl	d5bb8 <_ZN9TCPClientC1Ei>
}
   d5c14:	4620      	mov	r0, r4
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5c1c:	6800      	ldr	r0, [r0, #0]
   d5c1e:	2800      	cmp	r0, #0
   d5c20:	db01      	blt.n	d5c26 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5c22:	f7ff f8a1 	bl	d4d68 <sock_close>
    }
}
   d5c26:	4620      	mov	r0, r4
   d5c28:	bd10      	pop	{r4, pc}

000d5c2a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d5c2a:	300c      	adds	r0, #12
   d5c2c:	f7ff bff4 	b.w	d5c18 <_ZN9TCPClient4DataD1Ev>

000d5c30 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c34:	4698      	mov	r8, r3
    stop();
   d5c36:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5c38:	b093      	sub	sp, #76	; 0x4c
   d5c3a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d5c3c:	2400      	movs	r4, #0
    stop();
   d5c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5c40:	4606      	mov	r6, r0
   d5c42:	4617      	mov	r7, r2
    stop();
   d5c44:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5c46:	4628      	mov	r0, r5
   d5c48:	466b      	mov	r3, sp
   d5c4a:	4622      	mov	r2, r4
   d5c4c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d5c4e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5c50:	f7fe ff92 	bl	d4b78 <netdb_getaddrinfo>
   d5c54:	4605      	mov	r5, r0
   d5c56:	2800      	cmp	r0, #0
   d5c58:	d163      	bne.n	d5d22 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d5c5a:	9b00      	ldr	r3, [sp, #0]
   d5c5c:	2b00      	cmp	r3, #0
   d5c5e:	d04b      	beq.n	d5cf8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d5c60:	695b      	ldr	r3, [r3, #20]
   d5c62:	2b00      	cmp	r3, #0
   d5c64:	d048      	beq.n	d5cf8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d5c66:	a806      	add	r0, sp, #24
   d5c68:	f7ff fbf4 	bl	d5454 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5c6c:	9b00      	ldr	r3, [sp, #0]
   d5c6e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5c70:	7863      	ldrb	r3, [r4, #1]
   d5c72:	2b02      	cmp	r3, #2
   d5c74:	d104      	bne.n	d5c80 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5c76:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5c78:	a806      	add	r0, sp, #24
   d5c7a:	f7ff fa27 	bl	d50cc <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d5c7e:	e026      	b.n	d5cce <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d5c80:	2b0a      	cmp	r3, #10
   d5c82:	d124      	bne.n	d5cce <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d5c84:	2211      	movs	r2, #17
   d5c86:	4629      	mov	r1, r5
   d5c88:	a801      	add	r0, sp, #4
   d5c8a:	f000 fcf7 	bl	d667c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5c8e:	68a3      	ldr	r3, [r4, #8]
   d5c90:	2b00      	cmp	r3, #0
   d5c92:	d038      	beq.n	d5d06 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c94:	f104 0308 	add.w	r3, r4, #8
   d5c98:	f10d 0c04 	add.w	ip, sp, #4
   d5c9c:	3418      	adds	r4, #24
   d5c9e:	6818      	ldr	r0, [r3, #0]
   d5ca0:	6859      	ldr	r1, [r3, #4]
   d5ca2:	4662      	mov	r2, ip
   d5ca4:	c203      	stmia	r2!, {r0, r1}
   d5ca6:	3308      	adds	r3, #8
   d5ca8:	42a3      	cmp	r3, r4
   d5caa:	4694      	mov	ip, r2
   d5cac:	d1f7      	bne.n	d5c9e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d5cae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5cb0:	a901      	add	r1, sp, #4
   d5cb2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d5cb4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5cb8:	f7ff fbda 	bl	d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d5cbc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d5cc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5cc4:	ac07      	add	r4, sp, #28
   d5cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5cc8:	f8dc 3000 	ldr.w	r3, [ip]
   d5ccc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d5cce:	a806      	add	r0, sp, #24
   d5cd0:	f7ff fbe0 	bl	d5494 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5cd4:	b180      	cbz	r0, d5cf8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d5cd6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d5cd8:	ad07      	add	r5, sp, #28
   d5cda:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5cde:	4b12      	ldr	r3, [pc, #72]	; (d5d28 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d5ce0:	930c      	str	r3, [sp, #48]	; 0x30
   d5ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ce4:	ac0d      	add	r4, sp, #52	; 0x34
   d5ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ce8:	682b      	ldr	r3, [r5, #0]
   d5cea:	7023      	strb	r3, [r4, #0]
   d5cec:	463a      	mov	r2, r7
   d5cee:	4643      	mov	r3, r8
   d5cf0:	a90c      	add	r1, sp, #48	; 0x30
   d5cf2:	4630      	mov	r0, r6
   d5cf4:	47c8      	blx	r9
   d5cf6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d5cf8:	9800      	ldr	r0, [sp, #0]
   d5cfa:	f7fe ff35 	bl	d4b68 <netdb_freeaddrinfo>
}
   d5cfe:	4628      	mov	r0, r5
   d5d00:	b013      	add	sp, #76	; 0x4c
   d5d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5d06:	68e3      	ldr	r3, [r4, #12]
   d5d08:	2b00      	cmp	r3, #0
   d5d0a:	d1c3      	bne.n	d5c94 <_ZN9TCPClient7connectEPKctm+0x64>
   d5d0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5d10:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d5d14:	f7fe ff98 	bl	d4c48 <inet_htonl>
   d5d18:	4581      	cmp	r9, r0
   d5d1a:	d1bb      	bne.n	d5c94 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d5d1c:	f104 0114 	add.w	r1, r4, #20
   d5d20:	e7aa      	b.n	d5c78 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5d22:	4625      	mov	r5, r4
   d5d24:	e7e8      	b.n	d5cf8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d5d26:	bf00      	nop
   d5d28:	000d6cac 	.word	0x000d6cac

000d5d2c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d2c:	2200      	movs	r2, #0
   d5d2e:	6840      	ldr	r0, [r0, #4]
   d5d30:	4611      	mov	r1, r2
   d5d32:	f7ff b8dd 	b.w	d4ef0 <network_ready>

000d5d36 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d36:	2200      	movs	r2, #0
   d5d38:	6840      	ldr	r0, [r0, #4]
   d5d3a:	4611      	mov	r1, r2
   d5d3c:	f7ff b8f8 	b.w	d4f30 <network_listening>

000d5d40 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d40:	2200      	movs	r2, #0
   d5d42:	6840      	ldr	r0, [r0, #4]
   d5d44:	4611      	mov	r1, r2
   d5d46:	f7ff b903 	b.w	d4f50 <network_get_listen_timeout>

000d5d4a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d4a:	6840      	ldr	r0, [r0, #4]
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	f7ff b8f7 	b.w	d4f40 <network_set_listen_timeout>

000d5d52 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d52:	6840      	ldr	r0, [r0, #4]
   d5d54:	2200      	movs	r2, #0
   d5d56:	f081 0101 	eor.w	r1, r1, #1
   d5d5a:	f7ff b8e1 	b.w	d4f20 <network_listen>

000d5d5e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d5e:	2300      	movs	r3, #0
   d5d60:	6840      	ldr	r0, [r0, #4]
   d5d62:	461a      	mov	r2, r3
   d5d64:	4619      	mov	r1, r3
   d5d66:	f7ff b8d3 	b.w	d4f10 <network_off>

000d5d6a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d6a:	2200      	movs	r2, #0
   d5d6c:	6840      	ldr	r0, [r0, #4]
   d5d6e:	4611      	mov	r1, r2
   d5d70:	f7ff b8ae 	b.w	d4ed0 <network_connecting>

000d5d74 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d74:	6840      	ldr	r0, [r0, #4]
   d5d76:	2200      	movs	r2, #0
   d5d78:	2102      	movs	r1, #2
   d5d7a:	f7ff b8b1 	b.w	d4ee0 <network_disconnect>

000d5d7e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d7e:	2300      	movs	r3, #0
   d5d80:	6840      	ldr	r0, [r0, #4]
   d5d82:	461a      	mov	r2, r3
   d5d84:	f7ff b89c 	b.w	d4ec0 <network_connect>

000d5d88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d88:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d8a:	2204      	movs	r2, #4
   d5d8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d8e:	4a02      	ldr	r2, [pc, #8]	; (d5d98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d90:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5d92:	4770      	bx	lr
   d5d94:	2003e7b8 	.word	0x2003e7b8
   d5d98:	000d6dc8 	.word	0x000d6dc8

000d5d9c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d9c:	2300      	movs	r3, #0
   d5d9e:	6840      	ldr	r0, [r0, #4]
   d5da0:	461a      	mov	r2, r3
   d5da2:	f7ff b88d 	b.w	d4ec0 <network_connect>

000d5da6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	2200      	movs	r2, #0
   d5daa:	2102      	movs	r1, #2
   d5dac:	f7ff b898 	b.w	d4ee0 <network_disconnect>

000d5db0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5db0:	2200      	movs	r2, #0
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	4611      	mov	r1, r2
   d5db6:	f7ff b88b 	b.w	d4ed0 <network_connecting>

000d5dba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5dba:	2200      	movs	r2, #0
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	4611      	mov	r1, r2
   d5dc0:	f7ff b896 	b.w	d4ef0 <network_ready>

000d5dc4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5dc4:	2300      	movs	r3, #0
   d5dc6:	6840      	ldr	r0, [r0, #4]
   d5dc8:	461a      	mov	r2, r3
   d5dca:	4619      	mov	r1, r3
   d5dcc:	f7ff b898 	b.w	d4f00 <network_on>

000d5dd0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	461a      	mov	r2, r3
   d5dd6:	4619      	mov	r1, r3
   d5dd8:	f7ff b89a 	b.w	d4f10 <network_off>

000d5ddc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	2100      	movs	r1, #0
   d5de0:	f7ff b8be 	b.w	d4f60 <network_is_on>

000d5de4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5de4:	6840      	ldr	r0, [r0, #4]
   d5de6:	2100      	movs	r1, #0
   d5de8:	f7ff b8c2 	b.w	d4f70 <network_is_off>

000d5dec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5dec:	6840      	ldr	r0, [r0, #4]
   d5dee:	2200      	movs	r2, #0
   d5df0:	f081 0101 	eor.w	r1, r1, #1
   d5df4:	f7ff b894 	b.w	d4f20 <network_listen>

000d5df8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5df8:	6840      	ldr	r0, [r0, #4]
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	f7ff b8a0 	b.w	d4f40 <network_set_listen_timeout>

000d5e00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e00:	2200      	movs	r2, #0
   d5e02:	6840      	ldr	r0, [r0, #4]
   d5e04:	4611      	mov	r1, r2
   d5e06:	f7ff b8a3 	b.w	d4f50 <network_get_listen_timeout>

000d5e0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e0a:	2200      	movs	r2, #0
   d5e0c:	6840      	ldr	r0, [r0, #4]
   d5e0e:	4611      	mov	r1, r2
   d5e10:	f7ff b88e 	b.w	d4f30 <network_listening>

000d5e14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e18:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5e1a:	b095      	sub	sp, #84	; 0x54
   d5e1c:	4616      	mov	r6, r2
   d5e1e:	460d      	mov	r5, r1
   d5e20:	4607      	mov	r7, r0
    IPAddress addr;
   d5e22:	f7ff fb17 	bl	d5454 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5e26:	4621      	mov	r1, r4
   d5e28:	2218      	movs	r2, #24
   d5e2a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5e2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e2e:	f000 fc25 	bl	d667c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e32:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5e34:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e38:	4621      	mov	r1, r4
   d5e3a:	466b      	mov	r3, sp
   d5e3c:	aa0c      	add	r2, sp, #48	; 0x30
   d5e3e:	4630      	mov	r0, r6
   d5e40:	f7fe fe9a 	bl	d4b78 <netdb_getaddrinfo>
    if (!r) {
   d5e44:	4604      	mov	r4, r0
   d5e46:	2800      	cmp	r0, #0
   d5e48:	d14c      	bne.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e4a:	4602      	mov	r2, r0
   d5e4c:	2101      	movs	r1, #1
   d5e4e:	6868      	ldr	r0, [r5, #4]
   d5e50:	f7ff f84e 	bl	d4ef0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e58:	4622      	mov	r2, r4
   d5e5a:	6868      	ldr	r0, [r5, #4]
   d5e5c:	f7ff f848 	bl	d4ef0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e62:	4681      	mov	r9, r0
        bool ok = false;
   d5e64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e66:	2e00      	cmp	r6, #0
   d5e68:	d03c      	beq.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5e6a:	2900      	cmp	r1, #0
   d5e6c:	d13a      	bne.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e6e:	6873      	ldr	r3, [r6, #4]
   d5e70:	2b02      	cmp	r3, #2
   d5e72:	d003      	beq.n	d5e7c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5e74:	2b0a      	cmp	r3, #10
   d5e76:	d011      	beq.n	d5e9c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e78:	69f6      	ldr	r6, [r6, #28]
   d5e7a:	e7f4      	b.n	d5e66 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5e7c:	f1b8 0f00 	cmp.w	r8, #0
   d5e80:	d00a      	beq.n	d5e98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5e84:	a806      	add	r0, sp, #24
   d5e86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5e88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5e8a:	f7ff fb27 	bl	d54dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e90:	1d3c      	adds	r4, r7, #4
   d5e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e94:	682b      	ldr	r3, [r5, #0]
   d5e96:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5e98:	4641      	mov	r1, r8
   d5e9a:	e7ed      	b.n	d5e78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e9c:	f1b9 0f00 	cmp.w	r9, #0
   d5ea0:	d101      	bne.n	d5ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5ea2:	4649      	mov	r1, r9
   d5ea4:	e7e8      	b.n	d5e78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ea6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ea8:	2210      	movs	r2, #16
   d5eaa:	a801      	add	r0, sp, #4
   d5eac:	f000 fbe6 	bl	d667c <memset>
                    a.v = 6;
   d5eb0:	2306      	movs	r3, #6
   d5eb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5eb6:	ad01      	add	r5, sp, #4
   d5eb8:	f104 0308 	add.w	r3, r4, #8
   d5ebc:	3418      	adds	r4, #24
   d5ebe:	6818      	ldr	r0, [r3, #0]
   d5ec0:	6859      	ldr	r1, [r3, #4]
   d5ec2:	462a      	mov	r2, r5
   d5ec4:	c203      	stmia	r2!, {r0, r1}
   d5ec6:	3308      	adds	r3, #8
   d5ec8:	42a3      	cmp	r3, r4
   d5eca:	4615      	mov	r5, r2
   d5ecc:	d1f7      	bne.n	d5ebe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5ece:	a901      	add	r1, sp, #4
   d5ed0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5ed2:	ad07      	add	r5, sp, #28
   d5ed4:	f7ff facc 	bl	d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5eda:	1d3c      	adds	r4, r7, #4
   d5edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ede:	682b      	ldr	r3, [r5, #0]
   d5ee0:	7023      	strb	r3, [r4, #0]
   d5ee2:	e7de      	b.n	d5ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ee4:	9800      	ldr	r0, [sp, #0]
   d5ee6:	f7fe fe3f 	bl	d4b68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5eea:	4638      	mov	r0, r7
   d5eec:	b015      	add	sp, #84	; 0x54
   d5eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ef4:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ef6:	4a03      	ldr	r2, [pc, #12]	; (d5f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ef8:	601a      	str	r2, [r3, #0]
   d5efa:	2200      	movs	r2, #0
   d5efc:	605a      	str	r2, [r3, #4]

} // spark
   d5efe:	4770      	bx	lr
   d5f00:	2003e7c0 	.word	0x2003e7c0
   d5f04:	000d6e04 	.word	0x000d6e04

000d5f08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5f08:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5f0a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5f0c:	d902      	bls.n	d5f14 <pinAvailable+0xc>
    return false;
   d5f0e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5f10:	b002      	add	sp, #8
   d5f12:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5f14:	f1a0 030b 	sub.w	r3, r0, #11
   d5f18:	2b02      	cmp	r3, #2
   d5f1a:	d81a      	bhi.n	d5f52 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5f1c:	4c17      	ldr	r4, [pc, #92]	; (d5f7c <pinAvailable+0x74>)
   d5f1e:	7821      	ldrb	r1, [r4, #0]
   d5f20:	f3bf 8f5b 	dmb	ish
   d5f24:	f011 0101 	ands.w	r1, r1, #1
   d5f28:	d10b      	bne.n	d5f42 <pinAvailable+0x3a>
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	9101      	str	r1, [sp, #4]
   d5f2e:	f7fe f8c1 	bl	d40b4 <__cxa_guard_acquire>
   d5f32:	9901      	ldr	r1, [sp, #4]
   d5f34:	b128      	cbz	r0, d5f42 <pinAvailable+0x3a>
   d5f36:	4812      	ldr	r0, [pc, #72]	; (d5f80 <pinAvailable+0x78>)
   d5f38:	f7ff f8a0 	bl	d507c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	f7fe f8be 	bl	d40be <__cxa_guard_release>
   d5f42:	4b0f      	ldr	r3, [pc, #60]	; (d5f80 <pinAvailable+0x78>)
   d5f44:	7818      	ldrb	r0, [r3, #0]
   d5f46:	f7fe ff3f 	bl	d4dc8 <hal_spi_is_enabled>
   d5f4a:	2800      	cmp	r0, #0
   d5f4c:	d1df      	bne.n	d5f0e <pinAvailable+0x6>
  return true; // 'pin' is available
   d5f4e:	2001      	movs	r0, #1
   d5f50:	e7de      	b.n	d5f10 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5f52:	2801      	cmp	r0, #1
   d5f54:	d809      	bhi.n	d5f6a <pinAvailable+0x62>
   d5f56:	f000 f857 	bl	d6008 <_Z19__fetch_global_Wirev>
   d5f5a:	2100      	movs	r1, #0
   d5f5c:	7c00      	ldrb	r0, [r0, #16]
   d5f5e:	f7fe feeb 	bl	d4d38 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5f62:	f080 0001 	eor.w	r0, r0, #1
   d5f66:	b2c0      	uxtb	r0, r0
   d5f68:	e7d2      	b.n	d5f10 <pinAvailable+0x8>
   d5f6a:	3809      	subs	r0, #9
   d5f6c:	2801      	cmp	r0, #1
   d5f6e:	d8ee      	bhi.n	d5f4e <pinAvailable+0x46>
   d5f70:	f7ff fba2 	bl	d56b8 <_Z22__fetch_global_Serial1v>
   d5f74:	7c00      	ldrb	r0, [r0, #16]
   d5f76:	f7fe fea7 	bl	d4cc8 <hal_usart_is_enabled>
   d5f7a:	e7f2      	b.n	d5f62 <pinAvailable+0x5a>
   d5f7c:	2003e7c8 	.word	0x2003e7c8
   d5f80:	2003e7cc 	.word	0x2003e7cc

000d5f84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f84:	2823      	cmp	r0, #35	; 0x23
{
   d5f86:	b538      	push	{r3, r4, r5, lr}
   d5f88:	4604      	mov	r4, r0
   d5f8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f8c:	d80a      	bhi.n	d5fa4 <pinMode+0x20>
   d5f8e:	29ff      	cmp	r1, #255	; 0xff
   d5f90:	d008      	beq.n	d5fa4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5f92:	f7ff ffb9 	bl	d5f08 <pinAvailable>
   d5f96:	b128      	cbz	r0, d5fa4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5f98:	4629      	mov	r1, r5
   d5f9a:	4620      	mov	r0, r4
}
   d5f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5fa0:	f7fe bdfa 	b.w	d4b98 <HAL_Pin_Mode>
}
   d5fa4:	bd38      	pop	{r3, r4, r5, pc}

000d5fa6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5fa6:	b538      	push	{r3, r4, r5, lr}
   d5fa8:	4604      	mov	r4, r0
   d5faa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fac:	f7fe fdfc 	bl	d4ba8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5fb0:	28ff      	cmp	r0, #255	; 0xff
   d5fb2:	d010      	beq.n	d5fd6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5fb4:	2806      	cmp	r0, #6
   d5fb6:	d804      	bhi.n	d5fc2 <digitalWrite+0x1c>
   d5fb8:	234d      	movs	r3, #77	; 0x4d
   d5fba:	fa23 f000 	lsr.w	r0, r3, r0
   d5fbe:	07c3      	lsls	r3, r0, #31
   d5fc0:	d409      	bmi.n	d5fd6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	f7ff ffa0 	bl	d5f08 <pinAvailable>
   d5fc8:	b128      	cbz	r0, d5fd6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5fca:	4629      	mov	r1, r5
   d5fcc:	4620      	mov	r0, r4
}
   d5fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5fd2:	f7fe bdf1 	b.w	d4bb8 <HAL_GPIO_Write>
}
   d5fd6:	bd38      	pop	{r3, r4, r5, pc}

000d5fd8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5fd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5fda:	2300      	movs	r3, #0
   d5fdc:	2520      	movs	r5, #32
   d5fde:	8043      	strh	r3, [r0, #2]
   d5fe0:	2314      	movs	r3, #20
{
   d5fe2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5fe4:	8003      	strh	r3, [r0, #0]
   d5fe6:	6085      	str	r5, [r0, #8]
   d5fe8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5fea:	4906      	ldr	r1, [pc, #24]	; (d6004 <_Z17acquireWireBufferv+0x2c>)
   d5fec:	4628      	mov	r0, r5
   d5fee:	f000 f83a 	bl	d6066 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ff2:	4904      	ldr	r1, [pc, #16]	; (d6004 <_Z17acquireWireBufferv+0x2c>)
	};
   d5ff4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ff6:	4628      	mov	r0, r5
   d5ff8:	f000 f835 	bl	d6066 <_ZnajRKSt9nothrow_t>
	};
   d5ffc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5ffe:	4620      	mov	r0, r4
   d6000:	bd38      	pop	{r3, r4, r5, pc}
   d6002:	bf00      	nop
   d6004:	000d6e38 	.word	0x000d6e38

000d6008 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6008:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d600a:	4d0f      	ldr	r5, [pc, #60]	; (d6048 <_Z19__fetch_global_Wirev+0x40>)
   d600c:	7829      	ldrb	r1, [r5, #0]
   d600e:	f3bf 8f5b 	dmb	ish
   d6012:	f011 0401 	ands.w	r4, r1, #1
{
   d6016:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6018:	d113      	bne.n	d6042 <_Z19__fetch_global_Wirev+0x3a>
   d601a:	4628      	mov	r0, r5
   d601c:	f7fe f84a 	bl	d40b4 <__cxa_guard_acquire>
   d6020:	b178      	cbz	r0, d6042 <_Z19__fetch_global_Wirev+0x3a>
   d6022:	a801      	add	r0, sp, #4
   d6024:	f7ff ffd8 	bl	d5fd8 <_Z17acquireWireBufferv>
   d6028:	aa01      	add	r2, sp, #4
   d602a:	4621      	mov	r1, r4
   d602c:	4807      	ldr	r0, [pc, #28]	; (d604c <_Z19__fetch_global_Wirev+0x44>)
   d602e:	f7ff fb99 	bl	d5764 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6032:	4628      	mov	r0, r5
   d6034:	f7fe f843 	bl	d40be <__cxa_guard_release>
   d6038:	4a05      	ldr	r2, [pc, #20]	; (d6050 <_Z19__fetch_global_Wirev+0x48>)
   d603a:	4906      	ldr	r1, [pc, #24]	; (d6054 <_Z19__fetch_global_Wirev+0x4c>)
   d603c:	4803      	ldr	r0, [pc, #12]	; (d604c <_Z19__fetch_global_Wirev+0x44>)
   d603e:	f000 f80b 	bl	d6058 <__aeabi_atexit>
	return wire;
}
   d6042:	4802      	ldr	r0, [pc, #8]	; (d604c <_Z19__fetch_global_Wirev+0x44>)
   d6044:	b007      	add	sp, #28
   d6046:	bd30      	pop	{r4, r5, pc}
   d6048:	2003e7d8 	.word	0x2003e7d8
   d604c:	2003e7dc 	.word	0x2003e7dc
   d6050:	2003e4ec 	.word	0x2003e4ec
   d6054:	000d570d 	.word	0x000d570d

000d6058 <__aeabi_atexit>:
   d6058:	460b      	mov	r3, r1
   d605a:	4601      	mov	r1, r0
   d605c:	4618      	mov	r0, r3
   d605e:	f000 bad7 	b.w	d6610 <__cxa_atexit>

000d6062 <_ZdlPvj>:
   d6062:	f7fe b81a 	b.w	d409a <_ZdlPv>

000d6066 <_ZnajRKSt9nothrow_t>:
   d6066:	f7fe b816 	b.w	d4096 <_Znaj>
	...

000d606c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d606c:	4901      	ldr	r1, [pc, #4]	; (d6074 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d606e:	f000 b8f9 	b.w	d6264 <_ZNKSt9type_infoeqERKS_>
   d6072:	bf00      	nop
   d6074:	000d6e54 	.word	0x000d6e54

000d6078 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d607a:	2400      	movs	r4, #0
   d607c:	2310      	movs	r3, #16
   d607e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6082:	6803      	ldr	r3, [r0, #0]
   d6084:	9400      	str	r4, [sp, #0]
   d6086:	699e      	ldr	r6, [r3, #24]
   d6088:	f88d 4004 	strb.w	r4, [sp, #4]
   d608c:	4615      	mov	r5, r2
   d608e:	466b      	mov	r3, sp
   d6090:	6812      	ldr	r2, [r2, #0]
   d6092:	47b0      	blx	r6
   d6094:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6098:	f003 0306 	and.w	r3, r3, #6
   d609c:	2b06      	cmp	r3, #6
   d609e:	bf03      	ittte	eq
   d60a0:	9b00      	ldreq	r3, [sp, #0]
   d60a2:	602b      	streq	r3, [r5, #0]
   d60a4:	2001      	moveq	r0, #1
   d60a6:	4620      	movne	r0, r4
   d60a8:	b004      	add	sp, #16
   d60aa:	bd70      	pop	{r4, r5, r6, pc}

000d60ac <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d60ac:	9800      	ldr	r0, [sp, #0]
   d60ae:	4290      	cmp	r0, r2
   d60b0:	bf14      	ite	ne
   d60b2:	2001      	movne	r0, #1
   d60b4:	2006      	moveq	r0, #6
   d60b6:	4770      	bx	lr

000d60b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d60b8:	b510      	push	{r4, lr}
   d60ba:	4b03      	ldr	r3, [pc, #12]	; (d60c8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d60bc:	6003      	str	r3, [r0, #0]
   d60be:	4604      	mov	r4, r0
   d60c0:	f000 f8cd 	bl	d625e <_ZNSt9type_infoD1Ev>
   d60c4:	4620      	mov	r0, r4
   d60c6:	bd10      	pop	{r4, pc}
   d60c8:	000d6e94 	.word	0x000d6e94

000d60cc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d60cc:	b510      	push	{r4, lr}
   d60ce:	4604      	mov	r4, r0
   d60d0:	f7ff fff2 	bl	d60b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d60d4:	4620      	mov	r0, r4
   d60d6:	2108      	movs	r1, #8
   d60d8:	f7ff ffc3 	bl	d6062 <_ZdlPvj>
   d60dc:	4620      	mov	r0, r4
   d60de:	bd10      	pop	{r4, pc}

000d60e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d60e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60e4:	461f      	mov	r7, r3
   d60e6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d60ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d60ee:	4598      	cmp	r8, r3
   d60f0:	4606      	mov	r6, r0
   d60f2:	4615      	mov	r5, r2
   d60f4:	d107      	bne.n	d6106 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d60f6:	9907      	ldr	r1, [sp, #28]
   d60f8:	f000 f8b4 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d60fc:	b118      	cbz	r0, d6106 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d60fe:	7165      	strb	r5, [r4, #5]
   d6100:	2000      	movs	r0, #0
   d6102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6106:	4639      	mov	r1, r7
   d6108:	4630      	mov	r0, r6
   d610a:	f000 f8ab 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d610e:	2800      	cmp	r0, #0
   d6110:	d0f6      	beq.n	d6100 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6112:	2301      	movs	r3, #1
   d6114:	f8c4 8000 	str.w	r8, [r4]
   d6118:	7125      	strb	r5, [r4, #4]
   d611a:	71a3      	strb	r3, [r4, #6]
   d611c:	e7f0      	b.n	d6100 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d611e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d611e:	b538      	push	{r3, r4, r5, lr}
   d6120:	4615      	mov	r5, r2
   d6122:	461c      	mov	r4, r3
   d6124:	f000 f89e 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d6128:	b120      	cbz	r0, d6134 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d612a:	2308      	movs	r3, #8
   d612c:	60e3      	str	r3, [r4, #12]
   d612e:	2306      	movs	r3, #6
   d6130:	6025      	str	r5, [r4, #0]
   d6132:	7123      	strb	r3, [r4, #4]
   d6134:	bd38      	pop	{r3, r4, r5, pc}

000d6136 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6136:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6138:	4605      	mov	r5, r0
   d613a:	460c      	mov	r4, r1
   d613c:	9201      	str	r2, [sp, #4]
   d613e:	461e      	mov	r6, r3
   d6140:	f000 f890 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d6144:	b950      	cbnz	r0, d615c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6146:	2e03      	cmp	r6, #3
   d6148:	d808      	bhi.n	d615c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d614a:	6823      	ldr	r3, [r4, #0]
   d614c:	9a01      	ldr	r2, [sp, #4]
   d614e:	695b      	ldr	r3, [r3, #20]
   d6150:	4629      	mov	r1, r5
   d6152:	4620      	mov	r0, r4
   d6154:	b002      	add	sp, #8
   d6156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d615a:	4718      	bx	r3
   d615c:	b002      	add	sp, #8
   d615e:	bd70      	pop	{r4, r5, r6, pc}

000d6160 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6160:	b510      	push	{r4, lr}
   d6162:	4b03      	ldr	r3, [pc, #12]	; (d6170 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6164:	6003      	str	r3, [r0, #0]
   d6166:	4604      	mov	r4, r0
   d6168:	f7ff ffa6 	bl	d60b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d616c:	4620      	mov	r0, r4
   d616e:	bd10      	pop	{r4, pc}
   d6170:	000d6ef4 	.word	0x000d6ef4

000d6174 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6174:	b510      	push	{r4, lr}
   d6176:	4604      	mov	r4, r0
   d6178:	f7ff fff2 	bl	d6160 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d617c:	4620      	mov	r0, r4
   d617e:	210c      	movs	r1, #12
   d6180:	f7ff ff6f 	bl	d6062 <_ZdlPvj>
   d6184:	4620      	mov	r0, r4
   d6186:	bd10      	pop	{r4, pc}

000d6188 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d618a:	9f08      	ldr	r7, [sp, #32]
   d618c:	4297      	cmp	r7, r2
   d618e:	4605      	mov	r5, r0
   d6190:	460e      	mov	r6, r1
   d6192:	4614      	mov	r4, r2
   d6194:	d00a      	beq.n	d61ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6196:	68a8      	ldr	r0, [r5, #8]
   d6198:	6802      	ldr	r2, [r0, #0]
   d619a:	9708      	str	r7, [sp, #32]
   d619c:	6a15      	ldr	r5, [r2, #32]
   d619e:	4631      	mov	r1, r6
   d61a0:	4622      	mov	r2, r4
   d61a2:	46ac      	mov	ip, r5
   d61a4:	b003      	add	sp, #12
   d61a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d61aa:	4760      	bx	ip
   d61ac:	4619      	mov	r1, r3
   d61ae:	9301      	str	r3, [sp, #4]
   d61b0:	f000 f858 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d61b4:	9b01      	ldr	r3, [sp, #4]
   d61b6:	2800      	cmp	r0, #0
   d61b8:	d0ed      	beq.n	d6196 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d61ba:	2006      	movs	r0, #6
   d61bc:	b003      	add	sp, #12
   d61be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d61c0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61c4:	460d      	mov	r5, r1
   d61c6:	4619      	mov	r1, r3
   d61c8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d61cc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d61d0:	4681      	mov	r9, r0
   d61d2:	4617      	mov	r7, r2
   d61d4:	4698      	mov	r8, r3
   d61d6:	f000 f845 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d61da:	b190      	cbz	r0, d6202 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d61dc:	2d00      	cmp	r5, #0
   d61de:	6034      	str	r4, [r6, #0]
   d61e0:	7137      	strb	r7, [r6, #4]
   d61e2:	db09      	blt.n	d61f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d61e4:	1961      	adds	r1, r4, r5
   d61e6:	458a      	cmp	sl, r1
   d61e8:	bf0c      	ite	eq
   d61ea:	2106      	moveq	r1, #6
   d61ec:	2101      	movne	r1, #1
   d61ee:	71b1      	strb	r1, [r6, #6]
   d61f0:	2000      	movs	r0, #0
   d61f2:	b001      	add	sp, #4
   d61f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d61f8:	3502      	adds	r5, #2
   d61fa:	d1f9      	bne.n	d61f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d61fc:	2301      	movs	r3, #1
   d61fe:	71b3      	strb	r3, [r6, #6]
   d6200:	e7f6      	b.n	d61f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6202:	4554      	cmp	r4, sl
   d6204:	d106      	bne.n	d6214 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6206:	4659      	mov	r1, fp
   d6208:	4648      	mov	r0, r9
   d620a:	f000 f82b 	bl	d6264 <_ZNKSt9type_infoeqERKS_>
   d620e:	b108      	cbz	r0, d6214 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6210:	7177      	strb	r7, [r6, #5]
   d6212:	e7ed      	b.n	d61f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6214:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6218:	6803      	ldr	r3, [r0, #0]
   d621a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d621e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6222:	69dc      	ldr	r4, [r3, #28]
   d6224:	463a      	mov	r2, r7
   d6226:	4643      	mov	r3, r8
   d6228:	4629      	mov	r1, r5
   d622a:	46a4      	mov	ip, r4
   d622c:	b001      	add	sp, #4
   d622e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6232:	4760      	bx	ip

000d6234 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6238:	4607      	mov	r7, r0
   d623a:	460c      	mov	r4, r1
   d623c:	4615      	mov	r5, r2
   d623e:	461e      	mov	r6, r3
   d6240:	f7ff ff6d 	bl	d611e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6244:	b948      	cbnz	r0, d625a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6246:	68b8      	ldr	r0, [r7, #8]
   d6248:	6803      	ldr	r3, [r0, #0]
   d624a:	699f      	ldr	r7, [r3, #24]
   d624c:	462a      	mov	r2, r5
   d624e:	4633      	mov	r3, r6
   d6250:	4621      	mov	r1, r4
   d6252:	46bc      	mov	ip, r7
   d6254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6258:	4760      	bx	ip
   d625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d625e <_ZNSt9type_infoD1Ev>:
   d625e:	4770      	bx	lr

000d6260 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6260:	2000      	movs	r0, #0
   d6262:	4770      	bx	lr

000d6264 <_ZNKSt9type_infoeqERKS_>:
   d6264:	4281      	cmp	r1, r0
   d6266:	b508      	push	{r3, lr}
   d6268:	d00e      	beq.n	d6288 <_ZNKSt9type_infoeqERKS_+0x24>
   d626a:	6840      	ldr	r0, [r0, #4]
   d626c:	7803      	ldrb	r3, [r0, #0]
   d626e:	2b2a      	cmp	r3, #42	; 0x2a
   d6270:	d00c      	beq.n	d628c <_ZNKSt9type_infoeqERKS_+0x28>
   d6272:	6849      	ldr	r1, [r1, #4]
   d6274:	780b      	ldrb	r3, [r1, #0]
   d6276:	2b2a      	cmp	r3, #42	; 0x2a
   d6278:	bf08      	it	eq
   d627a:	3101      	addeq	r1, #1
   d627c:	f000 fa5e 	bl	d673c <strcmp>
   d6280:	fab0 f080 	clz	r0, r0
   d6284:	0940      	lsrs	r0, r0, #5
   d6286:	bd08      	pop	{r3, pc}
   d6288:	2001      	movs	r0, #1
   d628a:	e7fc      	b.n	d6286 <_ZNKSt9type_infoeqERKS_+0x22>
   d628c:	2000      	movs	r0, #0
   d628e:	e7fa      	b.n	d6286 <_ZNKSt9type_infoeqERKS_+0x22>

000d6290 <__aeabi_drsub>:
   d6290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6294:	e002      	b.n	d629c <__adddf3>
   d6296:	bf00      	nop

000d6298 <__aeabi_dsub>:
   d6298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d629c <__adddf3>:
   d629c:	b530      	push	{r4, r5, lr}
   d629e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d62a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d62a6:	ea94 0f05 	teq	r4, r5
   d62aa:	bf08      	it	eq
   d62ac:	ea90 0f02 	teqeq	r0, r2
   d62b0:	bf1f      	itttt	ne
   d62b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d62b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d62ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d62be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62c2:	f000 80e2 	beq.w	d648a <__adddf3+0x1ee>
   d62c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d62ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d62ce:	bfb8      	it	lt
   d62d0:	426d      	neglt	r5, r5
   d62d2:	dd0c      	ble.n	d62ee <__adddf3+0x52>
   d62d4:	442c      	add	r4, r5
   d62d6:	ea80 0202 	eor.w	r2, r0, r2
   d62da:	ea81 0303 	eor.w	r3, r1, r3
   d62de:	ea82 0000 	eor.w	r0, r2, r0
   d62e2:	ea83 0101 	eor.w	r1, r3, r1
   d62e6:	ea80 0202 	eor.w	r2, r0, r2
   d62ea:	ea81 0303 	eor.w	r3, r1, r3
   d62ee:	2d36      	cmp	r5, #54	; 0x36
   d62f0:	bf88      	it	hi
   d62f2:	bd30      	pophi	{r4, r5, pc}
   d62f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d62f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6304:	d002      	beq.n	d630c <__adddf3+0x70>
   d6306:	4240      	negs	r0, r0
   d6308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d630c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6310:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6318:	d002      	beq.n	d6320 <__adddf3+0x84>
   d631a:	4252      	negs	r2, r2
   d631c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6320:	ea94 0f05 	teq	r4, r5
   d6324:	f000 80a7 	beq.w	d6476 <__adddf3+0x1da>
   d6328:	f1a4 0401 	sub.w	r4, r4, #1
   d632c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6330:	db0d      	blt.n	d634e <__adddf3+0xb2>
   d6332:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6336:	fa22 f205 	lsr.w	r2, r2, r5
   d633a:	1880      	adds	r0, r0, r2
   d633c:	f141 0100 	adc.w	r1, r1, #0
   d6340:	fa03 f20e 	lsl.w	r2, r3, lr
   d6344:	1880      	adds	r0, r0, r2
   d6346:	fa43 f305 	asr.w	r3, r3, r5
   d634a:	4159      	adcs	r1, r3
   d634c:	e00e      	b.n	d636c <__adddf3+0xd0>
   d634e:	f1a5 0520 	sub.w	r5, r5, #32
   d6352:	f10e 0e20 	add.w	lr, lr, #32
   d6356:	2a01      	cmp	r2, #1
   d6358:	fa03 fc0e 	lsl.w	ip, r3, lr
   d635c:	bf28      	it	cs
   d635e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6362:	fa43 f305 	asr.w	r3, r3, r5
   d6366:	18c0      	adds	r0, r0, r3
   d6368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d636c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6370:	d507      	bpl.n	d6382 <__adddf3+0xe6>
   d6372:	f04f 0e00 	mov.w	lr, #0
   d6376:	f1dc 0c00 	rsbs	ip, ip, #0
   d637a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d637e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6386:	d31b      	bcc.n	d63c0 <__adddf3+0x124>
   d6388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d638c:	d30c      	bcc.n	d63a8 <__adddf3+0x10c>
   d638e:	0849      	lsrs	r1, r1, #1
   d6390:	ea5f 0030 	movs.w	r0, r0, rrx
   d6394:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6398:	f104 0401 	add.w	r4, r4, #1
   d639c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d63a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d63a4:	f080 809a 	bcs.w	d64dc <__adddf3+0x240>
   d63a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d63ac:	bf08      	it	eq
   d63ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63b2:	f150 0000 	adcs.w	r0, r0, #0
   d63b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63ba:	ea41 0105 	orr.w	r1, r1, r5
   d63be:	bd30      	pop	{r4, r5, pc}
   d63c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d63c4:	4140      	adcs	r0, r0
   d63c6:	eb41 0101 	adc.w	r1, r1, r1
   d63ca:	3c01      	subs	r4, #1
   d63cc:	bf28      	it	cs
   d63ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d63d2:	d2e9      	bcs.n	d63a8 <__adddf3+0x10c>
   d63d4:	f091 0f00 	teq	r1, #0
   d63d8:	bf04      	itt	eq
   d63da:	4601      	moveq	r1, r0
   d63dc:	2000      	moveq	r0, #0
   d63de:	fab1 f381 	clz	r3, r1
   d63e2:	bf08      	it	eq
   d63e4:	3320      	addeq	r3, #32
   d63e6:	f1a3 030b 	sub.w	r3, r3, #11
   d63ea:	f1b3 0220 	subs.w	r2, r3, #32
   d63ee:	da0c      	bge.n	d640a <__adddf3+0x16e>
   d63f0:	320c      	adds	r2, #12
   d63f2:	dd08      	ble.n	d6406 <__adddf3+0x16a>
   d63f4:	f102 0c14 	add.w	ip, r2, #20
   d63f8:	f1c2 020c 	rsb	r2, r2, #12
   d63fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d6400:	fa21 f102 	lsr.w	r1, r1, r2
   d6404:	e00c      	b.n	d6420 <__adddf3+0x184>
   d6406:	f102 0214 	add.w	r2, r2, #20
   d640a:	bfd8      	it	le
   d640c:	f1c2 0c20 	rsble	ip, r2, #32
   d6410:	fa01 f102 	lsl.w	r1, r1, r2
   d6414:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6418:	bfdc      	itt	le
   d641a:	ea41 010c 	orrle.w	r1, r1, ip
   d641e:	4090      	lslle	r0, r2
   d6420:	1ae4      	subs	r4, r4, r3
   d6422:	bfa2      	ittt	ge
   d6424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6428:	4329      	orrge	r1, r5
   d642a:	bd30      	popge	{r4, r5, pc}
   d642c:	ea6f 0404 	mvn.w	r4, r4
   d6430:	3c1f      	subs	r4, #31
   d6432:	da1c      	bge.n	d646e <__adddf3+0x1d2>
   d6434:	340c      	adds	r4, #12
   d6436:	dc0e      	bgt.n	d6456 <__adddf3+0x1ba>
   d6438:	f104 0414 	add.w	r4, r4, #20
   d643c:	f1c4 0220 	rsb	r2, r4, #32
   d6440:	fa20 f004 	lsr.w	r0, r0, r4
   d6444:	fa01 f302 	lsl.w	r3, r1, r2
   d6448:	ea40 0003 	orr.w	r0, r0, r3
   d644c:	fa21 f304 	lsr.w	r3, r1, r4
   d6450:	ea45 0103 	orr.w	r1, r5, r3
   d6454:	bd30      	pop	{r4, r5, pc}
   d6456:	f1c4 040c 	rsb	r4, r4, #12
   d645a:	f1c4 0220 	rsb	r2, r4, #32
   d645e:	fa20 f002 	lsr.w	r0, r0, r2
   d6462:	fa01 f304 	lsl.w	r3, r1, r4
   d6466:	ea40 0003 	orr.w	r0, r0, r3
   d646a:	4629      	mov	r1, r5
   d646c:	bd30      	pop	{r4, r5, pc}
   d646e:	fa21 f004 	lsr.w	r0, r1, r4
   d6472:	4629      	mov	r1, r5
   d6474:	bd30      	pop	{r4, r5, pc}
   d6476:	f094 0f00 	teq	r4, #0
   d647a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d647e:	bf06      	itte	eq
   d6480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6484:	3401      	addeq	r4, #1
   d6486:	3d01      	subne	r5, #1
   d6488:	e74e      	b.n	d6328 <__adddf3+0x8c>
   d648a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d648e:	bf18      	it	ne
   d6490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6494:	d029      	beq.n	d64ea <__adddf3+0x24e>
   d6496:	ea94 0f05 	teq	r4, r5
   d649a:	bf08      	it	eq
   d649c:	ea90 0f02 	teqeq	r0, r2
   d64a0:	d005      	beq.n	d64ae <__adddf3+0x212>
   d64a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d64a6:	bf04      	itt	eq
   d64a8:	4619      	moveq	r1, r3
   d64aa:	4610      	moveq	r0, r2
   d64ac:	bd30      	pop	{r4, r5, pc}
   d64ae:	ea91 0f03 	teq	r1, r3
   d64b2:	bf1e      	ittt	ne
   d64b4:	2100      	movne	r1, #0
   d64b6:	2000      	movne	r0, #0
   d64b8:	bd30      	popne	{r4, r5, pc}
   d64ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d64be:	d105      	bne.n	d64cc <__adddf3+0x230>
   d64c0:	0040      	lsls	r0, r0, #1
   d64c2:	4149      	adcs	r1, r1
   d64c4:	bf28      	it	cs
   d64c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d64ca:	bd30      	pop	{r4, r5, pc}
   d64cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d64d0:	bf3c      	itt	cc
   d64d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d64d6:	bd30      	popcc	{r4, r5, pc}
   d64d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d64e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d64e4:	f04f 0000 	mov.w	r0, #0
   d64e8:	bd30      	pop	{r4, r5, pc}
   d64ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d64ee:	bf1a      	itte	ne
   d64f0:	4619      	movne	r1, r3
   d64f2:	4610      	movne	r0, r2
   d64f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d64f8:	bf1c      	itt	ne
   d64fa:	460b      	movne	r3, r1
   d64fc:	4602      	movne	r2, r0
   d64fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6502:	bf06      	itte	eq
   d6504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6508:	ea91 0f03 	teqeq	r1, r3
   d650c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6510:	bd30      	pop	{r4, r5, pc}
   d6512:	bf00      	nop

000d6514 <__aeabi_ui2d>:
   d6514:	f090 0f00 	teq	r0, #0
   d6518:	bf04      	itt	eq
   d651a:	2100      	moveq	r1, #0
   d651c:	4770      	bxeq	lr
   d651e:	b530      	push	{r4, r5, lr}
   d6520:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6524:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6528:	f04f 0500 	mov.w	r5, #0
   d652c:	f04f 0100 	mov.w	r1, #0
   d6530:	e750      	b.n	d63d4 <__adddf3+0x138>
   d6532:	bf00      	nop

000d6534 <__aeabi_i2d>:
   d6534:	f090 0f00 	teq	r0, #0
   d6538:	bf04      	itt	eq
   d653a:	2100      	moveq	r1, #0
   d653c:	4770      	bxeq	lr
   d653e:	b530      	push	{r4, r5, lr}
   d6540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d654c:	bf48      	it	mi
   d654e:	4240      	negmi	r0, r0
   d6550:	f04f 0100 	mov.w	r1, #0
   d6554:	e73e      	b.n	d63d4 <__adddf3+0x138>
   d6556:	bf00      	nop

000d6558 <__aeabi_f2d>:
   d6558:	0042      	lsls	r2, r0, #1
   d655a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d655e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6562:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6566:	bf1f      	itttt	ne
   d6568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d656c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6574:	4770      	bxne	lr
   d6576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d657a:	bf08      	it	eq
   d657c:	4770      	bxeq	lr
   d657e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6582:	bf04      	itt	eq
   d6584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6588:	4770      	bxeq	lr
   d658a:	b530      	push	{r4, r5, lr}
   d658c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6598:	e71c      	b.n	d63d4 <__adddf3+0x138>
   d659a:	bf00      	nop

000d659c <__aeabi_ul2d>:
   d659c:	ea50 0201 	orrs.w	r2, r0, r1
   d65a0:	bf08      	it	eq
   d65a2:	4770      	bxeq	lr
   d65a4:	b530      	push	{r4, r5, lr}
   d65a6:	f04f 0500 	mov.w	r5, #0
   d65aa:	e00a      	b.n	d65c2 <__aeabi_l2d+0x16>

000d65ac <__aeabi_l2d>:
   d65ac:	ea50 0201 	orrs.w	r2, r0, r1
   d65b0:	bf08      	it	eq
   d65b2:	4770      	bxeq	lr
   d65b4:	b530      	push	{r4, r5, lr}
   d65b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d65ba:	d502      	bpl.n	d65c2 <__aeabi_l2d+0x16>
   d65bc:	4240      	negs	r0, r0
   d65be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d65ce:	f43f aed8 	beq.w	d6382 <__adddf3+0xe6>
   d65d2:	f04f 0203 	mov.w	r2, #3
   d65d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65da:	bf18      	it	ne
   d65dc:	3203      	addne	r2, #3
   d65de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65e2:	bf18      	it	ne
   d65e4:	3203      	addne	r2, #3
   d65e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d65ea:	f1c2 0320 	rsb	r3, r2, #32
   d65ee:	fa00 fc03 	lsl.w	ip, r0, r3
   d65f2:	fa20 f002 	lsr.w	r0, r0, r2
   d65f6:	fa01 fe03 	lsl.w	lr, r1, r3
   d65fa:	ea40 000e 	orr.w	r0, r0, lr
   d65fe:	fa21 f102 	lsr.w	r1, r1, r2
   d6602:	4414      	add	r4, r2
   d6604:	e6bd      	b.n	d6382 <__adddf3+0xe6>
   d6606:	bf00      	nop

000d6608 <atoi>:
   d6608:	220a      	movs	r2, #10
   d660a:	2100      	movs	r1, #0
   d660c:	f000 b960 	b.w	d68d0 <strtol>

000d6610 <__cxa_atexit>:
   d6610:	b510      	push	{r4, lr}
   d6612:	4c05      	ldr	r4, [pc, #20]	; (d6628 <__cxa_atexit+0x18>)
   d6614:	4613      	mov	r3, r2
   d6616:	b12c      	cbz	r4, d6624 <__cxa_atexit+0x14>
   d6618:	460a      	mov	r2, r1
   d661a:	4601      	mov	r1, r0
   d661c:	2002      	movs	r0, #2
   d661e:	f3af 8000 	nop.w
   d6622:	bd10      	pop	{r4, pc}
   d6624:	4620      	mov	r0, r4
   d6626:	e7fc      	b.n	d6622 <__cxa_atexit+0x12>
   d6628:	00000000 	.word	0x00000000

000d662c <memcpy>:
   d662c:	440a      	add	r2, r1
   d662e:	4291      	cmp	r1, r2
   d6630:	f100 33ff 	add.w	r3, r0, #4294967295
   d6634:	d100      	bne.n	d6638 <memcpy+0xc>
   d6636:	4770      	bx	lr
   d6638:	b510      	push	{r4, lr}
   d663a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d663e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6642:	4291      	cmp	r1, r2
   d6644:	d1f9      	bne.n	d663a <memcpy+0xe>
   d6646:	bd10      	pop	{r4, pc}

000d6648 <memmove>:
   d6648:	4288      	cmp	r0, r1
   d664a:	b510      	push	{r4, lr}
   d664c:	eb01 0402 	add.w	r4, r1, r2
   d6650:	d902      	bls.n	d6658 <memmove+0x10>
   d6652:	4284      	cmp	r4, r0
   d6654:	4623      	mov	r3, r4
   d6656:	d807      	bhi.n	d6668 <memmove+0x20>
   d6658:	1e43      	subs	r3, r0, #1
   d665a:	42a1      	cmp	r1, r4
   d665c:	d008      	beq.n	d6670 <memmove+0x28>
   d665e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6662:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6666:	e7f8      	b.n	d665a <memmove+0x12>
   d6668:	4402      	add	r2, r0
   d666a:	4601      	mov	r1, r0
   d666c:	428a      	cmp	r2, r1
   d666e:	d100      	bne.n	d6672 <memmove+0x2a>
   d6670:	bd10      	pop	{r4, pc}
   d6672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6676:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d667a:	e7f7      	b.n	d666c <memmove+0x24>

000d667c <memset>:
   d667c:	4402      	add	r2, r0
   d667e:	4603      	mov	r3, r0
   d6680:	4293      	cmp	r3, r2
   d6682:	d100      	bne.n	d6686 <memset+0xa>
   d6684:	4770      	bx	lr
   d6686:	f803 1b01 	strb.w	r1, [r3], #1
   d668a:	e7f9      	b.n	d6680 <memset+0x4>

000d668c <srand>:
   d668c:	b538      	push	{r3, r4, r5, lr}
   d668e:	4b0d      	ldr	r3, [pc, #52]	; (d66c4 <srand+0x38>)
   d6690:	681d      	ldr	r5, [r3, #0]
   d6692:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6694:	4604      	mov	r4, r0
   d6696:	b97b      	cbnz	r3, d66b8 <srand+0x2c>
   d6698:	2018      	movs	r0, #24
   d669a:	f7fe fc81 	bl	d4fa0 <malloc>
   d669e:	4a0a      	ldr	r2, [pc, #40]	; (d66c8 <srand+0x3c>)
   d66a0:	4b0a      	ldr	r3, [pc, #40]	; (d66cc <srand+0x40>)
   d66a2:	63a8      	str	r0, [r5, #56]	; 0x38
   d66a4:	e9c0 2300 	strd	r2, r3, [r0]
   d66a8:	4b09      	ldr	r3, [pc, #36]	; (d66d0 <srand+0x44>)
   d66aa:	6083      	str	r3, [r0, #8]
   d66ac:	230b      	movs	r3, #11
   d66ae:	8183      	strh	r3, [r0, #12]
   d66b0:	2201      	movs	r2, #1
   d66b2:	2300      	movs	r3, #0
   d66b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d66ba:	2200      	movs	r2, #0
   d66bc:	611c      	str	r4, [r3, #16]
   d66be:	615a      	str	r2, [r3, #20]
   d66c0:	bd38      	pop	{r3, r4, r5, pc}
   d66c2:	bf00      	nop
   d66c4:	2003e488 	.word	0x2003e488
   d66c8:	abcd330e 	.word	0xabcd330e
   d66cc:	e66d1234 	.word	0xe66d1234
   d66d0:	0005deec 	.word	0x0005deec

000d66d4 <rand>:
   d66d4:	4b13      	ldr	r3, [pc, #76]	; (d6724 <rand+0x50>)
   d66d6:	b510      	push	{r4, lr}
   d66d8:	681c      	ldr	r4, [r3, #0]
   d66da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66dc:	b97b      	cbnz	r3, d66fe <rand+0x2a>
   d66de:	2018      	movs	r0, #24
   d66e0:	f7fe fc5e 	bl	d4fa0 <malloc>
   d66e4:	4a10      	ldr	r2, [pc, #64]	; (d6728 <rand+0x54>)
   d66e6:	4b11      	ldr	r3, [pc, #68]	; (d672c <rand+0x58>)
   d66e8:	63a0      	str	r0, [r4, #56]	; 0x38
   d66ea:	e9c0 2300 	strd	r2, r3, [r0]
   d66ee:	4b10      	ldr	r3, [pc, #64]	; (d6730 <rand+0x5c>)
   d66f0:	6083      	str	r3, [r0, #8]
   d66f2:	230b      	movs	r3, #11
   d66f4:	8183      	strh	r3, [r0, #12]
   d66f6:	2201      	movs	r2, #1
   d66f8:	2300      	movs	r3, #0
   d66fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6700:	480c      	ldr	r0, [pc, #48]	; (d6734 <rand+0x60>)
   d6702:	690a      	ldr	r2, [r1, #16]
   d6704:	694b      	ldr	r3, [r1, #20]
   d6706:	4c0c      	ldr	r4, [pc, #48]	; (d6738 <rand+0x64>)
   d6708:	4350      	muls	r0, r2
   d670a:	fb04 0003 	mla	r0, r4, r3, r0
   d670e:	fba2 3404 	umull	r3, r4, r2, r4
   d6712:	1c5a      	adds	r2, r3, #1
   d6714:	4404      	add	r4, r0
   d6716:	f144 0000 	adc.w	r0, r4, #0
   d671a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d671e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d6722:	bd10      	pop	{r4, pc}
   d6724:	2003e488 	.word	0x2003e488
   d6728:	abcd330e 	.word	0xabcd330e
   d672c:	e66d1234 	.word	0xe66d1234
   d6730:	0005deec 	.word	0x0005deec
   d6734:	5851f42d 	.word	0x5851f42d
   d6738:	4c957f2d 	.word	0x4c957f2d

000d673c <strcmp>:
   d673c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6740:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6744:	2a01      	cmp	r2, #1
   d6746:	bf28      	it	cs
   d6748:	429a      	cmpcs	r2, r3
   d674a:	d0f7      	beq.n	d673c <strcmp>
   d674c:	1ad0      	subs	r0, r2, r3
   d674e:	4770      	bx	lr

000d6750 <strcpy>:
   d6750:	4603      	mov	r3, r0
   d6752:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6756:	f803 2b01 	strb.w	r2, [r3], #1
   d675a:	2a00      	cmp	r2, #0
   d675c:	d1f9      	bne.n	d6752 <strcpy+0x2>
   d675e:	4770      	bx	lr

000d6760 <strlen>:
   d6760:	4603      	mov	r3, r0
   d6762:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6766:	2a00      	cmp	r2, #0
   d6768:	d1fb      	bne.n	d6762 <strlen+0x2>
   d676a:	1a18      	subs	r0, r3, r0
   d676c:	3801      	subs	r0, #1
   d676e:	4770      	bx	lr

000d6770 <strncasecmp>:
   d6770:	b570      	push	{r4, r5, r6, lr}
   d6772:	4e0f      	ldr	r6, [pc, #60]	; (d67b0 <strncasecmp+0x40>)
   d6774:	4604      	mov	r4, r0
   d6776:	440a      	add	r2, r1
   d6778:	428a      	cmp	r2, r1
   d677a:	d101      	bne.n	d6780 <strncasecmp+0x10>
   d677c:	2000      	movs	r0, #0
   d677e:	e013      	b.n	d67a8 <strncasecmp+0x38>
   d6780:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6784:	5d98      	ldrb	r0, [r3, r6]
   d6786:	f000 0003 	and.w	r0, r0, #3
   d678a:	2801      	cmp	r0, #1
   d678c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6790:	5c35      	ldrb	r5, [r6, r0]
   d6792:	f005 0503 	and.w	r5, r5, #3
   d6796:	bf08      	it	eq
   d6798:	3320      	addeq	r3, #32
   d679a:	2d01      	cmp	r5, #1
   d679c:	bf08      	it	eq
   d679e:	3020      	addeq	r0, #32
   d67a0:	1a1b      	subs	r3, r3, r0
   d67a2:	d102      	bne.n	d67aa <strncasecmp+0x3a>
   d67a4:	2800      	cmp	r0, #0
   d67a6:	d1e7      	bne.n	d6778 <strncasecmp+0x8>
   d67a8:	bd70      	pop	{r4, r5, r6, pc}
   d67aa:	4618      	mov	r0, r3
   d67ac:	e7fc      	b.n	d67a8 <strncasecmp+0x38>
   d67ae:	bf00      	nop
   d67b0:	000d6f2e 	.word	0x000d6f2e

000d67b4 <strncpy>:
   d67b4:	b510      	push	{r4, lr}
   d67b6:	3901      	subs	r1, #1
   d67b8:	4603      	mov	r3, r0
   d67ba:	b132      	cbz	r2, d67ca <strncpy+0x16>
   d67bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d67c0:	f803 4b01 	strb.w	r4, [r3], #1
   d67c4:	3a01      	subs	r2, #1
   d67c6:	2c00      	cmp	r4, #0
   d67c8:	d1f7      	bne.n	d67ba <strncpy+0x6>
   d67ca:	441a      	add	r2, r3
   d67cc:	2100      	movs	r1, #0
   d67ce:	4293      	cmp	r3, r2
   d67d0:	d100      	bne.n	d67d4 <strncpy+0x20>
   d67d2:	bd10      	pop	{r4, pc}
   d67d4:	f803 1b01 	strb.w	r1, [r3], #1
   d67d8:	e7f9      	b.n	d67ce <strncpy+0x1a>
	...

000d67dc <_strtol_l.isra.0>:
   d67dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67e0:	4e3a      	ldr	r6, [pc, #232]	; (d68cc <_strtol_l.isra.0+0xf0>)
   d67e2:	4686      	mov	lr, r0
   d67e4:	468c      	mov	ip, r1
   d67e6:	4660      	mov	r0, ip
   d67e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d67ec:	5da5      	ldrb	r5, [r4, r6]
   d67ee:	f015 0508 	ands.w	r5, r5, #8
   d67f2:	d1f8      	bne.n	d67e6 <_strtol_l.isra.0+0xa>
   d67f4:	2c2d      	cmp	r4, #45	; 0x2d
   d67f6:	d133      	bne.n	d6860 <_strtol_l.isra.0+0x84>
   d67f8:	f89c 4000 	ldrb.w	r4, [ip]
   d67fc:	f04f 0801 	mov.w	r8, #1
   d6800:	f100 0c02 	add.w	ip, r0, #2
   d6804:	2b00      	cmp	r3, #0
   d6806:	d05c      	beq.n	d68c2 <_strtol_l.isra.0+0xe6>
   d6808:	2b10      	cmp	r3, #16
   d680a:	d10c      	bne.n	d6826 <_strtol_l.isra.0+0x4a>
   d680c:	2c30      	cmp	r4, #48	; 0x30
   d680e:	d10a      	bne.n	d6826 <_strtol_l.isra.0+0x4a>
   d6810:	f89c 0000 	ldrb.w	r0, [ip]
   d6814:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6818:	2858      	cmp	r0, #88	; 0x58
   d681a:	d14d      	bne.n	d68b8 <_strtol_l.isra.0+0xdc>
   d681c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6820:	2310      	movs	r3, #16
   d6822:	f10c 0c02 	add.w	ip, ip, #2
   d6826:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d682a:	3f01      	subs	r7, #1
   d682c:	2600      	movs	r6, #0
   d682e:	fbb7 f9f3 	udiv	r9, r7, r3
   d6832:	4630      	mov	r0, r6
   d6834:	fb03 7a19 	mls	sl, r3, r9, r7
   d6838:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d683c:	2d09      	cmp	r5, #9
   d683e:	d818      	bhi.n	d6872 <_strtol_l.isra.0+0x96>
   d6840:	462c      	mov	r4, r5
   d6842:	42a3      	cmp	r3, r4
   d6844:	dd24      	ble.n	d6890 <_strtol_l.isra.0+0xb4>
   d6846:	1c75      	adds	r5, r6, #1
   d6848:	d007      	beq.n	d685a <_strtol_l.isra.0+0x7e>
   d684a:	4581      	cmp	r9, r0
   d684c:	d31d      	bcc.n	d688a <_strtol_l.isra.0+0xae>
   d684e:	d101      	bne.n	d6854 <_strtol_l.isra.0+0x78>
   d6850:	45a2      	cmp	sl, r4
   d6852:	db1a      	blt.n	d688a <_strtol_l.isra.0+0xae>
   d6854:	fb00 4003 	mla	r0, r0, r3, r4
   d6858:	2601      	movs	r6, #1
   d685a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d685e:	e7eb      	b.n	d6838 <_strtol_l.isra.0+0x5c>
   d6860:	2c2b      	cmp	r4, #43	; 0x2b
   d6862:	bf08      	it	eq
   d6864:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6868:	46a8      	mov	r8, r5
   d686a:	bf08      	it	eq
   d686c:	f100 0c02 	addeq.w	ip, r0, #2
   d6870:	e7c8      	b.n	d6804 <_strtol_l.isra.0+0x28>
   d6872:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6876:	2d19      	cmp	r5, #25
   d6878:	d801      	bhi.n	d687e <_strtol_l.isra.0+0xa2>
   d687a:	3c37      	subs	r4, #55	; 0x37
   d687c:	e7e1      	b.n	d6842 <_strtol_l.isra.0+0x66>
   d687e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6882:	2d19      	cmp	r5, #25
   d6884:	d804      	bhi.n	d6890 <_strtol_l.isra.0+0xb4>
   d6886:	3c57      	subs	r4, #87	; 0x57
   d6888:	e7db      	b.n	d6842 <_strtol_l.isra.0+0x66>
   d688a:	f04f 36ff 	mov.w	r6, #4294967295
   d688e:	e7e4      	b.n	d685a <_strtol_l.isra.0+0x7e>
   d6890:	1c73      	adds	r3, r6, #1
   d6892:	d106      	bne.n	d68a2 <_strtol_l.isra.0+0xc6>
   d6894:	2322      	movs	r3, #34	; 0x22
   d6896:	f8ce 3000 	str.w	r3, [lr]
   d689a:	4638      	mov	r0, r7
   d689c:	b942      	cbnz	r2, d68b0 <_strtol_l.isra.0+0xd4>
   d689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68a2:	f1b8 0f00 	cmp.w	r8, #0
   d68a6:	d000      	beq.n	d68aa <_strtol_l.isra.0+0xce>
   d68a8:	4240      	negs	r0, r0
   d68aa:	2a00      	cmp	r2, #0
   d68ac:	d0f7      	beq.n	d689e <_strtol_l.isra.0+0xc2>
   d68ae:	b10e      	cbz	r6, d68b4 <_strtol_l.isra.0+0xd8>
   d68b0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d68b4:	6011      	str	r1, [r2, #0]
   d68b6:	e7f2      	b.n	d689e <_strtol_l.isra.0+0xc2>
   d68b8:	2430      	movs	r4, #48	; 0x30
   d68ba:	2b00      	cmp	r3, #0
   d68bc:	d1b3      	bne.n	d6826 <_strtol_l.isra.0+0x4a>
   d68be:	2308      	movs	r3, #8
   d68c0:	e7b1      	b.n	d6826 <_strtol_l.isra.0+0x4a>
   d68c2:	2c30      	cmp	r4, #48	; 0x30
   d68c4:	d0a4      	beq.n	d6810 <_strtol_l.isra.0+0x34>
   d68c6:	230a      	movs	r3, #10
   d68c8:	e7ad      	b.n	d6826 <_strtol_l.isra.0+0x4a>
   d68ca:	bf00      	nop
   d68cc:	000d6f2e 	.word	0x000d6f2e

000d68d0 <strtol>:
   d68d0:	4613      	mov	r3, r2
   d68d2:	460a      	mov	r2, r1
   d68d4:	4601      	mov	r1, r0
   d68d6:	4802      	ldr	r0, [pc, #8]	; (d68e0 <strtol+0x10>)
   d68d8:	6800      	ldr	r0, [r0, #0]
   d68da:	f7ff bf7f 	b.w	d67dc <_strtol_l.isra.0>
   d68de:	bf00      	nop
   d68e0:	2003e488 	.word	0x2003e488

000d68e4 <dynalib_user>:
   d68e4:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d68f4:	00000000 6e6e6f43 69746365 7420676e     ....Connecting t
   d6904:	514d206f 2e2e5454 2500202e 52000a73     o MQTT... .%s..R
   d6914:	79727465 20676e69 5454514d 6e6f6320     etrying MQTT con
   d6924:	7463656e 206e6f69 35206e69 63657320     nection in 5 sec
   d6934:	73646e6f 000a2e2e 5454514d 6e6f4320     onds....MQTT Con
   d6944:	7463656e 0a216465 6e695000 676e6967     nected!..Pinging
   d6954:	54514d20 000a2054 63736944 656e6e6f      MQTT ..Disconne
   d6964:	6e697463 000a2067 6c627550 69687369     cting ..Publishi
   d6974:	2520676e 66322e30 72000a20 61687361     ng %0.2f ..rasha
   d6984:	6f690070 6164612e 69757266 6f632e74     p.io.adafruit.co
   d6994:	3935006d 39363138 62336166 36343961     m.598169fa3ba946
   d69a4:	34393633 33336131 36373930 65323465     36941a330976e42e
   d69b4:	72006332 61687361 65662f70 2f736465     2c.rashap/feeds/
   d69c4:	646e6172 754e6d6f 6172006d 70616873     randomNum.rashap
   d69d4:	6565662f 432f7364 726f6c6f 646e6553     /feeds/ColorSend
   d69e4:	00000000                                ....

000d69e8 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d69f0:	000d40c5 000d434d 000d4415 000d44c1     .@..MC...D...D..
   d6a00:	000d44f3 000d4429 000d4469 706f7244     .D..)D..iD..Drop
   d6a10:	20646570 61702061 74656b63 6b6e5500     ped a packet.Unk
   d6a20:	6e776f6e 72726520 4d00726f 00545451     nown error.MQTT.
   d6a30:	64252525 6664252e 69614600 2064656c     %%%d.%df.Failed 
   d6a40:	73206f74 63736275 65626972 6e6f4300     to subscribe.Con
   d6a50:	7463656e 206e6f69 6c696166 54006465     nection failed.T
   d6a60:	53206568 65767265 6f642072 6e207365     he Server does n
   d6a70:	7320746f 6f707075 74207472 6c206568     ot support the l
   d6a80:	6c657665 20666f20 20656874 5454514d     evel of the MQTT
   d6a90:	6f727020 6f636f74 6572206c 73657571      protocol reques
   d6aa0:	00646574 20656854 65696c43 6920746e     ted.The Client i
   d6ab0:	746e6564 65696669 73692072 726f6320     dentifier is cor
   d6ac0:	74636572 46545520 6220382d 6e207475     rect UTF-8 but n
   d6ad0:	6120746f 776f6c6c 62206465 68742079     ot allowed by th
   d6ae0:	65532065 72657672 65685400 54514d20     e Server.The MQT
   d6af0:	65732054 63697672 73692065 616e7520     T service is una
   d6b00:	6c696176 656c6261 65685400 74616420     vailable.The dat
   d6b10:	6e692061 65687420 65737520 616e2072     a in the user na
   d6b20:	6f20656d 61702072 6f777373 69206472     me or password i
   d6b30:	616d2073 726f666c 0064656d 20746f4e     s malformed.Not 
   d6b40:	68747561 7a69726f 74206465 6f63206f     authorized to co
   d6b50:	63656e6e 78450074 64656563 72206465     nnect.Exceeded r
   d6b60:	6e6f6365 7463656e 74617220 696c2065     econnect rate li
   d6b70:	2e74696d 656c5020 20657361 20797274     mit. Please try 
   d6b80:	69616761 616c206e 2e726574 756f5900     again later..You
   d6b90:	76616820 65622065 62206e65 656e6e61      have been banne
   d6ba0:	72662064 63206d6f 656e6e6f 6e697463     d from connectin
   d6bb0:	50202e67 7361656c 6f632065 6361746e     g. Please contac
   d6bc0:	68742074 514d2065 73205454 65767265     t the MQTT serve
   d6bd0:	64612072 696e696d 61727473 20726f74     r administrator 
   d6be0:	20726f66 65726f6d 74656420 736c6961     for more details
   d6bf0:	0000002e                                ....

000d6bf4 <_ZTV13Adafruit_MQTT>:
	...
   d6c04:	000d40a1 000d40a1 000d40a1 000d40a1     .@...@...@...@..
   d6c14:	000d40a1                                .@..

000d6c18 <CSWTCH.44>:
   d6c18:	000d6a39 000d6a4d 000d6a1d 000d6a5f     9j..Mj...j.._j..
   d6c28:	000d6aa4 000d6ae9 000d6b09 000d6b3c     .j...j...k..<k..
   d6c38:	000d6b56 000d6b8d                       Vk...k..

000d6c40 <_ZTVN5spark13EthernetClassE>:
	...
   d6c48:	000d505f 000d5055 000d504b 000d5041     _P..UP..KP..AP..
   d6c58:	000d5035 000d5029 000d5ddd 000d5de5     5P..)P...]...]..
   d6c68:	000d501d 000d5015 000d500b 000d5001     .P...P...P...P..
   d6c78:	000d5e15                                .^..

000d6c7c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d6c84:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d6c94:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d6ca4 <_ZTV9IPAddress>:
	...
   d6cac:	000d53f1 000d53e1 000d53e3              .S...S...S..

000d6cb8 <_ZTV9USBSerial>:
	...
   d6cc0:	000d54fd 000d5565 000d553b 000d5135     .T..eU..;U..5Q..
   d6cd0:	000d552d 000d54ff 000d550f 000d555f     -U...T...U.._U..
   d6ce0:	000d551f 000d54f9                       .U...T..

000d6ce8 <_ZTV11USARTSerial>:
	...
   d6cf0:	000d5611 000d567d 000d5655 000d5135     .V..}V..UV..5Q..
   d6d00:	000d5625 000d5641 000d5633 000d564f     %V..AV..3V..OV..
   d6d10:	000d5613 000d5617                       .V...V..

000d6d18 <_ZTV7TwoWire>:
	...
   d6d20:	000d570d 000d5757 000d572f 000d570f     .W..WW../W...W..
   d6d30:	000d5737 000d573f 000d5747 000d574f     7W..?W..GW..OW..
   d6d40:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d6d50:	203d2072 00006425                       r = %d..

000d6d58 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6d60:	000d5835 000d5859 000d5c2b 000d5867     5X..YX..+\..gX..
   d6d70:	000d5839                                9X..

000d6d74 <_ZTV9TCPClient>:
	...
   d6d7c:	000d40c9 000d4129 000d57b3 000d57cd     .@..)A...W...W..
   d6d8c:	000d5ac1 000d5933 000d5905 000d57f7     .Z..3Y...Y...W..
   d6d9c:	000d59cb 000d5c31 000d5967 000d5b75     .Y..1\..gY..u[..
   d6dac:	000d57f9 000d582b 000d57df 000d586b     .W..+X...W..kX..
   d6dbc:	000d58e5                                .X..

000d6dc0 <_ZTVN5spark9WiFiClassE>:
	...
   d6dc8:	000d5d7f 000d5d75 000d5d6b 000d5d2d     .]..u]..k]..-]..
   d6dd8:	000d525d 000d5d5f 000d5ddd 000d5de5     ]R.._]...]...]..
   d6de8:	000d5d53 000d5d4b 000d5d41 000d5d37     S]..K]..A]..7]..
   d6df8:	000d5e15                                .^..

000d6dfc <_ZTVN5spark12NetworkClassE>:
	...
   d6e04:	000d5d9d 000d5da7 000d5db1 000d5dbb     .]...]...]...]..
   d6e14:	000d5dc5 000d5dd1 000d5ddd 000d5de5     .]...]...]...]..
   d6e24:	000d5ded 000d5df9 000d5e01 000d5e0b     .]...]...^...^..
   d6e34:	000d5e15                                .^..

000d6e38 <_ZSt7nothrow>:
	...

000d6e39 <_ZTSSt19_Sp_make_shared_tag>:
   d6e39:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d6e49:	5f646572 00676174                        red_tag....

000d6e54 <_ZTISt19_Sp_make_shared_tag>:
   d6e54:	000d6e94 000d6e39                       .n..9n..

000d6e5c <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6e5c:	000d6ef4 000d6e68 000d6f18              .n..hn...o..

000d6e68 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6e68:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d6e78:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d6e88:	00000045                                E...

000d6e8c <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6e8c:	00000000 000d6e5c 000d60b9 000d60cd     ....\n...`...`..
   d6e9c:	000d6261 000d6261 000d6137 000d6079     ab..ab..7a..y`..
   d6eac:	000d611f 000d60e1 000d60ad              .a...`...`..

000d6eb8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6eb8:	000d6ef4 000d6ec4 000d6e5c              .n...n..\n..

000d6ec4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6ec4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d6ed4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d6ee4:	456f666e 00000000                       nfoE....

000d6eec <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6eec:	00000000 000d6eb8 000d6161 000d6175     .....n..aa..ua..
   d6efc:	000d6261 000d6261 000d6137 000d6079     ab..ab..7a..y`..
   d6f0c:	000d6235 000d61c1 000d6189              5b...a...a..

000d6f18 <_ZTISt9type_info>:
   d6f18:	000d6e94 000d6f20                       .n.. o..

000d6f20 <_ZTSSt9type_info>:
   d6f20:	74397453 5f657079 6f666e69               St9type_info.

000d6f2d <_ctype_>:
   d6f2d:	20202000 20202020 28282020 20282828     .         ((((( 
   d6f3d:	20202020 20202020 20202020 20202020                     
   d6f4d:	10108820 10101010 10101010 10101010      ...............
   d6f5d:	04040410 04040404 10040404 10101010     ................
   d6f6d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6f7d:	01010101 01010101 01010101 10101010     ................
   d6f8d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6f9d:	02020202 02020202 02020202 10101010     ................
   d6fad:	00000020 00000000 00000000 00000000      ...............
	...

000d702e <link_const_variable_data_end>:
	...

000d7030 <link_constructors_location>:
   d7030:	000d435d 	.word	0x000d435d
   d7034:	000d4b59 	.word	0x000d4b59
   d7038:	000d5069 	.word	0x000d5069
   d703c:	000d5091 	.word	0x000d5091
   d7040:	000d510d 	.word	0x000d510d
   d7044:	000d5269 	.word	0x000d5269
   d7048:	000d5279 	.word	0x000d5279
   d704c:	000d52a1 	.word	0x000d52a1
   d7050:	000d5d89 	.word	0x000d5d89
   d7054:	000d5ef5 	.word	0x000d5ef5

000d7058 <link_constructors_end>:
	...

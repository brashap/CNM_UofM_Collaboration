
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/L14_Moisture/L14_01_OLED/target/3.1.0/argon/L14_01_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003244  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7260  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e184  000b7264  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f4  2003e600  2003e600  0002e600  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000b76dc  000b76dc  000276dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7704  000b7704  00027704  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010f0c0  00000000  00000000  00027708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012968  00000000  00000000  001367c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000369a9  00000000  00000000  00149130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002b98  00000000  00000000  0017fad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000099d8  00000000  00000000  00182671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003812b  00000000  00000000  0018c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003d181  00000000  00000000  001c4174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001240d2  00000000  00000000  002012f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007b68  00000000  00000000  003253c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fca3 	bl	b6978 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fcab 	bl	b6994 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e184 	.word	0x2003e184
   b4048:	000b7264 	.word	0x000b7264
   b404c:	2003e5fc 	.word	0x2003e5fc
   b4050:	2003e600 	.word	0x2003e600
   b4054:	2003e7f4 	.word	0x2003e7f4

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fc77 	bl	b5950 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7238 	.word	0x000b7238
   b407c:	000b725c 	.word	0x000b725c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b836 	b.w	b40f0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8b7 	bl	b41f8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bc17 	b.w	b58c0 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 b87f 	b.w	b5194 <malloc>

000b4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4096:	f001 b885 	b.w	b51a4 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f000 ffb2 	bl	b500c <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b4d6d 	.word	0x000b4d6d

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b40c0:	4770      	bx	lr

000b40c2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40c6:	6800      	ldr	r0, [r0, #0]
   b40c8:	b108      	cbz	r0, b40ce <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40ca:	f001 f86b 	bl	b51a4 <free>
class SystemClass {
   b40ce:	4620      	mov	r0, r4
   b40d0:	bd10      	pop	{r4, pc}

000b40d2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d2:	b40e      	push	{r1, r2, r3}
   b40d4:	b503      	push	{r0, r1, lr}
   b40d6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40da:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40de:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e0:	f001 fad3 	bl	b568a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40e4:	b002      	add	sp, #8
   b40e6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ea:	b003      	add	sp, #12
   b40ec:	4770      	bx	lr
	...

000b40f0 <setup>:
const unsigned int updateTime = 5000;
unsigned int lastTime;

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40f0:	b508      	push	{r3, lr}

  Serial.begin(9600);
   b40f2:	f001 fd35 	bl	b5b60 <_Z16_fetch_usbserialv>
   b40f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40fa:	f001 fd25 	bl	b5b48 <_ZN9USBSerial5beginEl>
  Time.zone(-6); // -6 for MDT, -7 for MST
   b40fe:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   b4102:	f001 fb0f 	bl	b5724 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4106:	f001 f825 	bl	b5154 <spark_cloud_flag_connected>
        if (!connected()) {
   b410a:	b110      	cbz	r0, b4112 <setup+0x22>
        return spark_sync_time(NULL);
   b410c:	2000      	movs	r0, #0
   b410e:	f001 f829 	bl	b5164 <spark_sync_time>
  Particle.syncTime();

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  //0x3C obtained from I2C_Scan  
   b4112:	223c      	movs	r2, #60	; 0x3c
   b4114:	2102      	movs	r1, #2
   b4116:	4807      	ldr	r0, [pc, #28]	; (b4134 <setup+0x44>)
   b4118:	f000 fb64 	bl	b47e4 <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); 
   b411c:	4805      	ldr	r0, [pc, #20]	; (b4134 <setup+0x44>)
   b411e:	f000 faf1 	bl	b4704 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   b4122:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4126:	f001 fb91 	bl	b584c <delay>
  display.clearDisplay();   // clears the screen and buffer  
}
   b412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.clearDisplay();   // clears the screen and buffer  
   b412e:	4801      	ldr	r0, [pc, #4]	; (b4134 <setup+0x44>)
   b4130:	f000 ba70 	b.w	b4614 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4134:	2003e610 	.word	0x2003e610

000b4138 <_Z11displayTimev>:
    displayTime();
    lastTime = millis();
  }
}

void displayTime() {
   b4138:	b510      	push	{r4, lr}
   b413a:	b08c      	sub	sp, #48	; 0x30
  String DateTime, TimeOnly;
  
  display.clearDisplay();   // clears the screen and buffer
   b413c:	4c29      	ldr	r4, [pc, #164]	; (b41e4 <_Z11displayTimev+0xac>)
  String DateTime, TimeOnly;
   b413e:	492a      	ldr	r1, [pc, #168]	; (b41e8 <_Z11displayTimev+0xb0>)
   b4140:	4668      	mov	r0, sp
   b4142:	f001 f9ce 	bl	b54e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4146:	4928      	ldr	r1, [pc, #160]	; (b41e8 <_Z11displayTimev+0xb0>)
   b4148:	a804      	add	r0, sp, #16
   b414a:	f001 f9ca 	bl	b54e2 <_ZN6StringC1EPK19__FlashStringHelper>
  display.clearDisplay();   // clears the screen and buffer
   b414e:	4620      	mov	r0, r4
   b4150:	f000 fa60 	bl	b4614 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4154:	4620      	mov	r0, r4
   b4156:	2101      	movs	r1, #1
   b4158:	f000 fdc5 	bl	b4ce6 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b415c:	4620      	mov	r0, r4
   b415e:	2101      	movs	r1, #1
   b4160:	f000 fdc6 	bl	b4cf0 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   b4164:	2200      	movs	r2, #0
   b4166:	4611      	mov	r1, r2
   b4168:	4620      	mov	r0, r4
   b416a:	f000 fdb9 	bl	b4ce0 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("My name is Brian\n");
   b416e:	491f      	ldr	r1, [pc, #124]	; (b41ec <_Z11displayTimev+0xb4>)
   b4170:	4620      	mov	r0, r4
   b4172:	f7ff ffae 	bl	b40d2 <_ZN5Print6printfEPKcz>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b4176:	f001 fb4e 	bl	b5816 <_ZN9TimeClass3nowEv>
   b417a:	4602      	mov	r2, r0
   b417c:	17c3      	asrs	r3, r0, #31
   b417e:	a808      	add	r0, sp, #32
   b4180:	f001 faf0 	bl	b5764 <_ZN9TimeClass7timeStrEx>

  DateTime = Time.timeStr();
   b4184:	a908      	add	r1, sp, #32
   b4186:	4668      	mov	r0, sp
   b4188:	f001 f9dc 	bl	b5544 <_ZN6StringaSEOS_>
   b418c:	a808      	add	r0, sp, #32
   b418e:	f001 f95d 	bl	b544c <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   b4192:	2313      	movs	r3, #19
   b4194:	220b      	movs	r2, #11
   b4196:	4669      	mov	r1, sp
   b4198:	a808      	add	r0, sp, #32
   b419a:	f001 f9db 	bl	b5554 <_ZNK6String9substringEjj>
   b419e:	a908      	add	r1, sp, #32
   b41a0:	a804      	add	r0, sp, #16
   b41a2:	f001 f9cf 	bl	b5544 <_ZN6StringaSEOS_>
   b41a6:	a808      	add	r0, sp, #32
   b41a8:	f001 f950 	bl	b544c <_ZN6StringD1Ev>

  display.setTextColor(BLACK, WHITE); 
   b41ac:	2201      	movs	r2, #1
   b41ae:	2100      	movs	r1, #0
   b41b0:	4620      	mov	r0, r4
   b41b2:	f000 fda0 	bl	b4cf6 <_ZN12Adafruit_GFX12setTextColorEtt>
  Serial.printf("UNIX Date is %s\n",DateTime.c_str());
   b41b6:	f001 fcd3 	bl	b5b60 <_Z16_fetch_usbserialv>
   b41ba:	9a00      	ldr	r2, [sp, #0]
   b41bc:	490c      	ldr	r1, [pc, #48]	; (b41f0 <_Z11displayTimev+0xb8>)
   b41be:	f7ff ff88 	bl	b40d2 <_ZN5Print6printfEPKcz>
  display.printf("Time is %s\n",TimeOnly.c_str());
   b41c2:	9a04      	ldr	r2, [sp, #16]
   b41c4:	490b      	ldr	r1, [pc, #44]	; (b41f4 <_Z11displayTimev+0xbc>)
   b41c6:	4620      	mov	r0, r4
   b41c8:	f7ff ff83 	bl	b40d2 <_ZN5Print6printfEPKcz>
  display.display();
   b41cc:	4620      	mov	r0, r4
   b41ce:	f000 fa99 	bl	b4704 <_ZN16Adafruit_SSD13067displayEv>
  String DateTime, TimeOnly;
   b41d2:	a804      	add	r0, sp, #16
   b41d4:	f001 f93a 	bl	b544c <_ZN6StringD1Ev>
   b41d8:	4668      	mov	r0, sp
   b41da:	f001 f937 	bl	b544c <_ZN6StringD1Ev>
   b41de:	b00c      	add	sp, #48	; 0x30
   b41e0:	bd10      	pop	{r4, pc}
   b41e2:	bf00      	nop
   b41e4:	2003e610 	.word	0x2003e610
   b41e8:	000b7168 	.word	0x000b7168
   b41ec:	000b6a34 	.word	0x000b6a34
   b41f0:	000b6a46 	.word	0x000b6a46
   b41f4:	000b6a57 	.word	0x000b6a57

000b41f8 <loop>:
void loop() {
   b41f8:	b510      	push	{r4, lr}
  if(millis()-lastTime>updateTime) {
   b41fa:	4c07      	ldr	r4, [pc, #28]	; (b4218 <loop+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41fc:	f000 fdbe 	bl	b4d7c <HAL_Timer_Get_Milli_Seconds>
   b4200:	6823      	ldr	r3, [r4, #0]
   b4202:	1ac0      	subs	r0, r0, r3
   b4204:	f241 3388 	movw	r3, #5000	; 0x1388
   b4208:	4298      	cmp	r0, r3
   b420a:	d904      	bls.n	b4216 <loop+0x1e>
    displayTime();
   b420c:	f7ff ff94 	bl	b4138 <_Z11displayTimev>
   b4210:	f000 fdb4 	bl	b4d7c <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b4214:	6020      	str	r0, [r4, #0]
}
   b4216:	bd10      	pop	{r4, pc}
   b4218:	2003e634 	.word	0x2003e634

000b421c <_ZN16Adafruit_SSD1306D0Ev>:
   b421c:	b510      	push	{r4, lr}
   b421e:	2124      	movs	r1, #36	; 0x24
   b4220:	4604      	mov	r4, r0
   b4222:	f001 ff4e 	bl	b60c2 <_ZdlPvj>
   b4226:	4620      	mov	r0, r4
   b4228:	bd10      	pop	{r4, pc}
	...

000b422c <_GLOBAL__sub_I_display>:
   b422c:	b510      	push	{r4, lr}
Adafruit_SSD1306 display(OLED_RESET);
   b422e:	4c0d      	ldr	r4, [pc, #52]	; (b4264 <_GLOBAL__sub_I_display+0x38>)
   b4230:	2104      	movs	r1, #4
   b4232:	4620      	mov	r0, r4
   b4234:	f000 f9d8 	bl	b45e8 <_ZN16Adafruit_SSD1306C1Ea>
   b4238:	4a0b      	ldr	r2, [pc, #44]	; (b4268 <_GLOBAL__sub_I_display+0x3c>)
   b423a:	490c      	ldr	r1, [pc, #48]	; (b426c <_GLOBAL__sub_I_display+0x40>)
   b423c:	4620      	mov	r0, r4
              error_(SYSTEM_ERROR_NONE) {
   b423e:	4c0c      	ldr	r4, [pc, #48]	; (b4270 <_GLOBAL__sub_I_display+0x44>)
   b4240:	f001 ff3a 	bl	b60b8 <__aeabi_atexit>
   b4244:	2300      	movs	r3, #0
   b4246:	e9c4 3300 	strd	r3, r3, [r4]
    SleepResult() {}
   b424a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b424e:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4250:	2002      	movs	r0, #2
   b4252:	f000 feeb 	bl	b502c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   b4256:	4620      	mov	r0, r4
   b4258:	4a03      	ldr	r2, [pc, #12]	; (b4268 <_GLOBAL__sub_I_display+0x3c>)
   b425a:	4906      	ldr	r1, [pc, #24]	; (b4274 <_GLOBAL__sub_I_display+0x48>)
   b425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   b4260:	f001 bf2a 	b.w	b60b8 <__aeabi_atexit>
   b4264:	2003e610 	.word	0x2003e610
   b4268:	2003e600 	.word	0x2003e600
   b426c:	000b40c1 	.word	0x000b40c1
   b4270:	2003e604 	.word	0x2003e604
   b4274:	000b40c3 	.word	0x000b40c3

000b4278 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4278:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b427a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b427c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4280:	2d02      	cmp	r5, #2
   b4282:	d069      	beq.n	b4358 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4284:	2d03      	cmp	r5, #3
   b4286:	f000 8099 	beq.w	b43bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b428a:	2d01      	cmp	r5, #1
   b428c:	d16c      	bne.n	b4368 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b428e:	8905      	ldrh	r5, [r0, #8]
   b4290:	43d2      	mvns	r2, r2
   b4292:	442a      	add	r2, r5
   b4294:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4296:	2a00      	cmp	r2, #0
   b4298:	db5d      	blt.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b429a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b429e:	4295      	cmp	r5, r2
   b42a0:	dd59      	ble.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b42a2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b42a4:	bfbe      	ittt	lt
   b42a6:	185b      	addlt	r3, r3, r1
   b42a8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b42aa:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b42ac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b42b0:	18cd      	adds	r5, r1, r3
   b42b2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b42b4:	bfc4      	itt	gt
   b42b6:	1a43      	subgt	r3, r0, r1
   b42b8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b42ba:	2b00      	cmp	r3, #0
   b42bc:	dd4b      	ble.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b42be:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b42c2:	f8df c120 	ldr.w	ip, [pc, #288]	; b43e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b42c6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b42ca:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b42ce:	b2db      	uxtb	r3, r3
  pBuf += x;
   b42d0:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b42d4:	d01a      	beq.n	b430c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b42d6:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b42da:	4e40      	ldr	r6, [pc, #256]	; (b43dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b42dc:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b42de:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b42e0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b42e2:	bf3f      	itttt	cc
   b42e4:	eba5 0e03 	subcc.w	lr, r5, r3
   b42e8:	26ff      	movcc	r6, #255	; 0xff
   b42ea:	fa46 f60e 	asrcc.w	r6, r6, lr
   b42ee:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b42f0:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b42f4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b42f6:	bf0c      	ite	eq
   b42f8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b42fa:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b42fc:	42ab      	cmp	r3, r5
   b42fe:	f80c 6002 	strb.w	r6, [ip, r2]
   b4302:	d328      	bcc.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4304:	3908      	subs	r1, #8
   b4306:	440b      	add	r3, r1
   b4308:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b430a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b430c:	2b07      	cmp	r3, #7
   b430e:	d919      	bls.n	b4344 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4310:	2c01      	cmp	r4, #1
   b4312:	f04f 35ff 	mov.w	r5, #4294967295
   b4316:	bf18      	it	ne
   b4318:	2500      	movne	r5, #0
   b431a:	b2ed      	uxtb	r5, r5
   b431c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4320:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4322:	3a08      	subs	r2, #8
   b4324:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4326:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4328:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b432c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4330:	d8f7      	bhi.n	b4322 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4332:	f1a3 0208 	sub.w	r2, r3, #8
   b4336:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b433a:	3201      	adds	r2, #1
   b433c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4340:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4344:	b13b      	cbz	r3, b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4346:	4a26      	ldr	r2, [pc, #152]	; (b43e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4348:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b434a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b434c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b434e:	bf0c      	ite	eq
   b4350:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4352:	4393      	bicne	r3, r2
   b4354:	7003      	strb	r3, [r0, #0]
}
   b4356:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4358:	8945      	ldrh	r5, [r0, #10]
   b435a:	43d2      	mvns	r2, r2
   b435c:	442a      	add	r2, r5
      x -= (w-1);
   b435e:	18cd      	adds	r5, r1, r3
   b4360:	8901      	ldrh	r1, [r0, #8]
   b4362:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4364:	b212      	sxth	r2, r2
      x -= (w-1);
   b4366:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4368:	2a00      	cmp	r2, #0
   b436a:	dbf4      	blt.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b436c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4370:	4295      	cmp	r5, r2
   b4372:	ddf0      	ble.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4374:	2900      	cmp	r1, #0
    w += x;
   b4376:	bfbe      	ittt	lt
   b4378:	185b      	addlt	r3, r3, r1
   b437a:	b21b      	sxthlt	r3, r3
    x = 0;
   b437c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b437e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4382:	18ce      	adds	r6, r1, r3
   b4384:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4386:	bfc4      	itt	gt
   b4388:	1a6b      	subgt	r3, r5, r1
   b438a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b438c:	2b00      	cmp	r3, #0
   b438e:	dde2      	ble.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4390:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4392:	2580      	movs	r5, #128	; 0x80
   b4394:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4398:	4812      	ldr	r0, [pc, #72]	; (b43e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b439a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b439c:	f002 0007 	and.w	r0, r2, #7
   b43a0:	2201      	movs	r2, #1
   b43a2:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b43a4:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b43a6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b43a8:	440b      	add	r3, r1
   b43aa:	d10c      	bne.n	b43c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b43ac:	428b      	cmp	r3, r1
   b43ae:	d0d2      	beq.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b43b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b43b4:	4310      	orrs	r0, r2
   b43b6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43ba:	e7f7      	b.n	b43ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b43bc:	18cd      	adds	r5, r1, r3
   b43be:	8941      	ldrh	r1, [r0, #10]
   b43c0:	1b49      	subs	r1, r1, r5
   b43c2:	b209      	sxth	r1, r1
      break;
   b43c4:	e767      	b.n	b4296 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b43c6:	43d2      	mvns	r2, r2
   b43c8:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b43ca:	428b      	cmp	r3, r1
   b43cc:	d0c3      	beq.n	b4356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b43ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   b43d2:	4010      	ands	r0, r2
   b43d4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43d8:	e7f7      	b.n	b43ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b43da:	bf00      	nop
   b43dc:	2003e18c 	.word	0x2003e18c
   b43e0:	2003e184 	.word	0x2003e184
   b43e4:	2003e194 	.word	0x2003e194

000b43e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b43ea:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43ec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b43f0:	2d02      	cmp	r5, #2
   b43f2:	d034      	beq.n	b445e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b43f4:	2d03      	cmp	r5, #3
   b43f6:	f000 809b 	beq.w	b4530 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b43fa:	2d01      	cmp	r5, #1
   b43fc:	d137      	bne.n	b446e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b43fe:	18d5      	adds	r5, r2, r3
   b4400:	8902      	ldrh	r2, [r0, #8]
   b4402:	1b52      	subs	r2, r2, r5
   b4404:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4406:	2900      	cmp	r1, #0
   b4408:	f2c0 8091 	blt.w	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b440c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4410:	428d      	cmp	r5, r1
   b4412:	f340 808c 	ble.w	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4416:	2a00      	cmp	r2, #0
    w += x;
   b4418:	bfbe      	ittt	lt
   b441a:	189b      	addlt	r3, r3, r2
   b441c:	b21b      	sxthlt	r3, r3
    x = 0;
   b441e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4420:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4424:	18d6      	adds	r6, r2, r3
   b4426:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4428:	bfc4      	itt	gt
   b442a:	1aab      	subgt	r3, r5, r2
   b442c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b442e:	2b00      	cmp	r3, #0
   b4430:	dd7d      	ble.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4432:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4434:	2580      	movs	r5, #128	; 0x80
   b4436:	fb10 2205 	smlabb	r2, r0, r5, r2
   b443a:	4845      	ldr	r0, [pc, #276]	; (b4550 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b443c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b443e:	f001 0007 	and.w	r0, r1, #7
   b4442:	2101      	movs	r1, #1
   b4444:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4446:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4448:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b444a:	4413      	add	r3, r2
   b444c:	d175      	bne.n	b453a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b444e:	429a      	cmp	r2, r3
   b4450:	d06d      	beq.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4452:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4456:	4308      	orrs	r0, r1
   b4458:	f802 0c01 	strb.w	r0, [r2, #-1]
   b445c:	e7f7      	b.n	b444e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b445e:	8905      	ldrh	r5, [r0, #8]
   b4460:	43c9      	mvns	r1, r1
   b4462:	4429      	add	r1, r5
      y -= (h-1);
   b4464:	18d5      	adds	r5, r2, r3
   b4466:	8942      	ldrh	r2, [r0, #10]
   b4468:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b446a:	b209      	sxth	r1, r1
      y -= (h-1);
   b446c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b446e:	2900      	cmp	r1, #0
   b4470:	db5d      	blt.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4472:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4476:	428d      	cmp	r5, r1
   b4478:	dd59      	ble.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b447a:	2a00      	cmp	r2, #0
    __h += __y;
   b447c:	bfbe      	ittt	lt
   b447e:	189b      	addlt	r3, r3, r2
   b4480:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4482:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4484:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4488:	18d5      	adds	r5, r2, r3
   b448a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b448c:	bfc4      	itt	gt
   b448e:	1a83      	subgt	r3, r0, r2
   b4490:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4492:	2b00      	cmp	r3, #0
   b4494:	dd4b      	ble.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4496:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b449a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4550 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b449e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b44a2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b44a6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b44a8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b44ac:	d01a      	beq.n	b44e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b44ae:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b44b2:	4e28      	ldr	r6, [pc, #160]	; (b4554 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b44b4:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b44b6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b44b8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b44ba:	bf3f      	itttt	cc
   b44bc:	eba5 0e03 	subcc.w	lr, r5, r3
   b44c0:	26ff      	movcc	r6, #255	; 0xff
   b44c2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b44c6:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b44c8:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b44cc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b44ce:	bf0c      	ite	eq
   b44d0:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b44d2:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b44d4:	42ab      	cmp	r3, r5
   b44d6:	f80c 6001 	strb.w	r6, [ip, r1]
   b44da:	d328      	bcc.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b44dc:	3a08      	subs	r2, #8
   b44de:	4413      	add	r3, r2
   b44e0:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b44e2:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b44e4:	2b07      	cmp	r3, #7
   b44e6:	d919      	bls.n	b451c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b44e8:	2c01      	cmp	r4, #1
   b44ea:	f04f 35ff 	mov.w	r5, #4294967295
   b44ee:	bf18      	it	ne
   b44f0:	2500      	movne	r5, #0
   b44f2:	b2ed      	uxtb	r5, r5
   b44f4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b44f8:	461a      	mov	r2, r3
      h -= 8;
   b44fa:	3a08      	subs	r2, #8
   b44fc:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b44fe:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4500:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4504:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4508:	d8f7      	bhi.n	b44fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b450a:	f1a3 0208 	sub.w	r2, r3, #8
   b450e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4512:	3201      	adds	r2, #1
   b4514:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4518:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b451c:	b13b      	cbz	r3, b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b451e:	4a0e      	ldr	r2, [pc, #56]	; (b4558 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4520:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4522:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4524:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4526:	bf0c      	ite	eq
   b4528:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b452a:	4393      	bicne	r3, r2
   b452c:	7003      	strb	r3, [r0, #0]
}
   b452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4530:	8945      	ldrh	r5, [r0, #10]
   b4532:	43c9      	mvns	r1, r1
   b4534:	4429      	add	r1, r5
   b4536:	b209      	sxth	r1, r1
      break;
   b4538:	e765      	b.n	b4406 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b453a:	43c9      	mvns	r1, r1
   b453c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b453e:	429a      	cmp	r2, r3
   b4540:	d0f5      	beq.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4542:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4546:	4008      	ands	r0, r1
   b4548:	f802 0c01 	strb.w	r0, [r2, #-1]
   b454c:	e7f7      	b.n	b453e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b454e:	bf00      	nop
   b4550:	2003e194 	.word	0x2003e194
   b4554:	2003e18c 	.word	0x2003e18c
   b4558:	2003e184 	.word	0x2003e184

000b455c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b455e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4560:	4606      	mov	r6, r0
   b4562:	4614      	mov	r4, r2
   b4564:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4566:	db2d      	blt.n	b45c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4568:	f000 fbca 	bl	b4d00 <_ZN12Adafruit_GFX5widthEv>
   b456c:	42a8      	cmp	r0, r5
   b456e:	dd29      	ble.n	b45c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4570:	2c00      	cmp	r4, #0
   b4572:	db27      	blt.n	b45c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4574:	4630      	mov	r0, r6
   b4576:	f000 fbc6 	bl	b4d06 <_ZN12Adafruit_GFX6heightEv>
   b457a:	42a0      	cmp	r0, r4
   b457c:	dd22      	ble.n	b45c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b457e:	4630      	mov	r0, r6
   b4580:	f000 fbbc 	bl	b4cfc <_ZN12Adafruit_GFX11getRotationEv>
   b4584:	2802      	cmp	r0, #2
   b4586:	d01e      	beq.n	b45c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4588:	2803      	cmp	r0, #3
   b458a:	d025      	beq.n	b45d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b458c:	2801      	cmp	r0, #1
   b458e:	d104      	bne.n	b459a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4590:	8933      	ldrh	r3, [r6, #8]
   b4592:	43e2      	mvns	r2, r4
   b4594:	441a      	add	r2, r3
    break;
   b4596:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4598:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b459a:	2c00      	cmp	r4, #0
   b459c:	4622      	mov	r2, r4
   b459e:	bfb8      	it	lt
   b45a0:	1de2      	addlt	r2, r4, #7
   b45a2:	10d2      	asrs	r2, r2, #3
   b45a4:	2180      	movs	r1, #128	; 0x80
   b45a6:	fb12 5501 	smlabb	r5, r2, r1, r5
   b45aa:	490e      	ldr	r1, [pc, #56]	; (b45e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b45ac:	2201      	movs	r2, #1
   b45ae:	f004 0407 	and.w	r4, r4, #7
   b45b2:	574b      	ldrsb	r3, [r1, r5]
   b45b4:	fa02 f404 	lsl.w	r4, r2, r4
   b45b8:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b45ba:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b45bc:	bf0c      	ite	eq
   b45be:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b45c0:	43a3      	bicne	r3, r4
   b45c2:	554b      	strb	r3, [r1, r5]
}
   b45c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b45c6:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b45c8:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b45ca:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b45cc:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b45ce:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b45d0:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b45d2:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b45d4:	b224      	sxth	r4, r4
    break;
   b45d6:	e7e0      	b.n	b459a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b45d8:	8973      	ldrh	r3, [r6, #10]
   b45da:	3b01      	subs	r3, #1
   b45dc:	1b5b      	subs	r3, r3, r5
    break;
   b45de:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b45e0:	b21c      	sxth	r4, r3
    break;
   b45e2:	e7da      	b.n	b459a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b45e4:	2003e194 	.word	0x2003e194

000b45e8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45e8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45ea:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45ec:	4604      	mov	r4, r0
   b45ee:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45f0:	2180      	movs	r1, #128	; 0x80
   b45f2:	f000 faa7 	bl	b4b44 <_ZN12Adafruit_GFXC1Ess>
   b45f6:	4b06      	ldr	r3, [pc, #24]	; (b4610 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b45f8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b45fa:	23ff      	movs	r3, #255	; 0xff
   b45fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4600:	7763      	strb	r3, [r4, #29]
   b4602:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4606:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4608:	f884 5020 	strb.w	r5, [r4, #32]
}
   b460c:	4620      	mov	r0, r4
   b460e:	bd38      	pop	{r3, r4, r5, pc}
   b4610:	000b6a6c 	.word	0x000b6a6c

000b4614 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4614:	4802      	ldr	r0, [pc, #8]	; (b4620 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4616:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b461a:	2100      	movs	r1, #0
   b461c:	f002 b9ba 	b.w	b6994 <memset>
   b4620:	2003e194 	.word	0x2003e194

000b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4624:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4626:	4c0b      	ldr	r4, [pc, #44]	; (b4654 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4628:	7821      	ldrb	r1, [r4, #0]
   b462a:	f3bf 8f5b 	dmb	ish
   b462e:	f011 0101 	ands.w	r1, r1, #1
   b4632:	d10b      	bne.n	b464c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4634:	4620      	mov	r0, r4
   b4636:	9101      	str	r1, [sp, #4]
   b4638:	f7ff fd3a 	bl	b40b0 <__cxa_guard_acquire>
   b463c:	9901      	ldr	r1, [sp, #4]
   b463e:	b128      	cbz	r0, b464c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4640:	4805      	ldr	r0, [pc, #20]	; (b4658 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4642:	f000 fe2b 	bl	b529c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4646:	4620      	mov	r0, r4
   b4648:	f7ff fd37 	bl	b40ba <__cxa_guard_release>
        return instance;
    }
   b464c:	4802      	ldr	r0, [pc, #8]	; (b4658 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b464e:	b002      	add	sp, #8
   b4650:	bd10      	pop	{r4, pc}
   b4652:	bf00      	nop
   b4654:	2003e638 	.word	0x2003e638
   b4658:	2003e63c 	.word	0x2003e63c

000b465c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b465c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b465e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4662:	b143      	cbz	r3, b4676 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4664:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4666:	f7ff ffdd 	bl	b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b466a:	9901      	ldr	r1, [sp, #4]
}
   b466c:	b003      	add	sp, #12
   b466e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4672:	f000 bec7 	b.w	b5404 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4676:	460b      	mov	r3, r1
   b4678:	7f81      	ldrb	r1, [r0, #30]
   b467a:	7f40      	ldrb	r0, [r0, #29]
   b467c:	2201      	movs	r2, #1
}
   b467e:	b003      	add	sp, #12
   b4680:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4684:	f001 bcb8 	b.w	b5ff8 <shiftOut>

000b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4688:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b468a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b468e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4690:	4604      	mov	r4, r0
   b4692:	460d      	mov	r5, r1
  if (sid != -1)
   b4694:	d01d      	beq.n	b46d2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4696:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b469a:	2101      	movs	r1, #1
   b469c:	b280      	uxth	r0, r0
   b469e:	f001 fc92 	bl	b5fc6 <digitalWrite>
    digitalWrite(dc, LOW);
   b46a2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b46a6:	2100      	movs	r1, #0
   b46a8:	b280      	uxth	r0, r0
   b46aa:	f001 fc8c 	bl	b5fc6 <digitalWrite>
    digitalWrite(cs, LOW);
   b46ae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46b2:	2100      	movs	r1, #0
   b46b4:	b280      	uxth	r0, r0
   b46b6:	f001 fc86 	bl	b5fc6 <digitalWrite>
    fastSPIwrite(c);
   b46ba:	4629      	mov	r1, r5
   b46bc:	4620      	mov	r0, r4
   b46be:	f7ff ffcd 	bl	b465c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b46c2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46c6:	2101      	movs	r1, #1
}
   b46c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b46cc:	b280      	uxth	r0, r0
   b46ce:	f001 bc7a 	b.w	b5fc6 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b46d2:	f001 fcc9 	bl	b6068 <_Z19__fetch_global_Wirev>
   b46d6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b46da:	f001 fb31 	bl	b5d40 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b46de:	f001 fcc3 	bl	b6068 <_Z19__fetch_global_Wirev>
   b46e2:	6803      	ldr	r3, [r0, #0]
   b46e4:	2100      	movs	r1, #0
   b46e6:	689b      	ldr	r3, [r3, #8]
   b46e8:	4798      	blx	r3
    Wire.write(c);
   b46ea:	f001 fcbd 	bl	b6068 <_Z19__fetch_global_Wirev>
   b46ee:	6803      	ldr	r3, [r0, #0]
   b46f0:	4629      	mov	r1, r5
   b46f2:	689b      	ldr	r3, [r3, #8]
   b46f4:	4798      	blx	r3
    Wire.endTransmission();
   b46f6:	f001 fcb7 	bl	b6068 <_Z19__fetch_global_Wirev>
}
   b46fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b46fe:	f001 bb26 	b.w	b5d4e <_ZN7TwoWire15endTransmissionEv>
	...

000b4704 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4706:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4708:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b470a:	f7ff ffbd 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b470e:	2100      	movs	r1, #0
   b4710:	4620      	mov	r0, r4
   b4712:	f7ff ffb9 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4716:	217f      	movs	r1, #127	; 0x7f
   b4718:	4620      	mov	r0, r4
   b471a:	f7ff ffb5 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b471e:	2122      	movs	r1, #34	; 0x22
   b4720:	4620      	mov	r0, r4
   b4722:	f7ff ffb1 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4726:	2100      	movs	r1, #0
   b4728:	4620      	mov	r0, r4
   b472a:	f7ff ffad 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b472e:	2107      	movs	r1, #7
   b4730:	4620      	mov	r0, r4
   b4732:	f7ff ffa9 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4736:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b473a:	4f29      	ldr	r7, [pc, #164]	; (b47e0 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b473c:	3301      	adds	r3, #1
   b473e:	d02a      	beq.n	b4796 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4740:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4744:	2101      	movs	r1, #1
   b4746:	b280      	uxth	r0, r0
   b4748:	f001 fc3d 	bl	b5fc6 <digitalWrite>
    digitalWrite(dc, HIGH);
   b474c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4750:	2101      	movs	r1, #1
   b4752:	b280      	uxth	r0, r0
   b4754:	f001 fc37 	bl	b5fc6 <digitalWrite>
    digitalWrite(cs, LOW);
   b4758:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b475c:	2100      	movs	r1, #0
   b475e:	b280      	uxth	r0, r0
   b4760:	f001 fc31 	bl	b5fc6 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4764:	2001      	movs	r0, #1
   b4766:	f000 fb01 	bl	b4d6c <HAL_Delay_Microseconds>
   b476a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b476e:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4770:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4774:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4776:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4778:	f7ff ff70 	bl	b465c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b477c:	2d00      	cmp	r5, #0
   b477e:	d1f6      	bne.n	b476e <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4780:	2001      	movs	r0, #1
   b4782:	f000 faf3 	bl	b4d6c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4786:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b478a:	2101      	movs	r1, #1
}
   b478c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4790:	b280      	uxth	r0, r0
   b4792:	f001 bc18 	b.w	b5fc6 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4796:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4798:	f001 fc66 	bl	b6068 <_Z19__fetch_global_Wirev>
   b479c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b47a0:	f001 face 	bl	b5d40 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b47a4:	f001 fc60 	bl	b6068 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b47a8:	6803      	ldr	r3, [r0, #0]
   b47aa:	2140      	movs	r1, #64	; 0x40
   b47ac:	689b      	ldr	r3, [r3, #8]
   b47ae:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b47b0:	f105 0610 	add.w	r6, r5, #16
   b47b4:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b47b6:	f001 fc57 	bl	b6068 <_Z19__fetch_global_Wirev>
   b47ba:	6803      	ldr	r3, [r0, #0]
   b47bc:	5d79      	ldrb	r1, [r7, r5]
   b47be:	689b      	ldr	r3, [r3, #8]
   b47c0:	4798      	blx	r3
		i++;
   b47c2:	1c6b      	adds	r3, r5, #1
   b47c4:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b47c6:	42ae      	cmp	r6, r5
   b47c8:	d1f5      	bne.n	b47b6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b47ca:	f001 fc4d 	bl	b6068 <_Z19__fetch_global_Wirev>
   b47ce:	f001 fabe 	bl	b5d4e <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b47d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b47d6:	d100      	bne.n	b47da <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b47d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b47da:	4635      	mov	r5, r6
   b47dc:	e7dc      	b.n	b4798 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b47de:	bf00      	nop
   b47e0:	2003e194 	.word	0x2003e194

000b47e4 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47e4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b47e6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b47ea:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b47ec:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47ee:	4604      	mov	r4, r0
   b47f0:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b47f2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b47f4:	f000 80c9 	beq.w	b498a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b47f8:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b47fc:	2101      	movs	r1, #1
   b47fe:	b280      	uxth	r0, r0
   b4800:	f001 fbd0 	bl	b5fa4 <pinMode>
    pinMode(cs, OUTPUT);
   b4804:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4808:	2101      	movs	r1, #1
   b480a:	b280      	uxth	r0, r0
   b480c:	f001 fbca 	bl	b5fa4 <pinMode>
    if (!hwSPI){
   b4810:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4814:	2b00      	cmp	r3, #0
   b4816:	f000 80a6 	beq.w	b4966 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b481a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b481e:	2101      	movs	r1, #1
   b4820:	b280      	uxth	r0, r0
   b4822:	f001 fbd0 	bl	b5fc6 <digitalWrite>
        instance().setBitOrder(order);
   b4826:	f7ff fefd 	bl	b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b482a:	2101      	movs	r1, #1
   b482c:	f000 fd54 	bl	b52d8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4830:	f7ff fef8 	bl	b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4834:	2110      	movs	r1, #16
   b4836:	f000 fdbf 	bl	b53b8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b483a:	f7ff fef3 	bl	b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b483e:	2100      	movs	r1, #0
   b4840:	f000 fd5e 	bl	b5300 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4844:	f7ff feee 	bl	b4624 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4848:	f000 fd32 	bl	b52b0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b484c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4850:	2101      	movs	r1, #1
   b4852:	b280      	uxth	r0, r0
   b4854:	f001 fba6 	bl	b5fa4 <pinMode>
  digitalWrite(rst, HIGH);
   b4858:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b485c:	2101      	movs	r1, #1
   b485e:	b280      	uxth	r0, r0
   b4860:	f001 fbb1 	bl	b5fc6 <digitalWrite>
  delay(1);
   b4864:	2001      	movs	r0, #1
   b4866:	f000 fff1 	bl	b584c <delay>
  digitalWrite(rst, LOW);
   b486a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b486e:	2100      	movs	r1, #0
   b4870:	b280      	uxth	r0, r0
   b4872:	f001 fba8 	bl	b5fc6 <digitalWrite>
  delay(10);
   b4876:	200a      	movs	r0, #10
   b4878:	f000 ffe8 	bl	b584c <delay>
  digitalWrite(rst, HIGH);
   b487c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4880:	2101      	movs	r1, #1
   b4882:	b280      	uxth	r0, r0
   b4884:	f001 fb9f 	bl	b5fc6 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4888:	4620      	mov	r0, r4
   b488a:	21ae      	movs	r1, #174	; 0xae
   b488c:	f7ff fefc 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4890:	4620      	mov	r0, r4
   b4892:	21d5      	movs	r1, #213	; 0xd5
   b4894:	f7ff fef8 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4898:	4620      	mov	r0, r4
   b489a:	2180      	movs	r1, #128	; 0x80
   b489c:	f7ff fef4 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b48a0:	4620      	mov	r0, r4
   b48a2:	21a8      	movs	r1, #168	; 0xa8
   b48a4:	f7ff fef0 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b48a8:	4620      	mov	r0, r4
   b48aa:	213f      	movs	r1, #63	; 0x3f
   b48ac:	f7ff feec 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b48b0:	4620      	mov	r0, r4
   b48b2:	21d3      	movs	r1, #211	; 0xd3
   b48b4:	f7ff fee8 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b48b8:	4620      	mov	r0, r4
   b48ba:	2100      	movs	r1, #0
   b48bc:	f7ff fee4 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b48c0:	4620      	mov	r0, r4
   b48c2:	2140      	movs	r1, #64	; 0x40
   b48c4:	f7ff fee0 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b48c8:	218d      	movs	r1, #141	; 0x8d
   b48ca:	4620      	mov	r0, r4
   b48cc:	f7ff fedc 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b48d0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b48d2:	bf0c      	ite	eq
   b48d4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b48d6:	2114      	movne	r1, #20
   b48d8:	4620      	mov	r0, r4
   b48da:	f7ff fed5 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b48de:	4620      	mov	r0, r4
   b48e0:	2120      	movs	r1, #32
   b48e2:	f7ff fed1 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b48e6:	4620      	mov	r0, r4
   b48e8:	2100      	movs	r1, #0
   b48ea:	f7ff fecd 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b48ee:	4620      	mov	r0, r4
   b48f0:	21a1      	movs	r1, #161	; 0xa1
   b48f2:	f7ff fec9 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b48f6:	4620      	mov	r0, r4
   b48f8:	21c8      	movs	r1, #200	; 0xc8
   b48fa:	f7ff fec5 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b48fe:	4620      	mov	r0, r4
   b4900:	21da      	movs	r1, #218	; 0xda
   b4902:	f7ff fec1 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4906:	4620      	mov	r0, r4
   b4908:	2112      	movs	r1, #18
   b490a:	f7ff febd 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b490e:	2181      	movs	r1, #129	; 0x81
   b4910:	4620      	mov	r0, r4
   b4912:	f7ff feb9 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4916:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4918:	bf0c      	ite	eq
   b491a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b491c:	21cf      	movne	r1, #207	; 0xcf
   b491e:	4620      	mov	r0, r4
   b4920:	f7ff feb2 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4924:	21d9      	movs	r1, #217	; 0xd9
   b4926:	4620      	mov	r0, r4
   b4928:	f7ff feae 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b492c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b492e:	bf0c      	ite	eq
   b4930:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4932:	21f1      	movne	r1, #241	; 0xf1
   b4934:	4620      	mov	r0, r4
   b4936:	f7ff fea7 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b493a:	4620      	mov	r0, r4
   b493c:	21db      	movs	r1, #219	; 0xdb
   b493e:	f7ff fea3 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4942:	4620      	mov	r0, r4
   b4944:	2140      	movs	r1, #64	; 0x40
   b4946:	f7ff fe9f 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b494a:	4620      	mov	r0, r4
   b494c:	21a4      	movs	r1, #164	; 0xa4
   b494e:	f7ff fe9b 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4952:	4620      	mov	r0, r4
   b4954:	21a6      	movs	r1, #166	; 0xa6
   b4956:	f7ff fe97 	bl	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b495a:	4620      	mov	r0, r4
   b495c:	21af      	movs	r1, #175	; 0xaf
}
   b495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4962:	f7ff be91 	b.w	b4688 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4966:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b496a:	2101      	movs	r1, #1
   b496c:	b280      	uxth	r0, r0
   b496e:	f001 fb19 	bl	b5fa4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4972:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4976:	2101      	movs	r1, #1
   b4978:	b280      	uxth	r0, r0
   b497a:	f001 fb13 	bl	b5fa4 <pinMode>
    if (hwSPI){
   b497e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4982:	2b00      	cmp	r3, #0
   b4984:	f43f af62 	beq.w	b484c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4988:	e747      	b.n	b481a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b498a:	f001 fb6d 	bl	b6068 <_Z19__fetch_global_Wirev>
   b498e:	f001 f9cd 	bl	b5d2c <_ZN7TwoWire5beginEv>
   b4992:	e75b      	b.n	b484c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4994 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4998:	b085      	sub	sp, #20
   b499a:	461f      	mov	r7, r3
   b499c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b49a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b49a4:	eba8 0902 	sub.w	r9, r8, r2
   b49a8:	eba7 0a01 	sub.w	sl, r7, r1
   b49ac:	f1b9 0f00 	cmp.w	r9, #0
   b49b0:	bfb8      	it	lt
   b49b2:	f1c9 0900 	rsblt	r9, r9, #0
   b49b6:	f1ba 0f00 	cmp.w	sl, #0
   b49ba:	bfb8      	it	lt
   b49bc:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b49c0:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b49c2:	4683      	mov	fp, r0
   b49c4:	460c      	mov	r4, r1
   b49c6:	4615      	mov	r5, r2
  if (steep) {
   b49c8:	dd04      	ble.n	b49d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b49ca:	463a      	mov	r2, r7
    swap(x0, y0);
   b49cc:	462c      	mov	r4, r5
    swap(x1, y1);
   b49ce:	4647      	mov	r7, r8
    swap(x0, y0);
   b49d0:	460d      	mov	r5, r1
    swap(x1, y1);
   b49d2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b49d4:	42bc      	cmp	r4, r7
   b49d6:	dd05      	ble.n	b49e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b49d8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b49da:	4645      	mov	r5, r8
   b49dc:	4690      	mov	r8, r2
  if (x0 > x1) {
   b49de:	4622      	mov	r2, r4
   b49e0:	463c      	mov	r4, r7
   b49e2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b49e4:	1b3e      	subs	r6, r7, r4
   b49e6:	b2b2      	uxth	r2, r6
   b49e8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b49ea:	eba8 0205 	sub.w	r2, r8, r5
   b49ee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b49f2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b49f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b49fa:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b49fe:	4545      	cmp	r5, r8
   b4a00:	bfb4      	ite	lt
   b4a02:	2201      	movlt	r2, #1
   b4a04:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b4a08:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4a0a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4a0c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4a0e:	42bc      	cmp	r4, r7
   b4a10:	dc1c      	bgt.n	b4a4c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4a12:	f8db 2000 	ldr.w	r2, [fp]
   b4a16:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4a18:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4a1a:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4a1e:	bfc7      	ittee	gt
   b4a20:	4629      	movgt	r1, r5
   b4a22:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4a24:	462a      	movle	r2, r5
   b4a26:	4621      	movle	r1, r4
   b4a28:	4658      	mov	r0, fp
   b4a2a:	47c0      	blx	r8
    }
    err -= dy;
   b4a2c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4a2e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4a30:	1ab6      	subs	r6, r6, r2
   b4a32:	b2b1      	uxth	r1, r6
   b4a34:	b236      	sxth	r6, r6
    if (err < 0) {
   b4a36:	2e00      	cmp	r6, #0
   b4a38:	da05      	bge.n	b4a46 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4a3a:	9a02      	ldr	r2, [sp, #8]
   b4a3c:	4415      	add	r5, r2
      err += dx;
   b4a3e:	9a00      	ldr	r2, [sp, #0]
   b4a40:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4a42:	b22d      	sxth	r5, r5
      err += dx;
   b4a44:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4a46:	3401      	adds	r4, #1
   b4a48:	b224      	sxth	r4, r4
   b4a4a:	e7e0      	b.n	b4a0e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4a4c:	b005      	add	sp, #20
   b4a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4a52 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4a52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a56:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4a5a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4a5c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4a60:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4a64:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4a66:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4a68:	4616      	mov	r6, r2
   b4a6a:	468a      	mov	sl, r1
   b4a6c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4a6e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4a70:	6823      	ldr	r3, [r4, #0]
   b4a72:	f8cd 8000 	str.w	r8, [sp]
   b4a76:	f109 32ff 	add.w	r2, r9, #4294967295
   b4a7a:	4432      	add	r2, r6
   b4a7c:	69df      	ldr	r7, [r3, #28]
   b4a7e:	4651      	mov	r1, sl
   b4a80:	462b      	mov	r3, r5
   b4a82:	4620      	mov	r0, r4
   b4a84:	b212      	sxth	r2, r2
   b4a86:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4a88:	6823      	ldr	r3, [r4, #0]
   b4a8a:	f8cd 8000 	str.w	r8, [sp]
   b4a8e:	699f      	ldr	r7, [r3, #24]
   b4a90:	4632      	mov	r2, r6
   b4a92:	464b      	mov	r3, r9
   b4a94:	4651      	mov	r1, sl
   b4a96:	4620      	mov	r0, r4
   b4a98:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4a9a:	1e6b      	subs	r3, r5, #1
   b4a9c:	eb03 010a 	add.w	r1, r3, sl
   b4aa0:	6823      	ldr	r3, [r4, #0]
   b4aa2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4aa6:	699d      	ldr	r5, [r3, #24]
   b4aa8:	4632      	mov	r2, r6
   b4aaa:	464b      	mov	r3, r9
   b4aac:	b209      	sxth	r1, r1
   b4aae:	4620      	mov	r0, r4
   b4ab0:	46ac      	mov	ip, r5
}
   b4ab2:	b002      	add	sp, #8
   b4ab4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4ab8:	4760      	bx	ip

000b4aba <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4abc:	3b01      	subs	r3, #1
   b4abe:	4413      	add	r3, r2
   b4ac0:	6804      	ldr	r4, [r0, #0]
   b4ac2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4ac6:	9501      	str	r5, [sp, #4]
   b4ac8:	b21b      	sxth	r3, r3
   b4aca:	9300      	str	r3, [sp, #0]
   b4acc:	6964      	ldr	r4, [r4, #20]
   b4ace:	460b      	mov	r3, r1
   b4ad0:	47a0      	blx	r4
}
   b4ad2:	b003      	add	sp, #12
   b4ad4:	bd30      	pop	{r4, r5, pc}

000b4ad6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4ad8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4adc:	6804      	ldr	r4, [r0, #0]
   b4ade:	e9cd 2500 	strd	r2, r5, [sp]
   b4ae2:	3b01      	subs	r3, #1
   b4ae4:	440b      	add	r3, r1
   b4ae6:	6964      	ldr	r4, [r4, #20]
   b4ae8:	b21b      	sxth	r3, r3
   b4aea:	47a0      	blx	r4
}
   b4aec:	b003      	add	sp, #12
   b4aee:	bd30      	pop	{r4, r5, pc}

000b4af0 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4af0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4af4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4af8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4afc:	4605      	mov	r5, r0
   b4afe:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4b00:	460c      	mov	r4, r1
   b4b02:	18ce      	adds	r6, r1, r3
   b4b04:	42b4      	cmp	r4, r6
   b4b06:	da0b      	bge.n	b4b20 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4b08:	682b      	ldr	r3, [r5, #0]
   b4b0a:	f8cd 8000 	str.w	r8, [sp]
   b4b0e:	699f      	ldr	r7, [r3, #24]
   b4b10:	4621      	mov	r1, r4
   b4b12:	464b      	mov	r3, r9
   b4b14:	4652      	mov	r2, sl
   b4b16:	4628      	mov	r0, r5
   b4b18:	3401      	adds	r4, #1
   b4b1a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4b1c:	b224      	sxth	r4, r4
   b4b1e:	e7f1      	b.n	b4b04 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4b20:	b002      	add	sp, #8
   b4b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b26 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4b26:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4b28:	6802      	ldr	r2, [r0, #0]
   b4b2a:	9101      	str	r1, [sp, #4]
   b4b2c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4b30:	9100      	str	r1, [sp, #0]
   b4b32:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4b34:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4b38:	2200      	movs	r2, #0
   b4b3a:	4611      	mov	r1, r2
   b4b3c:	47a0      	blx	r4
}
   b4b3e:	b002      	add	sp, #8
   b4b40:	bd10      	pop	{r4, pc}

000b4b42 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4b42:	4770      	bx	lr

000b4b44 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4b44:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4b46:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4b48:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4b4a:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b4b4e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4b50:	4d05      	ldr	r5, [pc, #20]	; (b4b68 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4b52:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4b54:	2201      	movs	r2, #1
   b4b56:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4b58:	6005      	str	r5, [r0, #0]
   b4b5a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4b5c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4b5e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4b60:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4b62:	7682      	strb	r2, [r0, #26]
}
   b4b64:	bd30      	pop	{r4, r5, pc}
   b4b66:	bf00      	nop
   b4b68:	000b6fa0 	.word	0x000b6fa0

000b4b6c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b70:	ed2d 8b02 	vpush	{d8}
   b4b74:	b08d      	sub	sp, #52	; 0x34
   b4b76:	4607      	mov	r7, r0
   b4b78:	9104      	str	r1, [sp, #16]
   b4b7a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4b7e:	9105      	str	r1, [sp, #20]
   b4b80:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4b84:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4b86:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4b8a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b8c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4b90:	4281      	cmp	r1, r0
   b4b92:	dd52      	ble.n	b4c3a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4b94:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4b98:	4291      	cmp	r1, r2
   b4b9a:	dd4e      	ble.n	b4c3a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4b9c:	2106      	movs	r1, #6
   b4b9e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4ba2:	2c00      	cmp	r4, #0
   b4ba4:	dd49      	ble.n	b4c3a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4ba6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4baa:	2c00      	cmp	r4, #0
   b4bac:	dd45      	ble.n	b4c3a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4bae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4bb2:	930b      	str	r3, [sp, #44]	; 0x2c
   b4bb4:	b293      	uxth	r3, r2
   b4bb6:	9307      	str	r3, [sp, #28]
   b4bb8:	3308      	adds	r3, #8
   b4bba:	b29b      	uxth	r3, r3
   b4bbc:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4bbe:	2400      	movs	r4, #0
   b4bc0:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4bc2:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4bc4:	bf1c      	itt	ne
   b4bc6:	4b2c      	ldrne	r3, [pc, #176]	; (b4c78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4bc8:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4bca:	9e07      	ldr	r6, [sp, #28]
   b4bcc:	bf16      	itet	ne
   b4bce:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4bd0:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4bd2:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4bd4:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4bd6:	9a04      	ldr	r2, [sp, #16]
   b4bd8:	b2ab      	uxth	r3, r5
   b4bda:	930a      	str	r3, [sp, #40]	; 0x28
   b4bdc:	fb04 f305 	mul.w	r3, r4, r5
   b4be0:	fa13 f382 	uxtah	r3, r3, r2
   b4be4:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4be6:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4bea:	ee08 3a10 	vmov	s16, r3
   b4bee:	46b0      	mov	r8, r6
   b4bf0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4bf4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4bf8:	9b03      	ldr	r3, [sp, #12]
   b4bfa:	07db      	lsls	r3, r3, #31
   b4bfc:	d52f      	bpl.n	b4c5e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4bfe:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c00:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c02:	d11f      	bne.n	b4c44 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4c04:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c08:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4c0a:	b232      	sxth	r2, r6
   b4c0c:	4651      	mov	r1, sl
   b4c0e:	4638      	mov	r0, r7
   b4c10:	47d8      	blx	fp
      line >>= 1;
   b4c12:	9b03      	ldr	r3, [sp, #12]
   b4c14:	085b      	lsrs	r3, r3, #1
   b4c16:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4c1a:	3601      	adds	r6, #1
   b4c1c:	4498      	add	r8, r3
   b4c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4c20:	b2b6      	uxth	r6, r6
   b4c22:	42b3      	cmp	r3, r6
   b4c24:	fa1f f888 	uxth.w	r8, r8
   b4c28:	d1e6      	bne.n	b4bf8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4c2a:	9b08      	ldr	r3, [sp, #32]
   b4c2c:	3b01      	subs	r3, #1
   b4c2e:	3401      	adds	r4, #1
   b4c30:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4c34:	b264      	sxtb	r4, r4
   b4c36:	9308      	str	r3, [sp, #32]
   b4c38:	d1c3      	bne.n	b4bc2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b4c3a:	b00d      	add	sp, #52	; 0x34
   b4c3c:	ecbd 8b02 	vpop	{d8}
   b4c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4c44:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c46:	e9cd 9200 	strd	r9, r2, [sp]
   b4c4a:	ee18 1a10 	vmov	r1, s16
   b4c4e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4c52:	fa0f f288 	sxth.w	r2, r8
   b4c56:	464b      	mov	r3, r9
   b4c58:	4638      	mov	r0, r7
   b4c5a:	47d8      	blx	fp
   b4c5c:	e7d9      	b.n	b4c12 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4c5e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4c62:	4293      	cmp	r3, r2
   b4c64:	d0d5      	beq.n	b4c12 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4c66:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c68:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c6a:	d103      	bne.n	b4c74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4c6c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c70:	9b06      	ldr	r3, [sp, #24]
   b4c72:	e7ca      	b.n	b4c0a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c74:	9a06      	ldr	r2, [sp, #24]
   b4c76:	e7e6      	b.n	b4c46 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4c78:	000b6a9c 	.word	0x000b6a9c

000b4c7c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4c7c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4c7e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4c80:	b085      	sub	sp, #20
   b4c82:	4604      	mov	r4, r0
  if (c == '\n') {
   b4c84:	d107      	bne.n	b4c96 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4c86:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4c88:	8a63      	ldrh	r3, [r4, #18]
   b4c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4c8e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4c90:	2300      	movs	r3, #0
   b4c92:	8223      	strh	r3, [r4, #16]
   b4c94:	e021      	b.n	b4cda <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4c96:	290d      	cmp	r1, #13
   b4c98:	d01f      	beq.n	b4cda <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4c9a:	7e03      	ldrb	r3, [r0, #24]
   b4c9c:	9302      	str	r3, [sp, #8]
   b4c9e:	8ac3      	ldrh	r3, [r0, #22]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	8a83      	ldrh	r3, [r0, #20]
   b4ca4:	9300      	str	r3, [sp, #0]
   b4ca6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4caa:	460b      	mov	r3, r1
   b4cac:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4cb0:	f7ff ff5c 	bl	b4b6c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4cb4:	7e20      	ldrb	r0, [r4, #24]
   b4cb6:	8a23      	ldrh	r3, [r4, #16]
   b4cb8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4cbc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4cc0:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4cc2:	b21b      	sxth	r3, r3
   b4cc4:	4602      	mov	r2, r0
   b4cc6:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4cc8:	b139      	cbz	r1, b4cda <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4cca:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4cce:	f06f 0505 	mvn.w	r5, #5
   b4cd2:	fb05 1100 	mla	r1, r5, r0, r1
   b4cd6:	428b      	cmp	r3, r1
   b4cd8:	dcd6      	bgt.n	b4c88 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4cda:	2001      	movs	r0, #1
   b4cdc:	b005      	add	sp, #20
   b4cde:	bd30      	pop	{r4, r5, pc}

000b4ce0 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4ce0:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4ce2:	8242      	strh	r2, [r0, #18]
}
   b4ce4:	4770      	bx	lr

000b4ce6 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b4ce6:	2901      	cmp	r1, #1
   b4ce8:	bf38      	it	cc
   b4cea:	2101      	movcc	r1, #1
   b4cec:	7601      	strb	r1, [r0, #24]
}
   b4cee:	4770      	bx	lr

000b4cf0 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b4cf0:	82c1      	strh	r1, [r0, #22]
   b4cf2:	8281      	strh	r1, [r0, #20]
}
   b4cf4:	4770      	bx	lr

000b4cf6 <_ZN12Adafruit_GFX12setTextColorEtt>:
  textcolor   = c;
   b4cf6:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   b4cf8:	82c2      	strh	r2, [r0, #22]
}
   b4cfa:	4770      	bx	lr

000b4cfc <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4cfc:	7e40      	ldrb	r0, [r0, #25]
   b4cfe:	4770      	bx	lr

000b4d00 <_ZN12Adafruit_GFX5widthEv>:
}
   b4d00:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4d04:	4770      	bx	lr

000b4d06 <_ZN12Adafruit_GFX6heightEv>:
}
   b4d06:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4d0a:	4770      	bx	lr

000b4d0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <netdb_freeaddrinfo+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	689b      	ldr	r3, [r3, #8]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030268 	.word	0x00030268

000b4d1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <netdb_getaddrinfo+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	68db      	ldr	r3, [r3, #12]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030268 	.word	0x00030268

000b4d2c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <HAL_Pin_Mode+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	689b      	ldr	r3, [r3, #8]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003022c 	.word	0x0003022c

000b4d3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <HAL_Get_Pin_Mode+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	68db      	ldr	r3, [r3, #12]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003022c 	.word	0x0003022c

000b4d4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <HAL_GPIO_Write+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	691b      	ldr	r3, [r3, #16]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	0003022c 	.word	0x0003022c

000b4d5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <HAL_RNG_GetRandomNumber+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	685b      	ldr	r3, [r3, #4]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030218 	.word	0x00030218

000b4d6c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <HAL_Delay_Microseconds+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	68db      	ldr	r3, [r3, #12]
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030218 	.word	0x00030218

000b4d7c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	695b      	ldr	r3, [r3, #20]
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030218 	.word	0x00030218

000b4d8c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_rtc_time_is_valid+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030218 	.word	0x00030218

000b4d9c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <hal_rtc_get_time+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030218 	.word	0x00030218

000b4dac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <os_mutex_recursive_create+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030248 	.word	0x00030248

000b4dbc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <os_mutex_recursive_destroy+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030248 	.word	0x00030248

000b4dcc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <inet_inet_ntop+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	695b      	ldr	r3, [r3, #20]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030264 	.word	0x00030264

000b4ddc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_usart_init+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	681b      	ldr	r3, [r3, #0]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	0003023c 	.word	0x0003023c

000b4dec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_usart_write+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	68db      	ldr	r3, [r3, #12]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003023c 	.word	0x0003023c

000b4dfc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_usart_available+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	691b      	ldr	r3, [r3, #16]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003023c 	.word	0x0003023c

000b4e0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_usart_read+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	695b      	ldr	r3, [r3, #20]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	0003023c 	.word	0x0003023c

000b4e1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_usart_peek+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	699b      	ldr	r3, [r3, #24]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	0003023c 	.word	0x0003023c

000b4e2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_usart_flush+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	69db      	ldr	r3, [r3, #28]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	0003023c 	.word	0x0003023c

000b4e3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_usart_is_enabled+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6a1b      	ldr	r3, [r3, #32]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003023c 	.word	0x0003023c

000b4e4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <hal_usart_available_data_for_write+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003023c 	.word	0x0003023c

000b4e5c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <hal_i2c_begin+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	68db      	ldr	r3, [r3, #12]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	00030228 	.word	0x00030228

000b4e6c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <hal_i2c_begin_transmission+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	699b      	ldr	r3, [r3, #24]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030228 	.word	0x00030228

000b4e7c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <hal_i2c_end_transmission+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	69db      	ldr	r3, [r3, #28]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030228 	.word	0x00030228

000b4e8c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <hal_i2c_write+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	6a1b      	ldr	r3, [r3, #32]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030228 	.word	0x00030228

000b4e9c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <hal_i2c_available+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030228 	.word	0x00030228

000b4eac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <hal_i2c_read+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030228 	.word	0x00030228

000b4ebc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <hal_i2c_peek+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030228 	.word	0x00030228

000b4ecc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <hal_i2c_flush+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030228 	.word	0x00030228

000b4edc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <hal_i2c_is_enabled+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030228 	.word	0x00030228

000b4eec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <hal_i2c_init+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030228 	.word	0x00030228

000b4efc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <hal_spi_begin+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	681b      	ldr	r3, [r3, #0]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030230 	.word	0x00030230

000b4f0c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <hal_spi_set_bit_order+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	689b      	ldr	r3, [r3, #8]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030230 	.word	0x00030230

000b4f1c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <hal_spi_set_data_mode+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	68db      	ldr	r3, [r3, #12]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030230 	.word	0x00030230

000b4f2c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <hal_spi_set_clock_divider+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	691b      	ldr	r3, [r3, #16]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030230 	.word	0x00030230

000b4f3c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <hal_spi_transfer+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	695b      	ldr	r3, [r3, #20]
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030230 	.word	0x00030230

000b4f4c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <hal_spi_init+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	69db      	ldr	r3, [r3, #28]
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030230 	.word	0x00030230

000b4f5c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <hal_spi_is_enabled+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6a1b      	ldr	r3, [r3, #32]
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030230 	.word	0x00030230

000b4f6c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <hal_spi_info+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030230 	.word	0x00030230

000b4f7c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <hal_spi_acquire+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030230 	.word	0x00030230

000b4f8c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_spi_release+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030230 	.word	0x00030230

000b4f9c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <HAL_USB_USART_Init+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	681b      	ldr	r3, [r3, #0]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	0003024c 	.word	0x0003024c

000b4fac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <HAL_USB_USART_Begin+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	685b      	ldr	r3, [r3, #4]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	0003024c 	.word	0x0003024c

000b4fbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <HAL_USB_USART_Available_Data+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	691b      	ldr	r3, [r3, #16]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	0003024c 	.word	0x0003024c

000b4fcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	695b      	ldr	r3, [r3, #20]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003024c 	.word	0x0003024c

000b4fdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <HAL_USB_USART_Receive_Data+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	699b      	ldr	r3, [r3, #24]
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	0003024c 	.word	0x0003024c

000b4fec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <HAL_USB_USART_Send_Data+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	69db      	ldr	r3, [r3, #28]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	0003024c 	.word	0x0003024c

000b4ffc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <HAL_USB_USART_Flush_Data+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6a1b      	ldr	r3, [r3, #32]
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	0003024c 	.word	0x0003024c

000b500c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <panic_+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030260 	.word	0x00030260

000b501c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <system_mode+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	681b      	ldr	r3, [r3, #0]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030220 	.word	0x00030220

000b502c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <set_system_mode+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	685b      	ldr	r3, [r3, #4]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030220 	.word	0x00030220

000b503c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <system_delay_ms+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	695b      	ldr	r3, [r3, #20]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030220 	.word	0x00030220

000b504c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <system_thread_get_state+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030220 	.word	0x00030220

000b505c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b03      	ldr	r3, [pc, #12]	; (b506c <system_ctrl_set_app_request_handler+0x10>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5066:	9301      	str	r3, [sp, #4]
   b5068:	bd08      	pop	{r3, pc}
   b506a:	0000      	.short	0x0000
   b506c:	00030220 	.word	0x00030220

000b5070 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b03      	ldr	r3, [pc, #12]	; (b5080 <system_ctrl_set_result+0x10>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b507a:	9301      	str	r3, [sp, #4]
   b507c:	bd08      	pop	{r3, pc}
   b507e:	0000      	.short	0x0000
   b5080:	00030220 	.word	0x00030220

000b5084 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <network_connect+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	685b      	ldr	r3, [r3, #4]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030240 	.word	0x00030240

000b5094 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <network_connecting+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	689b      	ldr	r3, [r3, #8]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030240 	.word	0x00030240

000b50a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <network_disconnect+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	68db      	ldr	r3, [r3, #12]
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030240 	.word	0x00030240

000b50b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <network_ready+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	691b      	ldr	r3, [r3, #16]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030240 	.word	0x00030240

000b50c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <network_on+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	695b      	ldr	r3, [r3, #20]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030240 	.word	0x00030240

000b50d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <network_off+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	699b      	ldr	r3, [r3, #24]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030240 	.word	0x00030240

000b50e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <network_listen+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	69db      	ldr	r3, [r3, #28]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030240 	.word	0x00030240

000b50f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <network_listening+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6a1b      	ldr	r3, [r3, #32]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030240 	.word	0x00030240

000b5104 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <network_set_listen_timeout+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030240 	.word	0x00030240

000b5114 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <network_get_listen_timeout+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030240 	.word	0x00030240

000b5124 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <network_is_on+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030240 	.word	0x00030240

000b5134 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <network_is_off+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030240 	.word	0x00030240

000b5144 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <spark_process+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	689b      	ldr	r3, [r3, #8]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030244 	.word	0x00030244

000b5154 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <spark_cloud_flag_connected+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	695b      	ldr	r3, [r3, #20]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030244 	.word	0x00030244

000b5164 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <spark_sync_time+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030244 	.word	0x00030244

000b5174 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <spark_sync_time_pending+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	00030244 	.word	0x00030244

000b5184 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	00030244 	.word	0x00030244

000b5194 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <malloc+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	681b      	ldr	r3, [r3, #0]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	0003021c 	.word	0x0003021c

000b51a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <free+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	685b      	ldr	r3, [r3, #4]
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	0003021c 	.word	0x0003021c

000b51b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <realloc+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	689b      	ldr	r3, [r3, #8]
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	0003021c 	.word	0x0003021c

000b51c4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <siprintf+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	691b      	ldr	r3, [r3, #16]
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	0003021c 	.word	0x0003021c

000b51d4 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <vsnprintf+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	0003021c 	.word	0x0003021c

000b51e4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <__assert_func+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	0003021c 	.word	0x0003021c

000b51f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51f4:	b508      	push	{r3, lr}
   b51f6:	4b02      	ldr	r3, [pc, #8]	; (b5200 <newlib_impure_ptr_callback+0xc>)
   b51f8:	681b      	ldr	r3, [r3, #0]
   b51fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51fc:	9301      	str	r3, [sp, #4]
   b51fe:	bd08      	pop	{r3, pc}
   b5200:	0003021c 	.word	0x0003021c

000b5204 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5204:	b508      	push	{r3, lr}
   b5206:	4b02      	ldr	r3, [pc, #8]	; (b5210 <localtime_r+0xc>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b520c:	9301      	str	r3, [sp, #4]
   b520e:	bd08      	pop	{r3, pc}
   b5210:	0003021c 	.word	0x0003021c

000b5214 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5214:	2200      	movs	r2, #0
   b5216:	6840      	ldr	r0, [r0, #4]
   b5218:	4611      	mov	r1, r2
   b521a:	f7ff bf6b 	b.w	b50f4 <network_listening>

000b521e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b521e:	2200      	movs	r2, #0
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	4611      	mov	r1, r2
   b5224:	f7ff bf76 	b.w	b5114 <network_get_listen_timeout>

000b5228 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5228:	6840      	ldr	r0, [r0, #4]
   b522a:	2200      	movs	r2, #0
   b522c:	f7ff bf6a 	b.w	b5104 <network_set_listen_timeout>

000b5230 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5230:	6840      	ldr	r0, [r0, #4]
   b5232:	2200      	movs	r2, #0
   b5234:	f081 0101 	eor.w	r1, r1, #1
   b5238:	f7ff bf54 	b.w	b50e4 <network_listen>

000b523c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b523c:	2300      	movs	r3, #0
   b523e:	6840      	ldr	r0, [r0, #4]
   b5240:	461a      	mov	r2, r3
   b5242:	4619      	mov	r1, r3
   b5244:	f7ff bf46 	b.w	b50d4 <network_off>

000b5248 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5248:	2300      	movs	r3, #0
   b524a:	6840      	ldr	r0, [r0, #4]
   b524c:	461a      	mov	r2, r3
   b524e:	4619      	mov	r1, r3
   b5250:	f7ff bf38 	b.w	b50c4 <network_on>

000b5254 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5254:	2200      	movs	r2, #0
   b5256:	6840      	ldr	r0, [r0, #4]
   b5258:	4611      	mov	r1, r2
   b525a:	f7ff bf2b 	b.w	b50b4 <network_ready>

000b525e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b525e:	2200      	movs	r2, #0
   b5260:	6840      	ldr	r0, [r0, #4]
   b5262:	4611      	mov	r1, r2
   b5264:	f7ff bf16 	b.w	b5094 <network_connecting>

000b5268 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5268:	6840      	ldr	r0, [r0, #4]
   b526a:	2200      	movs	r2, #0
   b526c:	2102      	movs	r1, #2
   b526e:	f7ff bf19 	b.w	b50a4 <network_disconnect>

000b5272 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5272:	2300      	movs	r3, #0
   b5274:	6840      	ldr	r0, [r0, #4]
   b5276:	461a      	mov	r2, r3
   b5278:	f7ff bf04 	b.w	b5084 <network_connect>

000b527c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b527c:	4b02      	ldr	r3, [pc, #8]	; (b5288 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b527e:	2203      	movs	r2, #3
   b5280:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5282:	4a02      	ldr	r2, [pc, #8]	; (b528c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5284:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5286:	4770      	bx	lr
   b5288:	2003e644 	.word	0x2003e644
   b528c:	000b6fd8 	.word	0x000b6fd8

000b5290 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5290:	2100      	movs	r1, #0
   b5292:	f7ff be7b 	b.w	b4f8c <hal_spi_release>

000b5296 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5296:	2100      	movs	r1, #0
   b5298:	f7ff be70 	b.w	b4f7c <hal_spi_acquire>

000b529c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b529c:	b510      	push	{r4, lr}
   b529e:	4604      	mov	r4, r0
   b52a0:	4608      	mov	r0, r1
{
    _spi = spi;
   b52a2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b52a4:	f7ff fe52 	bl	b4f4c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b52a8:	2300      	movs	r3, #0
   b52aa:	6063      	str	r3, [r4, #4]
}
   b52ac:	4620      	mov	r0, r4
   b52ae:	bd10      	pop	{r4, pc}

000b52b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b52b0:	b513      	push	{r0, r1, r4, lr}
   b52b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b52b4:	7800      	ldrb	r0, [r0, #0]
   b52b6:	f7ff ffee 	bl	b5296 <_ZN8SPIClass4lockEv.isra.0>
   b52ba:	b958      	cbnz	r0, b52d4 <_ZN8SPIClass5beginEv+0x24>
   b52bc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b52be:	9001      	str	r0, [sp, #4]
   b52c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b52c4:	f7ff fe1a 	bl	b4efc <hal_spi_begin>
        unlock();
   b52c8:	9801      	ldr	r0, [sp, #4]
    }
}
   b52ca:	b002      	add	sp, #8
   b52cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52d0:	f7ff bfde 	b.w	b5290 <_ZN8SPIClass6unlockEv.isra.0>
   b52d4:	b002      	add	sp, #8
   b52d6:	bd10      	pop	{r4, pc}

000b52d8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b52d8:	b513      	push	{r0, r1, r4, lr}
   b52da:	4604      	mov	r4, r0
    if (!lock())
   b52dc:	7800      	ldrb	r0, [r0, #0]
{
   b52de:	9101      	str	r1, [sp, #4]
    if (!lock())
   b52e0:	f7ff ffd9 	bl	b5296 <_ZN8SPIClass4lockEv.isra.0>
   b52e4:	9901      	ldr	r1, [sp, #4]
   b52e6:	b948      	cbnz	r0, b52fc <_ZN8SPIClass11setBitOrderEh+0x24>
   b52e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b52ea:	9001      	str	r0, [sp, #4]
   b52ec:	f7ff fe0e 	bl	b4f0c <hal_spi_set_bit_order>
        unlock();
   b52f0:	9801      	ldr	r0, [sp, #4]
    }
}
   b52f2:	b002      	add	sp, #8
   b52f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52f8:	f7ff bfca 	b.w	b5290 <_ZN8SPIClass6unlockEv.isra.0>
   b52fc:	b002      	add	sp, #8
   b52fe:	bd10      	pop	{r4, pc}

000b5300 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5300:	b513      	push	{r0, r1, r4, lr}
   b5302:	4604      	mov	r4, r0
    if (!lock())
   b5304:	7800      	ldrb	r0, [r0, #0]
{
   b5306:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5308:	f7ff ffc5 	bl	b5296 <_ZN8SPIClass4lockEv.isra.0>
   b530c:	9901      	ldr	r1, [sp, #4]
   b530e:	b948      	cbnz	r0, b5324 <_ZN8SPIClass11setDataModeEh+0x24>
   b5310:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5312:	9001      	str	r0, [sp, #4]
   b5314:	f7ff fe02 	bl	b4f1c <hal_spi_set_data_mode>
        unlock();
   b5318:	9801      	ldr	r0, [sp, #4]
    }
}
   b531a:	b002      	add	sp, #8
   b531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5320:	f7ff bfb6 	b.w	b5290 <_ZN8SPIClass6unlockEv.isra.0>
   b5324:	b002      	add	sp, #8
   b5326:	bd10      	pop	{r4, pc}

000b5328 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5328:	0840      	lsrs	r0, r0, #1
{
   b532a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b532c:	6018      	str	r0, [r3, #0]
   b532e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5330:	6818      	ldr	r0, [r3, #0]
   b5332:	4288      	cmp	r0, r1
   b5334:	b2e5      	uxtb	r5, r4
   b5336:	d906      	bls.n	b5346 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5338:	3401      	adds	r4, #1
   b533a:	2c08      	cmp	r4, #8
   b533c:	d002      	beq.n	b5344 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b533e:	0840      	lsrs	r0, r0, #1
   b5340:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5342:	e7f5      	b.n	b5330 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5344:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5348:	5d5b      	ldrb	r3, [r3, r5]
   b534a:	7013      	strb	r3, [r2, #0]
}
   b534c:	bd30      	pop	{r4, r5, pc}
   b534e:	bf00      	nop
   b5350:	000b700c 	.word	0x000b700c

000b5354 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5358:	b088      	sub	sp, #32
    unsigned clock = 0;
   b535a:	2300      	movs	r3, #0
{
   b535c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b535e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5360:	9302      	str	r3, [sp, #8]
{
   b5362:	460e      	mov	r6, r1
   b5364:	4617      	mov	r7, r2
    if (!lock())
   b5366:	f7ff ff96 	bl	b5296 <_ZN8SPIClass4lockEv.isra.0>
   b536a:	4605      	mov	r5, r0
   b536c:	bb00      	cbnz	r0, b53b0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b536e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5372:	4601      	mov	r1, r0
   b5374:	2214      	movs	r2, #20
   b5376:	a803      	add	r0, sp, #12
   b5378:	f001 fb0c 	bl	b6994 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b537c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b537e:	462a      	mov	r2, r5
   b5380:	a903      	add	r1, sp, #12
   b5382:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5384:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5388:	f7ff fdf0 	bl	b4f6c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b538c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b538e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5392:	ab02      	add	r3, sp, #8
   b5394:	f10d 0207 	add.w	r2, sp, #7
   b5398:	fb07 f106 	mul.w	r1, r7, r6
   b539c:	f7ff ffc4 	bl	b5328 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b53a0:	7820      	ldrb	r0, [r4, #0]
   b53a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b53a6:	f7ff fdc1 	bl	b4f2c <hal_spi_set_clock_divider>
        unlock();
   b53aa:	7820      	ldrb	r0, [r4, #0]
   b53ac:	f7ff ff70 	bl	b5290 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b53b0:	9802      	ldr	r0, [sp, #8]
   b53b2:	b008      	add	sp, #32
   b53b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b53b8 <_ZN8SPIClass15setClockDividerEh>:
{
   b53b8:	b538      	push	{r3, r4, r5, lr}
   b53ba:	4604      	mov	r4, r0
    if (!lock())
   b53bc:	7800      	ldrb	r0, [r0, #0]
{
   b53be:	460d      	mov	r5, r1
    if (!lock())
   b53c0:	f7ff ff69 	bl	b5296 <_ZN8SPIClass4lockEv.isra.0>
   b53c4:	4603      	mov	r3, r0
   b53c6:	b9d0      	cbnz	r0, b53fe <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b53c8:	6861      	ldr	r1, [r4, #4]
   b53ca:	b199      	cbz	r1, b53f4 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b53cc:	4a0c      	ldr	r2, [pc, #48]	; (b5400 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b53ce:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53d2:	4285      	cmp	r5, r0
   b53d4:	d002      	beq.n	b53dc <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b53d6:	3301      	adds	r3, #1
   b53d8:	2b08      	cmp	r3, #8
   b53da:	d1f8      	bne.n	b53ce <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b53dc:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b53de:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b53e0:	2201      	movs	r2, #1
   b53e2:	40d9      	lsrs	r1, r3
   b53e4:	4620      	mov	r0, r4
   b53e6:	f7ff ffb5 	bl	b5354 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b53ea:	7820      	ldrb	r0, [r4, #0]
}
   b53ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b53f0:	f7ff bf4e 	b.w	b5290 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b53f4:	7820      	ldrb	r0, [r4, #0]
   b53f6:	4629      	mov	r1, r5
   b53f8:	f7ff fd98 	bl	b4f2c <hal_spi_set_clock_divider>
   b53fc:	e7f5      	b.n	b53ea <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b53fe:	bd38      	pop	{r3, r4, r5, pc}
   b5400:	000b700c 	.word	0x000b700c

000b5404 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5404:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5406:	7800      	ldrb	r0, [r0, #0]
   b5408:	f7ff fd98 	bl	b4f3c <hal_spi_transfer>
}
   b540c:	b2c0      	uxtb	r0, r0
   b540e:	bd08      	pop	{r3, pc}

000b5410 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b5410:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5412:	4b09      	ldr	r3, [pc, #36]	; (b5438 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5414:	4c09      	ldr	r4, [pc, #36]	; (b543c <_GLOBAL__sub_I_System+0x2c>)
   b5416:	2202      	movs	r2, #2
   b5418:	601a      	str	r2, [r3, #0]
   b541a:	2000      	movs	r0, #0
    SleepResult() {}
   b541c:	4b08      	ldr	r3, [pc, #32]	; (b5440 <_GLOBAL__sub_I_System+0x30>)
   b541e:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5420:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5424:	f7ff fe02 	bl	b502c <set_system_mode>
SystemClass System;
   b5428:	4620      	mov	r0, r4
   b542a:	4a06      	ldr	r2, [pc, #24]	; (b5444 <_GLOBAL__sub_I_System+0x34>)
   b542c:	4906      	ldr	r1, [pc, #24]	; (b5448 <_GLOBAL__sub_I_System+0x38>)
   b542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b5432:	f000 be41 	b.w	b60b8 <__aeabi_atexit>
   b5436:	bf00      	nop
   b5438:	2003e658 	.word	0x2003e658
   b543c:	2003e64c 	.word	0x2003e64c
   b5440:	ffff0000 	.word	0xffff0000
   b5444:	2003e600 	.word	0x2003e600
   b5448:	000b40c3 	.word	0x000b40c3

000b544c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b544c:	b510      	push	{r4, lr}
   b544e:	4604      	mov	r4, r0
{
	free(buffer);
   b5450:	6800      	ldr	r0, [r0, #0]
   b5452:	f7ff fea7 	bl	b51a4 <free>
}
   b5456:	4620      	mov	r0, r4
   b5458:	bd10      	pop	{r4, pc}

000b545a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b545a:	b510      	push	{r4, lr}
   b545c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b545e:	6800      	ldr	r0, [r0, #0]
   b5460:	b108      	cbz	r0, b5466 <_ZN6String10invalidateEv+0xc>
   b5462:	f7ff fe9f 	bl	b51a4 <free>
	buffer = NULL;
   b5466:	2300      	movs	r3, #0
	capacity = len = 0;
   b5468:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b546c:	6023      	str	r3, [r4, #0]
}
   b546e:	bd10      	pop	{r4, pc}

000b5470 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5470:	b538      	push	{r3, r4, r5, lr}
   b5472:	4604      	mov	r4, r0
   b5474:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5476:	6800      	ldr	r0, [r0, #0]
   b5478:	3101      	adds	r1, #1
   b547a:	f7ff fe9b 	bl	b51b4 <realloc>
	if (newbuffer) {
   b547e:	b110      	cbz	r0, b5486 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5480:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5484:	2001      	movs	r0, #1
	}
	return 0;
}
   b5486:	bd38      	pop	{r3, r4, r5, pc}

000b5488 <_ZN6String7reserveEj>:
{
   b5488:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b548a:	6803      	ldr	r3, [r0, #0]
{
   b548c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b548e:	b123      	cbz	r3, b549a <_ZN6String7reserveEj+0x12>
   b5490:	6843      	ldr	r3, [r0, #4]
   b5492:	428b      	cmp	r3, r1
   b5494:	d301      	bcc.n	b549a <_ZN6String7reserveEj+0x12>
   b5496:	2001      	movs	r0, #1
}
   b5498:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b549a:	4620      	mov	r0, r4
   b549c:	f7ff ffe8 	bl	b5470 <_ZN6String12changeBufferEj>
   b54a0:	2800      	cmp	r0, #0
   b54a2:	d0f9      	beq.n	b5498 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b54a4:	68a3      	ldr	r3, [r4, #8]
   b54a6:	2b00      	cmp	r3, #0
   b54a8:	d1f5      	bne.n	b5496 <_ZN6String7reserveEj+0xe>
   b54aa:	6822      	ldr	r2, [r4, #0]
   b54ac:	7013      	strb	r3, [r2, #0]
   b54ae:	e7f2      	b.n	b5496 <_ZN6String7reserveEj+0xe>

000b54b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b54b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b54b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b54b4:	4611      	mov	r1, r2
   b54b6:	9201      	str	r2, [sp, #4]
{
   b54b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b54ba:	f7ff ffe5 	bl	b5488 <_ZN6String7reserveEj>
   b54be:	9a01      	ldr	r2, [sp, #4]
   b54c0:	b928      	cbnz	r0, b54ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b54c2:	4620      	mov	r0, r4
   b54c4:	f7ff ffc9 	bl	b545a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b54c8:	4620      	mov	r0, r4
   b54ca:	b003      	add	sp, #12
   b54cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b54ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b54d0:	4629      	mov	r1, r5
   b54d2:	6820      	ldr	r0, [r4, #0]
   b54d4:	f001 fa50 	bl	b6978 <memcpy>
	buffer[len] = 0;
   b54d8:	6822      	ldr	r2, [r4, #0]
   b54da:	68a3      	ldr	r3, [r4, #8]
   b54dc:	2100      	movs	r1, #0
   b54de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b54e0:	e7f2      	b.n	b54c8 <_ZN6String4copyEPKcj+0x18>

000b54e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b54e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b54e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b54e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b54ea:	4604      	mov	r4, r0
	len = 0;
   b54ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b54ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b54f0:	b141      	cbz	r1, b5504 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b54f2:	4608      	mov	r0, r1
   b54f4:	9101      	str	r1, [sp, #4]
   b54f6:	f001 fa8b 	bl	b6a10 <strlen>
   b54fa:	9901      	ldr	r1, [sp, #4]
   b54fc:	4602      	mov	r2, r0
   b54fe:	4620      	mov	r0, r4
   b5500:	f7ff ffd6 	bl	b54b0 <_ZN6String4copyEPKcj>
}
   b5504:	4620      	mov	r0, r4
   b5506:	b002      	add	sp, #8
   b5508:	bd10      	pop	{r4, pc}

000b550a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b550a:	b538      	push	{r3, r4, r5, lr}
   b550c:	4605      	mov	r5, r0
	if (buffer) {
   b550e:	6800      	ldr	r0, [r0, #0]
{
   b5510:	460c      	mov	r4, r1
	if (buffer) {
   b5512:	b168      	cbz	r0, b5530 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b5514:	686a      	ldr	r2, [r5, #4]
   b5516:	688b      	ldr	r3, [r1, #8]
   b5518:	429a      	cmp	r2, r3
   b551a:	d307      	bcc.n	b552c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b551c:	6809      	ldr	r1, [r1, #0]
   b551e:	f001 fa6f 	bl	b6a00 <strcpy>
			len = rhs.len;
   b5522:	68a3      	ldr	r3, [r4, #8]
   b5524:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b5526:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5528:	60a3      	str	r3, [r4, #8]
}
   b552a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b552c:	f7ff fe3a 	bl	b51a4 <free>
	buffer = rhs.buffer;
   b5530:	6823      	ldr	r3, [r4, #0]
   b5532:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b5534:	6863      	ldr	r3, [r4, #4]
   b5536:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b5538:	68a3      	ldr	r3, [r4, #8]
   b553a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b553c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b553e:	e9c4 3300 	strd	r3, r3, [r4]
   b5542:	e7f1      	b.n	b5528 <_ZN6String4moveERS_+0x1e>

000b5544 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b5544:	4288      	cmp	r0, r1
{
   b5546:	b510      	push	{r4, lr}
   b5548:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b554a:	d001      	beq.n	b5550 <_ZN6StringaSEOS_+0xc>
   b554c:	f7ff ffdd 	bl	b550a <_ZN6String4moveERS_>
	return *this;
}
   b5550:	4620      	mov	r0, r4
   b5552:	bd10      	pop	{r4, pc}

000b5554 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b5554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b5556:	429a      	cmp	r2, r3
{
   b5558:	460f      	mov	r7, r1
   b555a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b555c:	490c      	ldr	r1, [pc, #48]	; (b5590 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b555e:	bf88      	it	hi
   b5560:	4613      	movhi	r3, r2
{
   b5562:	4614      	mov	r4, r2
   b5564:	4606      	mov	r6, r0
	if (left > right) {
   b5566:	bf84      	itt	hi
   b5568:	462c      	movhi	r4, r5
   b556a:	461d      	movhi	r5, r3
	String out;
   b556c:	f7ff ffb9 	bl	b54e2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b5570:	68bb      	ldr	r3, [r7, #8]
   b5572:	42a3      	cmp	r3, r4
   b5574:	d30a      	bcc.n	b558c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b5576:	6839      	ldr	r1, [r7, #0]
   b5578:	42ab      	cmp	r3, r5
   b557a:	bf94      	ite	ls
   b557c:	ebc4 0203 	rsbls	r2, r4, r3
   b5580:	ebc4 0205 	rsbhi	r2, r4, r5
   b5584:	4421      	add	r1, r4
   b5586:	4630      	mov	r0, r6
   b5588:	f7ff ff92 	bl	b54b0 <_ZN6String4copyEPKcj>
	return out;
}
   b558c:	4630      	mov	r0, r6
   b558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5590:	000b7168 	.word	0x000b7168

000b5594 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b5594:	b510      	push	{r4, lr}
   b5596:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b5598:	6800      	ldr	r0, [r0, #0]
   b559a:	b108      	cbz	r0, b55a0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b559c:	f7ff fc0e 	bl	b4dbc <os_mutex_recursive_destroy>
    }
   b55a0:	4620      	mov	r0, r4
   b55a2:	bd10      	pop	{r4, pc}

000b55a4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b55a4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b55a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b55a8:	4604      	mov	r4, r0
      if (_M_manager)
   b55aa:	b113      	cbz	r3, b55b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b55ac:	2203      	movs	r2, #3
   b55ae:	4601      	mov	r1, r0
   b55b0:	4798      	blx	r3
    }
   b55b2:	4620      	mov	r0, r4
   b55b4:	bd10      	pop	{r4, pc}
	...

000b55b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b55b8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b55ba:	4c06      	ldr	r4, [pc, #24]	; (b55d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b55bc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b55be:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b55c0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b55c2:	f7ff fbf3 	bl	b4dac <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b55c6:	4620      	mov	r0, r4
   b55c8:	4a03      	ldr	r2, [pc, #12]	; (b55d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b55ca:	4904      	ldr	r1, [pc, #16]	; (b55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b55cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b55d0:	f000 bd72 	b.w	b60b8 <__aeabi_atexit>
   b55d4:	2003e65c 	.word	0x2003e65c
   b55d8:	2003e600 	.word	0x2003e600
   b55dc:	000b5595 	.word	0x000b5595

000b55e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b55e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55e2:	4606      	mov	r6, r0
   b55e4:	460d      	mov	r5, r1
  size_t n = 0;
   b55e6:	188f      	adds	r7, r1, r2
   b55e8:	2400      	movs	r4, #0
  while (size--) {
   b55ea:	42bd      	cmp	r5, r7
   b55ec:	d00c      	beq.n	b5608 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b55ee:	6833      	ldr	r3, [r6, #0]
   b55f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b55f4:	689b      	ldr	r3, [r3, #8]
   b55f6:	4630      	mov	r0, r6
   b55f8:	4798      	blx	r3
     if (chunk>=0)
   b55fa:	1e03      	subs	r3, r0, #0
   b55fc:	db01      	blt.n	b5602 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b55fe:	441c      	add	r4, r3
  while (size--) {
   b5600:	e7f3      	b.n	b55ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5602:	2c00      	cmp	r4, #0
   b5604:	bf08      	it	eq
   b5606:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5608:	4620      	mov	r0, r4
   b560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b560c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b560c:	b513      	push	{r0, r1, r4, lr}
   b560e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5610:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5612:	b159      	cbz	r1, b562c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5614:	9101      	str	r1, [sp, #4]
   b5616:	f001 f9fb 	bl	b6a10 <strlen>
   b561a:	6823      	ldr	r3, [r4, #0]
   b561c:	9901      	ldr	r1, [sp, #4]
   b561e:	68db      	ldr	r3, [r3, #12]
   b5620:	4602      	mov	r2, r0
   b5622:	4620      	mov	r0, r4
    }
   b5624:	b002      	add	sp, #8
   b5626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b562a:	4718      	bx	r3
    }
   b562c:	b002      	add	sp, #8
   b562e:	bd10      	pop	{r4, pc}

000b5630 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5630:	6803      	ldr	r3, [r0, #0]
   b5632:	689b      	ldr	r3, [r3, #8]
   b5634:	4718      	bx	r3

000b5636 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5636:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5638:	210d      	movs	r1, #13
{
   b563a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b563c:	f7ff fff8 	bl	b5630 <_ZN5Print5printEc>
  n += print('\n');
   b5640:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5642:	4604      	mov	r4, r0
  n += print('\n');
   b5644:	4628      	mov	r0, r5
   b5646:	f7ff fff3 	bl	b5630 <_ZN5Print5printEc>
  return n;
}
   b564a:	4420      	add	r0, r4
   b564c:	bd38      	pop	{r3, r4, r5, pc}

000b564e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b564e:	b530      	push	{r4, r5, lr}
   b5650:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5652:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5654:	2a01      	cmp	r2, #1
  *str = '\0';
   b5656:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b565a:	bf98      	it	ls
   b565c:	220a      	movls	r2, #10
   b565e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5660:	460d      	mov	r5, r1
   b5662:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5666:	fb01 5312 	mls	r3, r1, r2, r5
   b566a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b566e:	2b09      	cmp	r3, #9
   b5670:	bf94      	ite	ls
   b5672:	3330      	addls	r3, #48	; 0x30
   b5674:	3337      	addhi	r3, #55	; 0x37
   b5676:	b2db      	uxtb	r3, r3
  } while(n);
   b5678:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b567a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b567e:	d9ef      	bls.n	b5660 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5680:	4621      	mov	r1, r4
   b5682:	f7ff ffc3 	bl	b560c <_ZN5Print5writeEPKc>
}
   b5686:	b00b      	add	sp, #44	; 0x2c
   b5688:	bd30      	pop	{r4, r5, pc}

000b568a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b568e:	b086      	sub	sp, #24
   b5690:	af00      	add	r7, sp, #0
   b5692:	4605      	mov	r5, r0
   b5694:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5696:	1d38      	adds	r0, r7, #4
   b5698:	2114      	movs	r1, #20
{
   b569a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b569c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b569e:	f7ff fd99 	bl	b51d4 <vsnprintf>

    if (n<bufsize)
   b56a2:	2813      	cmp	r0, #19
   b56a4:	d80e      	bhi.n	b56c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b56a6:	1d39      	adds	r1, r7, #4
   b56a8:	4628      	mov	r0, r5
   b56aa:	f7ff ffaf 	bl	b560c <_ZN5Print5writeEPKc>
   b56ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b56b0:	b11e      	cbz	r6, b56ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b56b2:	4628      	mov	r0, r5
   b56b4:	f7ff ffbf 	bl	b5636 <_ZN5Print7printlnEv>
   b56b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b56ba:	4620      	mov	r0, r4
   b56bc:	3718      	adds	r7, #24
   b56be:	46bd      	mov	sp, r7
   b56c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b56c4:	f100 0308 	add.w	r3, r0, #8
   b56c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b56cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b56ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b56d2:	4622      	mov	r2, r4
   b56d4:	1c41      	adds	r1, r0, #1
   b56d6:	683b      	ldr	r3, [r7, #0]
   b56d8:	4668      	mov	r0, sp
   b56da:	f7ff fd7b 	bl	b51d4 <vsnprintf>
  return write(str);
   b56de:	4669      	mov	r1, sp
   b56e0:	4628      	mov	r0, r5
   b56e2:	f7ff ff93 	bl	b560c <_ZN5Print5writeEPKc>
   b56e6:	4604      	mov	r4, r0
   b56e8:	46c5      	mov	sp, r8
   b56ea:	e7e1      	b.n	b56b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b56ec <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b56ec:	2300      	movs	r3, #0
   b56ee:	6840      	ldr	r0, [r0, #4]
   b56f0:	461a      	mov	r2, r3
   b56f2:	4619      	mov	r1, r3
   b56f4:	f7ff bce6 	b.w	b50c4 <network_on>

000b56f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b56f8:	4b01      	ldr	r3, [pc, #4]	; (b5700 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b56fa:	4a02      	ldr	r2, [pc, #8]	; (b5704 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b56fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b56fe:	4770      	bx	lr
   b5700:	2003e660 	.word	0x2003e660
   b5704:	000b7014 	.word	0x000b7014

000b5708 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5708:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b570a:	2000      	movs	r0, #0
   b570c:	f7ff fd32 	bl	b5174 <spark_sync_time_pending>
   b5710:	b128      	cbz	r0, b571e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5712:	f7ff fd1f 	bl	b5154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5716:	f080 0001 	eor.w	r0, r0, #1
   b571a:	b2c0      	uxtb	r0, r0
    }
   b571c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b571e:	2001      	movs	r0, #1
   b5720:	e7fc      	b.n	b571c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5724 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5724:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b5728:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b572c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b5730:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5732:	d411      	bmi.n	b5758 <_ZN9TimeClass4zoneEf+0x34>
   b5734:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b5738:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5740:	dc0a      	bgt.n	b5758 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b5742:	eddf 7a06 	vldr	s15, [pc, #24]	; b575c <_ZN9TimeClass4zoneEf+0x38>
   b5746:	ee60 7a27 	vmul.f32	s15, s0, s15
   b574a:	ee17 0a90 	vmov	r0, s15
   b574e:	f001 f8ab 	bl	b68a8 <__aeabi_f2lz>
   b5752:	4b03      	ldr	r3, [pc, #12]	; (b5760 <_ZN9TimeClass4zoneEf+0x3c>)
   b5754:	e9c3 0100 	strd	r0, r1, [r3]
}
   b5758:	bd08      	pop	{r3, pc}
   b575a:	bf00      	nop
   b575c:	45610000 	.word	0x45610000
   b5760:	2003e670 	.word	0x2003e670

000b5764 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5764:	b530      	push	{r4, r5, lr}
   b5766:	b093      	sub	sp, #76	; 0x4c
   b5768:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b576c:	4b19      	ldr	r3, [pc, #100]	; (b57d4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b576e:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5770:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5774:	9b01      	ldr	r3, [sp, #4]
   b5776:	1852      	adds	r2, r2, r1
   b5778:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b577c:	4816      	ldr	r0, [pc, #88]	; (b57d8 <_ZN9TimeClass7timeStrEx+0x74>)
   b577e:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5782:	1852      	adds	r2, r2, r1
   b5784:	eb43 0300 	adc.w	r3, r3, r0
   b5788:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b578c:	2224      	movs	r2, #36	; 0x24
   b578e:	eb0d 0002 	add.w	r0, sp, r2
   b5792:	2100      	movs	r1, #0
   b5794:	f001 f8fe 	bl	b6994 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5798:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b579a:	a909      	add	r1, sp, #36	; 0x24
   b579c:	4668      	mov	r0, sp
   b579e:	f7ff fd31 	bl	b5204 <localtime_r>
    char ascstr[26] = {};
   b57a2:	2216      	movs	r2, #22
   b57a4:	4629      	mov	r1, r5
   b57a6:	a803      	add	r0, sp, #12
   b57a8:	9502      	str	r5, [sp, #8]
   b57aa:	f001 f8f3 	bl	b6994 <memset>
    asctime_r(&calendar_time, ascstr);
   b57ae:	a902      	add	r1, sp, #8
   b57b0:	a809      	add	r0, sp, #36	; 0x24
   b57b2:	f001 f8ad 	bl	b6910 <asctime_r>
    int len = strlen(ascstr);
   b57b6:	a802      	add	r0, sp, #8
   b57b8:	f001 f92a 	bl	b6a10 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b57bc:	ab12      	add	r3, sp, #72	; 0x48
   b57be:	4418      	add	r0, r3
    return String(ascstr);
   b57c0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b57c2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b57c6:	4620      	mov	r0, r4
   b57c8:	f7ff fe8b 	bl	b54e2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b57cc:	4620      	mov	r0, r4
   b57ce:	b013      	add	sp, #76	; 0x4c
   b57d0:	bd30      	pop	{r4, r5, pc}
   b57d2:	bf00      	nop
   b57d4:	2003e670 	.word	0x2003e670
   b57d8:	2003e668 	.word	0x2003e668

000b57dc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b57dc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b57de:	2000      	movs	r0, #0
   b57e0:	f7ff fad4 	bl	b4d8c <hal_rtc_time_is_valid>
    if (rtcstate)
   b57e4:	4604      	mov	r4, r0
   b57e6:	b9a0      	cbnz	r0, b5812 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b57e8:	f7ff fc18 	bl	b501c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b57ec:	2801      	cmp	r0, #1
   b57ee:	d110      	bne.n	b5812 <_ZN9TimeClass7isValidEv+0x36>
   b57f0:	4620      	mov	r0, r4
   b57f2:	f7ff fc2b 	bl	b504c <system_thread_get_state>
   b57f6:	b960      	cbnz	r0, b5812 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b57f8:	f7ff ff86 	bl	b5708 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b57fc:	b910      	cbnz	r0, b5804 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b57fe:	f7ff fca1 	bl	b5144 <spark_process>
        while (_while() && !_condition()) {
   b5802:	e7f9      	b.n	b57f8 <_ZN9TimeClass7isValidEv+0x1c>
   b5804:	f7ff ff80 	bl	b5708 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b580c:	2000      	movs	r0, #0
   b580e:	f7ff babd 	b.w	b4d8c <hal_rtc_time_is_valid>
}
   b5812:	4620      	mov	r0, r4
   b5814:	bd10      	pop	{r4, pc}

000b5816 <_ZN9TimeClass3nowEv>:
{
   b5816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5818:	f7ff ffe0 	bl	b57dc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b581c:	2210      	movs	r2, #16
   b581e:	2100      	movs	r1, #0
   b5820:	4668      	mov	r0, sp
   b5822:	f001 f8b7 	bl	b6994 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5826:	2100      	movs	r1, #0
   b5828:	4668      	mov	r0, sp
   b582a:	f7ff fab7 	bl	b4d9c <hal_rtc_get_time>
}
   b582e:	9800      	ldr	r0, [sp, #0]
   b5830:	b005      	add	sp, #20
   b5832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5838 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5838:	4b02      	ldr	r3, [pc, #8]	; (b5844 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b583a:	681a      	ldr	r2, [r3, #0]
   b583c:	4b02      	ldr	r3, [pc, #8]	; (b5848 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b583e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5840:	4770      	bx	lr
   b5842:	bf00      	nop
   b5844:	2003e594 	.word	0x2003e594
   b5848:	2003e664 	.word	0x2003e664

000b584c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b584c:	2100      	movs	r1, #0
   b584e:	f7ff bbf5 	b.w	b503c <system_delay_ms>

000b5852 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b5852:	b510      	push	{r4, lr}
   b5854:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5856:	f7ff fea5 	bl	b55a4 <_ZNSt14_Function_baseD1Ev>
   b585a:	4620      	mov	r0, r4
   b585c:	bd10      	pop	{r4, pc}
	...

000b5860 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5860:	4803      	ldr	r0, [pc, #12]	; (b5870 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b5862:	4a04      	ldr	r2, [pc, #16]	; (b5874 <_GLOBAL__sub_I_RGB+0x14>)
   b5864:	4904      	ldr	r1, [pc, #16]	; (b5878 <_GLOBAL__sub_I_RGB+0x18>)
   b5866:	2300      	movs	r3, #0
   b5868:	6083      	str	r3, [r0, #8]
   b586a:	f000 bc25 	b.w	b60b8 <__aeabi_atexit>
   b586e:	bf00      	nop
   b5870:	2003e678 	.word	0x2003e678
   b5874:	2003e600 	.word	0x2003e600
   b5878:	000b5853 	.word	0x000b5853

000b587c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b587c:	4b01      	ldr	r3, [pc, #4]	; (b5884 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b587e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5880:	4770      	bx	lr
   b5882:	bf00      	nop
   b5884:	2003e598 	.word	0x2003e598

000b5888 <serialEventRun>:
{
   b5888:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b588a:	4b0b      	ldr	r3, [pc, #44]	; (b58b8 <serialEventRun+0x30>)
   b588c:	b143      	cbz	r3, b58a0 <serialEventRun+0x18>
   b588e:	f000 f967 	bl	b5b60 <_Z16_fetch_usbserialv>
   b5892:	6803      	ldr	r3, [r0, #0]
   b5894:	691b      	ldr	r3, [r3, #16]
   b5896:	4798      	blx	r3
   b5898:	2800      	cmp	r0, #0
   b589a:	dd01      	ble.n	b58a0 <serialEventRun+0x18>
        serialEvent();
   b589c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b58a0:	4b06      	ldr	r3, [pc, #24]	; (b58bc <serialEventRun+0x34>)
   b58a2:	b143      	cbz	r3, b58b6 <serialEventRun+0x2e>
   b58a4:	f000 f9da 	bl	b5c5c <_Z22__fetch_global_Serial1v>
   b58a8:	6803      	ldr	r3, [r0, #0]
   b58aa:	691b      	ldr	r3, [r3, #16]
   b58ac:	4798      	blx	r3
   b58ae:	2800      	cmp	r0, #0
   b58b0:	dd01      	ble.n	b58b6 <serialEventRun+0x2e>
        serialEvent1();
   b58b2:	f3af 8000 	nop.w
}
   b58b6:	bd08      	pop	{r3, pc}
	...

000b58c0 <_post_loop>:
{
   b58c0:	b508      	push	{r3, lr}
	serialEventRun();
   b58c2:	f7ff ffe1 	bl	b5888 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b58c6:	f7ff fa59 	bl	b4d7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b58ca:	4b01      	ldr	r3, [pc, #4]	; (b58d0 <_post_loop+0x10>)
   b58cc:	6018      	str	r0, [r3, #0]
}
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	2003e7d8 	.word	0x2003e7d8

000b58d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b58d4:	4805      	ldr	r0, [pc, #20]	; (b58ec <_Z33system_initialize_user_backup_ramv+0x18>)
   b58d6:	4a06      	ldr	r2, [pc, #24]	; (b58f0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b58d8:	4906      	ldr	r1, [pc, #24]	; (b58f4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b58da:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b58dc:	1a12      	subs	r2, r2, r0
   b58de:	f001 f84b 	bl	b6978 <memcpy>
    __backup_sram_signature = signature;
   b58e2:	4b05      	ldr	r3, [pc, #20]	; (b58f8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b58e4:	4a05      	ldr	r2, [pc, #20]	; (b58fc <_Z33system_initialize_user_backup_ramv+0x28>)
   b58e6:	601a      	str	r2, [r3, #0]
}
   b58e8:	bd08      	pop	{r3, pc}
   b58ea:	bf00      	nop
   b58ec:	2003f400 	.word	0x2003f400
   b58f0:	2003f404 	.word	0x2003f404
   b58f4:	000b7260 	.word	0x000b7260
   b58f8:	2003f400 	.word	0x2003f400
   b58fc:	9a271c1e 	.word	0x9a271c1e

000b5900 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5900:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5902:	2300      	movs	r3, #0
   b5904:	9300      	str	r3, [sp, #0]
   b5906:	461a      	mov	r2, r3
   b5908:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b590c:	f7ff fbb0 	bl	b5070 <system_ctrl_set_result>
}
   b5910:	b003      	add	sp, #12
   b5912:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5918 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5918:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b591a:	8843      	ldrh	r3, [r0, #2]
   b591c:	2b0a      	cmp	r3, #10
   b591e:	d008      	beq.n	b5932 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5920:	2b50      	cmp	r3, #80	; 0x50
   b5922:	d10b      	bne.n	b593c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5924:	4b09      	ldr	r3, [pc, #36]	; (b594c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5926:	681b      	ldr	r3, [r3, #0]
   b5928:	b14b      	cbz	r3, b593e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b592a:	b003      	add	sp, #12
   b592c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5930:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5932:	f7ff ffe5 	bl	b5900 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5936:	b003      	add	sp, #12
   b5938:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b593c:	2300      	movs	r3, #0
   b593e:	9300      	str	r3, [sp, #0]
   b5940:	461a      	mov	r2, r3
   b5942:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5946:	f7ff fb93 	bl	b5070 <system_ctrl_set_result>
}
   b594a:	e7f4      	b.n	b5936 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b594c:	2003e68c 	.word	0x2003e68c

000b5950 <module_user_init_hook>:
{
   b5950:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5952:	4812      	ldr	r0, [pc, #72]	; (b599c <module_user_init_hook+0x4c>)
   b5954:	2100      	movs	r1, #0
   b5956:	f7ff fc4d 	bl	b51f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b595a:	4b11      	ldr	r3, [pc, #68]	; (b59a0 <module_user_init_hook+0x50>)
   b595c:	681a      	ldr	r2, [r3, #0]
   b595e:	4b11      	ldr	r3, [pc, #68]	; (b59a4 <module_user_init_hook+0x54>)
   b5960:	429a      	cmp	r2, r3
   b5962:	4b11      	ldr	r3, [pc, #68]	; (b59a8 <module_user_init_hook+0x58>)
   b5964:	bf0c      	ite	eq
   b5966:	2201      	moveq	r2, #1
   b5968:	2200      	movne	r2, #0
   b596a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b596c:	d001      	beq.n	b5972 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b596e:	f7ff ffb1 	bl	b58d4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5972:	f7ff f9f3 	bl	b4d5c <HAL_RNG_GetRandomNumber>
   b5976:	4604      	mov	r4, r0
    srand(seed);
   b5978:	f001 f814 	bl	b69a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b597c:	4b0b      	ldr	r3, [pc, #44]	; (b59ac <module_user_init_hook+0x5c>)
   b597e:	b113      	cbz	r3, b5986 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5980:	4620      	mov	r0, r4
   b5982:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5986:	2100      	movs	r1, #0
   b5988:	4808      	ldr	r0, [pc, #32]	; (b59ac <module_user_init_hook+0x5c>)
   b598a:	f7ff fbfb 	bl	b5184 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b598e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5992:	4807      	ldr	r0, [pc, #28]	; (b59b0 <module_user_init_hook+0x60>)
   b5994:	2100      	movs	r1, #0
   b5996:	f7ff bb61 	b.w	b505c <system_ctrl_set_app_request_handler>
   b599a:	bf00      	nop
   b599c:	000b587d 	.word	0x000b587d
   b59a0:	2003f400 	.word	0x2003f400
   b59a4:	9a271c1e 	.word	0x9a271c1e
   b59a8:	2003e688 	.word	0x2003e688
   b59ac:	00000000 	.word	0x00000000
   b59b0:	000b5919 	.word	0x000b5919

000b59b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b59b4:	4770      	bx	lr

000b59b6 <_ZN9IPAddressD0Ev>:
   b59b6:	b510      	push	{r4, lr}
   b59b8:	2118      	movs	r1, #24
   b59ba:	4604      	mov	r4, r0
   b59bc:	f000 fb81 	bl	b60c2 <_ZdlPvj>
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd10      	pop	{r4, pc}

000b59c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b59c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b59c6:	7d03      	ldrb	r3, [r0, #20]
   b59c8:	2b06      	cmp	r3, #6
{
   b59ca:	b08d      	sub	sp, #52	; 0x34
   b59cc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59ce:	f100 0704 	add.w	r7, r0, #4
   b59d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b59d6:	d012      	beq.n	b59fe <_ZNK9IPAddress7printToER5Print+0x3a>
   b59d8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b59dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b59e0:	220a      	movs	r2, #10
   b59e2:	4630      	mov	r0, r6
   b59e4:	f7ff fe33 	bl	b564e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b59e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b59ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b59ec:	d019      	beq.n	b5a22 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b59ee:	2c00      	cmp	r4, #0
   b59f0:	d0f4      	beq.n	b59dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b59f2:	212e      	movs	r1, #46	; 0x2e
   b59f4:	4630      	mov	r0, r6
   b59f6:	f7ff fe1b 	bl	b5630 <_ZN5Print5printEc>
   b59fa:	4404      	add	r4, r0
   b59fc:	e7ee      	b.n	b59dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59fe:	232f      	movs	r3, #47	; 0x2f
   b5a00:	466a      	mov	r2, sp
   b5a02:	4639      	mov	r1, r7
   b5a04:	200a      	movs	r0, #10
		buf[0] = 0;
   b5a06:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a0a:	f7ff f9df 	bl	b4dcc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5a0e:	4668      	mov	r0, sp
   b5a10:	f000 fffe 	bl	b6a10 <strlen>
   b5a14:	6833      	ldr	r3, [r6, #0]
   b5a16:	4602      	mov	r2, r0
   b5a18:	68db      	ldr	r3, [r3, #12]
   b5a1a:	4669      	mov	r1, sp
   b5a1c:	4630      	mov	r0, r6
   b5a1e:	4798      	blx	r3
   b5a20:	4604      	mov	r4, r0
    }
    return n;
}
   b5a22:	4620      	mov	r0, r4
   b5a24:	b00d      	add	sp, #52	; 0x34
   b5a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5a28 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5a28:	b510      	push	{r4, lr}
   b5a2a:	4b05      	ldr	r3, [pc, #20]	; (b5a40 <_ZN9IPAddressC1Ev+0x18>)
   b5a2c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5a2e:	2211      	movs	r2, #17
   b5a30:	f840 3b04 	str.w	r3, [r0], #4
   b5a34:	2100      	movs	r1, #0
   b5a36:	f000 ffad 	bl	b6994 <memset>
}
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	bd10      	pop	{r4, pc}
   b5a3e:	bf00      	nop
   b5a40:	000b703c 	.word	0x000b703c

000b5a44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5a44:	4603      	mov	r3, r0
   b5a46:	4a07      	ldr	r2, [pc, #28]	; (b5a64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5a48:	b510      	push	{r4, lr}
   b5a4a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5a4e:	f101 0210 	add.w	r2, r1, #16
   b5a52:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a56:	f843 4b04 	str.w	r4, [r3], #4
   b5a5a:	4291      	cmp	r1, r2
   b5a5c:	d1f9      	bne.n	b5a52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a5e:	780a      	ldrb	r2, [r1, #0]
   b5a60:	701a      	strb	r2, [r3, #0]
}
   b5a62:	bd10      	pop	{r4, pc}
   b5a64:	000b703c 	.word	0x000b703c

000b5a68 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a7a:	2304      	movs	r3, #4
   b5a7c:	6041      	str	r1, [r0, #4]
   b5a7e:	7503      	strb	r3, [r0, #20]
}
   b5a80:	bd10      	pop	{r4, pc}
	...

000b5a84 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5a84:	b507      	push	{r0, r1, r2, lr}
   b5a86:	4b06      	ldr	r3, [pc, #24]	; (b5aa0 <_ZN9IPAddressC1EPKh+0x1c>)
   b5a88:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5a8a:	78cb      	ldrb	r3, [r1, #3]
   b5a8c:	9300      	str	r3, [sp, #0]
   b5a8e:	788b      	ldrb	r3, [r1, #2]
   b5a90:	784a      	ldrb	r2, [r1, #1]
   b5a92:	7809      	ldrb	r1, [r1, #0]
   b5a94:	f7ff ffe8 	bl	b5a68 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5a98:	b003      	add	sp, #12
   b5a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a9e:	bf00      	nop
   b5aa0:	000b703c 	.word	0x000b703c

000b5aa4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5aa4:	7441      	strb	r1, [r0, #17]
}
   b5aa6:	4770      	bx	lr

000b5aa8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5aa8:	4770      	bx	lr

000b5aaa <_ZN9USBSerial4readEv>:
{
   b5aaa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5aac:	2100      	movs	r1, #0
   b5aae:	7c00      	ldrb	r0, [r0, #16]
   b5ab0:	f7ff fa94 	bl	b4fdc <HAL_USB_USART_Receive_Data>
}
   b5ab4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ab8:	bd08      	pop	{r3, pc}

000b5aba <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b5aba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5abc:	2101      	movs	r1, #1
   b5abe:	7c00      	ldrb	r0, [r0, #16]
   b5ac0:	f7ff fa8c 	bl	b4fdc <HAL_USB_USART_Receive_Data>
}
   b5ac4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ac8:	bd08      	pop	{r3, pc}

000b5aca <_ZN9USBSerial17availableForWriteEv>:
{
   b5aca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5acc:	7c00      	ldrb	r0, [r0, #16]
   b5ace:	f7ff fa7d 	bl	b4fcc <HAL_USB_USART_Available_Data_For_Write>
}
   b5ad2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ad6:	bd08      	pop	{r3, pc}

000b5ad8 <_ZN9USBSerial9availableEv>:
{
   b5ad8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ada:	7c00      	ldrb	r0, [r0, #16]
   b5adc:	f7ff fa6e 	bl	b4fbc <HAL_USB_USART_Available_Data>
}
   b5ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ae4:	bd08      	pop	{r3, pc}

000b5ae6 <_ZN9USBSerial5writeEh>:
{
   b5ae6:	b513      	push	{r0, r1, r4, lr}
   b5ae8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5aea:	7c00      	ldrb	r0, [r0, #16]
{
   b5aec:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5aee:	f7ff fa6d 	bl	b4fcc <HAL_USB_USART_Available_Data_For_Write>
   b5af2:	2800      	cmp	r0, #0
   b5af4:	9901      	ldr	r1, [sp, #4]
   b5af6:	dc01      	bgt.n	b5afc <_ZN9USBSerial5writeEh+0x16>
   b5af8:	7c60      	ldrb	r0, [r4, #17]
   b5afa:	b120      	cbz	r0, b5b06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5afc:	7c20      	ldrb	r0, [r4, #16]
   b5afe:	f7ff fa75 	bl	b4fec <HAL_USB_USART_Send_Data>
   b5b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b06:	b002      	add	sp, #8
   b5b08:	bd10      	pop	{r4, pc}

000b5b0a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b0a:	7c00      	ldrb	r0, [r0, #16]
   b5b0c:	f7ff ba76 	b.w	b4ffc <HAL_USB_USART_Flush_Data>

000b5b10 <_ZN9USBSerialD0Ev>:
   b5b10:	b510      	push	{r4, lr}
   b5b12:	2114      	movs	r1, #20
   b5b14:	4604      	mov	r4, r0
   b5b16:	f000 fad4 	bl	b60c2 <_ZdlPvj>
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	bd10      	pop	{r4, pc}
	...

000b5b20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5b20:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b26:	4604      	mov	r4, r0
   b5b28:	4608      	mov	r0, r1
   b5b2a:	2100      	movs	r1, #0
   b5b2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5b30:	4b04      	ldr	r3, [pc, #16]	; (b5b44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5b32:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b34:	2301      	movs	r3, #1
  _serial = serial;
   b5b36:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b38:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5b3a:	4611      	mov	r1, r2
   b5b3c:	f7ff fa2e 	bl	b4f9c <HAL_USB_USART_Init>
}
   b5b40:	4620      	mov	r0, r4
   b5b42:	bd10      	pop	{r4, pc}
   b5b44:	000b7050 	.word	0x000b7050

000b5b48 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5b48:	7c00      	ldrb	r0, [r0, #16]
   b5b4a:	2200      	movs	r2, #0
   b5b4c:	f7ff ba2e 	b.w	b4fac <HAL_USB_USART_Begin>

000b5b50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b5b50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b5b52:	2214      	movs	r2, #20
{
   b5b54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b5b56:	2100      	movs	r1, #0
   b5b58:	f000 ff1c 	bl	b6994 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	bd10      	pop	{r4, pc}

000b5b60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b5b60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b62:	4c10      	ldr	r4, [pc, #64]	; (b5ba4 <_Z16_fetch_usbserialv+0x44>)
{
   b5b64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b66:	a803      	add	r0, sp, #12
   b5b68:	f7ff fff2 	bl	b5b50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b6c:	7821      	ldrb	r1, [r4, #0]
   b5b6e:	f3bf 8f5b 	dmb	ish
   b5b72:	f011 0101 	ands.w	r1, r1, #1
   b5b76:	d111      	bne.n	b5b9c <_Z16_fetch_usbserialv+0x3c>
   b5b78:	4620      	mov	r0, r4
   b5b7a:	9101      	str	r1, [sp, #4]
   b5b7c:	f7fe fa98 	bl	b40b0 <__cxa_guard_acquire>
   b5b80:	9901      	ldr	r1, [sp, #4]
   b5b82:	b158      	cbz	r0, b5b9c <_Z16_fetch_usbserialv+0x3c>
   b5b84:	aa03      	add	r2, sp, #12
   b5b86:	4808      	ldr	r0, [pc, #32]	; (b5ba8 <_Z16_fetch_usbserialv+0x48>)
   b5b88:	f7ff ffca 	bl	b5b20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	f7fe fa94 	bl	b40ba <__cxa_guard_release>
   b5b92:	4a06      	ldr	r2, [pc, #24]	; (b5bac <_Z16_fetch_usbserialv+0x4c>)
   b5b94:	4906      	ldr	r1, [pc, #24]	; (b5bb0 <_Z16_fetch_usbserialv+0x50>)
   b5b96:	4804      	ldr	r0, [pc, #16]	; (b5ba8 <_Z16_fetch_usbserialv+0x48>)
   b5b98:	f000 fa8e 	bl	b60b8 <__aeabi_atexit>
	return _usbserial;
}
   b5b9c:	4802      	ldr	r0, [pc, #8]	; (b5ba8 <_Z16_fetch_usbserialv+0x48>)
   b5b9e:	b008      	add	sp, #32
   b5ba0:	bd10      	pop	{r4, pc}
   b5ba2:	bf00      	nop
   b5ba4:	2003e690 	.word	0x2003e690
   b5ba8:	2003e694 	.word	0x2003e694
   b5bac:	2003e600 	.word	0x2003e600
   b5bb0:	000b5aa9 	.word	0x000b5aa9

000b5bb4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b5bb4:	4770      	bx	lr

000b5bb6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5bb6:	7441      	strb	r1, [r0, #17]
}
   b5bb8:	4770      	bx	lr

000b5bba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5bba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5bbc:	7c00      	ldrb	r0, [r0, #16]
   b5bbe:	f7ff f945 	bl	b4e4c <hal_usart_available_data_for_write>
}
   b5bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bc6:	bd08      	pop	{r3, pc}

000b5bc8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5bc8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5bca:	7c00      	ldrb	r0, [r0, #16]
   b5bcc:	f7ff f916 	bl	b4dfc <hal_usart_available>
}
   b5bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bd4:	bd08      	pop	{r3, pc}

000b5bd6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5bd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5bd8:	7c00      	ldrb	r0, [r0, #16]
   b5bda:	f7ff f91f 	bl	b4e1c <hal_usart_peek>
}
   b5bde:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5be2:	bd08      	pop	{r3, pc}

000b5be4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5be4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5be6:	7c00      	ldrb	r0, [r0, #16]
   b5be8:	f7ff f910 	bl	b4e0c <hal_usart_read>
}
   b5bec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bf0:	bd08      	pop	{r3, pc}

000b5bf2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5bf2:	7c00      	ldrb	r0, [r0, #16]
   b5bf4:	f7ff b91a 	b.w	b4e2c <hal_usart_flush>

000b5bf8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bfa:	7c45      	ldrb	r5, [r0, #17]
{
   b5bfc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bfe:	b12d      	cbz	r5, b5c0c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5c00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5c02:	b003      	add	sp, #12
   b5c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5c08:	f7ff b8f0 	b.w	b4dec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5c0c:	7c00      	ldrb	r0, [r0, #16]
   b5c0e:	9101      	str	r1, [sp, #4]
   b5c10:	f7ff f91c 	bl	b4e4c <hal_usart_available_data_for_write>
   b5c14:	2800      	cmp	r0, #0
   b5c16:	9901      	ldr	r1, [sp, #4]
   b5c18:	dcf2      	bgt.n	b5c00 <_ZN11USARTSerial5writeEh+0x8>
}
   b5c1a:	4628      	mov	r0, r5
   b5c1c:	b003      	add	sp, #12
   b5c1e:	bd30      	pop	{r4, r5, pc}

000b5c20 <_ZN11USARTSerialD0Ev>:
   b5c20:	b510      	push	{r4, lr}
   b5c22:	2114      	movs	r1, #20
   b5c24:	4604      	mov	r4, r0
   b5c26:	f000 fa4c 	bl	b60c2 <_ZdlPvj>
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	bd10      	pop	{r4, pc}
	...

000b5c30 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b5c30:	b510      	push	{r4, lr}
   b5c32:	f04f 0c00 	mov.w	ip, #0
   b5c36:	4604      	mov	r4, r0
   b5c38:	4608      	mov	r0, r1
   b5c3a:	4611      	mov	r1, r2
   b5c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c40:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b5c44:	4a04      	ldr	r2, [pc, #16]	; (b5c58 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b5c46:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b5c48:	2201      	movs	r2, #1
  _serial = serial;
   b5c4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c4c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b5c4e:	461a      	mov	r2, r3
   b5c50:	f7ff f8c4 	bl	b4ddc <hal_usart_init>
}
   b5c54:	4620      	mov	r0, r4
   b5c56:	bd10      	pop	{r4, pc}
   b5c58:	000b7080 	.word	0x000b7080

000b5c5c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b5c5c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b5c5e:	4c0e      	ldr	r4, [pc, #56]	; (b5c98 <_Z22__fetch_global_Serial1v+0x3c>)
   b5c60:	7821      	ldrb	r1, [r4, #0]
   b5c62:	f3bf 8f5b 	dmb	ish
   b5c66:	f011 0101 	ands.w	r1, r1, #1
   b5c6a:	d112      	bne.n	b5c92 <_Z22__fetch_global_Serial1v+0x36>
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	9101      	str	r1, [sp, #4]
   b5c70:	f7fe fa1e 	bl	b40b0 <__cxa_guard_acquire>
   b5c74:	9901      	ldr	r1, [sp, #4]
   b5c76:	b160      	cbz	r0, b5c92 <_Z22__fetch_global_Serial1v+0x36>
   b5c78:	4a08      	ldr	r2, [pc, #32]	; (b5c9c <_Z22__fetch_global_Serial1v+0x40>)
   b5c7a:	4b09      	ldr	r3, [pc, #36]	; (b5ca0 <_Z22__fetch_global_Serial1v+0x44>)
   b5c7c:	4809      	ldr	r0, [pc, #36]	; (b5ca4 <_Z22__fetch_global_Serial1v+0x48>)
   b5c7e:	f7ff ffd7 	bl	b5c30 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b5c82:	4620      	mov	r0, r4
   b5c84:	f7fe fa19 	bl	b40ba <__cxa_guard_release>
   b5c88:	4a07      	ldr	r2, [pc, #28]	; (b5ca8 <_Z22__fetch_global_Serial1v+0x4c>)
   b5c8a:	4908      	ldr	r1, [pc, #32]	; (b5cac <_Z22__fetch_global_Serial1v+0x50>)
   b5c8c:	4805      	ldr	r0, [pc, #20]	; (b5ca4 <_Z22__fetch_global_Serial1v+0x48>)
   b5c8e:	f000 fa13 	bl	b60b8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b5c92:	4804      	ldr	r0, [pc, #16]	; (b5ca4 <_Z22__fetch_global_Serial1v+0x48>)
   b5c94:	b002      	add	sp, #8
   b5c96:	bd10      	pop	{r4, pc}
   b5c98:	2003e6a8 	.word	0x2003e6a8
   b5c9c:	2003e6ac 	.word	0x2003e6ac
   b5ca0:	2003e730 	.word	0x2003e730
   b5ca4:	2003e7b4 	.word	0x2003e7b4
   b5ca8:	2003e600 	.word	0x2003e600
   b5cac:	000b5bb5 	.word	0x000b5bb5

000b5cb0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5cb0:	4770      	bx	lr

000b5cb2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cb4:	4606      	mov	r6, r0
   b5cb6:	4615      	mov	r5, r2
   b5cb8:	460c      	mov	r4, r1
   b5cba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5cbc:	42bc      	cmp	r4, r7
   b5cbe:	d006      	beq.n	b5cce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5cc0:	6833      	ldr	r3, [r6, #0]
   b5cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5cc6:	689b      	ldr	r3, [r3, #8]
   b5cc8:	4630      	mov	r0, r6
   b5cca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5ccc:	e7f6      	b.n	b5cbc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5cce:	4628      	mov	r0, r5
   b5cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5cd2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5cd2:	7c00      	ldrb	r0, [r0, #16]
   b5cd4:	2200      	movs	r2, #0
   b5cd6:	f7ff b8d9 	b.w	b4e8c <hal_i2c_write>

000b5cda <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5cda:	7c00      	ldrb	r0, [r0, #16]
   b5cdc:	2100      	movs	r1, #0
   b5cde:	f7ff b8dd 	b.w	b4e9c <hal_i2c_available>

000b5ce2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5ce2:	7c00      	ldrb	r0, [r0, #16]
   b5ce4:	2100      	movs	r1, #0
   b5ce6:	f7ff b8e1 	b.w	b4eac <hal_i2c_read>

000b5cea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5cea:	7c00      	ldrb	r0, [r0, #16]
   b5cec:	2100      	movs	r1, #0
   b5cee:	f7ff b8e5 	b.w	b4ebc <hal_i2c_peek>

000b5cf2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5cf2:	7c00      	ldrb	r0, [r0, #16]
   b5cf4:	2100      	movs	r1, #0
   b5cf6:	f7ff b8e9 	b.w	b4ecc <hal_i2c_flush>

000b5cfa <_ZN7TwoWireD0Ev>:
   b5cfa:	b510      	push	{r4, lr}
   b5cfc:	2114      	movs	r1, #20
   b5cfe:	4604      	mov	r4, r0
   b5d00:	f000 f9df 	bl	b60c2 <_ZdlPvj>
   b5d04:	4620      	mov	r0, r4
   b5d06:	bd10      	pop	{r4, pc}

000b5d08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5d08:	b510      	push	{r4, lr}
   b5d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d0e:	4604      	mov	r4, r0
   b5d10:	4608      	mov	r0, r1
   b5d12:	2100      	movs	r1, #0
   b5d14:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5d18:	4b03      	ldr	r3, [pc, #12]	; (b5d28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5d1a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5d1c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5d1e:	4611      	mov	r1, r2
   b5d20:	f7ff f8e4 	bl	b4eec <hal_i2c_init>
}
   b5d24:	4620      	mov	r0, r4
   b5d26:	bd10      	pop	{r4, pc}
   b5d28:	000b70b0 	.word	0x000b70b0

000b5d2c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5d2c:	2300      	movs	r3, #0
   b5d2e:	7c00      	ldrb	r0, [r0, #16]
   b5d30:	461a      	mov	r2, r3
   b5d32:	4619      	mov	r1, r3
   b5d34:	f7ff b892 	b.w	b4e5c <hal_i2c_begin>

000b5d38 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5d38:	7c00      	ldrb	r0, [r0, #16]
   b5d3a:	2200      	movs	r2, #0
   b5d3c:	f7ff b896 	b.w	b4e6c <hal_i2c_begin_transmission>

000b5d40 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5d40:	b2c9      	uxtb	r1, r1
   b5d42:	f7ff bff9 	b.w	b5d38 <_ZN7TwoWire17beginTransmissionEh>

000b5d46 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5d46:	7c00      	ldrb	r0, [r0, #16]
   b5d48:	2200      	movs	r2, #0
   b5d4a:	f7ff b897 	b.w	b4e7c <hal_i2c_end_transmission>

000b5d4e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5d4e:	2101      	movs	r1, #1
   b5d50:	f7ff bff9 	b.w	b5d46 <_ZN7TwoWire15endTransmissionEh>

000b5d54 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5d54:	2200      	movs	r2, #0
   b5d56:	6840      	ldr	r0, [r0, #4]
   b5d58:	4611      	mov	r1, r2
   b5d5a:	f7ff b9ab 	b.w	b50b4 <network_ready>

000b5d5e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d5e:	2200      	movs	r2, #0
   b5d60:	6840      	ldr	r0, [r0, #4]
   b5d62:	4611      	mov	r1, r2
   b5d64:	f7ff b9c6 	b.w	b50f4 <network_listening>

000b5d68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d68:	2200      	movs	r2, #0
   b5d6a:	6840      	ldr	r0, [r0, #4]
   b5d6c:	4611      	mov	r1, r2
   b5d6e:	f7ff b9d1 	b.w	b5114 <network_get_listen_timeout>

000b5d72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d72:	6840      	ldr	r0, [r0, #4]
   b5d74:	2200      	movs	r2, #0
   b5d76:	f7ff b9c5 	b.w	b5104 <network_set_listen_timeout>

000b5d7a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d7a:	6840      	ldr	r0, [r0, #4]
   b5d7c:	2200      	movs	r2, #0
   b5d7e:	f081 0101 	eor.w	r1, r1, #1
   b5d82:	f7ff b9af 	b.w	b50e4 <network_listen>

000b5d86 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d86:	2300      	movs	r3, #0
   b5d88:	6840      	ldr	r0, [r0, #4]
   b5d8a:	461a      	mov	r2, r3
   b5d8c:	4619      	mov	r1, r3
   b5d8e:	f7ff b9a1 	b.w	b50d4 <network_off>

000b5d92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5d92:	2200      	movs	r2, #0
   b5d94:	6840      	ldr	r0, [r0, #4]
   b5d96:	4611      	mov	r1, r2
   b5d98:	f7ff b97c 	b.w	b5094 <network_connecting>

000b5d9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d9c:	6840      	ldr	r0, [r0, #4]
   b5d9e:	2200      	movs	r2, #0
   b5da0:	2102      	movs	r1, #2
   b5da2:	f7ff b97f 	b.w	b50a4 <network_disconnect>

000b5da6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5da6:	2300      	movs	r3, #0
   b5da8:	6840      	ldr	r0, [r0, #4]
   b5daa:	461a      	mov	r2, r3
   b5dac:	f7ff b96a 	b.w	b5084 <network_connect>

000b5db0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5db0:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5db2:	2204      	movs	r2, #4
   b5db4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5db6:	4a02      	ldr	r2, [pc, #8]	; (b5dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5db8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5dba:	4770      	bx	lr
   b5dbc:	2003e7c8 	.word	0x2003e7c8
   b5dc0:	000b70d8 	.word	0x000b70d8

000b5dc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5dc4:	2300      	movs	r3, #0
   b5dc6:	6840      	ldr	r0, [r0, #4]
   b5dc8:	461a      	mov	r2, r3
   b5dca:	f7ff b95b 	b.w	b5084 <network_connect>

000b5dce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5dce:	6840      	ldr	r0, [r0, #4]
   b5dd0:	2200      	movs	r2, #0
   b5dd2:	2102      	movs	r1, #2
   b5dd4:	f7ff b966 	b.w	b50a4 <network_disconnect>

000b5dd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5dd8:	2200      	movs	r2, #0
   b5dda:	6840      	ldr	r0, [r0, #4]
   b5ddc:	4611      	mov	r1, r2
   b5dde:	f7ff b959 	b.w	b5094 <network_connecting>

000b5de2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5de2:	2200      	movs	r2, #0
   b5de4:	6840      	ldr	r0, [r0, #4]
   b5de6:	4611      	mov	r1, r2
   b5de8:	f7ff b964 	b.w	b50b4 <network_ready>

000b5dec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5dec:	2300      	movs	r3, #0
   b5dee:	6840      	ldr	r0, [r0, #4]
   b5df0:	461a      	mov	r2, r3
   b5df2:	4619      	mov	r1, r3
   b5df4:	f7ff b966 	b.w	b50c4 <network_on>

000b5df8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5df8:	2300      	movs	r3, #0
   b5dfa:	6840      	ldr	r0, [r0, #4]
   b5dfc:	461a      	mov	r2, r3
   b5dfe:	4619      	mov	r1, r3
   b5e00:	f7ff b968 	b.w	b50d4 <network_off>

000b5e04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5e04:	6840      	ldr	r0, [r0, #4]
   b5e06:	2100      	movs	r1, #0
   b5e08:	f7ff b98c 	b.w	b5124 <network_is_on>

000b5e0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5e0c:	6840      	ldr	r0, [r0, #4]
   b5e0e:	2100      	movs	r1, #0
   b5e10:	f7ff b990 	b.w	b5134 <network_is_off>

000b5e14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5e14:	6840      	ldr	r0, [r0, #4]
   b5e16:	2200      	movs	r2, #0
   b5e18:	f081 0101 	eor.w	r1, r1, #1
   b5e1c:	f7ff b962 	b.w	b50e4 <network_listen>

000b5e20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e20:	6840      	ldr	r0, [r0, #4]
   b5e22:	2200      	movs	r2, #0
   b5e24:	f7ff b96e 	b.w	b5104 <network_set_listen_timeout>

000b5e28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e28:	2200      	movs	r2, #0
   b5e2a:	6840      	ldr	r0, [r0, #4]
   b5e2c:	4611      	mov	r1, r2
   b5e2e:	f7ff b971 	b.w	b5114 <network_get_listen_timeout>

000b5e32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e32:	2200      	movs	r2, #0
   b5e34:	6840      	ldr	r0, [r0, #4]
   b5e36:	4611      	mov	r1, r2
   b5e38:	f7ff b95c 	b.w	b50f4 <network_listening>

000b5e3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e40:	b095      	sub	sp, #84	; 0x54
   b5e42:	4614      	mov	r4, r2
   b5e44:	460d      	mov	r5, r1
   b5e46:	4607      	mov	r7, r0
    IPAddress addr;
   b5e48:	f7ff fdee 	bl	b5a28 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e4c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e4e:	221c      	movs	r2, #28
   b5e50:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e52:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e54:	f000 fd9e 	bl	b6994 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e58:	2340      	movs	r3, #64	; 0x40
   b5e5a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	466b      	mov	r3, sp
   b5e60:	aa0c      	add	r2, sp, #48	; 0x30
   b5e62:	2100      	movs	r1, #0
   b5e64:	f7fe ff5a 	bl	b4d1c <netdb_getaddrinfo>
    if (!r) {
   b5e68:	4604      	mov	r4, r0
   b5e6a:	2800      	cmp	r0, #0
   b5e6c:	d14b      	bne.n	b5f06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e6e:	4602      	mov	r2, r0
   b5e70:	2101      	movs	r1, #1
   b5e72:	6868      	ldr	r0, [r5, #4]
   b5e74:	f7ff f91e 	bl	b50b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e78:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e7a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e7c:	4622      	mov	r2, r4
   b5e7e:	6868      	ldr	r0, [r5, #4]
   b5e80:	f7ff f918 	bl	b50b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e84:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e86:	4681      	mov	r9, r0
        bool ok = false;
   b5e88:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e8a:	2e00      	cmp	r6, #0
   b5e8c:	d03b      	beq.n	b5f06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5e8e:	2900      	cmp	r1, #0
   b5e90:	d139      	bne.n	b5f06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5e92:	6873      	ldr	r3, [r6, #4]
   b5e94:	2b02      	cmp	r3, #2
   b5e96:	d003      	beq.n	b5ea0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e98:	2b0a      	cmp	r3, #10
   b5e9a:	d011      	beq.n	b5ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e9c:	69f6      	ldr	r6, [r6, #28]
   b5e9e:	e7f4      	b.n	b5e8a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ea0:	f1b8 0f00 	cmp.w	r8, #0
   b5ea4:	d0fa      	beq.n	b5e9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5ea6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5ea8:	a806      	add	r0, sp, #24
   b5eaa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5eac:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5eae:	f7ff fde9 	bl	b5a84 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5eb4:	1d3c      	adds	r4, r7, #4
   b5eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5eb8:	682b      	ldr	r3, [r5, #0]
   b5eba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ebc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ebe:	e7ed      	b.n	b5e9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ec0:	f1b9 0f00 	cmp.w	r9, #0
   b5ec4:	d0ea      	beq.n	b5e9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5ec6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ec8:	2210      	movs	r2, #16
   b5eca:	a801      	add	r0, sp, #4
   b5ecc:	f000 fd62 	bl	b6994 <memset>
                    a.v = 6;
   b5ed0:	2306      	movs	r3, #6
   b5ed2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5ed6:	ad01      	add	r5, sp, #4
   b5ed8:	f104 0308 	add.w	r3, r4, #8
   b5edc:	3418      	adds	r4, #24
   b5ede:	6818      	ldr	r0, [r3, #0]
   b5ee0:	6859      	ldr	r1, [r3, #4]
   b5ee2:	462a      	mov	r2, r5
   b5ee4:	c203      	stmia	r2!, {r0, r1}
   b5ee6:	3308      	adds	r3, #8
   b5ee8:	42a3      	cmp	r3, r4
   b5eea:	4615      	mov	r5, r2
   b5eec:	d1f7      	bne.n	b5ede <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5eee:	a901      	add	r1, sp, #4
   b5ef0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5ef2:	ad07      	add	r5, sp, #28
   b5ef4:	f7ff fda6 	bl	b5a44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5efa:	1d3c      	adds	r4, r7, #4
   b5efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5efe:	682b      	ldr	r3, [r5, #0]
   b5f00:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f02:	4649      	mov	r1, r9
   b5f04:	e7ca      	b.n	b5e9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5f06:	9800      	ldr	r0, [sp, #0]
   b5f08:	f7fe ff00 	bl	b4d0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5f0c:	4638      	mov	r0, r7
   b5f0e:	b015      	add	sp, #84	; 0x54
   b5f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5f14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5f14:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5f16:	4a03      	ldr	r2, [pc, #12]	; (b5f24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5f18:	601a      	str	r2, [r3, #0]
   b5f1a:	2200      	movs	r2, #0
   b5f1c:	605a      	str	r2, [r3, #4]

} // spark
   b5f1e:	4770      	bx	lr
   b5f20:	2003e7d0 	.word	0x2003e7d0
   b5f24:	000b7114 	.word	0x000b7114

000b5f28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5f2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f2c:	d902      	bls.n	b5f34 <pinAvailable+0xc>
    return false;
   b5f2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f30:	b002      	add	sp, #8
   b5f32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f34:	f1a0 030b 	sub.w	r3, r0, #11
   b5f38:	2b02      	cmp	r3, #2
   b5f3a:	d81a      	bhi.n	b5f72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f3c:	4c17      	ldr	r4, [pc, #92]	; (b5f9c <pinAvailable+0x74>)
   b5f3e:	7821      	ldrb	r1, [r4, #0]
   b5f40:	f3bf 8f5b 	dmb	ish
   b5f44:	f011 0101 	ands.w	r1, r1, #1
   b5f48:	d10b      	bne.n	b5f62 <pinAvailable+0x3a>
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	9101      	str	r1, [sp, #4]
   b5f4e:	f7fe f8af 	bl	b40b0 <__cxa_guard_acquire>
   b5f52:	9901      	ldr	r1, [sp, #4]
   b5f54:	b128      	cbz	r0, b5f62 <pinAvailable+0x3a>
   b5f56:	4812      	ldr	r0, [pc, #72]	; (b5fa0 <pinAvailable+0x78>)
   b5f58:	f7ff f9a0 	bl	b529c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	f7fe f8ac 	bl	b40ba <__cxa_guard_release>
   b5f62:	4b0f      	ldr	r3, [pc, #60]	; (b5fa0 <pinAvailable+0x78>)
   b5f64:	7818      	ldrb	r0, [r3, #0]
   b5f66:	f7fe fff9 	bl	b4f5c <hal_spi_is_enabled>
   b5f6a:	2800      	cmp	r0, #0
   b5f6c:	d1df      	bne.n	b5f2e <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f6e:	2001      	movs	r0, #1
   b5f70:	e7de      	b.n	b5f30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f72:	2801      	cmp	r0, #1
   b5f74:	d809      	bhi.n	b5f8a <pinAvailable+0x62>
   b5f76:	f000 f877 	bl	b6068 <_Z19__fetch_global_Wirev>
   b5f7a:	2100      	movs	r1, #0
   b5f7c:	7c00      	ldrb	r0, [r0, #16]
   b5f7e:	f7fe ffad 	bl	b4edc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5f82:	f080 0001 	eor.w	r0, r0, #1
   b5f86:	b2c0      	uxtb	r0, r0
   b5f88:	e7d2      	b.n	b5f30 <pinAvailable+0x8>
   b5f8a:	3809      	subs	r0, #9
   b5f8c:	2801      	cmp	r0, #1
   b5f8e:	d8ee      	bhi.n	b5f6e <pinAvailable+0x46>
   b5f90:	f7ff fe64 	bl	b5c5c <_Z22__fetch_global_Serial1v>
   b5f94:	7c00      	ldrb	r0, [r0, #16]
   b5f96:	f7fe ff51 	bl	b4e3c <hal_usart_is_enabled>
   b5f9a:	e7f2      	b.n	b5f82 <pinAvailable+0x5a>
   b5f9c:	2003e638 	.word	0x2003e638
   b5fa0:	2003e63c 	.word	0x2003e63c

000b5fa4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fa4:	2823      	cmp	r0, #35	; 0x23
{
   b5fa6:	b538      	push	{r3, r4, r5, lr}
   b5fa8:	4604      	mov	r4, r0
   b5faa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fac:	d80a      	bhi.n	b5fc4 <pinMode+0x20>
   b5fae:	29ff      	cmp	r1, #255	; 0xff
   b5fb0:	d008      	beq.n	b5fc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5fb2:	f7ff ffb9 	bl	b5f28 <pinAvailable>
   b5fb6:	b128      	cbz	r0, b5fc4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5fb8:	4629      	mov	r1, r5
   b5fba:	4620      	mov	r0, r4
}
   b5fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5fc0:	f7fe beb4 	b.w	b4d2c <HAL_Pin_Mode>
}
   b5fc4:	bd38      	pop	{r3, r4, r5, pc}

000b5fc6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5fc6:	b538      	push	{r3, r4, r5, lr}
   b5fc8:	4604      	mov	r4, r0
   b5fca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5fcc:	f7fe feb6 	bl	b4d3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5fd0:	28ff      	cmp	r0, #255	; 0xff
   b5fd2:	d010      	beq.n	b5ff6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5fd4:	2806      	cmp	r0, #6
   b5fd6:	d804      	bhi.n	b5fe2 <digitalWrite+0x1c>
   b5fd8:	234d      	movs	r3, #77	; 0x4d
   b5fda:	fa23 f000 	lsr.w	r0, r3, r0
   b5fde:	07c3      	lsls	r3, r0, #31
   b5fe0:	d409      	bmi.n	b5ff6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5fe2:	4620      	mov	r0, r4
   b5fe4:	f7ff ffa0 	bl	b5f28 <pinAvailable>
   b5fe8:	b128      	cbz	r0, b5ff6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5fea:	4629      	mov	r1, r5
   b5fec:	4620      	mov	r0, r4
}
   b5fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5ff2:	f7fe beab 	b.w	b4d4c <HAL_GPIO_Write>
}
   b5ff6:	bd38      	pop	{r3, r4, r5, pc}

000b5ff8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b5ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ffc:	4690      	mov	r8, r2
   b5ffe:	461f      	mov	r7, r3
   b6000:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6002:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6004:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6006:	f1c4 0107 	rsb	r1, r4, #7
   b600a:	f1b8 0f00 	cmp.w	r8, #0
   b600e:	d112      	bne.n	b6036 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6010:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6014:	f001 0101 	and.w	r1, r1, #1
   b6018:	4630      	mov	r0, r6
   b601a:	f7ff ffd4 	bl	b5fc6 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b601e:	2101      	movs	r1, #1
   b6020:	4628      	mov	r0, r5
   b6022:	f7ff ffd0 	bl	b5fc6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6026:	2100      	movs	r1, #0
   b6028:	4628      	mov	r0, r5
   b602a:	f7ff ffcc 	bl	b5fc6 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b602e:	3c01      	subs	r4, #1
   b6030:	d2e9      	bcs.n	b6006 <shiftOut+0xe>
  }
}
   b6032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6036:	fa47 f104 	asr.w	r1, r7, r4
   b603a:	e7eb      	b.n	b6014 <shiftOut+0x1c>

000b603c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b603c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b603e:	2520      	movs	r5, #32
   b6040:	2314      	movs	r3, #20
{
   b6042:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6044:	6003      	str	r3, [r0, #0]
   b6046:	6085      	str	r5, [r0, #8]
   b6048:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b604a:	4906      	ldr	r1, [pc, #24]	; (b6064 <_Z17acquireWireBufferv+0x28>)
   b604c:	4628      	mov	r0, r5
   b604e:	f000 f83a 	bl	b60c6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6052:	4904      	ldr	r1, [pc, #16]	; (b6064 <_Z17acquireWireBufferv+0x28>)
	};
   b6054:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6056:	4628      	mov	r0, r5
   b6058:	f000 f835 	bl	b60c6 <_ZnajRKSt9nothrow_t>
	};
   b605c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b605e:	4620      	mov	r0, r4
   b6060:	bd38      	pop	{r3, r4, r5, pc}
   b6062:	bf00      	nop
   b6064:	000b7148 	.word	0x000b7148

000b6068 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b6068:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b606a:	4d0f      	ldr	r5, [pc, #60]	; (b60a8 <_Z19__fetch_global_Wirev+0x40>)
   b606c:	7829      	ldrb	r1, [r5, #0]
   b606e:	f3bf 8f5b 	dmb	ish
   b6072:	f011 0401 	ands.w	r4, r1, #1
{
   b6076:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6078:	d113      	bne.n	b60a2 <_Z19__fetch_global_Wirev+0x3a>
   b607a:	4628      	mov	r0, r5
   b607c:	f7fe f818 	bl	b40b0 <__cxa_guard_acquire>
   b6080:	b178      	cbz	r0, b60a2 <_Z19__fetch_global_Wirev+0x3a>
   b6082:	a801      	add	r0, sp, #4
   b6084:	f7ff ffda 	bl	b603c <_Z17acquireWireBufferv>
   b6088:	aa01      	add	r2, sp, #4
   b608a:	4621      	mov	r1, r4
   b608c:	4807      	ldr	r0, [pc, #28]	; (b60ac <_Z19__fetch_global_Wirev+0x44>)
   b608e:	f7ff fe3b 	bl	b5d08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6092:	4628      	mov	r0, r5
   b6094:	f7fe f811 	bl	b40ba <__cxa_guard_release>
   b6098:	4a05      	ldr	r2, [pc, #20]	; (b60b0 <_Z19__fetch_global_Wirev+0x48>)
   b609a:	4906      	ldr	r1, [pc, #24]	; (b60b4 <_Z19__fetch_global_Wirev+0x4c>)
   b609c:	4803      	ldr	r0, [pc, #12]	; (b60ac <_Z19__fetch_global_Wirev+0x44>)
   b609e:	f000 f80b 	bl	b60b8 <__aeabi_atexit>
	return wire;
}
   b60a2:	4802      	ldr	r0, [pc, #8]	; (b60ac <_Z19__fetch_global_Wirev+0x44>)
   b60a4:	b007      	add	sp, #28
   b60a6:	bd30      	pop	{r4, r5, pc}
   b60a8:	2003e7dc 	.word	0x2003e7dc
   b60ac:	2003e7e0 	.word	0x2003e7e0
   b60b0:	2003e600 	.word	0x2003e600
   b60b4:	000b5cb1 	.word	0x000b5cb1

000b60b8 <__aeabi_atexit>:
   b60b8:	460b      	mov	r3, r1
   b60ba:	4601      	mov	r1, r0
   b60bc:	4618      	mov	r0, r3
   b60be:	f000 bc4d 	b.w	b695c <__cxa_atexit>

000b60c2 <_ZdlPvj>:
   b60c2:	f7fd bfe8 	b.w	b4096 <_ZdlPv>

000b60c6 <_ZnajRKSt9nothrow_t>:
   b60c6:	f7fd bfe4 	b.w	b4092 <_Znaj>
	...

000b60cc <__aeabi_drsub>:
   b60cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b60d0:	e002      	b.n	b60d8 <__adddf3>
   b60d2:	bf00      	nop

000b60d4 <__aeabi_dsub>:
   b60d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b60d8 <__adddf3>:
   b60d8:	b530      	push	{r4, r5, lr}
   b60da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b60de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b60e2:	ea94 0f05 	teq	r4, r5
   b60e6:	bf08      	it	eq
   b60e8:	ea90 0f02 	teqeq	r0, r2
   b60ec:	bf1f      	itttt	ne
   b60ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   b60f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b60f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b60fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b60fe:	f000 80e2 	beq.w	b62c6 <__adddf3+0x1ee>
   b6102:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6106:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b610a:	bfb8      	it	lt
   b610c:	426d      	neglt	r5, r5
   b610e:	dd0c      	ble.n	b612a <__adddf3+0x52>
   b6110:	442c      	add	r4, r5
   b6112:	ea80 0202 	eor.w	r2, r0, r2
   b6116:	ea81 0303 	eor.w	r3, r1, r3
   b611a:	ea82 0000 	eor.w	r0, r2, r0
   b611e:	ea83 0101 	eor.w	r1, r3, r1
   b6122:	ea80 0202 	eor.w	r2, r0, r2
   b6126:	ea81 0303 	eor.w	r3, r1, r3
   b612a:	2d36      	cmp	r5, #54	; 0x36
   b612c:	bf88      	it	hi
   b612e:	bd30      	pophi	{r4, r5, pc}
   b6130:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6134:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6138:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b613c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6140:	d002      	beq.n	b6148 <__adddf3+0x70>
   b6142:	4240      	negs	r0, r0
   b6144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6148:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b614c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6150:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6154:	d002      	beq.n	b615c <__adddf3+0x84>
   b6156:	4252      	negs	r2, r2
   b6158:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b615c:	ea94 0f05 	teq	r4, r5
   b6160:	f000 80a7 	beq.w	b62b2 <__adddf3+0x1da>
   b6164:	f1a4 0401 	sub.w	r4, r4, #1
   b6168:	f1d5 0e20 	rsbs	lr, r5, #32
   b616c:	db0d      	blt.n	b618a <__adddf3+0xb2>
   b616e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6172:	fa22 f205 	lsr.w	r2, r2, r5
   b6176:	1880      	adds	r0, r0, r2
   b6178:	f141 0100 	adc.w	r1, r1, #0
   b617c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6180:	1880      	adds	r0, r0, r2
   b6182:	fa43 f305 	asr.w	r3, r3, r5
   b6186:	4159      	adcs	r1, r3
   b6188:	e00e      	b.n	b61a8 <__adddf3+0xd0>
   b618a:	f1a5 0520 	sub.w	r5, r5, #32
   b618e:	f10e 0e20 	add.w	lr, lr, #32
   b6192:	2a01      	cmp	r2, #1
   b6194:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6198:	bf28      	it	cs
   b619a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b619e:	fa43 f305 	asr.w	r3, r3, r5
   b61a2:	18c0      	adds	r0, r0, r3
   b61a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b61a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b61ac:	d507      	bpl.n	b61be <__adddf3+0xe6>
   b61ae:	f04f 0e00 	mov.w	lr, #0
   b61b2:	f1dc 0c00 	rsbs	ip, ip, #0
   b61b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b61ba:	eb6e 0101 	sbc.w	r1, lr, r1
   b61be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b61c2:	d31b      	bcc.n	b61fc <__adddf3+0x124>
   b61c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b61c8:	d30c      	bcc.n	b61e4 <__adddf3+0x10c>
   b61ca:	0849      	lsrs	r1, r1, #1
   b61cc:	ea5f 0030 	movs.w	r0, r0, rrx
   b61d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b61d4:	f104 0401 	add.w	r4, r4, #1
   b61d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b61dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b61e0:	f080 809a 	bcs.w	b6318 <__adddf3+0x240>
   b61e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b61e8:	bf08      	it	eq
   b61ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b61ee:	f150 0000 	adcs.w	r0, r0, #0
   b61f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b61f6:	ea41 0105 	orr.w	r1, r1, r5
   b61fa:	bd30      	pop	{r4, r5, pc}
   b61fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6200:	4140      	adcs	r0, r0
   b6202:	eb41 0101 	adc.w	r1, r1, r1
   b6206:	3c01      	subs	r4, #1
   b6208:	bf28      	it	cs
   b620a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b620e:	d2e9      	bcs.n	b61e4 <__adddf3+0x10c>
   b6210:	f091 0f00 	teq	r1, #0
   b6214:	bf04      	itt	eq
   b6216:	4601      	moveq	r1, r0
   b6218:	2000      	moveq	r0, #0
   b621a:	fab1 f381 	clz	r3, r1
   b621e:	bf08      	it	eq
   b6220:	3320      	addeq	r3, #32
   b6222:	f1a3 030b 	sub.w	r3, r3, #11
   b6226:	f1b3 0220 	subs.w	r2, r3, #32
   b622a:	da0c      	bge.n	b6246 <__adddf3+0x16e>
   b622c:	320c      	adds	r2, #12
   b622e:	dd08      	ble.n	b6242 <__adddf3+0x16a>
   b6230:	f102 0c14 	add.w	ip, r2, #20
   b6234:	f1c2 020c 	rsb	r2, r2, #12
   b6238:	fa01 f00c 	lsl.w	r0, r1, ip
   b623c:	fa21 f102 	lsr.w	r1, r1, r2
   b6240:	e00c      	b.n	b625c <__adddf3+0x184>
   b6242:	f102 0214 	add.w	r2, r2, #20
   b6246:	bfd8      	it	le
   b6248:	f1c2 0c20 	rsble	ip, r2, #32
   b624c:	fa01 f102 	lsl.w	r1, r1, r2
   b6250:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6254:	bfdc      	itt	le
   b6256:	ea41 010c 	orrle.w	r1, r1, ip
   b625a:	4090      	lslle	r0, r2
   b625c:	1ae4      	subs	r4, r4, r3
   b625e:	bfa2      	ittt	ge
   b6260:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6264:	4329      	orrge	r1, r5
   b6266:	bd30      	popge	{r4, r5, pc}
   b6268:	ea6f 0404 	mvn.w	r4, r4
   b626c:	3c1f      	subs	r4, #31
   b626e:	da1c      	bge.n	b62aa <__adddf3+0x1d2>
   b6270:	340c      	adds	r4, #12
   b6272:	dc0e      	bgt.n	b6292 <__adddf3+0x1ba>
   b6274:	f104 0414 	add.w	r4, r4, #20
   b6278:	f1c4 0220 	rsb	r2, r4, #32
   b627c:	fa20 f004 	lsr.w	r0, r0, r4
   b6280:	fa01 f302 	lsl.w	r3, r1, r2
   b6284:	ea40 0003 	orr.w	r0, r0, r3
   b6288:	fa21 f304 	lsr.w	r3, r1, r4
   b628c:	ea45 0103 	orr.w	r1, r5, r3
   b6290:	bd30      	pop	{r4, r5, pc}
   b6292:	f1c4 040c 	rsb	r4, r4, #12
   b6296:	f1c4 0220 	rsb	r2, r4, #32
   b629a:	fa20 f002 	lsr.w	r0, r0, r2
   b629e:	fa01 f304 	lsl.w	r3, r1, r4
   b62a2:	ea40 0003 	orr.w	r0, r0, r3
   b62a6:	4629      	mov	r1, r5
   b62a8:	bd30      	pop	{r4, r5, pc}
   b62aa:	fa21 f004 	lsr.w	r0, r1, r4
   b62ae:	4629      	mov	r1, r5
   b62b0:	bd30      	pop	{r4, r5, pc}
   b62b2:	f094 0f00 	teq	r4, #0
   b62b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b62ba:	bf06      	itte	eq
   b62bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b62c0:	3401      	addeq	r4, #1
   b62c2:	3d01      	subne	r5, #1
   b62c4:	e74e      	b.n	b6164 <__adddf3+0x8c>
   b62c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b62ca:	bf18      	it	ne
   b62cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b62d0:	d029      	beq.n	b6326 <__adddf3+0x24e>
   b62d2:	ea94 0f05 	teq	r4, r5
   b62d6:	bf08      	it	eq
   b62d8:	ea90 0f02 	teqeq	r0, r2
   b62dc:	d005      	beq.n	b62ea <__adddf3+0x212>
   b62de:	ea54 0c00 	orrs.w	ip, r4, r0
   b62e2:	bf04      	itt	eq
   b62e4:	4619      	moveq	r1, r3
   b62e6:	4610      	moveq	r0, r2
   b62e8:	bd30      	pop	{r4, r5, pc}
   b62ea:	ea91 0f03 	teq	r1, r3
   b62ee:	bf1e      	ittt	ne
   b62f0:	2100      	movne	r1, #0
   b62f2:	2000      	movne	r0, #0
   b62f4:	bd30      	popne	{r4, r5, pc}
   b62f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b62fa:	d105      	bne.n	b6308 <__adddf3+0x230>
   b62fc:	0040      	lsls	r0, r0, #1
   b62fe:	4149      	adcs	r1, r1
   b6300:	bf28      	it	cs
   b6302:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6306:	bd30      	pop	{r4, r5, pc}
   b6308:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b630c:	bf3c      	itt	cc
   b630e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6312:	bd30      	popcc	{r4, r5, pc}
   b6314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6318:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b631c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6320:	f04f 0000 	mov.w	r0, #0
   b6324:	bd30      	pop	{r4, r5, pc}
   b6326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b632a:	bf1a      	itte	ne
   b632c:	4619      	movne	r1, r3
   b632e:	4610      	movne	r0, r2
   b6330:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6334:	bf1c      	itt	ne
   b6336:	460b      	movne	r3, r1
   b6338:	4602      	movne	r2, r0
   b633a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b633e:	bf06      	itte	eq
   b6340:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6344:	ea91 0f03 	teqeq	r1, r3
   b6348:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b634c:	bd30      	pop	{r4, r5, pc}
   b634e:	bf00      	nop

000b6350 <__aeabi_ui2d>:
   b6350:	f090 0f00 	teq	r0, #0
   b6354:	bf04      	itt	eq
   b6356:	2100      	moveq	r1, #0
   b6358:	4770      	bxeq	lr
   b635a:	b530      	push	{r4, r5, lr}
   b635c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6360:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6364:	f04f 0500 	mov.w	r5, #0
   b6368:	f04f 0100 	mov.w	r1, #0
   b636c:	e750      	b.n	b6210 <__adddf3+0x138>
   b636e:	bf00      	nop

000b6370 <__aeabi_i2d>:
   b6370:	f090 0f00 	teq	r0, #0
   b6374:	bf04      	itt	eq
   b6376:	2100      	moveq	r1, #0
   b6378:	4770      	bxeq	lr
   b637a:	b530      	push	{r4, r5, lr}
   b637c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6380:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6384:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6388:	bf48      	it	mi
   b638a:	4240      	negmi	r0, r0
   b638c:	f04f 0100 	mov.w	r1, #0
   b6390:	e73e      	b.n	b6210 <__adddf3+0x138>
   b6392:	bf00      	nop

000b6394 <__aeabi_f2d>:
   b6394:	0042      	lsls	r2, r0, #1
   b6396:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b639a:	ea4f 0131 	mov.w	r1, r1, rrx
   b639e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b63a2:	bf1f      	itttt	ne
   b63a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b63a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b63ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b63b0:	4770      	bxne	lr
   b63b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b63b6:	bf08      	it	eq
   b63b8:	4770      	bxeq	lr
   b63ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b63be:	bf04      	itt	eq
   b63c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b63c4:	4770      	bxeq	lr
   b63c6:	b530      	push	{r4, r5, lr}
   b63c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b63cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b63d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b63d4:	e71c      	b.n	b6210 <__adddf3+0x138>
   b63d6:	bf00      	nop

000b63d8 <__aeabi_ul2d>:
   b63d8:	ea50 0201 	orrs.w	r2, r0, r1
   b63dc:	bf08      	it	eq
   b63de:	4770      	bxeq	lr
   b63e0:	b530      	push	{r4, r5, lr}
   b63e2:	f04f 0500 	mov.w	r5, #0
   b63e6:	e00a      	b.n	b63fe <__aeabi_l2d+0x16>

000b63e8 <__aeabi_l2d>:
   b63e8:	ea50 0201 	orrs.w	r2, r0, r1
   b63ec:	bf08      	it	eq
   b63ee:	4770      	bxeq	lr
   b63f0:	b530      	push	{r4, r5, lr}
   b63f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b63f6:	d502      	bpl.n	b63fe <__aeabi_l2d+0x16>
   b63f8:	4240      	negs	r0, r0
   b63fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b63fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6402:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6406:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b640a:	f43f aed8 	beq.w	b61be <__adddf3+0xe6>
   b640e:	f04f 0203 	mov.w	r2, #3
   b6412:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6416:	bf18      	it	ne
   b6418:	3203      	addne	r2, #3
   b641a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b641e:	bf18      	it	ne
   b6420:	3203      	addne	r2, #3
   b6422:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6426:	f1c2 0320 	rsb	r3, r2, #32
   b642a:	fa00 fc03 	lsl.w	ip, r0, r3
   b642e:	fa20 f002 	lsr.w	r0, r0, r2
   b6432:	fa01 fe03 	lsl.w	lr, r1, r3
   b6436:	ea40 000e 	orr.w	r0, r0, lr
   b643a:	fa21 f102 	lsr.w	r1, r1, r2
   b643e:	4414      	add	r4, r2
   b6440:	e6bd      	b.n	b61be <__adddf3+0xe6>
   b6442:	bf00      	nop

000b6444 <__aeabi_dmul>:
   b6444:	b570      	push	{r4, r5, r6, lr}
   b6446:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b644a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b644e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6452:	bf1d      	ittte	ne
   b6454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6458:	ea94 0f0c 	teqne	r4, ip
   b645c:	ea95 0f0c 	teqne	r5, ip
   b6460:	f000 f8de 	bleq	b6620 <__aeabi_dmul+0x1dc>
   b6464:	442c      	add	r4, r5
   b6466:	ea81 0603 	eor.w	r6, r1, r3
   b646a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b646e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6472:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6476:	bf18      	it	ne
   b6478:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b647c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6484:	d038      	beq.n	b64f8 <__aeabi_dmul+0xb4>
   b6486:	fba0 ce02 	umull	ip, lr, r0, r2
   b648a:	f04f 0500 	mov.w	r5, #0
   b648e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6492:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6496:	fbe0 e503 	umlal	lr, r5, r0, r3
   b649a:	f04f 0600 	mov.w	r6, #0
   b649e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b64a2:	f09c 0f00 	teq	ip, #0
   b64a6:	bf18      	it	ne
   b64a8:	f04e 0e01 	orrne.w	lr, lr, #1
   b64ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b64b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b64b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b64b8:	d204      	bcs.n	b64c4 <__aeabi_dmul+0x80>
   b64ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b64be:	416d      	adcs	r5, r5
   b64c0:	eb46 0606 	adc.w	r6, r6, r6
   b64c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b64c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b64cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b64d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b64d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b64d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b64dc:	bf88      	it	hi
   b64de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b64e2:	d81e      	bhi.n	b6522 <__aeabi_dmul+0xde>
   b64e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b64e8:	bf08      	it	eq
   b64ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b64ee:	f150 0000 	adcs.w	r0, r0, #0
   b64f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b64f6:	bd70      	pop	{r4, r5, r6, pc}
   b64f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b64fc:	ea46 0101 	orr.w	r1, r6, r1
   b6500:	ea40 0002 	orr.w	r0, r0, r2
   b6504:	ea81 0103 	eor.w	r1, r1, r3
   b6508:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b650c:	bfc2      	ittt	gt
   b650e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6516:	bd70      	popgt	{r4, r5, r6, pc}
   b6518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b651c:	f04f 0e00 	mov.w	lr, #0
   b6520:	3c01      	subs	r4, #1
   b6522:	f300 80ab 	bgt.w	b667c <__aeabi_dmul+0x238>
   b6526:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b652a:	bfde      	ittt	le
   b652c:	2000      	movle	r0, #0
   b652e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6532:	bd70      	pople	{r4, r5, r6, pc}
   b6534:	f1c4 0400 	rsb	r4, r4, #0
   b6538:	3c20      	subs	r4, #32
   b653a:	da35      	bge.n	b65a8 <__aeabi_dmul+0x164>
   b653c:	340c      	adds	r4, #12
   b653e:	dc1b      	bgt.n	b6578 <__aeabi_dmul+0x134>
   b6540:	f104 0414 	add.w	r4, r4, #20
   b6544:	f1c4 0520 	rsb	r5, r4, #32
   b6548:	fa00 f305 	lsl.w	r3, r0, r5
   b654c:	fa20 f004 	lsr.w	r0, r0, r4
   b6550:	fa01 f205 	lsl.w	r2, r1, r5
   b6554:	ea40 0002 	orr.w	r0, r0, r2
   b6558:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b655c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6564:	fa21 f604 	lsr.w	r6, r1, r4
   b6568:	eb42 0106 	adc.w	r1, r2, r6
   b656c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6570:	bf08      	it	eq
   b6572:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6576:	bd70      	pop	{r4, r5, r6, pc}
   b6578:	f1c4 040c 	rsb	r4, r4, #12
   b657c:	f1c4 0520 	rsb	r5, r4, #32
   b6580:	fa00 f304 	lsl.w	r3, r0, r4
   b6584:	fa20 f005 	lsr.w	r0, r0, r5
   b6588:	fa01 f204 	lsl.w	r2, r1, r4
   b658c:	ea40 0002 	orr.w	r0, r0, r2
   b6590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6598:	f141 0100 	adc.w	r1, r1, #0
   b659c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b65a0:	bf08      	it	eq
   b65a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b65a6:	bd70      	pop	{r4, r5, r6, pc}
   b65a8:	f1c4 0520 	rsb	r5, r4, #32
   b65ac:	fa00 f205 	lsl.w	r2, r0, r5
   b65b0:	ea4e 0e02 	orr.w	lr, lr, r2
   b65b4:	fa20 f304 	lsr.w	r3, r0, r4
   b65b8:	fa01 f205 	lsl.w	r2, r1, r5
   b65bc:	ea43 0302 	orr.w	r3, r3, r2
   b65c0:	fa21 f004 	lsr.w	r0, r1, r4
   b65c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b65c8:	fa21 f204 	lsr.w	r2, r1, r4
   b65cc:	ea20 0002 	bic.w	r0, r0, r2
   b65d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b65d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b65d8:	bf08      	it	eq
   b65da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b65de:	bd70      	pop	{r4, r5, r6, pc}
   b65e0:	f094 0f00 	teq	r4, #0
   b65e4:	d10f      	bne.n	b6606 <__aeabi_dmul+0x1c2>
   b65e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b65ea:	0040      	lsls	r0, r0, #1
   b65ec:	eb41 0101 	adc.w	r1, r1, r1
   b65f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b65f4:	bf08      	it	eq
   b65f6:	3c01      	subeq	r4, #1
   b65f8:	d0f7      	beq.n	b65ea <__aeabi_dmul+0x1a6>
   b65fa:	ea41 0106 	orr.w	r1, r1, r6
   b65fe:	f095 0f00 	teq	r5, #0
   b6602:	bf18      	it	ne
   b6604:	4770      	bxne	lr
   b6606:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b660a:	0052      	lsls	r2, r2, #1
   b660c:	eb43 0303 	adc.w	r3, r3, r3
   b6610:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6614:	bf08      	it	eq
   b6616:	3d01      	subeq	r5, #1
   b6618:	d0f7      	beq.n	b660a <__aeabi_dmul+0x1c6>
   b661a:	ea43 0306 	orr.w	r3, r3, r6
   b661e:	4770      	bx	lr
   b6620:	ea94 0f0c 	teq	r4, ip
   b6624:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6628:	bf18      	it	ne
   b662a:	ea95 0f0c 	teqne	r5, ip
   b662e:	d00c      	beq.n	b664a <__aeabi_dmul+0x206>
   b6630:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6634:	bf18      	it	ne
   b6636:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b663a:	d1d1      	bne.n	b65e0 <__aeabi_dmul+0x19c>
   b663c:	ea81 0103 	eor.w	r1, r1, r3
   b6640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6644:	f04f 0000 	mov.w	r0, #0
   b6648:	bd70      	pop	{r4, r5, r6, pc}
   b664a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b664e:	bf06      	itte	eq
   b6650:	4610      	moveq	r0, r2
   b6652:	4619      	moveq	r1, r3
   b6654:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6658:	d019      	beq.n	b668e <__aeabi_dmul+0x24a>
   b665a:	ea94 0f0c 	teq	r4, ip
   b665e:	d102      	bne.n	b6666 <__aeabi_dmul+0x222>
   b6660:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6664:	d113      	bne.n	b668e <__aeabi_dmul+0x24a>
   b6666:	ea95 0f0c 	teq	r5, ip
   b666a:	d105      	bne.n	b6678 <__aeabi_dmul+0x234>
   b666c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6670:	bf1c      	itt	ne
   b6672:	4610      	movne	r0, r2
   b6674:	4619      	movne	r1, r3
   b6676:	d10a      	bne.n	b668e <__aeabi_dmul+0x24a>
   b6678:	ea81 0103 	eor.w	r1, r1, r3
   b667c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6680:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6688:	f04f 0000 	mov.w	r0, #0
   b668c:	bd70      	pop	{r4, r5, r6, pc}
   b668e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6692:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6696:	bd70      	pop	{r4, r5, r6, pc}

000b6698 <__aeabi_ddiv>:
   b6698:	b570      	push	{r4, r5, r6, lr}
   b669a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b669e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b66a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b66a6:	bf1d      	ittte	ne
   b66a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b66ac:	ea94 0f0c 	teqne	r4, ip
   b66b0:	ea95 0f0c 	teqne	r5, ip
   b66b4:	f000 f8a7 	bleq	b6806 <__aeabi_ddiv+0x16e>
   b66b8:	eba4 0405 	sub.w	r4, r4, r5
   b66bc:	ea81 0e03 	eor.w	lr, r1, r3
   b66c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b66c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b66c8:	f000 8088 	beq.w	b67dc <__aeabi_ddiv+0x144>
   b66cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b66d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b66d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b66d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b66dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b66e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b66e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b66e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b66ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b66f0:	429d      	cmp	r5, r3
   b66f2:	bf08      	it	eq
   b66f4:	4296      	cmpeq	r6, r2
   b66f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b66fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b66fe:	d202      	bcs.n	b6706 <__aeabi_ddiv+0x6e>
   b6700:	085b      	lsrs	r3, r3, #1
   b6702:	ea4f 0232 	mov.w	r2, r2, rrx
   b6706:	1ab6      	subs	r6, r6, r2
   b6708:	eb65 0503 	sbc.w	r5, r5, r3
   b670c:	085b      	lsrs	r3, r3, #1
   b670e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6716:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b671a:	ebb6 0e02 	subs.w	lr, r6, r2
   b671e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6722:	bf22      	ittt	cs
   b6724:	1ab6      	subcs	r6, r6, r2
   b6726:	4675      	movcs	r5, lr
   b6728:	ea40 000c 	orrcs.w	r0, r0, ip
   b672c:	085b      	lsrs	r3, r3, #1
   b672e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6732:	ebb6 0e02 	subs.w	lr, r6, r2
   b6736:	eb75 0e03 	sbcs.w	lr, r5, r3
   b673a:	bf22      	ittt	cs
   b673c:	1ab6      	subcs	r6, r6, r2
   b673e:	4675      	movcs	r5, lr
   b6740:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6744:	085b      	lsrs	r3, r3, #1
   b6746:	ea4f 0232 	mov.w	r2, r2, rrx
   b674a:	ebb6 0e02 	subs.w	lr, r6, r2
   b674e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6752:	bf22      	ittt	cs
   b6754:	1ab6      	subcs	r6, r6, r2
   b6756:	4675      	movcs	r5, lr
   b6758:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b675c:	085b      	lsrs	r3, r3, #1
   b675e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6762:	ebb6 0e02 	subs.w	lr, r6, r2
   b6766:	eb75 0e03 	sbcs.w	lr, r5, r3
   b676a:	bf22      	ittt	cs
   b676c:	1ab6      	subcs	r6, r6, r2
   b676e:	4675      	movcs	r5, lr
   b6770:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6774:	ea55 0e06 	orrs.w	lr, r5, r6
   b6778:	d018      	beq.n	b67ac <__aeabi_ddiv+0x114>
   b677a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b677e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6782:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6786:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b678a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b678e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6792:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6796:	d1c0      	bne.n	b671a <__aeabi_ddiv+0x82>
   b6798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b679c:	d10b      	bne.n	b67b6 <__aeabi_ddiv+0x11e>
   b679e:	ea41 0100 	orr.w	r1, r1, r0
   b67a2:	f04f 0000 	mov.w	r0, #0
   b67a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b67aa:	e7b6      	b.n	b671a <__aeabi_ddiv+0x82>
   b67ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b67b0:	bf04      	itt	eq
   b67b2:	4301      	orreq	r1, r0
   b67b4:	2000      	moveq	r0, #0
   b67b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b67ba:	bf88      	it	hi
   b67bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b67c0:	f63f aeaf 	bhi.w	b6522 <__aeabi_dmul+0xde>
   b67c4:	ebb5 0c03 	subs.w	ip, r5, r3
   b67c8:	bf04      	itt	eq
   b67ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   b67ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b67d2:	f150 0000 	adcs.w	r0, r0, #0
   b67d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b67da:	bd70      	pop	{r4, r5, r6, pc}
   b67dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b67e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b67e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b67e8:	bfc2      	ittt	gt
   b67ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   b67ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b67f2:	bd70      	popgt	{r4, r5, r6, pc}
   b67f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b67f8:	f04f 0e00 	mov.w	lr, #0
   b67fc:	3c01      	subs	r4, #1
   b67fe:	e690      	b.n	b6522 <__aeabi_dmul+0xde>
   b6800:	ea45 0e06 	orr.w	lr, r5, r6
   b6804:	e68d      	b.n	b6522 <__aeabi_dmul+0xde>
   b6806:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b680a:	ea94 0f0c 	teq	r4, ip
   b680e:	bf08      	it	eq
   b6810:	ea95 0f0c 	teqeq	r5, ip
   b6814:	f43f af3b 	beq.w	b668e <__aeabi_dmul+0x24a>
   b6818:	ea94 0f0c 	teq	r4, ip
   b681c:	d10a      	bne.n	b6834 <__aeabi_ddiv+0x19c>
   b681e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6822:	f47f af34 	bne.w	b668e <__aeabi_dmul+0x24a>
   b6826:	ea95 0f0c 	teq	r5, ip
   b682a:	f47f af25 	bne.w	b6678 <__aeabi_dmul+0x234>
   b682e:	4610      	mov	r0, r2
   b6830:	4619      	mov	r1, r3
   b6832:	e72c      	b.n	b668e <__aeabi_dmul+0x24a>
   b6834:	ea95 0f0c 	teq	r5, ip
   b6838:	d106      	bne.n	b6848 <__aeabi_ddiv+0x1b0>
   b683a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b683e:	f43f aefd 	beq.w	b663c <__aeabi_dmul+0x1f8>
   b6842:	4610      	mov	r0, r2
   b6844:	4619      	mov	r1, r3
   b6846:	e722      	b.n	b668e <__aeabi_dmul+0x24a>
   b6848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b684c:	bf18      	it	ne
   b684e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6852:	f47f aec5 	bne.w	b65e0 <__aeabi_dmul+0x19c>
   b6856:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b685a:	f47f af0d 	bne.w	b6678 <__aeabi_dmul+0x234>
   b685e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6862:	f47f aeeb 	bne.w	b663c <__aeabi_dmul+0x1f8>
   b6866:	e712      	b.n	b668e <__aeabi_dmul+0x24a>

000b6868 <__aeabi_d2uiz>:
   b6868:	004a      	lsls	r2, r1, #1
   b686a:	d211      	bcs.n	b6890 <__aeabi_d2uiz+0x28>
   b686c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6870:	d211      	bcs.n	b6896 <__aeabi_d2uiz+0x2e>
   b6872:	d50d      	bpl.n	b6890 <__aeabi_d2uiz+0x28>
   b6874:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6878:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b687c:	d40e      	bmi.n	b689c <__aeabi_d2uiz+0x34>
   b687e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6886:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b688a:	fa23 f002 	lsr.w	r0, r3, r2
   b688e:	4770      	bx	lr
   b6890:	f04f 0000 	mov.w	r0, #0
   b6894:	4770      	bx	lr
   b6896:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b689a:	d102      	bne.n	b68a2 <__aeabi_d2uiz+0x3a>
   b689c:	f04f 30ff 	mov.w	r0, #4294967295
   b68a0:	4770      	bx	lr
   b68a2:	f04f 0000 	mov.w	r0, #0
   b68a6:	4770      	bx	lr

000b68a8 <__aeabi_f2lz>:
   b68a8:	ee07 0a90 	vmov	s15, r0
   b68ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b68b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b68b4:	d401      	bmi.n	b68ba <__aeabi_f2lz+0x12>
   b68b6:	f000 b80b 	b.w	b68d0 <__aeabi_f2ulz>
   b68ba:	eef1 7a67 	vneg.f32	s15, s15
   b68be:	b508      	push	{r3, lr}
   b68c0:	ee17 0a90 	vmov	r0, s15
   b68c4:	f000 f804 	bl	b68d0 <__aeabi_f2ulz>
   b68c8:	4240      	negs	r0, r0
   b68ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b68ce:	bd08      	pop	{r3, pc}

000b68d0 <__aeabi_f2ulz>:
   b68d0:	b5d0      	push	{r4, r6, r7, lr}
   b68d2:	f7ff fd5f 	bl	b6394 <__aeabi_f2d>
   b68d6:	4b0c      	ldr	r3, [pc, #48]	; (b6908 <__aeabi_f2ulz+0x38>)
   b68d8:	2200      	movs	r2, #0
   b68da:	4606      	mov	r6, r0
   b68dc:	460f      	mov	r7, r1
   b68de:	f7ff fdb1 	bl	b6444 <__aeabi_dmul>
   b68e2:	f7ff ffc1 	bl	b6868 <__aeabi_d2uiz>
   b68e6:	4604      	mov	r4, r0
   b68e8:	f7ff fd32 	bl	b6350 <__aeabi_ui2d>
   b68ec:	4b07      	ldr	r3, [pc, #28]	; (b690c <__aeabi_f2ulz+0x3c>)
   b68ee:	2200      	movs	r2, #0
   b68f0:	f7ff fda8 	bl	b6444 <__aeabi_dmul>
   b68f4:	4602      	mov	r2, r0
   b68f6:	460b      	mov	r3, r1
   b68f8:	4630      	mov	r0, r6
   b68fa:	4639      	mov	r1, r7
   b68fc:	f7ff fbea 	bl	b60d4 <__aeabi_dsub>
   b6900:	f7ff ffb2 	bl	b6868 <__aeabi_d2uiz>
   b6904:	4621      	mov	r1, r4
   b6906:	bdd0      	pop	{r4, r6, r7, pc}
   b6908:	3df00000 	.word	0x3df00000
   b690c:	41f00000 	.word	0x41f00000

000b6910 <asctime_r>:
   b6910:	b510      	push	{r4, lr}
   b6912:	460c      	mov	r4, r1
   b6914:	6941      	ldr	r1, [r0, #20]
   b6916:	6903      	ldr	r3, [r0, #16]
   b6918:	6982      	ldr	r2, [r0, #24]
   b691a:	b086      	sub	sp, #24
   b691c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b6920:	9104      	str	r1, [sp, #16]
   b6922:	6801      	ldr	r1, [r0, #0]
   b6924:	9103      	str	r1, [sp, #12]
   b6926:	6841      	ldr	r1, [r0, #4]
   b6928:	9102      	str	r1, [sp, #8]
   b692a:	6881      	ldr	r1, [r0, #8]
   b692c:	9101      	str	r1, [sp, #4]
   b692e:	68c1      	ldr	r1, [r0, #12]
   b6930:	9100      	str	r1, [sp, #0]
   b6932:	4907      	ldr	r1, [pc, #28]	; (b6950 <asctime_r+0x40>)
   b6934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6938:	440b      	add	r3, r1
   b693a:	4906      	ldr	r1, [pc, #24]	; (b6954 <asctime_r+0x44>)
   b693c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b6940:	440a      	add	r2, r1
   b6942:	4620      	mov	r0, r4
   b6944:	4904      	ldr	r1, [pc, #16]	; (b6958 <asctime_r+0x48>)
   b6946:	f7fe fc3d 	bl	b51c4 <siprintf>
   b694a:	4620      	mov	r0, r4
   b694c:	b006      	add	sp, #24
   b694e:	bd10      	pop	{r4, pc}
   b6950:	000b717e 	.word	0x000b717e
   b6954:	000b7169 	.word	0x000b7169
   b6958:	000b7149 	.word	0x000b7149

000b695c <__cxa_atexit>:
   b695c:	b510      	push	{r4, lr}
   b695e:	4c05      	ldr	r4, [pc, #20]	; (b6974 <__cxa_atexit+0x18>)
   b6960:	4613      	mov	r3, r2
   b6962:	b12c      	cbz	r4, b6970 <__cxa_atexit+0x14>
   b6964:	460a      	mov	r2, r1
   b6966:	4601      	mov	r1, r0
   b6968:	2002      	movs	r0, #2
   b696a:	f3af 8000 	nop.w
   b696e:	bd10      	pop	{r4, pc}
   b6970:	4620      	mov	r0, r4
   b6972:	e7fc      	b.n	b696e <__cxa_atexit+0x12>
   b6974:	00000000 	.word	0x00000000

000b6978 <memcpy>:
   b6978:	440a      	add	r2, r1
   b697a:	4291      	cmp	r1, r2
   b697c:	f100 33ff 	add.w	r3, r0, #4294967295
   b6980:	d100      	bne.n	b6984 <memcpy+0xc>
   b6982:	4770      	bx	lr
   b6984:	b510      	push	{r4, lr}
   b6986:	f811 4b01 	ldrb.w	r4, [r1], #1
   b698a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b698e:	4291      	cmp	r1, r2
   b6990:	d1f9      	bne.n	b6986 <memcpy+0xe>
   b6992:	bd10      	pop	{r4, pc}

000b6994 <memset>:
   b6994:	4402      	add	r2, r0
   b6996:	4603      	mov	r3, r0
   b6998:	4293      	cmp	r3, r2
   b699a:	d100      	bne.n	b699e <memset+0xa>
   b699c:	4770      	bx	lr
   b699e:	f803 1b01 	strb.w	r1, [r3], #1
   b69a2:	e7f9      	b.n	b6998 <memset+0x4>

000b69a4 <srand>:
   b69a4:	b538      	push	{r3, r4, r5, lr}
   b69a6:	4b10      	ldr	r3, [pc, #64]	; (b69e8 <srand+0x44>)
   b69a8:	681d      	ldr	r5, [r3, #0]
   b69aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b69ac:	4604      	mov	r4, r0
   b69ae:	b9b3      	cbnz	r3, b69de <srand+0x3a>
   b69b0:	2018      	movs	r0, #24
   b69b2:	f7fe fbef 	bl	b5194 <malloc>
   b69b6:	4602      	mov	r2, r0
   b69b8:	63a8      	str	r0, [r5, #56]	; 0x38
   b69ba:	b920      	cbnz	r0, b69c6 <srand+0x22>
   b69bc:	4b0b      	ldr	r3, [pc, #44]	; (b69ec <srand+0x48>)
   b69be:	480c      	ldr	r0, [pc, #48]	; (b69f0 <srand+0x4c>)
   b69c0:	2142      	movs	r1, #66	; 0x42
   b69c2:	f7fe fc0f 	bl	b51e4 <__assert_func>
   b69c6:	490b      	ldr	r1, [pc, #44]	; (b69f4 <srand+0x50>)
   b69c8:	4b0b      	ldr	r3, [pc, #44]	; (b69f8 <srand+0x54>)
   b69ca:	e9c0 1300 	strd	r1, r3, [r0]
   b69ce:	4b0b      	ldr	r3, [pc, #44]	; (b69fc <srand+0x58>)
   b69d0:	6083      	str	r3, [r0, #8]
   b69d2:	230b      	movs	r3, #11
   b69d4:	8183      	strh	r3, [r0, #12]
   b69d6:	2100      	movs	r1, #0
   b69d8:	2001      	movs	r0, #1
   b69da:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b69de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b69e0:	2200      	movs	r2, #0
   b69e2:	611c      	str	r4, [r3, #16]
   b69e4:	615a      	str	r2, [r3, #20]
   b69e6:	bd38      	pop	{r3, r4, r5, pc}
   b69e8:	2003e598 	.word	0x2003e598
   b69ec:	000b71a2 	.word	0x000b71a2
   b69f0:	000b71b9 	.word	0x000b71b9
   b69f4:	abcd330e 	.word	0xabcd330e
   b69f8:	e66d1234 	.word	0xe66d1234
   b69fc:	0005deec 	.word	0x0005deec

000b6a00 <strcpy>:
   b6a00:	4603      	mov	r3, r0
   b6a02:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6a06:	f803 2b01 	strb.w	r2, [r3], #1
   b6a0a:	2a00      	cmp	r2, #0
   b6a0c:	d1f9      	bne.n	b6a02 <strcpy+0x2>
   b6a0e:	4770      	bx	lr

000b6a10 <strlen>:
   b6a10:	4603      	mov	r3, r0
   b6a12:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6a16:	2a00      	cmp	r2, #0
   b6a18:	d1fb      	bne.n	b6a12 <strlen+0x2>
   b6a1a:	1a18      	subs	r0, r3, r0
   b6a1c:	3801      	subs	r0, #1
   b6a1e:	4770      	bx	lr

000b6a20 <dynalib_user>:
   b6a20:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6a30:	0000 0000 794d 6e20 6d61 2065 7369 4220     ....My name is B
   b6a40:	6972 6e61 000a 4e55 5849 4420 7461 2065     rian..UNIX Date 
   b6a50:	7369 2520 0a73 5400 6d69 2065 7369 2520     is %s..Time is %
   b6a60:	0a73 0000                                   s...

000b6a64 <_ZTV16Adafruit_SSD1306>:
	...
   b6a6c:	40c1 000b 421d 000b 4c7d 000b 55e1 000b     .@...B..}L...U..
   b6a7c:	455d 000b 4995 000b 43e9 000b 4279 000b     ]E...I...C..yB..
   b6a8c:	4a53 000b 4af1 000b 4b27 000b 4b43 000b     SJ...J..'K..CK..

000b6a9c <_ZL4font>:
   b6a9c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6aac:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6abc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6acc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6adc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b6aec:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b6afc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b6b0c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b6b1c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6b2c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6b3c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6b4c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6b5c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6b6c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6b7c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6b8c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6b9c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6bac:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6bbc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6bcc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6bdc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b6bec:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b6bfc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b6c0c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b6c1c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6c2c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6c3c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6c4c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6c5c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6c6c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6c7c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6c8c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6c9c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6cac:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6cbc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6ccc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6cdc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6cec:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6cfc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6d0c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6d1c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6d2c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b6d3c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6d4c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6d5c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6d6c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6d7c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6d8c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6d9c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6dac:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6dbc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6dcc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6ddc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6dec:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6dfc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6e0c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b6e1c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b6e2c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b6e3c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6e4c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6e5c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6e6c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6e7c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6e8c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6e9c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6eac:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6ebc:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6ecc:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6edc:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b6eec:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b6efc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b6f0c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b6f1c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b6f2c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b6f3c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b6f4c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b6f5c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b6f6c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b6f7c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b6f8c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b6f98 <_ZTV12Adafruit_GFX>:
	...
   b6fa8:	4c7d 000b 55e1 000b 409d 000b 4995 000b     }L...U...@...I..
   b6fb8:	4abb 000b 4ad7 000b 4a53 000b 4af1 000b     .J...J..SJ...J..
   b6fc8:	4b27 000b 4b43 000b                         'K..CK..

000b6fd0 <_ZTVN5spark13EthernetClassE>:
	...
   b6fd8:	5273 000b 5269 000b 525f 000b 5255 000b     sR..iR.._R..UR..
   b6fe8:	5249 000b 523d 000b 5e05 000b 5e0d 000b     IR..=R...^...^..
   b6ff8:	5231 000b 5229 000b 521f 000b 5215 000b     1R..)R...R...R..
   b7008:	5e3d 000b                                   =^..

000b700c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b700c:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b701c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b702c:	7361 7463 6d69 0065                         asctime.

000b7034 <_ZTV9IPAddress>:
	...
   b703c:	59c5 000b 59b5 000b 59b7 000b               .Y...Y...Y..

000b7048 <_ZTV9USBSerial>:
	...
   b7050:	5aa9 000b 5b11 000b 5ae7 000b 55e1 000b     .Z...[...Z...U..
   b7060:	5ad9 000b 5aab 000b 5abb 000b 5b0b 000b     .Z...Z...Z...[..
   b7070:	5acb 000b 5aa5 000b                         .Z...Z..

000b7078 <_ZTV11USARTSerial>:
	...
   b7080:	5bb5 000b 5c21 000b 5bf9 000b 55e1 000b     .[..!\...[...U..
   b7090:	5bc9 000b 5be5 000b 5bd7 000b 5bf3 000b     .[...[...[...[..
   b70a0:	5bb7 000b 5bbb 000b                         .[...[..

000b70a8 <_ZTV7TwoWire>:
	...
   b70b0:	5cb1 000b 5cfb 000b 5cd3 000b 5cb3 000b     .\...\...\...\..
   b70c0:	5cdb 000b 5ce3 000b 5ceb 000b 5cf3 000b     .\...\...\...\..

000b70d0 <_ZTVN5spark9WiFiClassE>:
	...
   b70d8:	5da7 000b 5d9d 000b 5d93 000b 5d55 000b     .]...]...]..U]..
   b70e8:	56ed 000b 5d87 000b 5e05 000b 5e0d 000b     .V...]...^...^..
   b70f8:	5d7b 000b 5d73 000b 5d69 000b 5d5f 000b     {]..s]..i].._]..
   b7108:	5e3d 000b                                   =^..

000b710c <_ZTVN5spark12NetworkClassE>:
	...
   b7114:	5dc5 000b 5dcf 000b 5dd9 000b 5de3 000b     .]...]...]...]..
   b7124:	5ded 000b 5df9 000b 5e05 000b 5e0d 000b     .]...]...^...^..
   b7134:	5e15 000b 5e21 000b 5e29 000b 5e33 000b     .^..!^..)^..3^..
   b7144:	5e3d 000b                                   =^..

000b7148 <_ZSt7nothrow>:
   b7148:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b7158:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b7169 <day_name.1>:
   b7169:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b7179:	6972 6153                                    riSat

000b717e <mon_name.0>:
   b717e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b718e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b719e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b71ae:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b71be:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b71ce:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b71de:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b71ee:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b71fe:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b720e:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b721e:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b722e:	722f 6e61 2e64 0063                         /rand.c.

000b7236 <link_const_variable_data_end>:
	...

000b7238 <link_constructors_location>:
   b7238:	000b422d 	.word	0x000b422d
   b723c:	000b527d 	.word	0x000b527d
   b7240:	000b5411 	.word	0x000b5411
   b7244:	000b55b9 	.word	0x000b55b9
   b7248:	000b56f9 	.word	0x000b56f9
   b724c:	000b5839 	.word	0x000b5839
   b7250:	000b5861 	.word	0x000b5861
   b7254:	000b5db1 	.word	0x000b5db1
   b7258:	000b5f15 	.word	0x000b5f15

000b725c <link_constructors_end>:
   b725c:	00000000 	.word	0x00000000

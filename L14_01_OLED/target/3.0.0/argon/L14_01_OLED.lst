
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/L14_Moisture/L14_01_OLED/target/3.0.0/argon/L14_01_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003114  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7130  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e18c  000d7134  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001ec  2003e608  2003e608  0002e608  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d75ac  000d75ac  000275ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75d4  000d75d4  000275d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017e43d  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016a30  00000000  00000000  001a5a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00034b17  00000000  00000000  001bc445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b88  00000000  00000000  001f0f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008d80  00000000  00000000  001f3ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038a2f  00000000  00000000  001fc864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003cf7a  00000000  00000000  00235293  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001227d5  00000000  00000000  0027220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007a24  00000000  00000000  003949e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc67 	bl	d6900 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc6f 	bl	d691c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e18c 	.word	0x2003e18c
   d4048:	000d7134 	.word	0x000d7134
   d404c:	2003e604 	.word	0x2003e604
   d4050:	2003e608 	.word	0x2003e608
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fc39 	bl	d58d4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7108 	.word	0x000d7108
   d407c:	000d712c 	.word	0x000d712c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b82e 	b.w	d40e0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8a1 	bl	d41cc <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bbe3 	b.w	d5858 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 b84b 	b.w	d512c <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 b851 	b.w	d513c <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 ff7e 	bl	d4fa4 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d4d15 	.word	0x000d4d15

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	b40e      	push	{r1, r2, r3}
   d40c4:	b503      	push	{r0, r1, lr}
   d40c6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ca:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ce:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40d0:	f001 faab 	bl	d562a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40d4:	b002      	add	sp, #8
   d40d6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40da:	b003      	add	sp, #12
   d40dc:	4770      	bx	lr
	...

000d40e0 <setup>:
Adafruit_SSD1306 display(OLED_RESET);

const unsigned int updateTime = 5000;
unsigned int lastTime;

void setup() {
   d40e0:	b508      	push	{r3, lr}

  Time.zone(-6); // -6 for MDT, -7 for MST
   d40e2:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d40e6:	f001 faed 	bl	d56c4 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40ea:	f000 ffff 	bl	d50ec <spark_cloud_flag_connected>
        if (!connected()) {
   d40ee:	b110      	cbz	r0, d40f6 <setup+0x16>
        return spark_sync_time(NULL);
   d40f0:	2000      	movs	r0, #0
   d40f2:	f001 f803 	bl	d50fc <spark_sync_time>
  Particle.syncTime();

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  //0x3C obtained from I2C_Scan  
   d40f6:	223c      	movs	r2, #60	; 0x3c
   d40f8:	2102      	movs	r1, #2
   d40fa:	4807      	ldr	r0, [pc, #28]	; (d4118 <setup+0x38>)
   d40fc:	f000 fb46 	bl	d478c <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); 
   d4100:	4805      	ldr	r0, [pc, #20]	; (d4118 <setup+0x38>)
   d4102:	f000 fad3 	bl	d46ac <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d4106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d410a:	f001 fb6b 	bl	d57e4 <delay>
  display.clearDisplay();   // clears the screen and buffer  
}
   d410e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.clearDisplay();   // clears the screen and buffer  
   d4112:	4801      	ldr	r0, [pc, #4]	; (d4118 <setup+0x38>)
   d4114:	f000 ba52 	b.w	d45bc <_ZN16Adafruit_SSD130612clearDisplayEv>
   d4118:	2003e60c 	.word	0x2003e60c

000d411c <_Z11displayTimev>:
    displayTime();
    lastTime = millis();
  }
}

void displayTime() {
   d411c:	b510      	push	{r4, lr}
   d411e:	b08c      	sub	sp, #48	; 0x30
  String DateTime, TimeOnly;
  
  display.clearDisplay();   // clears the screen and buffer
   d4120:	4c26      	ldr	r4, [pc, #152]	; (d41bc <_Z11displayTimev+0xa0>)
  String DateTime, TimeOnly;
   d4122:	4927      	ldr	r1, [pc, #156]	; (d41c0 <_Z11displayTimev+0xa4>)
   d4124:	4668      	mov	r0, sp
   d4126:	f001 f9ac 	bl	d5482 <_ZN6StringC1EPKc>
   d412a:	4925      	ldr	r1, [pc, #148]	; (d41c0 <_Z11displayTimev+0xa4>)
   d412c:	a804      	add	r0, sp, #16
   d412e:	f001 f9a8 	bl	d5482 <_ZN6StringC1EPKc>
  display.clearDisplay();   // clears the screen and buffer
   d4132:	4620      	mov	r0, r4
   d4134:	f000 fa42 	bl	d45bc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4138:	4620      	mov	r0, r4
   d413a:	2101      	movs	r1, #1
   d413c:	f000 fda7 	bl	d4c8e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4140:	4620      	mov	r0, r4
   d4142:	2101      	movs	r1, #1
   d4144:	f000 fda8 	bl	d4c98 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d4148:	2200      	movs	r2, #0
   d414a:	4611      	mov	r1, r2
   d414c:	4620      	mov	r0, r4
   d414e:	f000 fd9b 	bl	d4c88 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("My name is Brian\n");
   d4152:	491c      	ldr	r1, [pc, #112]	; (d41c4 <_Z11displayTimev+0xa8>)
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffb4 	bl	d40c2 <_ZN5Print6printfEPKcz>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d415a:	f001 fb28 	bl	d57ae <_ZN9TimeClass3nowEv>
   d415e:	4602      	mov	r2, r0
   d4160:	17c3      	asrs	r3, r0, #31
   d4162:	a808      	add	r0, sp, #32
   d4164:	f001 face 	bl	d5704 <_ZN9TimeClass7timeStrEx>

  DateTime = Time.timeStr();
   d4168:	a908      	add	r1, sp, #32
   d416a:	4668      	mov	r0, sp
   d416c:	f001 f9ba 	bl	d54e4 <_ZN6StringaSEOS_>
   d4170:	a808      	add	r0, sp, #32
   d4172:	f001 f93b 	bl	d53ec <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   d4176:	2313      	movs	r3, #19
   d4178:	220b      	movs	r2, #11
   d417a:	4669      	mov	r1, sp
   d417c:	a808      	add	r0, sp, #32
   d417e:	f001 f9b9 	bl	d54f4 <_ZNK6String9substringEjj>
   d4182:	a908      	add	r1, sp, #32
   d4184:	a804      	add	r0, sp, #16
   d4186:	f001 f9ad 	bl	d54e4 <_ZN6StringaSEOS_>
   d418a:	a808      	add	r0, sp, #32
   d418c:	f001 f92e 	bl	d53ec <_ZN6StringD1Ev>

  display.setTextColor(BLACK, WHITE); 
   d4190:	4620      	mov	r0, r4
   d4192:	2201      	movs	r2, #1
   d4194:	2100      	movs	r1, #0
   d4196:	f000 fd82 	bl	d4c9e <_ZN12Adafruit_GFX12setTextColorEtt>
  display.printf("Time is %s\n",TimeOnly.c_str());
   d419a:	9a04      	ldr	r2, [sp, #16]
   d419c:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_Z11displayTimev+0xac>)
   d419e:	4620      	mov	r0, r4
   d41a0:	f7ff ff8f 	bl	d40c2 <_ZN5Print6printfEPKcz>
  display.display();
   d41a4:	4620      	mov	r0, r4
   d41a6:	f000 fa81 	bl	d46ac <_ZN16Adafruit_SSD13067displayEv>
  String DateTime, TimeOnly;
   d41aa:	a804      	add	r0, sp, #16
   d41ac:	f001 f91e 	bl	d53ec <_ZN6StringD1Ev>
   d41b0:	4668      	mov	r0, sp
   d41b2:	f001 f91b 	bl	d53ec <_ZN6StringD1Ev>
   d41b6:	b00c      	add	sp, #48	; 0x30
   d41b8:	bd10      	pop	{r4, pc}
   d41ba:	bf00      	nop
   d41bc:	2003e60c 	.word	0x2003e60c
   d41c0:	000d70cc 	.word	0x000d70cc
   d41c4:	000d69a8 	.word	0x000d69a8
   d41c8:	000d69ba 	.word	0x000d69ba

000d41cc <loop>:
void loop() {
   d41cc:	b510      	push	{r4, lr}
  if(millis()-lastTime>updateTime) {
   d41ce:	4c07      	ldr	r4, [pc, #28]	; (d41ec <loop+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41d0:	f000 fda8 	bl	d4d24 <HAL_Timer_Get_Milli_Seconds>
   d41d4:	6823      	ldr	r3, [r4, #0]
   d41d6:	1ac0      	subs	r0, r0, r3
   d41d8:	f241 3388 	movw	r3, #5000	; 0x1388
   d41dc:	4298      	cmp	r0, r3
   d41de:	d904      	bls.n	d41ea <loop+0x1e>
    displayTime();
   d41e0:	f7ff ff9c 	bl	d411c <_Z11displayTimev>
   d41e4:	f000 fd9e 	bl	d4d24 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   d41e8:	6020      	str	r0, [r4, #0]
}
   d41ea:	bd10      	pop	{r4, pc}
   d41ec:	2003e630 	.word	0x2003e630

000d41f0 <_ZN16Adafruit_SSD1306D0Ev>:
   d41f0:	b510      	push	{r4, lr}
   d41f2:	2124      	movs	r1, #36	; 0x24
   d41f4:	4604      	mov	r4, r0
   d41f6:	f001 ff28 	bl	d604a <_ZdlPvj>
   d41fa:	4620      	mov	r0, r4
   d41fc:	bd10      	pop	{r4, pc}
	...

000d4200 <_GLOBAL__sub_I_display>:
   d4200:	b510      	push	{r4, lr}
Adafruit_SSD1306 display(OLED_RESET);
   d4202:	4c06      	ldr	r4, [pc, #24]	; (d421c <_GLOBAL__sub_I_display+0x1c>)
   d4204:	2104      	movs	r1, #4
   d4206:	4620      	mov	r0, r4
   d4208:	f000 f9c2 	bl	d4590 <_ZN16Adafruit_SSD1306C1Ea>
   d420c:	4620      	mov	r0, r4
   d420e:	4a04      	ldr	r2, [pc, #16]	; (d4220 <_GLOBAL__sub_I_display+0x20>)
   d4210:	4904      	ldr	r1, [pc, #16]	; (d4224 <_GLOBAL__sub_I_display+0x24>)
   d4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_SSD1306 display(OLED_RESET);
   d4216:	f001 bf13 	b.w	d6040 <__aeabi_atexit>
   d421a:	bf00      	nop
   d421c:	2003e60c 	.word	0x2003e60c
   d4220:	2003e608 	.word	0x2003e608
   d4224:	000d40c1 	.word	0x000d40c1

000d4228 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4228:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d422a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d422c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4230:	2d02      	cmp	r5, #2
   d4232:	d067      	beq.n	d4304 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d4234:	2d03      	cmp	r5, #3
   d4236:	f000 8097 	beq.w	d4368 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d423a:	2d01      	cmp	r5, #1
   d423c:	d16a      	bne.n	d4314 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d423e:	8905      	ldrh	r5, [r0, #8]
   d4240:	43d2      	mvns	r2, r2
   d4242:	442a      	add	r2, r5
   d4244:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4246:	2a00      	cmp	r2, #0
   d4248:	db5b      	blt.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d424a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d424e:	4295      	cmp	r5, r2
   d4250:	dd57      	ble.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4252:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4254:	bfbe      	ittt	lt
   d4256:	185b      	addlt	r3, r3, r1
   d4258:	b21b      	sxthlt	r3, r3
    __y = 0;
   d425a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d425c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4260:	18cd      	adds	r5, r1, r3
   d4262:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4264:	bfc4      	itt	gt
   d4266:	1a43      	subgt	r3, r0, r1
   d4268:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d426a:	2b00      	cmp	r3, #0
   d426c:	dd49      	ble.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d426e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d4272:	f8df c11c 	ldr.w	ip, [pc, #284]	; d4390 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d4276:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d427a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d427e:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4280:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d4284:	d01a      	beq.n	d42bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4286:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d428a:	4e3f      	ldr	r6, [pc, #252]	; (d4388 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d428c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d428e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4290:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4292:	bf3f      	itttt	cc
   d4294:	eba5 0e03 	subcc.w	lr, r5, r3
   d4298:	26ff      	movcc	r6, #255	; 0xff
   d429a:	fa46 f60e 	asrcc.w	r6, r6, lr
   d429e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d42a0:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d42a4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d42a6:	bf0c      	ite	eq
   d42a8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d42aa:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42ac:	42ab      	cmp	r3, r5
   d42ae:	f80c 6002 	strb.w	r6, [ip, r2]
   d42b2:	d326      	bcc.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d42b4:	3908      	subs	r1, #8
   d42b6:	440b      	add	r3, r1
   d42b8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d42ba:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d42bc:	2b07      	cmp	r3, #7
   d42be:	d917      	bls.n	d42f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d42c0:	2c01      	cmp	r4, #1
   d42c2:	bf0c      	ite	eq
   d42c4:	25ff      	moveq	r5, #255	; 0xff
   d42c6:	2500      	movne	r5, #0
   d42c8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d42cc:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d42ce:	3a08      	subs	r2, #8
   d42d0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d42d2:	2a07      	cmp	r2, #7
      *pBuf = val;
   d42d4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d42d8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d42dc:	d8f7      	bhi.n	d42ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d42de:	f1a3 0208 	sub.w	r2, r3, #8
   d42e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d42e6:	3201      	adds	r2, #1
   d42e8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d42ec:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d42f0:	b13b      	cbz	r3, d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d42f2:	4a26      	ldr	r2, [pc, #152]	; (d438c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d42f4:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d42f6:	7803      	ldrb	r3, [r0, #0]
   d42f8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d42fa:	bf0c      	ite	eq
   d42fc:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d42fe:	4393      	bicne	r3, r2
   d4300:	7003      	strb	r3, [r0, #0]
}
   d4302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4304:	8945      	ldrh	r5, [r0, #10]
   d4306:	43d2      	mvns	r2, r2
   d4308:	442a      	add	r2, r5
      x -= (w-1);
   d430a:	18cd      	adds	r5, r1, r3
   d430c:	8901      	ldrh	r1, [r0, #8]
   d430e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4310:	b212      	sxth	r2, r2
      x -= (w-1);
   d4312:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d4314:	2a00      	cmp	r2, #0
   d4316:	dbf4      	blt.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4318:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d431c:	4295      	cmp	r5, r2
   d431e:	ddf0      	ble.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4320:	2900      	cmp	r1, #0
    w += x;
   d4322:	bfbe      	ittt	lt
   d4324:	185b      	addlt	r3, r3, r1
   d4326:	b21b      	sxthlt	r3, r3
    x = 0;
   d4328:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d432a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d432e:	18ce      	adds	r6, r1, r3
   d4330:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4332:	bfc4      	itt	gt
   d4334:	1a6b      	subgt	r3, r5, r1
   d4336:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4338:	2b00      	cmp	r3, #0
   d433a:	dde2      	ble.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d433c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d433e:	2580      	movs	r5, #128	; 0x80
   d4340:	fb10 1105 	smlabb	r1, r0, r5, r1
   d4344:	4812      	ldr	r0, [pc, #72]	; (d4390 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4346:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4348:	f002 0107 	and.w	r1, r2, #7
   d434c:	2201      	movs	r2, #1
   d434e:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4350:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4352:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d4354:	4403      	add	r3, r0
   d4356:	d10c      	bne.n	d4372 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4358:	4283      	cmp	r3, r0
   d435a:	d0d2      	beq.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d435c:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4360:	4314      	orrs	r4, r2
   d4362:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4366:	e7f7      	b.n	d4358 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4368:	18cd      	adds	r5, r1, r3
   d436a:	8941      	ldrh	r1, [r0, #10]
   d436c:	1b49      	subs	r1, r1, r5
   d436e:	b209      	sxth	r1, r1
      break;
   d4370:	e769      	b.n	d4246 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d4372:	43d2      	mvns	r2, r2
   d4374:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d4376:	4283      	cmp	r3, r0
   d4378:	d0c3      	beq.n	d4302 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d437a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d437e:	4014      	ands	r4, r2
   d4380:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4384:	e7f7      	b.n	d4376 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4386:	bf00      	nop
   d4388:	2003e194 	.word	0x2003e194
   d438c:	2003e18c 	.word	0x2003e18c
   d4390:	2003e19c 	.word	0x2003e19c

000d4394 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4394:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d4396:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4398:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d439c:	2d02      	cmp	r5, #2
   d439e:	d034      	beq.n	d440a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d43a0:	2d03      	cmp	r5, #3
   d43a2:	f000 8099 	beq.w	d44d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d43a6:	2d01      	cmp	r5, #1
   d43a8:	d137      	bne.n	d441a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d43aa:	18d5      	adds	r5, r2, r3
   d43ac:	8902      	ldrh	r2, [r0, #8]
   d43ae:	1b52      	subs	r2, r2, r5
   d43b0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d43b2:	2900      	cmp	r1, #0
   d43b4:	f2c0 808f 	blt.w	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d43b8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d43bc:	428d      	cmp	r5, r1
   d43be:	f340 808a 	ble.w	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d43c2:	2a00      	cmp	r2, #0
    w += x;
   d43c4:	bfbe      	ittt	lt
   d43c6:	189b      	addlt	r3, r3, r2
   d43c8:	b21b      	sxthlt	r3, r3
    x = 0;
   d43ca:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d43cc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d43d0:	18d6      	adds	r6, r2, r3
   d43d2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d43d4:	bfc4      	itt	gt
   d43d6:	1aab      	subgt	r3, r5, r2
   d43d8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d43da:	2b00      	cmp	r3, #0
   d43dc:	dd7b      	ble.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d43de:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d43e0:	2580      	movs	r5, #128	; 0x80
   d43e2:	fb10 2205 	smlabb	r2, r0, r5, r2
   d43e6:	4844      	ldr	r0, [pc, #272]	; (d44f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d43e8:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d43ea:	f001 0207 	and.w	r2, r1, #7
   d43ee:	2101      	movs	r1, #1
   d43f0:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d43f2:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d43f4:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d43f6:	4403      	add	r3, r0
   d43f8:	d173      	bne.n	d44e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d43fa:	4298      	cmp	r0, r3
   d43fc:	d06b      	beq.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d43fe:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4402:	430c      	orrs	r4, r1
   d4404:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4408:	e7f7      	b.n	d43fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d440a:	8905      	ldrh	r5, [r0, #8]
   d440c:	43c9      	mvns	r1, r1
   d440e:	4429      	add	r1, r5
      y -= (h-1);
   d4410:	18d5      	adds	r5, r2, r3
   d4412:	8942      	ldrh	r2, [r0, #10]
   d4414:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4416:	b209      	sxth	r1, r1
      y -= (h-1);
   d4418:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d441a:	2900      	cmp	r1, #0
   d441c:	db5b      	blt.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d441e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4422:	428d      	cmp	r5, r1
   d4424:	dd57      	ble.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4426:	2a00      	cmp	r2, #0
    __h += __y;
   d4428:	bfbe      	ittt	lt
   d442a:	189b      	addlt	r3, r3, r2
   d442c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d442e:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4430:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4434:	18d5      	adds	r5, r2, r3
   d4436:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4438:	bfc4      	itt	gt
   d443a:	1a83      	subgt	r3, r0, r2
   d443c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d443e:	2b00      	cmp	r3, #0
   d4440:	dd49      	ble.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4442:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4446:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d44f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d444a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d444e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4452:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4454:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4458:	d01a      	beq.n	d4490 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d445a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d445e:	4e27      	ldr	r6, [pc, #156]	; (d44fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4460:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4462:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4464:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4466:	bf3f      	itttt	cc
   d4468:	eba5 0e03 	subcc.w	lr, r5, r3
   d446c:	26ff      	movcc	r6, #255	; 0xff
   d446e:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4472:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4474:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4478:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d447a:	bf0c      	ite	eq
   d447c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d447e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4480:	42ab      	cmp	r3, r5
   d4482:	f80c 6001 	strb.w	r6, [ip, r1]
   d4486:	d326      	bcc.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4488:	3a08      	subs	r2, #8
   d448a:	4413      	add	r3, r2
   d448c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d448e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d4490:	2b07      	cmp	r3, #7
   d4492:	d917      	bls.n	d44c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4494:	2c01      	cmp	r4, #1
   d4496:	bf0c      	ite	eq
   d4498:	25ff      	moveq	r5, #255	; 0xff
   d449a:	2500      	movne	r5, #0
   d449c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d44a0:	461a      	mov	r2, r3
      h -= 8;
   d44a2:	3a08      	subs	r2, #8
   d44a4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d44a6:	2a07      	cmp	r2, #7
      *pBuf = val;
   d44a8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d44ac:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d44b0:	d8f7      	bhi.n	d44a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d44b2:	f1a3 0208 	sub.w	r2, r3, #8
   d44b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d44ba:	3201      	adds	r2, #1
   d44bc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d44c0:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d44c4:	b13b      	cbz	r3, d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d44c6:	4a0e      	ldr	r2, [pc, #56]	; (d4500 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d44c8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d44ca:	7803      	ldrb	r3, [r0, #0]
   d44cc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d44ce:	bf0c      	ite	eq
   d44d0:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d44d2:	4393      	bicne	r3, r2
   d44d4:	7003      	strb	r3, [r0, #0]
}
   d44d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d44d8:	8945      	ldrh	r5, [r0, #10]
   d44da:	43c9      	mvns	r1, r1
   d44dc:	4429      	add	r1, r5
   d44de:	b209      	sxth	r1, r1
      break;
   d44e0:	e767      	b.n	d43b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d44e2:	43c9      	mvns	r1, r1
   d44e4:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d44e6:	4298      	cmp	r0, r3
   d44e8:	d0f5      	beq.n	d44d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d44ea:	f810 4b01 	ldrb.w	r4, [r0], #1
   d44ee:	400c      	ands	r4, r1
   d44f0:	f800 4c01 	strb.w	r4, [r0, #-1]
   d44f4:	e7f7      	b.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d44f6:	bf00      	nop
   d44f8:	2003e19c 	.word	0x2003e19c
   d44fc:	2003e194 	.word	0x2003e194
   d4500:	2003e18c 	.word	0x2003e18c

000d4504 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4506:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4508:	4606      	mov	r6, r0
   d450a:	4614      	mov	r4, r2
   d450c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d450e:	db2d      	blt.n	d456c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4510:	f000 fbca 	bl	d4ca8 <_ZN12Adafruit_GFX5widthEv>
   d4514:	42a8      	cmp	r0, r5
   d4516:	dd29      	ble.n	d456c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4518:	2c00      	cmp	r4, #0
   d451a:	db27      	blt.n	d456c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d451c:	4630      	mov	r0, r6
   d451e:	f000 fbc6 	bl	d4cae <_ZN12Adafruit_GFX6heightEv>
   d4522:	42a0      	cmp	r0, r4
   d4524:	dd22      	ble.n	d456c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4526:	4630      	mov	r0, r6
   d4528:	f000 fbbc 	bl	d4ca4 <_ZN12Adafruit_GFX11getRotationEv>
   d452c:	2802      	cmp	r0, #2
   d452e:	d01e      	beq.n	d456e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4530:	2803      	cmp	r0, #3
   d4532:	d025      	beq.n	d4580 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4534:	2801      	cmp	r0, #1
   d4536:	d104      	bne.n	d4542 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4538:	8932      	ldrh	r2, [r6, #8]
   d453a:	43e4      	mvns	r4, r4
   d453c:	4422      	add	r2, r4
    break;
   d453e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4540:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4542:	2c00      	cmp	r4, #0
   d4544:	4621      	mov	r1, r4
   d4546:	bfb8      	it	lt
   d4548:	1de1      	addlt	r1, r4, #7
   d454a:	10c9      	asrs	r1, r1, #3
   d454c:	2380      	movs	r3, #128	; 0x80
   d454e:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4552:	490e      	ldr	r1, [pc, #56]	; (d458c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4554:	2201      	movs	r2, #1
   d4556:	f004 0407 	and.w	r4, r4, #7
   d455a:	574b      	ldrsb	r3, [r1, r5]
   d455c:	fa02 f404 	lsl.w	r4, r2, r4
   d4560:	b264      	sxtb	r4, r4
   d4562:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4564:	bf0c      	ite	eq
   d4566:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4568:	43a3      	bicne	r3, r4
   d456a:	554b      	strb	r3, [r1, r5]
}
   d456c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d456e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4570:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4572:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4574:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4576:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4578:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d457a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d457c:	b224      	sxth	r4, r4
    break;
   d457e:	e7e0      	b.n	d4542 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4580:	8973      	ldrh	r3, [r6, #10]
   d4582:	3b01      	subs	r3, #1
   d4584:	1b5b      	subs	r3, r3, r5
    break;
   d4586:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4588:	b21c      	sxth	r4, r3
    break;
   d458a:	e7da      	b.n	d4542 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d458c:	2003e19c 	.word	0x2003e19c

000d4590 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4590:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4592:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4594:	4604      	mov	r4, r0
   d4596:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4598:	2180      	movs	r1, #128	; 0x80
   d459a:	f000 faa7 	bl	d4aec <_ZN12Adafruit_GFXC1Ess>
   d459e:	4b06      	ldr	r3, [pc, #24]	; (d45b8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d45a0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d45a2:	23ff      	movs	r3, #255	; 0xff
   d45a4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d45a8:	7763      	strb	r3, [r4, #29]
   d45aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d45ae:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d45b0:	f884 5020 	strb.w	r5, [r4, #32]
}
   d45b4:	4620      	mov	r0, r4
   d45b6:	bd38      	pop	{r3, r4, r5, pc}
   d45b8:	000d69d0 	.word	0x000d69d0

000d45bc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d45bc:	4802      	ldr	r0, [pc, #8]	; (d45c8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d45be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d45c2:	2100      	movs	r1, #0
   d45c4:	f002 b9aa 	b.w	d691c <memset>
   d45c8:	2003e19c 	.word	0x2003e19c

000d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d45cc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d45ce:	4c0b      	ldr	r4, [pc, #44]	; (d45fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d45d0:	7821      	ldrb	r1, [r4, #0]
   d45d2:	f3bf 8f5b 	dmb	ish
   d45d6:	f011 0101 	ands.w	r1, r1, #1
   d45da:	d10b      	bne.n	d45f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d45dc:	4620      	mov	r0, r4
   d45de:	9101      	str	r1, [sp, #4]
   d45e0:	f7ff fd66 	bl	d40b0 <__cxa_guard_acquire>
   d45e4:	9901      	ldr	r1, [sp, #4]
   d45e6:	b128      	cbz	r0, d45f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d45e8:	4805      	ldr	r0, [pc, #20]	; (d4600 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d45ea:	f000 fe1b 	bl	d5224 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff fd63 	bl	d40ba <__cxa_guard_release>
        return instance;
    }
   d45f4:	4802      	ldr	r0, [pc, #8]	; (d4600 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d45f6:	b002      	add	sp, #8
   d45f8:	bd10      	pop	{r4, pc}
   d45fa:	bf00      	nop
   d45fc:	2003e634 	.word	0x2003e634
   d4600:	2003e638 	.word	0x2003e638

000d4604 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4604:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4606:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d460a:	b143      	cbz	r3, d461e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d460c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d460e:	f7ff ffdd 	bl	d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4612:	9901      	ldr	r1, [sp, #4]
}
   d4614:	b003      	add	sp, #12
   d4616:	f85d eb04 	ldr.w	lr, [sp], #4
   d461a:	f000 beb3 	b.w	d5384 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d461e:	460b      	mov	r3, r1
   d4620:	7f81      	ldrb	r1, [r0, #30]
   d4622:	7f40      	ldrb	r0, [r0, #29]
   d4624:	2201      	movs	r2, #1
}
   d4626:	b003      	add	sp, #12
   d4628:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d462c:	f001 bca4 	b.w	d5f78 <shiftOut>

000d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4630:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4632:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4636:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4638:	4604      	mov	r4, r0
   d463a:	460d      	mov	r5, r1
  if (sid != -1)
   d463c:	d01d      	beq.n	d467a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d463e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4642:	2101      	movs	r1, #1
   d4644:	b280      	uxth	r0, r0
   d4646:	f001 fc7e 	bl	d5f46 <digitalWrite>
    digitalWrite(dc, LOW);
   d464a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d464e:	2100      	movs	r1, #0
   d4650:	b280      	uxth	r0, r0
   d4652:	f001 fc78 	bl	d5f46 <digitalWrite>
    digitalWrite(cs, LOW);
   d4656:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d465a:	2100      	movs	r1, #0
   d465c:	b280      	uxth	r0, r0
   d465e:	f001 fc72 	bl	d5f46 <digitalWrite>
    fastSPIwrite(c);
   d4662:	4629      	mov	r1, r5
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff ffcd 	bl	d4604 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d466a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d466e:	2101      	movs	r1, #1
}
   d4670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4674:	b280      	uxth	r0, r0
   d4676:	f001 bc66 	b.w	d5f46 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d467a:	f001 fcb9 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d467e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4682:	f001 fb19 	bl	d5cb8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4686:	f001 fcb3 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d468a:	6803      	ldr	r3, [r0, #0]
   d468c:	2100      	movs	r1, #0
   d468e:	689b      	ldr	r3, [r3, #8]
   d4690:	4798      	blx	r3
    Wire.write(c);
   d4692:	f001 fcad 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d4696:	6803      	ldr	r3, [r0, #0]
   d4698:	4629      	mov	r1, r5
   d469a:	689b      	ldr	r3, [r3, #8]
   d469c:	4798      	blx	r3
    Wire.endTransmission();
   d469e:	f001 fca7 	bl	d5ff0 <_Z19__fetch_global_Wirev>
}
   d46a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d46a6:	f001 bb0e 	b.w	d5cc6 <_ZN7TwoWire15endTransmissionEv>
	...

000d46ac <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d46ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d46ae:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d46b0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d46b2:	f7ff ffbd 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d46b6:	2100      	movs	r1, #0
   d46b8:	4620      	mov	r0, r4
   d46ba:	f7ff ffb9 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d46be:	217f      	movs	r1, #127	; 0x7f
   d46c0:	4620      	mov	r0, r4
   d46c2:	f7ff ffb5 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d46c6:	2122      	movs	r1, #34	; 0x22
   d46c8:	4620      	mov	r0, r4
   d46ca:	f7ff ffb1 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d46ce:	2100      	movs	r1, #0
   d46d0:	4620      	mov	r0, r4
   d46d2:	f7ff ffad 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d46d6:	2107      	movs	r1, #7
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ffa9 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d46de:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d46e2:	4f29      	ldr	r7, [pc, #164]	; (d4788 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d46e4:	3301      	adds	r3, #1
   d46e6:	d02a      	beq.n	d473e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d46e8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d46ec:	2101      	movs	r1, #1
   d46ee:	b280      	uxth	r0, r0
   d46f0:	f001 fc29 	bl	d5f46 <digitalWrite>
    digitalWrite(dc, HIGH);
   d46f4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d46f8:	2101      	movs	r1, #1
   d46fa:	b280      	uxth	r0, r0
   d46fc:	f001 fc23 	bl	d5f46 <digitalWrite>
    digitalWrite(cs, LOW);
   d4700:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4704:	2100      	movs	r1, #0
   d4706:	b280      	uxth	r0, r0
   d4708:	f001 fc1d 	bl	d5f46 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d470c:	2001      	movs	r0, #1
   d470e:	f000 fb01 	bl	d4d14 <HAL_Delay_Microseconds>
   d4712:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4716:	3d01      	subs	r5, #1
   d4718:	f817 1b01 	ldrb.w	r1, [r7], #1
   d471c:	4620      	mov	r0, r4
   d471e:	b2ad      	uxth	r5, r5
   d4720:	f7ff ff70 	bl	d4604 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4724:	2d00      	cmp	r5, #0
   d4726:	d1f6      	bne.n	d4716 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4728:	2001      	movs	r0, #1
   d472a:	f000 faf3 	bl	d4d14 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d472e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4732:	2101      	movs	r1, #1
}
   d4734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4738:	b280      	uxth	r0, r0
   d473a:	f001 bc04 	b.w	d5f46 <digitalWrite>
   d473e:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4740:	f001 fc56 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d4744:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4748:	f001 fab6 	bl	d5cb8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d474c:	f001 fc50 	bl	d5ff0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4750:	6803      	ldr	r3, [r0, #0]
   d4752:	f1a6 0510 	sub.w	r5, r6, #16
   d4756:	689b      	ldr	r3, [r3, #8]
   d4758:	2140      	movs	r1, #64	; 0x40
   d475a:	b2ad      	uxth	r5, r5
   d475c:	4798      	blx	r3
		Wire.write(buffer[i]);
   d475e:	f001 fc47 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d4762:	6803      	ldr	r3, [r0, #0]
   d4764:	5d79      	ldrb	r1, [r7, r5]
   d4766:	689b      	ldr	r3, [r3, #8]
		i++;
   d4768:	3501      	adds	r5, #1
   d476a:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d476c:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d476e:	42ae      	cmp	r6, r5
   d4770:	d1f5      	bne.n	d475e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4772:	f001 fc3d 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d4776:	f001 faa6 	bl	d5cc6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d477a:	f106 0310 	add.w	r3, r6, #16
   d477e:	b29e      	uxth	r6, r3
   d4780:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4784:	d1dc      	bne.n	d4740 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4788:	2003e19c 	.word	0x2003e19c

000d478c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d478c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d478e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d4792:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d4794:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4796:	4604      	mov	r4, r0
   d4798:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d479a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d479c:	f000 80c9 	beq.w	d4932 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d47a0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d47a4:	2101      	movs	r1, #1
   d47a6:	b280      	uxth	r0, r0
   d47a8:	f001 fbbc 	bl	d5f24 <pinMode>
    pinMode(cs, OUTPUT);
   d47ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47b0:	2101      	movs	r1, #1
   d47b2:	b280      	uxth	r0, r0
   d47b4:	f001 fbb6 	bl	d5f24 <pinMode>
    if (!hwSPI){
   d47b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47bc:	2b00      	cmp	r3, #0
   d47be:	f000 80a6 	beq.w	d490e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d47c2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47c6:	2101      	movs	r1, #1
   d47c8:	b280      	uxth	r0, r0
   d47ca:	f001 fbbc 	bl	d5f46 <digitalWrite>
        instance().setBitOrder(order);
   d47ce:	f7ff fefd 	bl	d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47d2:	2101      	movs	r1, #1
   d47d4:	f000 fd41 	bl	d525a <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d47d8:	f7ff fef8 	bl	d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47dc:	2110      	movs	r1, #16
   d47de:	f000 fdab 	bl	d5338 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d47e2:	f7ff fef3 	bl	d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47e6:	2100      	movs	r1, #0
   d47e8:	f000 fd4a 	bl	d5280 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d47ec:	f7ff feee 	bl	d45cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47f0:	f000 fd22 	bl	d5238 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d47f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d47f8:	2101      	movs	r1, #1
   d47fa:	b280      	uxth	r0, r0
   d47fc:	f001 fb92 	bl	d5f24 <pinMode>
  digitalWrite(rst, HIGH);
   d4800:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4804:	2101      	movs	r1, #1
   d4806:	b280      	uxth	r0, r0
   d4808:	f001 fb9d 	bl	d5f46 <digitalWrite>
  delay(1);
   d480c:	2001      	movs	r0, #1
   d480e:	f000 ffe9 	bl	d57e4 <delay>
  digitalWrite(rst, LOW);
   d4812:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4816:	2100      	movs	r1, #0
   d4818:	b280      	uxth	r0, r0
   d481a:	f001 fb94 	bl	d5f46 <digitalWrite>
  delay(10);
   d481e:	200a      	movs	r0, #10
   d4820:	f000 ffe0 	bl	d57e4 <delay>
  digitalWrite(rst, HIGH);
   d4824:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4828:	2101      	movs	r1, #1
   d482a:	b280      	uxth	r0, r0
   d482c:	f001 fb8b 	bl	d5f46 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4830:	4620      	mov	r0, r4
   d4832:	21ae      	movs	r1, #174	; 0xae
   d4834:	f7ff fefc 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4838:	4620      	mov	r0, r4
   d483a:	21d5      	movs	r1, #213	; 0xd5
   d483c:	f7ff fef8 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4840:	4620      	mov	r0, r4
   d4842:	2180      	movs	r1, #128	; 0x80
   d4844:	f7ff fef4 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4848:	4620      	mov	r0, r4
   d484a:	21a8      	movs	r1, #168	; 0xa8
   d484c:	f7ff fef0 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4850:	4620      	mov	r0, r4
   d4852:	213f      	movs	r1, #63	; 0x3f
   d4854:	f7ff feec 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4858:	4620      	mov	r0, r4
   d485a:	21d3      	movs	r1, #211	; 0xd3
   d485c:	f7ff fee8 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4860:	4620      	mov	r0, r4
   d4862:	2100      	movs	r1, #0
   d4864:	f7ff fee4 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4868:	4620      	mov	r0, r4
   d486a:	2140      	movs	r1, #64	; 0x40
   d486c:	f7ff fee0 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4870:	218d      	movs	r1, #141	; 0x8d
   d4872:	4620      	mov	r0, r4
   d4874:	f7ff fedc 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4878:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d487a:	bf0c      	ite	eq
   d487c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d487e:	2114      	movne	r1, #20
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff fed5 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4886:	4620      	mov	r0, r4
   d4888:	2120      	movs	r1, #32
   d488a:	f7ff fed1 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d488e:	4620      	mov	r0, r4
   d4890:	2100      	movs	r1, #0
   d4892:	f7ff fecd 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4896:	4620      	mov	r0, r4
   d4898:	21a1      	movs	r1, #161	; 0xa1
   d489a:	f7ff fec9 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d489e:	4620      	mov	r0, r4
   d48a0:	21c8      	movs	r1, #200	; 0xc8
   d48a2:	f7ff fec5 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d48a6:	4620      	mov	r0, r4
   d48a8:	21da      	movs	r1, #218	; 0xda
   d48aa:	f7ff fec1 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d48ae:	4620      	mov	r0, r4
   d48b0:	2112      	movs	r1, #18
   d48b2:	f7ff febd 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d48b6:	2181      	movs	r1, #129	; 0x81
   d48b8:	4620      	mov	r0, r4
   d48ba:	f7ff feb9 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48be:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d48c0:	bf0c      	ite	eq
   d48c2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d48c4:	21cf      	movne	r1, #207	; 0xcf
   d48c6:	4620      	mov	r0, r4
   d48c8:	f7ff feb2 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d48cc:	21d9      	movs	r1, #217	; 0xd9
   d48ce:	4620      	mov	r0, r4
   d48d0:	f7ff feae 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48d4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d48d6:	bf0c      	ite	eq
   d48d8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d48da:	21f1      	movne	r1, #241	; 0xf1
   d48dc:	4620      	mov	r0, r4
   d48de:	f7ff fea7 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d48e2:	4620      	mov	r0, r4
   d48e4:	21db      	movs	r1, #219	; 0xdb
   d48e6:	f7ff fea3 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d48ea:	4620      	mov	r0, r4
   d48ec:	2140      	movs	r1, #64	; 0x40
   d48ee:	f7ff fe9f 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d48f2:	4620      	mov	r0, r4
   d48f4:	21a4      	movs	r1, #164	; 0xa4
   d48f6:	f7ff fe9b 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d48fa:	4620      	mov	r0, r4
   d48fc:	21a6      	movs	r1, #166	; 0xa6
   d48fe:	f7ff fe97 	bl	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4902:	4620      	mov	r0, r4
   d4904:	21af      	movs	r1, #175	; 0xaf
}
   d4906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d490a:	f7ff be91 	b.w	d4630 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d490e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4912:	2101      	movs	r1, #1
   d4914:	b280      	uxth	r0, r0
   d4916:	f001 fb05 	bl	d5f24 <pinMode>
    	pinMode(sclk, OUTPUT);
   d491a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d491e:	2101      	movs	r1, #1
   d4920:	b280      	uxth	r0, r0
   d4922:	f001 faff 	bl	d5f24 <pinMode>
    if (hwSPI){
   d4926:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d492a:	2b00      	cmp	r3, #0
   d492c:	f43f af62 	beq.w	d47f4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d4930:	e747      	b.n	d47c2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d4932:	f001 fb5d 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d4936:	f001 f9b5 	bl	d5ca4 <_ZN7TwoWire5beginEv>
   d493a:	e75b      	b.n	d47f4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d493c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4940:	b085      	sub	sp, #20
   d4942:	461f      	mov	r7, r3
   d4944:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4948:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d494c:	eba8 0902 	sub.w	r9, r8, r2
   d4950:	eba7 0a01 	sub.w	sl, r7, r1
   d4954:	f1b9 0f00 	cmp.w	r9, #0
   d4958:	bfb8      	it	lt
   d495a:	f1c9 0900 	rsblt	r9, r9, #0
   d495e:	f1ba 0f00 	cmp.w	sl, #0
   d4962:	bfb8      	it	lt
   d4964:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d4968:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d496a:	4683      	mov	fp, r0
   d496c:	460c      	mov	r4, r1
   d496e:	4615      	mov	r5, r2
  if (steep) {
   d4970:	dd04      	ble.n	d497c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d4972:	463a      	mov	r2, r7
    swap(x0, y0);
   d4974:	462c      	mov	r4, r5
    swap(x1, y1);
   d4976:	4647      	mov	r7, r8
    swap(x0, y0);
   d4978:	460d      	mov	r5, r1
    swap(x1, y1);
   d497a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d497c:	42bc      	cmp	r4, r7
   d497e:	dd05      	ble.n	d498c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d4980:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4982:	4645      	mov	r5, r8
   d4984:	4690      	mov	r8, r2
  if (x0 > x1) {
   d4986:	4622      	mov	r2, r4
   d4988:	463c      	mov	r4, r7
   d498a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d498c:	1b3e      	subs	r6, r7, r4
   d498e:	b2b2      	uxth	r2, r6
   d4990:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d4992:	eba8 0205 	sub.w	r2, r8, r5
   d4996:	2a00      	cmp	r2, #0
   d4998:	bfb8      	it	lt
   d499a:	4252      	neglt	r2, r2
   d499c:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d499e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d49a2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d49a6:	4545      	cmp	r5, r8
   d49a8:	bfb4      	ite	lt
   d49aa:	2201      	movlt	r2, #1
   d49ac:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d49b0:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d49b2:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d49b4:	42bc      	cmp	r4, r7
   d49b6:	dc1c      	bgt.n	d49f2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d49b8:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d49bc:	9303      	str	r3, [sp, #12]
    if (steep) {
   d49be:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d49c0:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d49c4:	bfc7      	ittee	gt
   d49c6:	4629      	movgt	r1, r5
   d49c8:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d49ca:	462a      	movle	r2, r5
   d49cc:	4621      	movle	r1, r4
   d49ce:	4658      	mov	r0, fp
   d49d0:	47c0      	blx	r8
    }
    err -= dy;
   d49d2:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d49d4:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d49d6:	1ab6      	subs	r6, r6, r2
   d49d8:	b2b1      	uxth	r1, r6
   d49da:	b236      	sxth	r6, r6
    if (err < 0) {
   d49dc:	2e00      	cmp	r6, #0
   d49de:	da05      	bge.n	d49ec <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d49e0:	9a02      	ldr	r2, [sp, #8]
   d49e2:	4415      	add	r5, r2
      err += dx;
   d49e4:	9a00      	ldr	r2, [sp, #0]
   d49e6:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d49e8:	b22d      	sxth	r5, r5
      err += dx;
   d49ea:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d49ec:	3401      	adds	r4, #1
   d49ee:	b224      	sxth	r4, r4
   d49f0:	e7e0      	b.n	d49b4 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d49f2:	b005      	add	sp, #20
   d49f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d49f8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d49f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d49fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4a00:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d4a02:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4a06:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d4a0a:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4a0c:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d4a0e:	4616      	mov	r6, r2
   d4a10:	468a      	mov	sl, r1
   d4a12:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d4a14:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4a16:	6823      	ldr	r3, [r4, #0]
   d4a18:	f8cd 8000 	str.w	r8, [sp]
   d4a1c:	f109 32ff 	add.w	r2, r9, #4294967295
   d4a20:	4432      	add	r2, r6
   d4a22:	69df      	ldr	r7, [r3, #28]
   d4a24:	4651      	mov	r1, sl
   d4a26:	462b      	mov	r3, r5
   d4a28:	4620      	mov	r0, r4
   d4a2a:	b212      	sxth	r2, r2
   d4a2c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4a2e:	6823      	ldr	r3, [r4, #0]
   d4a30:	f8cd 8000 	str.w	r8, [sp]
   d4a34:	699f      	ldr	r7, [r3, #24]
   d4a36:	4632      	mov	r2, r6
   d4a38:	464b      	mov	r3, r9
   d4a3a:	4651      	mov	r1, sl
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4a40:	1e6b      	subs	r3, r5, #1
   d4a42:	eb03 010a 	add.w	r1, r3, sl
   d4a46:	6823      	ldr	r3, [r4, #0]
   d4a48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d4a4c:	699d      	ldr	r5, [r3, #24]
   d4a4e:	4632      	mov	r2, r6
   d4a50:	464b      	mov	r3, r9
   d4a52:	b209      	sxth	r1, r1
   d4a54:	4620      	mov	r0, r4
   d4a56:	46ac      	mov	ip, r5
}
   d4a58:	b002      	add	sp, #8
   d4a5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d4a5e:	4760      	bx	ip

000d4a60 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4a62:	3b01      	subs	r3, #1
   d4a64:	4413      	add	r3, r2
   d4a66:	6804      	ldr	r4, [r0, #0]
   d4a68:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a6c:	9501      	str	r5, [sp, #4]
   d4a6e:	b21b      	sxth	r3, r3
   d4a70:	9300      	str	r3, [sp, #0]
   d4a72:	6964      	ldr	r4, [r4, #20]
   d4a74:	460b      	mov	r3, r1
   d4a76:	47a0      	blx	r4
}
   d4a78:	b003      	add	sp, #12
   d4a7a:	bd30      	pop	{r4, r5, pc}

000d4a7c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4a7e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a82:	6804      	ldr	r4, [r0, #0]
   d4a84:	e9cd 2500 	strd	r2, r5, [sp]
   d4a88:	3b01      	subs	r3, #1
   d4a8a:	440b      	add	r3, r1
   d4a8c:	6964      	ldr	r4, [r4, #20]
   d4a8e:	b21b      	sxth	r3, r3
   d4a90:	47a0      	blx	r4
}
   d4a92:	b003      	add	sp, #12
   d4a94:	bd30      	pop	{r4, r5, pc}

000d4a96 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4a96:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4a9a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4a9e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4aa2:	4605      	mov	r5, r0
   d4aa4:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4aa6:	460c      	mov	r4, r1
   d4aa8:	18ce      	adds	r6, r1, r3
   d4aaa:	42b4      	cmp	r4, r6
   d4aac:	da0b      	bge.n	d4ac6 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d4aae:	682b      	ldr	r3, [r5, #0]
   d4ab0:	f8cd 8000 	str.w	r8, [sp]
   d4ab4:	699f      	ldr	r7, [r3, #24]
   d4ab6:	4621      	mov	r1, r4
   d4ab8:	464b      	mov	r3, r9
   d4aba:	4652      	mov	r2, sl
   d4abc:	4628      	mov	r0, r5
   d4abe:	3401      	adds	r4, #1
   d4ac0:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d4ac2:	b224      	sxth	r4, r4
   d4ac4:	e7f1      	b.n	d4aaa <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d4ac6:	b002      	add	sp, #8
   d4ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4acc <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4acc:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4ace:	6802      	ldr	r2, [r0, #0]
   d4ad0:	9101      	str	r1, [sp, #4]
   d4ad2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4ad6:	9100      	str	r1, [sp, #0]
   d4ad8:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d4ada:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4ade:	2200      	movs	r2, #0
   d4ae0:	4611      	mov	r1, r2
   d4ae2:	47a0      	blx	r4
}
   d4ae4:	b002      	add	sp, #8
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d4ae8:	4770      	bx	lr
	...

000d4aec <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4aec:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4aee:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d4af0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d4af2:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d4af6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d4af8:	4d05      	ldr	r5, [pc, #20]	; (d4b10 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d4afa:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d4afc:	2201      	movs	r2, #1
   d4afe:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d4b00:	6005      	str	r5, [r0, #0]
   d4b02:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d4b04:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d4b06:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d4b08:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d4b0a:	7682      	strb	r2, [r0, #26]
}
   d4b0c:	bd30      	pop	{r4, r5, pc}
   d4b0e:	bf00      	nop
   d4b10:	000d6f04 	.word	0x000d6f04

000d4b14 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b18:	ed2d 8b02 	vpush	{d8}
   d4b1c:	b08b      	sub	sp, #44	; 0x2c
   d4b1e:	4606      	mov	r6, r0
   d4b20:	9103      	str	r1, [sp, #12]
   d4b22:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d4b26:	9105      	str	r1, [sp, #20]
   d4b28:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d4b2c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d4b2e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4b32:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b34:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d4b38:	4281      	cmp	r1, r0
   d4b3a:	dd51      	ble.n	d4be0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d4b3c:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d4b40:	4291      	cmp	r1, r2
   d4b42:	dd4d      	ble.n	d4be0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b44:	2106      	movs	r1, #6
   d4b46:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d4b4a:	2c00      	cmp	r4, #0
   d4b4c:	dd48      	ble.n	d4be0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d4b4e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b52:	2c00      	cmp	r4, #0
   d4b54:	dd44      	ble.n	d4be0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d4b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4b5a:	9309      	str	r3, [sp, #36]	; 0x24
   d4b5c:	b293      	uxth	r3, r2
   d4b5e:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d4b60:	2400      	movs	r4, #0
   d4b62:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d4b64:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d4b66:	bf1c      	itt	ne
   d4b68:	4b2d      	ldrne	r3, [pc, #180]	; (d4c20 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d4b6a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b6c:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d4b6e:	bf16      	itet	ne
   d4b70:	191b      	addne	r3, r3, r4
      line = 0x0;
   d4b72:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d4b74:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d4b76:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b78:	9a03      	ldr	r2, [sp, #12]
   d4b7a:	b2ab      	uxth	r3, r5
   d4b7c:	9308      	str	r3, [sp, #32]
   d4b7e:	fb04 f305 	mul.w	r3, r4, r5
   d4b82:	fa13 f382 	uxtah	r3, r3, r2
   d4b86:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d4b88:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b8c:	ee08 3a10 	vmov	s16, r3
   d4b90:	f04f 0800 	mov.w	r8, #0
   d4b94:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d4b98:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d4b9c:	9b02      	ldr	r3, [sp, #8]
   d4b9e:	07db      	lsls	r3, r3, #31
   d4ba0:	d52f      	bpl.n	d4c02 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4ba2:	2d01      	cmp	r5, #1
   d4ba4:	6833      	ldr	r3, [r6, #0]
   d4ba6:	d120      	bne.n	d4bea <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d4ba8:	9a04      	ldr	r2, [sp, #16]
   d4baa:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4bae:	9b05      	ldr	r3, [sp, #20]
   d4bb0:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d4bb2:	b212      	sxth	r2, r2
   d4bb4:	4651      	mov	r1, sl
   d4bb6:	4630      	mov	r0, r6
   d4bb8:	47d8      	blx	fp
      line >>= 1;
   d4bba:	9b02      	ldr	r3, [sp, #8]
   d4bbc:	085b      	lsrs	r3, r3, #1
   d4bbe:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d4bc0:	9b08      	ldr	r3, [sp, #32]
   d4bc2:	f108 0801 	add.w	r8, r8, #1
   d4bc6:	441f      	add	r7, r3
   d4bc8:	f1b8 0f08 	cmp.w	r8, #8
   d4bcc:	b2bf      	uxth	r7, r7
   d4bce:	d1e5      	bne.n	d4b9c <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d4bd0:	9b07      	ldr	r3, [sp, #28]
   d4bd2:	3b01      	subs	r3, #1
   d4bd4:	3401      	adds	r4, #1
   d4bd6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4bda:	b264      	sxtb	r4, r4
   d4bdc:	9307      	str	r3, [sp, #28]
   d4bde:	d1c1      	bne.n	d4b64 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d4be0:	b00b      	add	sp, #44	; 0x2c
   d4be2:	ecbd 8b02 	vpop	{d8}
   d4be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bea:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4bec:	e9cd 9200 	strd	r9, r2, [sp]
   d4bf0:	ee18 1a10 	vmov	r1, s16
   d4bf4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4bf8:	b23a      	sxth	r2, r7
   d4bfa:	464b      	mov	r3, r9
   d4bfc:	4630      	mov	r0, r6
   d4bfe:	47d8      	blx	fp
   d4c00:	e7db      	b.n	d4bba <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d4c02:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d4c06:	4293      	cmp	r3, r2
   d4c08:	d0d7      	beq.n	d4bba <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d4c0a:	2d01      	cmp	r5, #1
   d4c0c:	6833      	ldr	r3, [r6, #0]
   d4c0e:	d105      	bne.n	d4c1c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d4c10:	9a04      	ldr	r2, [sp, #16]
   d4c12:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c16:	9b06      	ldr	r3, [sp, #24]
   d4c18:	4442      	add	r2, r8
   d4c1a:	e7ca      	b.n	d4bb2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4c1c:	9a06      	ldr	r2, [sp, #24]
   d4c1e:	e7e5      	b.n	d4bec <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d4c20:	000d6a00 	.word	0x000d6a00

000d4c24 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4c24:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d4c26:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d4c28:	b085      	sub	sp, #20
   d4c2a:	4604      	mov	r4, r0
  if (c == '\n') {
   d4c2c:	d107      	bne.n	d4c3e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d4c2e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d4c30:	8a63      	ldrh	r3, [r4, #18]
   d4c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4c36:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4c38:	2300      	movs	r3, #0
   d4c3a:	8223      	strh	r3, [r4, #16]
   d4c3c:	e021      	b.n	d4c82 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d4c3e:	290d      	cmp	r1, #13
   d4c40:	d01f      	beq.n	d4c82 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4c42:	7e03      	ldrb	r3, [r0, #24]
   d4c44:	9302      	str	r3, [sp, #8]
   d4c46:	8ac3      	ldrh	r3, [r0, #22]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	8a83      	ldrh	r3, [r0, #20]
   d4c4c:	9300      	str	r3, [sp, #0]
   d4c4e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4c52:	460b      	mov	r3, r1
   d4c54:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4c58:	f7ff ff5c 	bl	d4b14 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4c5c:	7e21      	ldrb	r1, [r4, #24]
   d4c5e:	8a23      	ldrh	r3, [r4, #16]
   d4c60:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4c64:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c68:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d4c6a:	b21b      	sxth	r3, r3
   d4c6c:	460a      	mov	r2, r1
   d4c6e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c70:	b138      	cbz	r0, d4c82 <_ZN12Adafruit_GFX5writeEh+0x5e>
   d4c72:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4c76:	f06f 0505 	mvn.w	r5, #5
   d4c7a:	fb05 0101 	mla	r1, r5, r1, r0
   d4c7e:	428b      	cmp	r3, r1
   d4c80:	dcd6      	bgt.n	d4c30 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d4c82:	2001      	movs	r0, #1
   d4c84:	b005      	add	sp, #20
   d4c86:	bd30      	pop	{r4, r5, pc}

000d4c88 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d4c88:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4c8a:	8242      	strh	r2, [r0, #18]
}
   d4c8c:	4770      	bx	lr

000d4c8e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d4c8e:	2901      	cmp	r1, #1
   d4c90:	bf38      	it	cc
   d4c92:	2101      	movcc	r1, #1
   d4c94:	7601      	strb	r1, [r0, #24]
}
   d4c96:	4770      	bx	lr

000d4c98 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d4c98:	82c1      	strh	r1, [r0, #22]
   d4c9a:	8281      	strh	r1, [r0, #20]
}
   d4c9c:	4770      	bx	lr

000d4c9e <_ZN12Adafruit_GFX12setTextColorEtt>:
  textcolor   = c;
   d4c9e:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   d4ca0:	82c2      	strh	r2, [r0, #22]
}
   d4ca2:	4770      	bx	lr

000d4ca4 <_ZN12Adafruit_GFX11getRotationEv>:
}
   d4ca4:	7e40      	ldrb	r0, [r0, #25]
   d4ca6:	4770      	bx	lr

000d4ca8 <_ZN12Adafruit_GFX5widthEv>:
}
   d4ca8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4cac:	4770      	bx	lr

000d4cae <_ZN12Adafruit_GFX6heightEv>:
}
   d4cae:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4cb2:	4770      	bx	lr

000d4cb4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <netdb_freeaddrinfo+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	689b      	ldr	r3, [r3, #8]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030268 	.word	0x00030268

000d4cc4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <netdb_getaddrinfo+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	68db      	ldr	r3, [r3, #12]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030268 	.word	0x00030268

000d4cd4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_Pin_Mode+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	689b      	ldr	r3, [r3, #8]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	0003022c 	.word	0x0003022c

000d4ce4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_Get_Pin_Mode+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	68db      	ldr	r3, [r3, #12]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	0003022c 	.word	0x0003022c

000d4cf4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_GPIO_Write+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	691b      	ldr	r3, [r3, #16]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003022c 	.word	0x0003022c

000d4d04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_RNG_GetRandomNumber+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	685b      	ldr	r3, [r3, #4]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030218 	.word	0x00030218

000d4d14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_Delay_Microseconds+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	68db      	ldr	r3, [r3, #12]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030218 	.word	0x00030218

000d4d24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	695b      	ldr	r3, [r3, #20]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030218 	.word	0x00030218

000d4d34 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <hal_rtc_time_is_valid+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030218 	.word	0x00030218

000d4d44 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <hal_rtc_get_time+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030218 	.word	0x00030218

000d4d54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <os_mutex_recursive_create+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030248 	.word	0x00030248

000d4d64 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <os_mutex_recursive_destroy+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030248 	.word	0x00030248

000d4d74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <inet_inet_ntop+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030264 	.word	0x00030264

000d4d84 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <hal_usart_init+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	681b      	ldr	r3, [r3, #0]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <hal_usart_write+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	68db      	ldr	r3, [r3, #12]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <hal_usart_available+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	691b      	ldr	r3, [r3, #16]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <hal_usart_read+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	695b      	ldr	r3, [r3, #20]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003023c 	.word	0x0003023c

000d4dc4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <hal_usart_peek+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	699b      	ldr	r3, [r3, #24]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003023c 	.word	0x0003023c

000d4dd4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <hal_usart_flush+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	69db      	ldr	r3, [r3, #28]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003023c 	.word	0x0003023c

000d4de4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <hal_usart_is_enabled+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a1b      	ldr	r3, [r3, #32]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003023c 	.word	0x0003023c

000d4df4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <hal_usart_available_data_for_write+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003023c 	.word	0x0003023c

000d4e04 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <hal_i2c_begin+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	68db      	ldr	r3, [r3, #12]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030228 	.word	0x00030228

000d4e14 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <hal_i2c_begin_transmission+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	699b      	ldr	r3, [r3, #24]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030228 	.word	0x00030228

000d4e24 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <hal_i2c_end_transmission+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	69db      	ldr	r3, [r3, #28]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030228 	.word	0x00030228

000d4e34 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <hal_i2c_write+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6a1b      	ldr	r3, [r3, #32]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030228 	.word	0x00030228

000d4e44 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <hal_i2c_available+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <hal_i2c_read+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <hal_i2c_peek+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <hal_i2c_flush+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <hal_i2c_is_enabled+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030228 	.word	0x00030228

000d4e94 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <hal_i2c_init+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030228 	.word	0x00030228

000d4ea4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <hal_spi_begin+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	681b      	ldr	r3, [r3, #0]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030230 	.word	0x00030230

000d4eb4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <hal_spi_set_bit_order+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	689b      	ldr	r3, [r3, #8]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030230 	.word	0x00030230

000d4ec4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <hal_spi_set_data_mode+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	68db      	ldr	r3, [r3, #12]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030230 	.word	0x00030230

000d4ed4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <hal_spi_set_clock_divider+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	691b      	ldr	r3, [r3, #16]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030230 	.word	0x00030230

000d4ee4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <hal_spi_transfer+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030230 	.word	0x00030230

000d4ef4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <hal_spi_init+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	69db      	ldr	r3, [r3, #28]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030230 	.word	0x00030230

000d4f04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <hal_spi_is_enabled+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6a1b      	ldr	r3, [r3, #32]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030230 	.word	0x00030230

000d4f14 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <hal_spi_info+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030230 	.word	0x00030230

000d4f24 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <hal_spi_acquire+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030230 	.word	0x00030230

000d4f34 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <hal_spi_release+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030230 	.word	0x00030230

000d4f44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_USB_USART_Init+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	681b      	ldr	r3, [r3, #0]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003024c 	.word	0x0003024c

000d4f54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_USB_USART_Available_Data+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	691b      	ldr	r3, [r3, #16]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003024c 	.word	0x0003024c

000d4f64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	695b      	ldr	r3, [r3, #20]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003024c 	.word	0x0003024c

000d4f74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_USB_USART_Receive_Data+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	699b      	ldr	r3, [r3, #24]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003024c 	.word	0x0003024c

000d4f84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_USB_USART_Send_Data+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	69db      	ldr	r3, [r3, #28]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	0003024c 	.word	0x0003024c

000d4f94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_USB_USART_Flush_Data+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6a1b      	ldr	r3, [r3, #32]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003024c 	.word	0x0003024c

000d4fa4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <panic_+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030260 	.word	0x00030260

000d4fb4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <system_mode+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	681b      	ldr	r3, [r3, #0]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030220 	.word	0x00030220

000d4fc4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <set_system_mode+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	685b      	ldr	r3, [r3, #4]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030220 	.word	0x00030220

000d4fd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <system_delay_ms+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	695b      	ldr	r3, [r3, #20]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030220 	.word	0x00030220

000d4fe4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <system_thread_get_state+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030220 	.word	0x00030220

000d4ff4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b03      	ldr	r3, [pc, #12]	; (d5004 <system_ctrl_set_app_request_handler+0x10>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ffe:	9301      	str	r3, [sp, #4]
   d5000:	bd08      	pop	{r3, pc}
   d5002:	0000      	.short	0x0000
   d5004:	00030220 	.word	0x00030220

000d5008 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b03      	ldr	r3, [pc, #12]	; (d5018 <system_ctrl_set_result+0x10>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5012:	9301      	str	r3, [sp, #4]
   d5014:	bd08      	pop	{r3, pc}
   d5016:	0000      	.short	0x0000
   d5018:	00030220 	.word	0x00030220

000d501c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <network_connect+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	685b      	ldr	r3, [r3, #4]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030240 	.word	0x00030240

000d502c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <network_connecting+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	689b      	ldr	r3, [r3, #8]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030240 	.word	0x00030240

000d503c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <network_disconnect+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	68db      	ldr	r3, [r3, #12]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030240 	.word	0x00030240

000d504c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <network_ready+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	691b      	ldr	r3, [r3, #16]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030240 	.word	0x00030240

000d505c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <network_on+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	695b      	ldr	r3, [r3, #20]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030240 	.word	0x00030240

000d506c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <network_off+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	699b      	ldr	r3, [r3, #24]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030240 	.word	0x00030240

000d507c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <network_listen+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	69db      	ldr	r3, [r3, #28]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030240 	.word	0x00030240

000d508c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <network_listening+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6a1b      	ldr	r3, [r3, #32]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030240 	.word	0x00030240

000d509c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <network_set_listen_timeout+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030240 	.word	0x00030240

000d50ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <network_get_listen_timeout+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030240 	.word	0x00030240

000d50bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <network_is_on+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030240 	.word	0x00030240

000d50cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <network_is_off+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030240 	.word	0x00030240

000d50dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <spark_process+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	689b      	ldr	r3, [r3, #8]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030244 	.word	0x00030244

000d50ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <spark_cloud_flag_connected+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	695b      	ldr	r3, [r3, #20]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030244 	.word	0x00030244

000d50fc <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <spark_sync_time+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030244 	.word	0x00030244

000d510c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <spark_sync_time_pending+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030244 	.word	0x00030244

000d511c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030244 	.word	0x00030244

000d512c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <malloc+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	681b      	ldr	r3, [r3, #0]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003021c 	.word	0x0003021c

000d513c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <free+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	685b      	ldr	r3, [r3, #4]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003021c 	.word	0x0003021c

000d514c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <realloc+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	689b      	ldr	r3, [r3, #8]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003021c 	.word	0x0003021c

000d515c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <siprintf+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	691b      	ldr	r3, [r3, #16]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003021c 	.word	0x0003021c

000d516c <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <vsnprintf+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003021c 	.word	0x0003021c

000d517c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <newlib_impure_ptr_callback+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003021c 	.word	0x0003021c

000d518c <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <localtime_r+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	0003021c 	.word	0x0003021c

000d519c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d519c:	2200      	movs	r2, #0
   d519e:	6840      	ldr	r0, [r0, #4]
   d51a0:	4611      	mov	r1, r2
   d51a2:	f7ff bf73 	b.w	d508c <network_listening>

000d51a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d51a6:	2200      	movs	r2, #0
   d51a8:	6840      	ldr	r0, [r0, #4]
   d51aa:	4611      	mov	r1, r2
   d51ac:	f7ff bf7e 	b.w	d50ac <network_get_listen_timeout>

000d51b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d51b0:	6840      	ldr	r0, [r0, #4]
   d51b2:	2200      	movs	r2, #0
   d51b4:	f7ff bf72 	b.w	d509c <network_set_listen_timeout>

000d51b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d51b8:	6840      	ldr	r0, [r0, #4]
   d51ba:	2200      	movs	r2, #0
   d51bc:	f081 0101 	eor.w	r1, r1, #1
   d51c0:	f7ff bf5c 	b.w	d507c <network_listen>

000d51c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d51c4:	2300      	movs	r3, #0
   d51c6:	6840      	ldr	r0, [r0, #4]
   d51c8:	461a      	mov	r2, r3
   d51ca:	4619      	mov	r1, r3
   d51cc:	f7ff bf4e 	b.w	d506c <network_off>

000d51d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d51d0:	2300      	movs	r3, #0
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	461a      	mov	r2, r3
   d51d6:	4619      	mov	r1, r3
   d51d8:	f7ff bf40 	b.w	d505c <network_on>

000d51dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51dc:	2200      	movs	r2, #0
   d51de:	6840      	ldr	r0, [r0, #4]
   d51e0:	4611      	mov	r1, r2
   d51e2:	f7ff bf33 	b.w	d504c <network_ready>

000d51e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d51e6:	2200      	movs	r2, #0
   d51e8:	6840      	ldr	r0, [r0, #4]
   d51ea:	4611      	mov	r1, r2
   d51ec:	f7ff bf1e 	b.w	d502c <network_connecting>

000d51f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51f0:	6840      	ldr	r0, [r0, #4]
   d51f2:	2200      	movs	r2, #0
   d51f4:	2102      	movs	r1, #2
   d51f6:	f7ff bf21 	b.w	d503c <network_disconnect>

000d51fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d51fa:	2300      	movs	r3, #0
   d51fc:	6840      	ldr	r0, [r0, #4]
   d51fe:	461a      	mov	r2, r3
   d5200:	f7ff bf0c 	b.w	d501c <network_connect>

000d5204 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5204:	4b02      	ldr	r3, [pc, #8]	; (d5210 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5206:	2203      	movs	r2, #3
   d5208:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d520a:	4a02      	ldr	r2, [pc, #8]	; (d5214 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d520c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d520e:	4770      	bx	lr
   d5210:	2003e640 	.word	0x2003e640
   d5214:	000d6f3c 	.word	0x000d6f3c

000d5218 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5218:	2100      	movs	r1, #0
   d521a:	f7ff be83 	b.w	d4f24 <hal_spi_acquire>

000d521e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d521e:	2100      	movs	r1, #0
   d5220:	f7ff be88 	b.w	d4f34 <hal_spi_release>

000d5224 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5224:	b510      	push	{r4, lr}
   d5226:	4604      	mov	r4, r0
   d5228:	4608      	mov	r0, r1
{
    _spi = spi;
   d522a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d522c:	f7ff fe62 	bl	d4ef4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5230:	2300      	movs	r3, #0
   d5232:	6063      	str	r3, [r4, #4]
}
   d5234:	4620      	mov	r0, r4
   d5236:	bd10      	pop	{r4, pc}

000d5238 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5238:	b510      	push	{r4, lr}
   d523a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d523c:	7800      	ldrb	r0, [r0, #0]
   d523e:	f7ff ffeb 	bl	d5218 <_ZN8SPIClass4lockEv.isra.0>
   d5242:	b948      	cbnz	r0, d5258 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5244:	7820      	ldrb	r0, [r4, #0]
   d5246:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d524a:	f7ff fe2b 	bl	d4ea4 <hal_spi_begin>
        unlock();
   d524e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5254:	f7ff bfe3 	b.w	d521e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5258:	bd10      	pop	{r4, pc}

000d525a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d525a:	b513      	push	{r0, r1, r4, lr}
   d525c:	4604      	mov	r4, r0
    if (!lock())
   d525e:	7800      	ldrb	r0, [r0, #0]
{
   d5260:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5262:	f7ff ffd9 	bl	d5218 <_ZN8SPIClass4lockEv.isra.0>
   d5266:	9901      	ldr	r1, [sp, #4]
   d5268:	b940      	cbnz	r0, d527c <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d526a:	7820      	ldrb	r0, [r4, #0]
   d526c:	f7ff fe22 	bl	d4eb4 <hal_spi_set_bit_order>
        unlock();
   d5270:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5272:	b002      	add	sp, #8
   d5274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5278:	f7ff bfd1 	b.w	d521e <_ZN8SPIClass6unlockEv.isra.0>
}
   d527c:	b002      	add	sp, #8
   d527e:	bd10      	pop	{r4, pc}

000d5280 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5280:	b513      	push	{r0, r1, r4, lr}
   d5282:	4604      	mov	r4, r0
    if (!lock())
   d5284:	7800      	ldrb	r0, [r0, #0]
{
   d5286:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5288:	f7ff ffc6 	bl	d5218 <_ZN8SPIClass4lockEv.isra.0>
   d528c:	9901      	ldr	r1, [sp, #4]
   d528e:	b940      	cbnz	r0, d52a2 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5290:	7820      	ldrb	r0, [r4, #0]
   d5292:	f7ff fe17 	bl	d4ec4 <hal_spi_set_data_mode>
        unlock();
   d5296:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5298:	b002      	add	sp, #8
   d529a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d529e:	f7ff bfbe 	b.w	d521e <_ZN8SPIClass6unlockEv.isra.0>
}
   d52a2:	b002      	add	sp, #8
   d52a4:	bd10      	pop	{r4, pc}
	...

000d52a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d52a8:	0840      	lsrs	r0, r0, #1
{
   d52aa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d52ac:	6018      	str	r0, [r3, #0]
   d52ae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d52b0:	6818      	ldr	r0, [r3, #0]
   d52b2:	4288      	cmp	r0, r1
   d52b4:	b2e5      	uxtb	r5, r4
   d52b6:	d906      	bls.n	d52c6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d52b8:	3401      	adds	r4, #1
   d52ba:	2c08      	cmp	r4, #8
   d52bc:	d002      	beq.n	d52c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d52be:	0840      	lsrs	r0, r0, #1
   d52c0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d52c2:	e7f5      	b.n	d52b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d52c4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d52c8:	5d5b      	ldrb	r3, [r3, r5]
   d52ca:	7013      	strb	r3, [r2, #0]
}
   d52cc:	bd30      	pop	{r4, r5, pc}
   d52ce:	bf00      	nop
   d52d0:	000d6f70 	.word	0x000d6f70

000d52d4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d52d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d52d8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d52da:	2300      	movs	r3, #0
{
   d52dc:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d52de:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d52e0:	9302      	str	r3, [sp, #8]
{
   d52e2:	460e      	mov	r6, r1
   d52e4:	4617      	mov	r7, r2
    if (!lock())
   d52e6:	f7ff ff97 	bl	d5218 <_ZN8SPIClass4lockEv.isra.0>
   d52ea:	4605      	mov	r5, r0
   d52ec:	bb00      	cbnz	r0, d5330 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d52ee:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d52f2:	4601      	mov	r1, r0
   d52f4:	2214      	movs	r2, #20
   d52f6:	a803      	add	r0, sp, #12
   d52f8:	f001 fb10 	bl	d691c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d52fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d52fe:	462a      	mov	r2, r5
   d5300:	a903      	add	r1, sp, #12
   d5302:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5304:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5308:	f7ff fe04 	bl	d4f14 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d530c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d530e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5312:	ab02      	add	r3, sp, #8
   d5314:	f10d 0207 	add.w	r2, sp, #7
   d5318:	fb07 f106 	mul.w	r1, r7, r6
   d531c:	f7ff ffc4 	bl	d52a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5320:	7820      	ldrb	r0, [r4, #0]
   d5322:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5326:	f7ff fdd5 	bl	d4ed4 <hal_spi_set_clock_divider>
        unlock();
   d532a:	7820      	ldrb	r0, [r4, #0]
   d532c:	f7ff ff77 	bl	d521e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5330:	9802      	ldr	r0, [sp, #8]
   d5332:	b008      	add	sp, #32
   d5334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5338 <_ZN8SPIClass15setClockDividerEh>:
{
   d5338:	b538      	push	{r3, r4, r5, lr}
   d533a:	4604      	mov	r4, r0
    if (!lock())
   d533c:	7800      	ldrb	r0, [r0, #0]
{
   d533e:	460d      	mov	r5, r1
    if (!lock())
   d5340:	f7ff ff6a 	bl	d5218 <_ZN8SPIClass4lockEv.isra.0>
   d5344:	4603      	mov	r3, r0
   d5346:	b9d0      	cbnz	r0, d537e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d5348:	6861      	ldr	r1, [r4, #4]
   d534a:	b199      	cbz	r1, d5374 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d534c:	4a0c      	ldr	r2, [pc, #48]	; (d5380 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d534e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5352:	4285      	cmp	r5, r0
   d5354:	d002      	beq.n	d535c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d5356:	3301      	adds	r3, #1
   d5358:	2b08      	cmp	r3, #8
   d535a:	d1f8      	bne.n	d534e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d535c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d535e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d5360:	2201      	movs	r2, #1
   d5362:	40d9      	lsrs	r1, r3
   d5364:	4620      	mov	r0, r4
   d5366:	f7ff ffb5 	bl	d52d4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d536a:	7820      	ldrb	r0, [r4, #0]
}
   d536c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d5370:	f7ff bf55 	b.w	d521e <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d5374:	7820      	ldrb	r0, [r4, #0]
   d5376:	4629      	mov	r1, r5
   d5378:	f7ff fdac 	bl	d4ed4 <hal_spi_set_clock_divider>
   d537c:	e7f5      	b.n	d536a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d537e:	bd38      	pop	{r3, r4, r5, pc}
   d5380:	000d6f70 	.word	0x000d6f70

000d5384 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5384:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5386:	7800      	ldrb	r0, [r0, #0]
   d5388:	f7ff fdac 	bl	d4ee4 <hal_spi_transfer>
}
   d538c:	b2c0      	uxtb	r0, r0
   d538e:	bd08      	pop	{r3, pc}

000d5390 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5390:	b510      	push	{r4, lr}
   d5392:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5394:	6800      	ldr	r0, [r0, #0]
   d5396:	b118      	cbz	r0, d53a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5398:	f7ff fed0 	bl	d513c <free>
            wakeupSource_ = nullptr;
   d539c:	2300      	movs	r3, #0
   d539e:	6023      	str	r3, [r4, #0]
        }
    }
   d53a0:	bd10      	pop	{r4, pc}

000d53a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d53a2:	b510      	push	{r4, lr}
   d53a4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d53a6:	f7ff fff3 	bl	d5390 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d53aa:	4620      	mov	r0, r4
   d53ac:	bd10      	pop	{r4, pc}
	...

000d53b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d53b0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d53b2:	4b09      	ldr	r3, [pc, #36]	; (d53d8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d53b4:	4c09      	ldr	r4, [pc, #36]	; (d53dc <_GLOBAL__sub_I_System+0x2c>)
   d53b6:	2202      	movs	r2, #2
   d53b8:	2000      	movs	r0, #0
   d53ba:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d53bc:	4b08      	ldr	r3, [pc, #32]	; (d53e0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d53be:	6020      	str	r0, [r4, #0]
   d53c0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d53c2:	71a0      	strb	r0, [r4, #6]
   d53c4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d53c6:	f7ff fdfd 	bl	d4fc4 <set_system_mode>
SystemClass System;
   d53ca:	4620      	mov	r0, r4
   d53cc:	4a05      	ldr	r2, [pc, #20]	; (d53e4 <_GLOBAL__sub_I_System+0x34>)
   d53ce:	4906      	ldr	r1, [pc, #24]	; (d53e8 <_GLOBAL__sub_I_System+0x38>)
   d53d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d53d4:	f000 be34 	b.w	d6040 <__aeabi_atexit>
   d53d8:	2003e654 	.word	0x2003e654
   d53dc:	2003e648 	.word	0x2003e648
   d53e0:	ffff0000 	.word	0xffff0000
   d53e4:	2003e608 	.word	0x2003e608
   d53e8:	000d53a3 	.word	0x000d53a3

000d53ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d53ec:	b510      	push	{r4, lr}
   d53ee:	4604      	mov	r4, r0
{
	free(buffer);
   d53f0:	6800      	ldr	r0, [r0, #0]
   d53f2:	f7ff fea3 	bl	d513c <free>
}
   d53f6:	4620      	mov	r0, r4
   d53f8:	bd10      	pop	{r4, pc}

000d53fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d53fa:	b510      	push	{r4, lr}
   d53fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d53fe:	6800      	ldr	r0, [r0, #0]
   d5400:	b108      	cbz	r0, d5406 <_ZN6String10invalidateEv+0xc>
   d5402:	f7ff fe9b 	bl	d513c <free>
	buffer = NULL;
   d5406:	2300      	movs	r3, #0
	capacity = len = 0;
   d5408:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d540c:	6023      	str	r3, [r4, #0]
}
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5410:	b538      	push	{r3, r4, r5, lr}
   d5412:	4604      	mov	r4, r0
   d5414:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5416:	6800      	ldr	r0, [r0, #0]
   d5418:	3101      	adds	r1, #1
   d541a:	f7ff fe97 	bl	d514c <realloc>
	if (newbuffer) {
   d541e:	b110      	cbz	r0, d5426 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5420:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5424:	2001      	movs	r0, #1
	}
	return 0;
}
   d5426:	bd38      	pop	{r3, r4, r5, pc}

000d5428 <_ZN6String7reserveEj>:
{
   d5428:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d542a:	6803      	ldr	r3, [r0, #0]
{
   d542c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d542e:	b123      	cbz	r3, d543a <_ZN6String7reserveEj+0x12>
   d5430:	6843      	ldr	r3, [r0, #4]
   d5432:	428b      	cmp	r3, r1
   d5434:	d301      	bcc.n	d543a <_ZN6String7reserveEj+0x12>
   d5436:	2001      	movs	r0, #1
}
   d5438:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d543a:	4620      	mov	r0, r4
   d543c:	f7ff ffe8 	bl	d5410 <_ZN6String12changeBufferEj>
   d5440:	2800      	cmp	r0, #0
   d5442:	d0f9      	beq.n	d5438 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5444:	68a3      	ldr	r3, [r4, #8]
   d5446:	2b00      	cmp	r3, #0
   d5448:	d1f5      	bne.n	d5436 <_ZN6String7reserveEj+0xe>
   d544a:	6822      	ldr	r2, [r4, #0]
   d544c:	7013      	strb	r3, [r2, #0]
   d544e:	e7f2      	b.n	d5436 <_ZN6String7reserveEj+0xe>

000d5450 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5450:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5452:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5454:	4611      	mov	r1, r2
   d5456:	9201      	str	r2, [sp, #4]
{
   d5458:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d545a:	f7ff ffe5 	bl	d5428 <_ZN6String7reserveEj>
   d545e:	9a01      	ldr	r2, [sp, #4]
   d5460:	b928      	cbnz	r0, d546e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff ffc9 	bl	d53fa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5468:	4620      	mov	r0, r4
   d546a:	b003      	add	sp, #12
   d546c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d546e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5470:	4629      	mov	r1, r5
   d5472:	6820      	ldr	r0, [r4, #0]
   d5474:	f001 fa44 	bl	d6900 <memcpy>
	buffer[len] = 0;
   d5478:	6822      	ldr	r2, [r4, #0]
   d547a:	68a3      	ldr	r3, [r4, #8]
   d547c:	2100      	movs	r1, #0
   d547e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5480:	e7f2      	b.n	d5468 <_ZN6String4copyEPKcj+0x18>

000d5482 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5482:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5484:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5486:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d548a:	4604      	mov	r4, r0
	len = 0;
   d548c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d548e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5490:	b141      	cbz	r1, d54a4 <_ZN6StringC1EPKc+0x22>
   d5492:	4608      	mov	r0, r1
   d5494:	9101      	str	r1, [sp, #4]
   d5496:	f001 fa75 	bl	d6984 <strlen>
   d549a:	9901      	ldr	r1, [sp, #4]
   d549c:	4602      	mov	r2, r0
   d549e:	4620      	mov	r0, r4
   d54a0:	f7ff ffd6 	bl	d5450 <_ZN6String4copyEPKcj>
}
   d54a4:	4620      	mov	r0, r4
   d54a6:	b002      	add	sp, #8
   d54a8:	bd10      	pop	{r4, pc}

000d54aa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d54aa:	b538      	push	{r3, r4, r5, lr}
   d54ac:	4605      	mov	r5, r0
	if (buffer) {
   d54ae:	6800      	ldr	r0, [r0, #0]
{
   d54b0:	460c      	mov	r4, r1
	if (buffer) {
   d54b2:	b168      	cbz	r0, d54d0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d54b4:	686a      	ldr	r2, [r5, #4]
   d54b6:	688b      	ldr	r3, [r1, #8]
   d54b8:	429a      	cmp	r2, r3
   d54ba:	d307      	bcc.n	d54cc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d54bc:	6809      	ldr	r1, [r1, #0]
   d54be:	f001 fa59 	bl	d6974 <strcpy>
			len = rhs.len;
   d54c2:	68a3      	ldr	r3, [r4, #8]
   d54c4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d54c6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d54c8:	60a3      	str	r3, [r4, #8]
}
   d54ca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d54cc:	f7ff fe36 	bl	d513c <free>
	buffer = rhs.buffer;
   d54d0:	6823      	ldr	r3, [r4, #0]
   d54d2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d54d4:	6863      	ldr	r3, [r4, #4]
   d54d6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d54d8:	68a3      	ldr	r3, [r4, #8]
   d54da:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d54dc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d54de:	e9c4 3300 	strd	r3, r3, [r4]
   d54e2:	e7f1      	b.n	d54c8 <_ZN6String4moveERS_+0x1e>

000d54e4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d54e4:	4288      	cmp	r0, r1
{
   d54e6:	b510      	push	{r4, lr}
   d54e8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d54ea:	d001      	beq.n	d54f0 <_ZN6StringaSEOS_+0xc>
   d54ec:	f7ff ffdd 	bl	d54aa <_ZN6String4moveERS_>
	return *this;
}
   d54f0:	4620      	mov	r0, r4
   d54f2:	bd10      	pop	{r4, pc}

000d54f4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d54f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d54f6:	429a      	cmp	r2, r3
{
   d54f8:	460f      	mov	r7, r1
   d54fa:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d54fc:	490c      	ldr	r1, [pc, #48]	; (d5530 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d54fe:	bf88      	it	hi
   d5500:	4613      	movhi	r3, r2
{
   d5502:	4614      	mov	r4, r2
   d5504:	4606      	mov	r6, r0
	if (left > right) {
   d5506:	bf84      	itt	hi
   d5508:	462c      	movhi	r4, r5
   d550a:	461d      	movhi	r5, r3
	String out;
   d550c:	f7ff ffb9 	bl	d5482 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d5510:	68ba      	ldr	r2, [r7, #8]
   d5512:	42a2      	cmp	r2, r4
   d5514:	d30a      	bcc.n	d552c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5516:	6839      	ldr	r1, [r7, #0]
   d5518:	42aa      	cmp	r2, r5
   d551a:	bf94      	ite	ls
   d551c:	ebc4 0202 	rsbls	r2, r4, r2
   d5520:	ebc4 0205 	rsbhi	r2, r4, r5
   d5524:	4421      	add	r1, r4
   d5526:	4630      	mov	r0, r6
   d5528:	f7ff ff92 	bl	d5450 <_ZN6String4copyEPKcj>
	return out;
}
   d552c:	4630      	mov	r0, r6
   d552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5530:	000d70cc 	.word	0x000d70cc

000d5534 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5534:	b510      	push	{r4, lr}
   d5536:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5538:	6800      	ldr	r0, [r0, #0]
   d553a:	b108      	cbz	r0, d5540 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d553c:	f7ff fc12 	bl	d4d64 <os_mutex_recursive_destroy>
    }
   d5540:	4620      	mov	r0, r4
   d5542:	bd10      	pop	{r4, pc}

000d5544 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5544:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5546:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5548:	4604      	mov	r4, r0
      if (_M_manager)
   d554a:	b113      	cbz	r3, d5552 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d554c:	2203      	movs	r2, #3
   d554e:	4601      	mov	r1, r0
   d5550:	4798      	blx	r3
    }
   d5552:	4620      	mov	r0, r4
   d5554:	bd10      	pop	{r4, pc}
	...

000d5558 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5558:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d555a:	4c06      	ldr	r4, [pc, #24]	; (d5574 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d555c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d555e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5560:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5562:	f7ff fbf7 	bl	d4d54 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5566:	4620      	mov	r0, r4
   d5568:	4a03      	ldr	r2, [pc, #12]	; (d5578 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d556a:	4904      	ldr	r1, [pc, #16]	; (d557c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5570:	f000 bd66 	b.w	d6040 <__aeabi_atexit>
   d5574:	2003e658 	.word	0x2003e658
   d5578:	2003e608 	.word	0x2003e608
   d557c:	000d5535 	.word	0x000d5535

000d5580 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5582:	4606      	mov	r6, r0
   d5584:	460d      	mov	r5, r1
  size_t n = 0;
   d5586:	188f      	adds	r7, r1, r2
   d5588:	2400      	movs	r4, #0
  while (size--) {
   d558a:	42bd      	cmp	r5, r7
   d558c:	d00c      	beq.n	d55a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d558e:	6833      	ldr	r3, [r6, #0]
   d5590:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5594:	689b      	ldr	r3, [r3, #8]
   d5596:	4630      	mov	r0, r6
   d5598:	4798      	blx	r3
     if (chunk>=0)
   d559a:	1e03      	subs	r3, r0, #0
   d559c:	db01      	blt.n	d55a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d559e:	441c      	add	r4, r3
  while (size--) {
   d55a0:	e7f3      	b.n	d558a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d55a2:	2c00      	cmp	r4, #0
   d55a4:	bf08      	it	eq
   d55a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d55a8:	4620      	mov	r0, r4
   d55aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d55ac:	b513      	push	{r0, r1, r4, lr}
   d55ae:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d55b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d55b2:	b159      	cbz	r1, d55cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d55b4:	9101      	str	r1, [sp, #4]
   d55b6:	f001 f9e5 	bl	d6984 <strlen>
   d55ba:	6823      	ldr	r3, [r4, #0]
   d55bc:	9901      	ldr	r1, [sp, #4]
   d55be:	68db      	ldr	r3, [r3, #12]
   d55c0:	4602      	mov	r2, r0
   d55c2:	4620      	mov	r0, r4
    }
   d55c4:	b002      	add	sp, #8
   d55c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d55ca:	4718      	bx	r3
    }
   d55cc:	b002      	add	sp, #8
   d55ce:	bd10      	pop	{r4, pc}

000d55d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d55d0:	6803      	ldr	r3, [r0, #0]
   d55d2:	689b      	ldr	r3, [r3, #8]
   d55d4:	4718      	bx	r3

000d55d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d55d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d55d8:	210d      	movs	r1, #13
{
   d55da:	4605      	mov	r5, r0
  size_t n = print('\r');
   d55dc:	f7ff fff8 	bl	d55d0 <_ZN5Print5printEc>
  n += print('\n');
   d55e0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d55e2:	4604      	mov	r4, r0
  n += print('\n');
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7ff fff3 	bl	d55d0 <_ZN5Print5printEc>
  return n;
}
   d55ea:	4420      	add	r0, r4
   d55ec:	bd38      	pop	{r3, r4, r5, pc}

000d55ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d55ee:	b530      	push	{r4, r5, lr}
   d55f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d55f2:	2300      	movs	r3, #0
   d55f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d55f8:	2a01      	cmp	r2, #1
   d55fa:	bf98      	it	ls
   d55fc:	220a      	movls	r2, #10
   d55fe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5600:	460d      	mov	r5, r1
   d5602:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5606:	fb01 5312 	mls	r3, r1, r2, r5
   d560a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d560e:	2b09      	cmp	r3, #9
   d5610:	bf94      	ite	ls
   d5612:	3330      	addls	r3, #48	; 0x30
   d5614:	3337      	addhi	r3, #55	; 0x37
   d5616:	b2db      	uxtb	r3, r3
  } while(n);
   d5618:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d561a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d561e:	d9ef      	bls.n	d5600 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5620:	4621      	mov	r1, r4
   d5622:	f7ff ffc3 	bl	d55ac <_ZN5Print5writeEPKc>
}
   d5626:	b00b      	add	sp, #44	; 0x2c
   d5628:	bd30      	pop	{r4, r5, pc}

000d562a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d562e:	b086      	sub	sp, #24
   d5630:	af00      	add	r7, sp, #0
   d5632:	4605      	mov	r5, r0
   d5634:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5636:	1d38      	adds	r0, r7, #4
   d5638:	2114      	movs	r1, #20
{
   d563a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d563c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d563e:	f7ff fd95 	bl	d516c <vsnprintf>

    if (n<bufsize)
   d5642:	2813      	cmp	r0, #19
   d5644:	d80e      	bhi.n	d5664 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5646:	1d39      	adds	r1, r7, #4
   d5648:	4628      	mov	r0, r5
   d564a:	f7ff ffaf 	bl	d55ac <_ZN5Print5writeEPKc>
   d564e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5650:	b11e      	cbz	r6, d565a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5652:	4628      	mov	r0, r5
   d5654:	f7ff ffbf 	bl	d55d6 <_ZN5Print7printlnEv>
   d5658:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d565a:	4620      	mov	r0, r4
   d565c:	3718      	adds	r7, #24
   d565e:	46bd      	mov	sp, r7
   d5660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5664:	f100 0308 	add.w	r3, r0, #8
   d5668:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d566c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d566e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5672:	4622      	mov	r2, r4
   d5674:	1c41      	adds	r1, r0, #1
   d5676:	683b      	ldr	r3, [r7, #0]
   d5678:	4668      	mov	r0, sp
   d567a:	f7ff fd77 	bl	d516c <vsnprintf>
  return write(str);
   d567e:	4669      	mov	r1, sp
   d5680:	4628      	mov	r0, r5
   d5682:	f7ff ff93 	bl	d55ac <_ZN5Print5writeEPKc>
   d5686:	4604      	mov	r4, r0
   d5688:	46c5      	mov	sp, r8
   d568a:	e7e1      	b.n	d5650 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d568c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d568c:	2300      	movs	r3, #0
   d568e:	6840      	ldr	r0, [r0, #4]
   d5690:	461a      	mov	r2, r3
   d5692:	4619      	mov	r1, r3
   d5694:	f7ff bce2 	b.w	d505c <network_on>

000d5698 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5698:	4b01      	ldr	r3, [pc, #4]	; (d56a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d569a:	4a02      	ldr	r2, [pc, #8]	; (d56a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d569c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d569e:	4770      	bx	lr
   d56a0:	2003e65c 	.word	0x2003e65c
   d56a4:	000d6f78 	.word	0x000d6f78

000d56a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d56a8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56aa:	2000      	movs	r0, #0
   d56ac:	f7ff fd2e 	bl	d510c <spark_sync_time_pending>
   d56b0:	b128      	cbz	r0, d56be <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56b2:	f7ff fd1b 	bl	d50ec <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56b6:	f080 0001 	eor.w	r0, r0, #1
   d56ba:	b2c0      	uxtb	r0, r0
    }
   d56bc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56be:	2001      	movs	r0, #1
   d56c0:	e7fc      	b.n	d56bc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d56c4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d56c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d56c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d56cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d56d0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d56d2:	d411      	bmi.n	d56f8 <_ZN9TimeClass4zoneEf+0x34>
   d56d4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d56d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d56dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d56e0:	dc0a      	bgt.n	d56f8 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d56e2:	eddf 7a06 	vldr	s15, [pc, #24]	; d56fc <_ZN9TimeClass4zoneEf+0x38>
   d56e6:	ee60 7a27 	vmul.f32	s15, s0, s15
   d56ea:	ee17 0a90 	vmov	r0, s15
   d56ee:	f001 f89f 	bl	d6830 <__aeabi_f2lz>
   d56f2:	4b03      	ldr	r3, [pc, #12]	; (d5700 <_ZN9TimeClass4zoneEf+0x3c>)
   d56f4:	e9c3 0100 	strd	r0, r1, [r3]
}
   d56f8:	bd08      	pop	{r3, pc}
   d56fa:	bf00      	nop
   d56fc:	45610000 	.word	0x45610000
   d5700:	2003e670 	.word	0x2003e670

000d5704 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5704:	b530      	push	{r4, r5, lr}
   d5706:	4604      	mov	r4, r0
    t += time_zone_cache;
   d5708:	4818      	ldr	r0, [pc, #96]	; (d576c <_ZN9TimeClass7timeStrEx+0x68>)
   d570a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d570e:	1852      	adds	r2, r2, r1
   d5710:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d5714:	4816      	ldr	r0, [pc, #88]	; (d5770 <_ZN9TimeClass7timeStrEx+0x6c>)
   d5716:	e9d0 1000 	ldrd	r1, r0, [r0]
   d571a:	1852      	adds	r2, r2, r1
{
   d571c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d571e:	eb40 0303 	adc.w	r3, r0, r3
   d5722:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d5726:	2224      	movs	r2, #36	; 0x24
   d5728:	eb0d 0002 	add.w	r0, sp, r2
   d572c:	2100      	movs	r1, #0
   d572e:	f001 f8f5 	bl	d691c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d5732:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d5734:	a909      	add	r1, sp, #36	; 0x24
   d5736:	4668      	mov	r0, sp
   d5738:	f7ff fd28 	bl	d518c <localtime_r>
    char ascstr[26] = {};
   d573c:	2216      	movs	r2, #22
   d573e:	4629      	mov	r1, r5
   d5740:	a803      	add	r0, sp, #12
   d5742:	9502      	str	r5, [sp, #8]
   d5744:	f001 f8ea 	bl	d691c <memset>
    asctime_r(&calendar_time, ascstr);
   d5748:	a902      	add	r1, sp, #8
   d574a:	a809      	add	r0, sp, #36	; 0x24
   d574c:	f001 f8a4 	bl	d6898 <asctime_r>
    int len = strlen(ascstr);
   d5750:	a802      	add	r0, sp, #8
   d5752:	f001 f917 	bl	d6984 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d5756:	ab12      	add	r3, sp, #72	; 0x48
   d5758:	4418      	add	r0, r3
    return String(ascstr);
   d575a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d575c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d5760:	4620      	mov	r0, r4
   d5762:	f7ff fe8e 	bl	d5482 <_ZN6StringC1EPKc>
}
   d5766:	4620      	mov	r0, r4
   d5768:	b013      	add	sp, #76	; 0x4c
   d576a:	bd30      	pop	{r4, r5, pc}
   d576c:	2003e670 	.word	0x2003e670
   d5770:	2003e668 	.word	0x2003e668

000d5774 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5774:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5776:	2000      	movs	r0, #0
   d5778:	f7ff fadc 	bl	d4d34 <hal_rtc_time_is_valid>
    if (rtcstate)
   d577c:	4604      	mov	r4, r0
   d577e:	b9a0      	cbnz	r0, d57aa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5780:	f7ff fc18 	bl	d4fb4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5784:	2801      	cmp	r0, #1
   d5786:	d110      	bne.n	d57aa <_ZN9TimeClass7isValidEv+0x36>
   d5788:	4620      	mov	r0, r4
   d578a:	f7ff fc2b 	bl	d4fe4 <system_thread_get_state>
   d578e:	b960      	cbnz	r0, d57aa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5790:	f7ff ff8a 	bl	d56a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5794:	b910      	cbnz	r0, d579c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5796:	f7ff fca1 	bl	d50dc <spark_process>
        while (_while() && !_condition()) {
   d579a:	e7f9      	b.n	d5790 <_ZN9TimeClass7isValidEv+0x1c>
   d579c:	f7ff ff84 	bl	d56a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d57a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d57a4:	2000      	movs	r0, #0
   d57a6:	f7ff bac5 	b.w	d4d34 <hal_rtc_time_is_valid>
}
   d57aa:	4620      	mov	r0, r4
   d57ac:	bd10      	pop	{r4, pc}

000d57ae <_ZN9TimeClass3nowEv>:
{
   d57ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d57b0:	f7ff ffe0 	bl	d5774 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d57b4:	2210      	movs	r2, #16
   d57b6:	2100      	movs	r1, #0
   d57b8:	4668      	mov	r0, sp
   d57ba:	f001 f8af 	bl	d691c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d57be:	2100      	movs	r1, #0
   d57c0:	4668      	mov	r0, sp
   d57c2:	f7ff fabf 	bl	d4d44 <hal_rtc_get_time>
}
   d57c6:	9800      	ldr	r0, [sp, #0]
   d57c8:	b005      	add	sp, #20
   d57ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d57d0:	4b02      	ldr	r3, [pc, #8]	; (d57dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d57d2:	681a      	ldr	r2, [r3, #0]
   d57d4:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d57d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d57d8:	4770      	bx	lr
   d57da:	bf00      	nop
   d57dc:	2003e59c 	.word	0x2003e59c
   d57e0:	2003e660 	.word	0x2003e660

000d57e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d57e4:	2100      	movs	r1, #0
   d57e6:	f7ff bbf5 	b.w	d4fd4 <system_delay_ms>

000d57ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d57ea:	b510      	push	{r4, lr}
   d57ec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57ee:	f7ff fea9 	bl	d5544 <_ZNSt14_Function_baseD1Ev>
   d57f2:	4620      	mov	r0, r4
   d57f4:	bd10      	pop	{r4, pc}
	...

000d57f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d57f8:	4803      	ldr	r0, [pc, #12]	; (d5808 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d57fa:	4a04      	ldr	r2, [pc, #16]	; (d580c <_GLOBAL__sub_I_RGB+0x14>)
   d57fc:	4904      	ldr	r1, [pc, #16]	; (d5810 <_GLOBAL__sub_I_RGB+0x18>)
   d57fe:	2300      	movs	r3, #0
   d5800:	6083      	str	r3, [r0, #8]
   d5802:	f000 bc1d 	b.w	d6040 <__aeabi_atexit>
   d5806:	bf00      	nop
   d5808:	2003e678 	.word	0x2003e678
   d580c:	2003e608 	.word	0x2003e608
   d5810:	000d57eb 	.word	0x000d57eb

000d5814 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5814:	4b01      	ldr	r3, [pc, #4]	; (d581c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5816:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5818:	4770      	bx	lr
   d581a:	bf00      	nop
   d581c:	2003e5a0 	.word	0x2003e5a0

000d5820 <serialEventRun>:
{
   d5820:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5822:	4b0b      	ldr	r3, [pc, #44]	; (d5850 <serialEventRun+0x30>)
   d5824:	b143      	cbz	r3, d5838 <serialEventRun+0x18>
   d5826:	f000 f957 	bl	d5ad8 <_Z16_fetch_usbserialv>
   d582a:	6803      	ldr	r3, [r0, #0]
   d582c:	691b      	ldr	r3, [r3, #16]
   d582e:	4798      	blx	r3
   d5830:	2800      	cmp	r0, #0
   d5832:	dd01      	ble.n	d5838 <serialEventRun+0x18>
        serialEvent();
   d5834:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5838:	4b06      	ldr	r3, [pc, #24]	; (d5854 <serialEventRun+0x34>)
   d583a:	b143      	cbz	r3, d584e <serialEventRun+0x2e>
   d583c:	f000 f9ca 	bl	d5bd4 <_Z22__fetch_global_Serial1v>
   d5840:	6803      	ldr	r3, [r0, #0]
   d5842:	691b      	ldr	r3, [r3, #16]
   d5844:	4798      	blx	r3
   d5846:	2800      	cmp	r0, #0
   d5848:	dd01      	ble.n	d584e <serialEventRun+0x2e>
        serialEvent1();
   d584a:	f3af 8000 	nop.w
}
   d584e:	bd08      	pop	{r3, pc}
	...

000d5858 <_post_loop>:
{
   d5858:	b508      	push	{r3, lr}
	serialEventRun();
   d585a:	f7ff ffe1 	bl	d5820 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d585e:	f7ff fa61 	bl	d4d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5862:	4b01      	ldr	r3, [pc, #4]	; (d5868 <_post_loop+0x10>)
   d5864:	6018      	str	r0, [r3, #0]
}
   d5866:	bd08      	pop	{r3, pc}
   d5868:	2003e7d8 	.word	0x2003e7d8

000d586c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d586c:	4802      	ldr	r0, [pc, #8]	; (d5878 <_Z33system_initialize_user_backup_ramv+0xc>)
   d586e:	4a03      	ldr	r2, [pc, #12]	; (d587c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5870:	4903      	ldr	r1, [pc, #12]	; (d5880 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5872:	1a12      	subs	r2, r2, r0
   d5874:	f001 b844 	b.w	d6900 <memcpy>
   d5878:	2003f400 	.word	0x2003f400
   d587c:	2003f404 	.word	0x2003f404
   d5880:	000d7130 	.word	0x000d7130

000d5884 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5884:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5886:	2300      	movs	r3, #0
   d5888:	9300      	str	r3, [sp, #0]
   d588a:	461a      	mov	r2, r3
   d588c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5890:	f7ff fbba 	bl	d5008 <system_ctrl_set_result>
}
   d5894:	b003      	add	sp, #12
   d5896:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d589c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d589c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d589e:	8843      	ldrh	r3, [r0, #2]
   d58a0:	2b0a      	cmp	r3, #10
   d58a2:	d008      	beq.n	d58b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58a4:	2b50      	cmp	r3, #80	; 0x50
   d58a6:	d10b      	bne.n	d58c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d58a8:	4b09      	ldr	r3, [pc, #36]	; (d58d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58aa:	681b      	ldr	r3, [r3, #0]
   d58ac:	b14b      	cbz	r3, d58c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d58ae:	b003      	add	sp, #12
   d58b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d58b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d58b6:	f7ff ffe5 	bl	d5884 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d58ba:	b003      	add	sp, #12
   d58bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58c0:	2300      	movs	r3, #0
   d58c2:	9300      	str	r3, [sp, #0]
   d58c4:	461a      	mov	r2, r3
   d58c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58ca:	f7ff fb9d 	bl	d5008 <system_ctrl_set_result>
}
   d58ce:	e7f4      	b.n	d58ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d58d0:	2003e68c 	.word	0x2003e68c

000d58d4 <module_user_init_hook>:
{
   d58d4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58d6:	4c12      	ldr	r4, [pc, #72]	; (d5920 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d58d8:	4812      	ldr	r0, [pc, #72]	; (d5924 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58da:	4d13      	ldr	r5, [pc, #76]	; (d5928 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d58dc:	2100      	movs	r1, #0
   d58de:	f7ff fc4d 	bl	d517c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58e2:	6823      	ldr	r3, [r4, #0]
   d58e4:	42ab      	cmp	r3, r5
   d58e6:	4b11      	ldr	r3, [pc, #68]	; (d592c <module_user_init_hook+0x58>)
   d58e8:	bf0c      	ite	eq
   d58ea:	2201      	moveq	r2, #1
   d58ec:	2200      	movne	r2, #0
   d58ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d58f0:	d002      	beq.n	d58f8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d58f2:	f7ff ffbb 	bl	d586c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d58f6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d58f8:	f7ff fa04 	bl	d4d04 <HAL_RNG_GetRandomNumber>
   d58fc:	4604      	mov	r4, r0
    srand(seed);
   d58fe:	f001 f815 	bl	d692c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5902:	4b0b      	ldr	r3, [pc, #44]	; (d5930 <module_user_init_hook+0x5c>)
   d5904:	b113      	cbz	r3, d590c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5906:	4620      	mov	r0, r4
   d5908:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d590c:	2100      	movs	r1, #0
   d590e:	4808      	ldr	r0, [pc, #32]	; (d5930 <module_user_init_hook+0x5c>)
   d5910:	f7ff fc04 	bl	d511c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5918:	4806      	ldr	r0, [pc, #24]	; (d5934 <module_user_init_hook+0x60>)
   d591a:	2100      	movs	r1, #0
   d591c:	f7ff bb6a 	b.w	d4ff4 <system_ctrl_set_app_request_handler>
   d5920:	2003f400 	.word	0x2003f400
   d5924:	000d5815 	.word	0x000d5815
   d5928:	9a271c1e 	.word	0x9a271c1e
   d592c:	2003e688 	.word	0x2003e688
   d5930:	00000000 	.word	0x00000000
   d5934:	000d589d 	.word	0x000d589d

000d5938 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5938:	4770      	bx	lr

000d593a <_ZN9IPAddressD0Ev>:
   d593a:	b510      	push	{r4, lr}
   d593c:	2118      	movs	r1, #24
   d593e:	4604      	mov	r4, r0
   d5940:	f000 fb83 	bl	d604a <_ZdlPvj>
   d5944:	4620      	mov	r0, r4
   d5946:	bd10      	pop	{r4, pc}

000d5948 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5948:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d594a:	7d03      	ldrb	r3, [r0, #20]
   d594c:	2b06      	cmp	r3, #6
{
   d594e:	b08d      	sub	sp, #52	; 0x34
   d5950:	460e      	mov	r6, r1
   d5952:	f100 0704 	add.w	r7, r0, #4
   d5956:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d595a:	d012      	beq.n	d5982 <_ZNK9IPAddress7printToER5Print+0x3a>
   d595c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5960:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5964:	220a      	movs	r2, #10
   d5966:	4630      	mov	r0, r6
   d5968:	f7ff fe41 	bl	d55ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d596c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d596e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5970:	d019      	beq.n	d59a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5972:	2c00      	cmp	r4, #0
   d5974:	d0f4      	beq.n	d5960 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5976:	212e      	movs	r1, #46	; 0x2e
   d5978:	4630      	mov	r0, r6
   d597a:	f7ff fe29 	bl	d55d0 <_ZN5Print5printEc>
   d597e:	4404      	add	r4, r0
   d5980:	e7ee      	b.n	d5960 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5982:	232f      	movs	r3, #47	; 0x2f
   d5984:	466a      	mov	r2, sp
   d5986:	4639      	mov	r1, r7
   d5988:	200a      	movs	r0, #10
		buf[0] = 0;
   d598a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d598e:	f7ff f9f1 	bl	d4d74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5992:	4668      	mov	r0, sp
   d5994:	f000 fff6 	bl	d6984 <strlen>
   d5998:	6833      	ldr	r3, [r6, #0]
   d599a:	4602      	mov	r2, r0
   d599c:	68db      	ldr	r3, [r3, #12]
   d599e:	4669      	mov	r1, sp
   d59a0:	4630      	mov	r0, r6
   d59a2:	4798      	blx	r3
   d59a4:	4604      	mov	r4, r0
    }
    return n;
}
   d59a6:	4620      	mov	r0, r4
   d59a8:	b00d      	add	sp, #52	; 0x34
   d59aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d59ac:	b510      	push	{r4, lr}
   d59ae:	4b05      	ldr	r3, [pc, #20]	; (d59c4 <_ZN9IPAddressC1Ev+0x18>)
   d59b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d59b2:	2211      	movs	r2, #17
   d59b4:	f840 3b04 	str.w	r3, [r0], #4
   d59b8:	2100      	movs	r1, #0
   d59ba:	f000 ffaf 	bl	d691c <memset>
}
   d59be:	4620      	mov	r0, r4
   d59c0:	bd10      	pop	{r4, pc}
   d59c2:	bf00      	nop
   d59c4:	000d6fa0 	.word	0x000d6fa0

000d59c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d59c8:	4603      	mov	r3, r0
   d59ca:	4a07      	ldr	r2, [pc, #28]	; (d59e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d59cc:	b510      	push	{r4, lr}
   d59ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d59d2:	f101 0210 	add.w	r2, r1, #16
   d59d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d59da:	f843 4b04 	str.w	r4, [r3], #4
   d59de:	4291      	cmp	r1, r2
   d59e0:	d1f9      	bne.n	d59d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d59e2:	780a      	ldrb	r2, [r1, #0]
   d59e4:	701a      	strb	r2, [r3, #0]
}
   d59e6:	bd10      	pop	{r4, pc}
   d59e8:	000d6fa0 	.word	0x000d6fa0

000d59ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d59ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d59ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d59f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d59f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d59fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d59fe:	2304      	movs	r3, #4
   d5a00:	6041      	str	r1, [r0, #4]
   d5a02:	7503      	strb	r3, [r0, #20]
}
   d5a04:	bd10      	pop	{r4, pc}
	...

000d5a08 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5a08:	b513      	push	{r0, r1, r4, lr}
   d5a0a:	4b05      	ldr	r3, [pc, #20]	; (d5a20 <_ZN9IPAddressC1EPKh+0x18>)
   d5a0c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5a0e:	78cb      	ldrb	r3, [r1, #3]
   d5a10:	9300      	str	r3, [sp, #0]
   d5a12:	788b      	ldrb	r3, [r1, #2]
   d5a14:	784a      	ldrb	r2, [r1, #1]
   d5a16:	7809      	ldrb	r1, [r1, #0]
   d5a18:	f7ff ffe8 	bl	d59ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5a1c:	b002      	add	sp, #8
   d5a1e:	bd10      	pop	{r4, pc}
   d5a20:	000d6fa0 	.word	0x000d6fa0

000d5a24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a24:	7441      	strb	r1, [r0, #17]
}
   d5a26:	4770      	bx	lr

000d5a28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a28:	4770      	bx	lr

000d5a2a <_ZN9USBSerial4readEv>:
{
   d5a2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a2c:	2100      	movs	r1, #0
   d5a2e:	7c00      	ldrb	r0, [r0, #16]
   d5a30:	f7ff faa0 	bl	d4f74 <HAL_USB_USART_Receive_Data>
}
   d5a34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a38:	bd08      	pop	{r3, pc}

000d5a3a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5a3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a3c:	2101      	movs	r1, #1
   d5a3e:	7c00      	ldrb	r0, [r0, #16]
   d5a40:	f7ff fa98 	bl	d4f74 <HAL_USB_USART_Receive_Data>
}
   d5a44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a48:	bd08      	pop	{r3, pc}

000d5a4a <_ZN9USBSerial17availableForWriteEv>:
{
   d5a4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a4c:	7c00      	ldrb	r0, [r0, #16]
   d5a4e:	f7ff fa89 	bl	d4f64 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a56:	bd08      	pop	{r3, pc}

000d5a58 <_ZN9USBSerial9availableEv>:
{
   d5a58:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a5a:	7c00      	ldrb	r0, [r0, #16]
   d5a5c:	f7ff fa7a 	bl	d4f54 <HAL_USB_USART_Available_Data>
}
   d5a60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN9USBSerial5writeEh>:
{
   d5a66:	b513      	push	{r0, r1, r4, lr}
   d5a68:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a6a:	7c00      	ldrb	r0, [r0, #16]
{
   d5a6c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a6e:	f7ff fa79 	bl	d4f64 <HAL_USB_USART_Available_Data_For_Write>
   d5a72:	2800      	cmp	r0, #0
   d5a74:	9901      	ldr	r1, [sp, #4]
   d5a76:	dc01      	bgt.n	d5a7c <_ZN9USBSerial5writeEh+0x16>
   d5a78:	7c60      	ldrb	r0, [r4, #17]
   d5a7a:	b120      	cbz	r0, d5a86 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a7c:	7c20      	ldrb	r0, [r4, #16]
   d5a7e:	f7ff fa81 	bl	d4f84 <HAL_USB_USART_Send_Data>
   d5a82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5a86:	b002      	add	sp, #8
   d5a88:	bd10      	pop	{r4, pc}

000d5a8a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5a8a:	7c00      	ldrb	r0, [r0, #16]
   d5a8c:	f7ff ba82 	b.w	d4f94 <HAL_USB_USART_Flush_Data>

000d5a90 <_ZN9USBSerialD0Ev>:
   d5a90:	b510      	push	{r4, lr}
   d5a92:	2114      	movs	r1, #20
   d5a94:	4604      	mov	r4, r0
   d5a96:	f000 fad8 	bl	d604a <_ZdlPvj>
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	bd10      	pop	{r4, pc}
	...

000d5aa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5aa0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5aa6:	4604      	mov	r4, r0
   d5aa8:	4608      	mov	r0, r1
   d5aaa:	2100      	movs	r1, #0
   d5aac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5ab0:	4b04      	ldr	r3, [pc, #16]	; (d5ac4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ab2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5ab4:	2301      	movs	r3, #1
  _serial = serial;
   d5ab6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ab8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5aba:	4611      	mov	r1, r2
   d5abc:	f7ff fa42 	bl	d4f44 <HAL_USB_USART_Init>
}
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}
   d5ac4:	000d6fb4 	.word	0x000d6fb4

000d5ac8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ac8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5aca:	2214      	movs	r2, #20
{
   d5acc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5ace:	2100      	movs	r1, #0
   d5ad0:	f000 ff24 	bl	d691c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	bd10      	pop	{r4, pc}

000d5ad8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ad8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ada:	4c10      	ldr	r4, [pc, #64]	; (d5b1c <_Z16_fetch_usbserialv+0x44>)
{
   d5adc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ade:	a803      	add	r0, sp, #12
   d5ae0:	f7ff fff2 	bl	d5ac8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ae4:	7821      	ldrb	r1, [r4, #0]
   d5ae6:	f3bf 8f5b 	dmb	ish
   d5aea:	f011 0101 	ands.w	r1, r1, #1
   d5aee:	d111      	bne.n	d5b14 <_Z16_fetch_usbserialv+0x3c>
   d5af0:	4620      	mov	r0, r4
   d5af2:	9101      	str	r1, [sp, #4]
   d5af4:	f7fe fadc 	bl	d40b0 <__cxa_guard_acquire>
   d5af8:	9901      	ldr	r1, [sp, #4]
   d5afa:	b158      	cbz	r0, d5b14 <_Z16_fetch_usbserialv+0x3c>
   d5afc:	aa03      	add	r2, sp, #12
   d5afe:	4808      	ldr	r0, [pc, #32]	; (d5b20 <_Z16_fetch_usbserialv+0x48>)
   d5b00:	f7ff ffce 	bl	d5aa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b04:	4620      	mov	r0, r4
   d5b06:	f7fe fad8 	bl	d40ba <__cxa_guard_release>
   d5b0a:	4a06      	ldr	r2, [pc, #24]	; (d5b24 <_Z16_fetch_usbserialv+0x4c>)
   d5b0c:	4906      	ldr	r1, [pc, #24]	; (d5b28 <_Z16_fetch_usbserialv+0x50>)
   d5b0e:	4804      	ldr	r0, [pc, #16]	; (d5b20 <_Z16_fetch_usbserialv+0x48>)
   d5b10:	f000 fa96 	bl	d6040 <__aeabi_atexit>
	return _usbserial;
}
   d5b14:	4802      	ldr	r0, [pc, #8]	; (d5b20 <_Z16_fetch_usbserialv+0x48>)
   d5b16:	b008      	add	sp, #32
   d5b18:	bd10      	pop	{r4, pc}
   d5b1a:	bf00      	nop
   d5b1c:	2003e690 	.word	0x2003e690
   d5b20:	2003e694 	.word	0x2003e694
   d5b24:	2003e608 	.word	0x2003e608
   d5b28:	000d5a29 	.word	0x000d5a29

000d5b2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b2c:	4770      	bx	lr

000d5b2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b2e:	7441      	strb	r1, [r0, #17]
}
   d5b30:	4770      	bx	lr

000d5b32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5b32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b34:	7c00      	ldrb	r0, [r0, #16]
   d5b36:	f7ff f95d 	bl	d4df4 <hal_usart_available_data_for_write>
}
   d5b3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b3e:	bd08      	pop	{r3, pc}

000d5b40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5b42:	7c00      	ldrb	r0, [r0, #16]
   d5b44:	f7ff f92e 	bl	d4da4 <hal_usart_available>
}
   d5b48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b4c:	bd08      	pop	{r3, pc}

000d5b4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b50:	7c00      	ldrb	r0, [r0, #16]
   d5b52:	f7ff f937 	bl	d4dc4 <hal_usart_peek>
}
   d5b56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b5a:	bd08      	pop	{r3, pc}

000d5b5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5b5e:	7c00      	ldrb	r0, [r0, #16]
   d5b60:	f7ff f928 	bl	d4db4 <hal_usart_read>
}
   d5b64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b68:	bd08      	pop	{r3, pc}

000d5b6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5b6a:	7c00      	ldrb	r0, [r0, #16]
   d5b6c:	f7ff b932 	b.w	d4dd4 <hal_usart_flush>

000d5b70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b72:	7c45      	ldrb	r5, [r0, #17]
{
   d5b74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b76:	b12d      	cbz	r5, d5b84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5b78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b7a:	b003      	add	sp, #12
   d5b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5b80:	f7ff b908 	b.w	d4d94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b84:	7c00      	ldrb	r0, [r0, #16]
   d5b86:	9101      	str	r1, [sp, #4]
   d5b88:	f7ff f934 	bl	d4df4 <hal_usart_available_data_for_write>
   d5b8c:	2800      	cmp	r0, #0
   d5b8e:	9901      	ldr	r1, [sp, #4]
   d5b90:	dcf2      	bgt.n	d5b78 <_ZN11USARTSerial5writeEh+0x8>
}
   d5b92:	4628      	mov	r0, r5
   d5b94:	b003      	add	sp, #12
   d5b96:	bd30      	pop	{r4, r5, pc}

000d5b98 <_ZN11USARTSerialD0Ev>:
   d5b98:	b510      	push	{r4, lr}
   d5b9a:	2114      	movs	r1, #20
   d5b9c:	4604      	mov	r4, r0
   d5b9e:	f000 fa54 	bl	d604a <_ZdlPvj>
   d5ba2:	4620      	mov	r0, r4
   d5ba4:	bd10      	pop	{r4, pc}
	...

000d5ba8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	f04f 0c00 	mov.w	ip, #0
   d5bae:	4604      	mov	r4, r0
   d5bb0:	4608      	mov	r0, r1
   d5bb2:	4611      	mov	r1, r2
   d5bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bb8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5bbc:	4a04      	ldr	r2, [pc, #16]	; (d5bd0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5bbe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5bc0:	2201      	movs	r2, #1
  _serial = serial;
   d5bc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5bc4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5bc6:	461a      	mov	r2, r3
   d5bc8:	f7ff f8dc 	bl	d4d84 <hal_usart_init>
}
   d5bcc:	4620      	mov	r0, r4
   d5bce:	bd10      	pop	{r4, pc}
   d5bd0:	000d6fe4 	.word	0x000d6fe4

000d5bd4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5bd4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5bd6:	4c0e      	ldr	r4, [pc, #56]	; (d5c10 <_Z22__fetch_global_Serial1v+0x3c>)
   d5bd8:	7821      	ldrb	r1, [r4, #0]
   d5bda:	f3bf 8f5b 	dmb	ish
   d5bde:	f011 0101 	ands.w	r1, r1, #1
   d5be2:	d112      	bne.n	d5c0a <_Z22__fetch_global_Serial1v+0x36>
   d5be4:	4620      	mov	r0, r4
   d5be6:	9101      	str	r1, [sp, #4]
   d5be8:	f7fe fa62 	bl	d40b0 <__cxa_guard_acquire>
   d5bec:	9901      	ldr	r1, [sp, #4]
   d5bee:	b160      	cbz	r0, d5c0a <_Z22__fetch_global_Serial1v+0x36>
   d5bf0:	4a08      	ldr	r2, [pc, #32]	; (d5c14 <_Z22__fetch_global_Serial1v+0x40>)
   d5bf2:	4b09      	ldr	r3, [pc, #36]	; (d5c18 <_Z22__fetch_global_Serial1v+0x44>)
   d5bf4:	4809      	ldr	r0, [pc, #36]	; (d5c1c <_Z22__fetch_global_Serial1v+0x48>)
   d5bf6:	f7ff ffd7 	bl	d5ba8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	f7fe fa5d 	bl	d40ba <__cxa_guard_release>
   d5c00:	4a07      	ldr	r2, [pc, #28]	; (d5c20 <_Z22__fetch_global_Serial1v+0x4c>)
   d5c02:	4908      	ldr	r1, [pc, #32]	; (d5c24 <_Z22__fetch_global_Serial1v+0x50>)
   d5c04:	4805      	ldr	r0, [pc, #20]	; (d5c1c <_Z22__fetch_global_Serial1v+0x48>)
   d5c06:	f000 fa1b 	bl	d6040 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c0a:	4804      	ldr	r0, [pc, #16]	; (d5c1c <_Z22__fetch_global_Serial1v+0x48>)
   d5c0c:	b002      	add	sp, #8
   d5c0e:	bd10      	pop	{r4, pc}
   d5c10:	2003e6a8 	.word	0x2003e6a8
   d5c14:	2003e6ac 	.word	0x2003e6ac
   d5c18:	2003e730 	.word	0x2003e730
   d5c1c:	2003e7b4 	.word	0x2003e7b4
   d5c20:	2003e608 	.word	0x2003e608
   d5c24:	000d5b2d 	.word	0x000d5b2d

000d5c28 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5c28:	4770      	bx	lr

000d5c2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c2c:	4606      	mov	r6, r0
   d5c2e:	4615      	mov	r5, r2
   d5c30:	460c      	mov	r4, r1
   d5c32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c34:	42bc      	cmp	r4, r7
   d5c36:	d006      	beq.n	d5c46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c38:	6833      	ldr	r3, [r6, #0]
   d5c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c3e:	689b      	ldr	r3, [r3, #8]
   d5c40:	4630      	mov	r0, r6
   d5c42:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5c44:	e7f6      	b.n	d5c34 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5c46:	4628      	mov	r0, r5
   d5c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c4a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5c4a:	7c00      	ldrb	r0, [r0, #16]
   d5c4c:	2200      	movs	r2, #0
   d5c4e:	f7ff b8f1 	b.w	d4e34 <hal_i2c_write>

000d5c52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5c52:	7c00      	ldrb	r0, [r0, #16]
   d5c54:	2100      	movs	r1, #0
   d5c56:	f7ff b8f5 	b.w	d4e44 <hal_i2c_available>

000d5c5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5c5a:	7c00      	ldrb	r0, [r0, #16]
   d5c5c:	2100      	movs	r1, #0
   d5c5e:	f7ff b8f9 	b.w	d4e54 <hal_i2c_read>

000d5c62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5c62:	7c00      	ldrb	r0, [r0, #16]
   d5c64:	2100      	movs	r1, #0
   d5c66:	f7ff b8fd 	b.w	d4e64 <hal_i2c_peek>

000d5c6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5c6a:	7c00      	ldrb	r0, [r0, #16]
   d5c6c:	2100      	movs	r1, #0
   d5c6e:	f7ff b901 	b.w	d4e74 <hal_i2c_flush>

000d5c72 <_ZN7TwoWireD0Ev>:
   d5c72:	b510      	push	{r4, lr}
   d5c74:	2114      	movs	r1, #20
   d5c76:	4604      	mov	r4, r0
   d5c78:	f000 f9e7 	bl	d604a <_ZdlPvj>
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	bd10      	pop	{r4, pc}

000d5c80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5c80:	b510      	push	{r4, lr}
   d5c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c86:	4604      	mov	r4, r0
   d5c88:	4608      	mov	r0, r1
   d5c8a:	2100      	movs	r1, #0
   d5c8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5c90:	4b03      	ldr	r3, [pc, #12]	; (d5ca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5c92:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5c94:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5c96:	4611      	mov	r1, r2
   d5c98:	f7ff f8fc 	bl	d4e94 <hal_i2c_init>
}
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	bd10      	pop	{r4, pc}
   d5ca0:	000d7014 	.word	0x000d7014

000d5ca4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ca4:	2300      	movs	r3, #0
   d5ca6:	7c00      	ldrb	r0, [r0, #16]
   d5ca8:	461a      	mov	r2, r3
   d5caa:	4619      	mov	r1, r3
   d5cac:	f7ff b8aa 	b.w	d4e04 <hal_i2c_begin>

000d5cb0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5cb0:	7c00      	ldrb	r0, [r0, #16]
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	f7ff b8ae 	b.w	d4e14 <hal_i2c_begin_transmission>

000d5cb8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5cb8:	b2c9      	uxtb	r1, r1
   d5cba:	f7ff bff9 	b.w	d5cb0 <_ZN7TwoWire17beginTransmissionEh>

000d5cbe <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5cbe:	7c00      	ldrb	r0, [r0, #16]
   d5cc0:	2200      	movs	r2, #0
   d5cc2:	f7ff b8af 	b.w	d4e24 <hal_i2c_end_transmission>

000d5cc6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5cc6:	2101      	movs	r1, #1
   d5cc8:	f7ff bff9 	b.w	d5cbe <_ZN7TwoWire15endTransmissionEh>

000d5ccc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ccc:	2200      	movs	r2, #0
   d5cce:	6840      	ldr	r0, [r0, #4]
   d5cd0:	4611      	mov	r1, r2
   d5cd2:	f7ff b9bb 	b.w	d504c <network_ready>

000d5cd6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cd6:	2200      	movs	r2, #0
   d5cd8:	6840      	ldr	r0, [r0, #4]
   d5cda:	4611      	mov	r1, r2
   d5cdc:	f7ff b9d6 	b.w	d508c <network_listening>

000d5ce0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	6840      	ldr	r0, [r0, #4]
   d5ce4:	4611      	mov	r1, r2
   d5ce6:	f7ff b9e1 	b.w	d50ac <network_get_listen_timeout>

000d5cea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5cea:	6840      	ldr	r0, [r0, #4]
   d5cec:	2200      	movs	r2, #0
   d5cee:	f7ff b9d5 	b.w	d509c <network_set_listen_timeout>

000d5cf2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	2200      	movs	r2, #0
   d5cf6:	f081 0101 	eor.w	r1, r1, #1
   d5cfa:	f7ff b9bf 	b.w	d507c <network_listen>

000d5cfe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5cfe:	2300      	movs	r3, #0
   d5d00:	6840      	ldr	r0, [r0, #4]
   d5d02:	461a      	mov	r2, r3
   d5d04:	4619      	mov	r1, r3
   d5d06:	f7ff b9b1 	b.w	d506c <network_off>

000d5d0a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	6840      	ldr	r0, [r0, #4]
   d5d0e:	4611      	mov	r1, r2
   d5d10:	f7ff b98c 	b.w	d502c <network_connecting>

000d5d14 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d14:	6840      	ldr	r0, [r0, #4]
   d5d16:	2200      	movs	r2, #0
   d5d18:	2102      	movs	r1, #2
   d5d1a:	f7ff b98f 	b.w	d503c <network_disconnect>

000d5d1e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d1e:	2300      	movs	r3, #0
   d5d20:	6840      	ldr	r0, [r0, #4]
   d5d22:	461a      	mov	r2, r3
   d5d24:	f7ff b97a 	b.w	d501c <network_connect>

000d5d28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d28:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d2a:	2204      	movs	r2, #4
   d5d2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d2e:	4a02      	ldr	r2, [pc, #8]	; (d5d38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d30:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5d32:	4770      	bx	lr
   d5d34:	2003e7c8 	.word	0x2003e7c8
   d5d38:	000d703c 	.word	0x000d703c

000d5d3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d3c:	2300      	movs	r3, #0
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	461a      	mov	r2, r3
   d5d42:	f7ff b96b 	b.w	d501c <network_connect>

000d5d46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d46:	6840      	ldr	r0, [r0, #4]
   d5d48:	2200      	movs	r2, #0
   d5d4a:	2102      	movs	r1, #2
   d5d4c:	f7ff b976 	b.w	d503c <network_disconnect>

000d5d50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d50:	2200      	movs	r2, #0
   d5d52:	6840      	ldr	r0, [r0, #4]
   d5d54:	4611      	mov	r1, r2
   d5d56:	f7ff b969 	b.w	d502c <network_connecting>

000d5d5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d5a:	2200      	movs	r2, #0
   d5d5c:	6840      	ldr	r0, [r0, #4]
   d5d5e:	4611      	mov	r1, r2
   d5d60:	f7ff b974 	b.w	d504c <network_ready>

000d5d64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d64:	2300      	movs	r3, #0
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	461a      	mov	r2, r3
   d5d6a:	4619      	mov	r1, r3
   d5d6c:	f7ff b976 	b.w	d505c <network_on>

000d5d70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d70:	2300      	movs	r3, #0
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	461a      	mov	r2, r3
   d5d76:	4619      	mov	r1, r3
   d5d78:	f7ff b978 	b.w	d506c <network_off>

000d5d7c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5d7c:	6840      	ldr	r0, [r0, #4]
   d5d7e:	2100      	movs	r1, #0
   d5d80:	f7ff b99c 	b.w	d50bc <network_is_on>

000d5d84 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	2100      	movs	r1, #0
   d5d88:	f7ff b9a0 	b.w	d50cc <network_is_off>

000d5d8c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d8c:	6840      	ldr	r0, [r0, #4]
   d5d8e:	2200      	movs	r2, #0
   d5d90:	f081 0101 	eor.w	r1, r1, #1
   d5d94:	f7ff b972 	b.w	d507c <network_listen>

000d5d98 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d98:	6840      	ldr	r0, [r0, #4]
   d5d9a:	2200      	movs	r2, #0
   d5d9c:	f7ff b97e 	b.w	d509c <network_set_listen_timeout>

000d5da0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5da0:	2200      	movs	r2, #0
   d5da2:	6840      	ldr	r0, [r0, #4]
   d5da4:	4611      	mov	r1, r2
   d5da6:	f7ff b981 	b.w	d50ac <network_get_listen_timeout>

000d5daa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5daa:	2200      	movs	r2, #0
   d5dac:	6840      	ldr	r0, [r0, #4]
   d5dae:	4611      	mov	r1, r2
   d5db0:	f7ff b96c 	b.w	d508c <network_listening>

000d5db4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5db8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5dba:	b095      	sub	sp, #84	; 0x54
   d5dbc:	4616      	mov	r6, r2
   d5dbe:	460d      	mov	r5, r1
   d5dc0:	4607      	mov	r7, r0
    IPAddress addr;
   d5dc2:	f7ff fdf3 	bl	d59ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5dc6:	4621      	mov	r1, r4
   d5dc8:	2218      	movs	r2, #24
   d5dca:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5dcc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5dce:	f000 fda5 	bl	d691c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5dd2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5dd4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5dd8:	4621      	mov	r1, r4
   d5dda:	466b      	mov	r3, sp
   d5ddc:	aa0c      	add	r2, sp, #48	; 0x30
   d5dde:	4630      	mov	r0, r6
   d5de0:	f7fe ff70 	bl	d4cc4 <netdb_getaddrinfo>
    if (!r) {
   d5de4:	4604      	mov	r4, r0
   d5de6:	2800      	cmp	r0, #0
   d5de8:	d14c      	bne.n	d5e84 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5dea:	4602      	mov	r2, r0
   d5dec:	2101      	movs	r1, #1
   d5dee:	6868      	ldr	r0, [r5, #4]
   d5df0:	f7ff f92c 	bl	d504c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5df4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5df6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5df8:	4622      	mov	r2, r4
   d5dfa:	6868      	ldr	r0, [r5, #4]
   d5dfc:	f7ff f926 	bl	d504c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e00:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e02:	4681      	mov	r9, r0
        bool ok = false;
   d5e04:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e06:	2e00      	cmp	r6, #0
   d5e08:	d03c      	beq.n	d5e84 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5e0a:	2900      	cmp	r1, #0
   d5e0c:	d13a      	bne.n	d5e84 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e0e:	6873      	ldr	r3, [r6, #4]
   d5e10:	2b02      	cmp	r3, #2
   d5e12:	d003      	beq.n	d5e1c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5e14:	2b0a      	cmp	r3, #10
   d5e16:	d011      	beq.n	d5e3c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e18:	69f6      	ldr	r6, [r6, #28]
   d5e1a:	e7f4      	b.n	d5e06 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5e1c:	f1b8 0f00 	cmp.w	r8, #0
   d5e20:	d00a      	beq.n	d5e38 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e22:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5e24:	a806      	add	r0, sp, #24
   d5e26:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5e28:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5e2a:	f7ff fded 	bl	d5a08 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e30:	1d3c      	adds	r4, r7, #4
   d5e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e34:	682b      	ldr	r3, [r5, #0]
   d5e36:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5e38:	4641      	mov	r1, r8
   d5e3a:	e7ed      	b.n	d5e18 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e3c:	f1b9 0f00 	cmp.w	r9, #0
   d5e40:	d101      	bne.n	d5e46 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5e42:	4649      	mov	r1, r9
   d5e44:	e7e8      	b.n	d5e18 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e46:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e48:	2210      	movs	r2, #16
   d5e4a:	a801      	add	r0, sp, #4
   d5e4c:	f000 fd66 	bl	d691c <memset>
                    a.v = 6;
   d5e50:	2306      	movs	r3, #6
   d5e52:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e56:	ad01      	add	r5, sp, #4
   d5e58:	f104 0308 	add.w	r3, r4, #8
   d5e5c:	3418      	adds	r4, #24
   d5e5e:	6818      	ldr	r0, [r3, #0]
   d5e60:	6859      	ldr	r1, [r3, #4]
   d5e62:	462a      	mov	r2, r5
   d5e64:	c203      	stmia	r2!, {r0, r1}
   d5e66:	3308      	adds	r3, #8
   d5e68:	42a3      	cmp	r3, r4
   d5e6a:	4615      	mov	r5, r2
   d5e6c:	d1f7      	bne.n	d5e5e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5e6e:	a901      	add	r1, sp, #4
   d5e70:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5e72:	ad07      	add	r5, sp, #28
   d5e74:	f7ff fda8 	bl	d59c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e7a:	1d3c      	adds	r4, r7, #4
   d5e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e7e:	682b      	ldr	r3, [r5, #0]
   d5e80:	7023      	strb	r3, [r4, #0]
   d5e82:	e7de      	b.n	d5e42 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e84:	9800      	ldr	r0, [sp, #0]
   d5e86:	f7fe ff15 	bl	d4cb4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e8a:	4638      	mov	r0, r7
   d5e8c:	b015      	add	sp, #84	; 0x54
   d5e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5e94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e94:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e96:	4a03      	ldr	r2, [pc, #12]	; (d5ea4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e98:	601a      	str	r2, [r3, #0]
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	605a      	str	r2, [r3, #4]

} // spark
   d5e9e:	4770      	bx	lr
   d5ea0:	2003e7d0 	.word	0x2003e7d0
   d5ea4:	000d7078 	.word	0x000d7078

000d5ea8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5ea8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5eaa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5eac:	d902      	bls.n	d5eb4 <pinAvailable+0xc>
    return false;
   d5eae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5eb0:	b002      	add	sp, #8
   d5eb2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5eb4:	f1a0 030b 	sub.w	r3, r0, #11
   d5eb8:	2b02      	cmp	r3, #2
   d5eba:	d81a      	bhi.n	d5ef2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5ebc:	4c17      	ldr	r4, [pc, #92]	; (d5f1c <pinAvailable+0x74>)
   d5ebe:	7821      	ldrb	r1, [r4, #0]
   d5ec0:	f3bf 8f5b 	dmb	ish
   d5ec4:	f011 0101 	ands.w	r1, r1, #1
   d5ec8:	d10b      	bne.n	d5ee2 <pinAvailable+0x3a>
   d5eca:	4620      	mov	r0, r4
   d5ecc:	9101      	str	r1, [sp, #4]
   d5ece:	f7fe f8ef 	bl	d40b0 <__cxa_guard_acquire>
   d5ed2:	9901      	ldr	r1, [sp, #4]
   d5ed4:	b128      	cbz	r0, d5ee2 <pinAvailable+0x3a>
   d5ed6:	4812      	ldr	r0, [pc, #72]	; (d5f20 <pinAvailable+0x78>)
   d5ed8:	f7ff f9a4 	bl	d5224 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5edc:	4620      	mov	r0, r4
   d5ede:	f7fe f8ec 	bl	d40ba <__cxa_guard_release>
   d5ee2:	4b0f      	ldr	r3, [pc, #60]	; (d5f20 <pinAvailable+0x78>)
   d5ee4:	7818      	ldrb	r0, [r3, #0]
   d5ee6:	f7ff f80d 	bl	d4f04 <hal_spi_is_enabled>
   d5eea:	2800      	cmp	r0, #0
   d5eec:	d1df      	bne.n	d5eae <pinAvailable+0x6>
  return true; // 'pin' is available
   d5eee:	2001      	movs	r0, #1
   d5ef0:	e7de      	b.n	d5eb0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5ef2:	2801      	cmp	r0, #1
   d5ef4:	d809      	bhi.n	d5f0a <pinAvailable+0x62>
   d5ef6:	f000 f87b 	bl	d5ff0 <_Z19__fetch_global_Wirev>
   d5efa:	2100      	movs	r1, #0
   d5efc:	7c00      	ldrb	r0, [r0, #16]
   d5efe:	f7fe ffc1 	bl	d4e84 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5f02:	f080 0001 	eor.w	r0, r0, #1
   d5f06:	b2c0      	uxtb	r0, r0
   d5f08:	e7d2      	b.n	d5eb0 <pinAvailable+0x8>
   d5f0a:	3809      	subs	r0, #9
   d5f0c:	2801      	cmp	r0, #1
   d5f0e:	d8ee      	bhi.n	d5eee <pinAvailable+0x46>
   d5f10:	f7ff fe60 	bl	d5bd4 <_Z22__fetch_global_Serial1v>
   d5f14:	7c00      	ldrb	r0, [r0, #16]
   d5f16:	f7fe ff65 	bl	d4de4 <hal_usart_is_enabled>
   d5f1a:	e7f2      	b.n	d5f02 <pinAvailable+0x5a>
   d5f1c:	2003e634 	.word	0x2003e634
   d5f20:	2003e638 	.word	0x2003e638

000d5f24 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f24:	2823      	cmp	r0, #35	; 0x23
{
   d5f26:	b538      	push	{r3, r4, r5, lr}
   d5f28:	4604      	mov	r4, r0
   d5f2a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f2c:	d80a      	bhi.n	d5f44 <pinMode+0x20>
   d5f2e:	29ff      	cmp	r1, #255	; 0xff
   d5f30:	d008      	beq.n	d5f44 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5f32:	f7ff ffb9 	bl	d5ea8 <pinAvailable>
   d5f36:	b128      	cbz	r0, d5f44 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5f38:	4629      	mov	r1, r5
   d5f3a:	4620      	mov	r0, r4
}
   d5f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5f40:	f7fe bec8 	b.w	d4cd4 <HAL_Pin_Mode>
}
   d5f44:	bd38      	pop	{r3, r4, r5, pc}

000d5f46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f46:	b538      	push	{r3, r4, r5, lr}
   d5f48:	4604      	mov	r4, r0
   d5f4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f4c:	f7fe feca 	bl	d4ce4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5f50:	28ff      	cmp	r0, #255	; 0xff
   d5f52:	d010      	beq.n	d5f76 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5f54:	2806      	cmp	r0, #6
   d5f56:	d804      	bhi.n	d5f62 <digitalWrite+0x1c>
   d5f58:	234d      	movs	r3, #77	; 0x4d
   d5f5a:	fa23 f000 	lsr.w	r0, r3, r0
   d5f5e:	07c3      	lsls	r3, r0, #31
   d5f60:	d409      	bmi.n	d5f76 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f62:	4620      	mov	r0, r4
   d5f64:	f7ff ffa0 	bl	d5ea8 <pinAvailable>
   d5f68:	b128      	cbz	r0, d5f76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	4620      	mov	r0, r4
}
   d5f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5f72:	f7fe bebf 	b.w	d4cf4 <HAL_GPIO_Write>
}
   d5f76:	bd38      	pop	{r3, r4, r5, pc}

000d5f78 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f7c:	4690      	mov	r8, r2
   d5f7e:	461f      	mov	r7, r3
   d5f80:	2400      	movs	r4, #0
   d5f82:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5f84:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d5f86:	f1b8 0f00 	cmp.w	r8, #0
   d5f8a:	d113      	bne.n	d5fb4 <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5f8c:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5f90:	f001 0101 	and.w	r1, r1, #1
   d5f94:	4630      	mov	r0, r6
   d5f96:	f7ff ffd6 	bl	d5f46 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d5f9a:	2101      	movs	r1, #1
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	f7ff ffd2 	bl	d5f46 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5fa2:	3401      	adds	r4, #1
   d5fa4:	2100      	movs	r1, #0
   d5fa6:	4628      	mov	r0, r5
   d5fa8:	f7ff ffcd 	bl	d5f46 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d5fac:	2c08      	cmp	r4, #8
   d5fae:	d1ea      	bne.n	d5f86 <shiftOut+0xe>
  }
}
   d5fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5fb4:	f1c4 0107 	rsb	r1, r4, #7
   d5fb8:	fa47 f101 	asr.w	r1, r7, r1
   d5fbc:	e7e8      	b.n	d5f90 <shiftOut+0x18>
	...

000d5fc0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5fc0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	2520      	movs	r5, #32
   d5fc6:	8043      	strh	r3, [r0, #2]
   d5fc8:	2314      	movs	r3, #20
{
   d5fca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5fcc:	8003      	strh	r3, [r0, #0]
   d5fce:	6085      	str	r5, [r0, #8]
   d5fd0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5fd2:	4906      	ldr	r1, [pc, #24]	; (d5fec <_Z17acquireWireBufferv+0x2c>)
   d5fd4:	4628      	mov	r0, r5
   d5fd6:	f000 f83a 	bl	d604e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5fda:	4904      	ldr	r1, [pc, #16]	; (d5fec <_Z17acquireWireBufferv+0x2c>)
	};
   d5fdc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5fde:	4628      	mov	r0, r5
   d5fe0:	f000 f835 	bl	d604e <_ZnajRKSt9nothrow_t>
	};
   d5fe4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	bd38      	pop	{r3, r4, r5, pc}
   d5fea:	bf00      	nop
   d5fec:	000d70ac 	.word	0x000d70ac

000d5ff0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ff0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ff2:	4d0f      	ldr	r5, [pc, #60]	; (d6030 <_Z19__fetch_global_Wirev+0x40>)
   d5ff4:	7829      	ldrb	r1, [r5, #0]
   d5ff6:	f3bf 8f5b 	dmb	ish
   d5ffa:	f011 0401 	ands.w	r4, r1, #1
{
   d5ffe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6000:	d113      	bne.n	d602a <_Z19__fetch_global_Wirev+0x3a>
   d6002:	4628      	mov	r0, r5
   d6004:	f7fe f854 	bl	d40b0 <__cxa_guard_acquire>
   d6008:	b178      	cbz	r0, d602a <_Z19__fetch_global_Wirev+0x3a>
   d600a:	a801      	add	r0, sp, #4
   d600c:	f7ff ffd8 	bl	d5fc0 <_Z17acquireWireBufferv>
   d6010:	aa01      	add	r2, sp, #4
   d6012:	4621      	mov	r1, r4
   d6014:	4807      	ldr	r0, [pc, #28]	; (d6034 <_Z19__fetch_global_Wirev+0x44>)
   d6016:	f7ff fe33 	bl	d5c80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d601a:	4628      	mov	r0, r5
   d601c:	f7fe f84d 	bl	d40ba <__cxa_guard_release>
   d6020:	4a05      	ldr	r2, [pc, #20]	; (d6038 <_Z19__fetch_global_Wirev+0x48>)
   d6022:	4906      	ldr	r1, [pc, #24]	; (d603c <_Z19__fetch_global_Wirev+0x4c>)
   d6024:	4803      	ldr	r0, [pc, #12]	; (d6034 <_Z19__fetch_global_Wirev+0x44>)
   d6026:	f000 f80b 	bl	d6040 <__aeabi_atexit>
	return wire;
}
   d602a:	4802      	ldr	r0, [pc, #8]	; (d6034 <_Z19__fetch_global_Wirev+0x44>)
   d602c:	b007      	add	sp, #28
   d602e:	bd30      	pop	{r4, r5, pc}
   d6030:	2003e7dc 	.word	0x2003e7dc
   d6034:	2003e7e0 	.word	0x2003e7e0
   d6038:	2003e608 	.word	0x2003e608
   d603c:	000d5c29 	.word	0x000d5c29

000d6040 <__aeabi_atexit>:
   d6040:	460b      	mov	r3, r1
   d6042:	4601      	mov	r1, r0
   d6044:	4618      	mov	r0, r3
   d6046:	f000 bc4d 	b.w	d68e4 <__cxa_atexit>

000d604a <_ZdlPvj>:
   d604a:	f7fe b824 	b.w	d4096 <_ZdlPv>

000d604e <_ZnajRKSt9nothrow_t>:
   d604e:	f7fe b820 	b.w	d4092 <_Znaj>
	...

000d6054 <__aeabi_drsub>:
   d6054:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6058:	e002      	b.n	d6060 <__adddf3>
   d605a:	bf00      	nop

000d605c <__aeabi_dsub>:
   d605c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6060 <__adddf3>:
   d6060:	b530      	push	{r4, r5, lr}
   d6062:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6066:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d606a:	ea94 0f05 	teq	r4, r5
   d606e:	bf08      	it	eq
   d6070:	ea90 0f02 	teqeq	r0, r2
   d6074:	bf1f      	itttt	ne
   d6076:	ea54 0c00 	orrsne.w	ip, r4, r0
   d607a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d607e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6082:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6086:	f000 80e2 	beq.w	d624e <__adddf3+0x1ee>
   d608a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d608e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6092:	bfb8      	it	lt
   d6094:	426d      	neglt	r5, r5
   d6096:	dd0c      	ble.n	d60b2 <__adddf3+0x52>
   d6098:	442c      	add	r4, r5
   d609a:	ea80 0202 	eor.w	r2, r0, r2
   d609e:	ea81 0303 	eor.w	r3, r1, r3
   d60a2:	ea82 0000 	eor.w	r0, r2, r0
   d60a6:	ea83 0101 	eor.w	r1, r3, r1
   d60aa:	ea80 0202 	eor.w	r2, r0, r2
   d60ae:	ea81 0303 	eor.w	r3, r1, r3
   d60b2:	2d36      	cmp	r5, #54	; 0x36
   d60b4:	bf88      	it	hi
   d60b6:	bd30      	pophi	{r4, r5, pc}
   d60b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d60bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d60c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d60c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d60c8:	d002      	beq.n	d60d0 <__adddf3+0x70>
   d60ca:	4240      	negs	r0, r0
   d60cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d60d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d60d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d60d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d60dc:	d002      	beq.n	d60e4 <__adddf3+0x84>
   d60de:	4252      	negs	r2, r2
   d60e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d60e4:	ea94 0f05 	teq	r4, r5
   d60e8:	f000 80a7 	beq.w	d623a <__adddf3+0x1da>
   d60ec:	f1a4 0401 	sub.w	r4, r4, #1
   d60f0:	f1d5 0e20 	rsbs	lr, r5, #32
   d60f4:	db0d      	blt.n	d6112 <__adddf3+0xb2>
   d60f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d60fa:	fa22 f205 	lsr.w	r2, r2, r5
   d60fe:	1880      	adds	r0, r0, r2
   d6100:	f141 0100 	adc.w	r1, r1, #0
   d6104:	fa03 f20e 	lsl.w	r2, r3, lr
   d6108:	1880      	adds	r0, r0, r2
   d610a:	fa43 f305 	asr.w	r3, r3, r5
   d610e:	4159      	adcs	r1, r3
   d6110:	e00e      	b.n	d6130 <__adddf3+0xd0>
   d6112:	f1a5 0520 	sub.w	r5, r5, #32
   d6116:	f10e 0e20 	add.w	lr, lr, #32
   d611a:	2a01      	cmp	r2, #1
   d611c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6120:	bf28      	it	cs
   d6122:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6126:	fa43 f305 	asr.w	r3, r3, r5
   d612a:	18c0      	adds	r0, r0, r3
   d612c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6134:	d507      	bpl.n	d6146 <__adddf3+0xe6>
   d6136:	f04f 0e00 	mov.w	lr, #0
   d613a:	f1dc 0c00 	rsbs	ip, ip, #0
   d613e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6142:	eb6e 0101 	sbc.w	r1, lr, r1
   d6146:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d614a:	d31b      	bcc.n	d6184 <__adddf3+0x124>
   d614c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6150:	d30c      	bcc.n	d616c <__adddf3+0x10c>
   d6152:	0849      	lsrs	r1, r1, #1
   d6154:	ea5f 0030 	movs.w	r0, r0, rrx
   d6158:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d615c:	f104 0401 	add.w	r4, r4, #1
   d6160:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6164:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6168:	f080 809a 	bcs.w	d62a0 <__adddf3+0x240>
   d616c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6170:	bf08      	it	eq
   d6172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6176:	f150 0000 	adcs.w	r0, r0, #0
   d617a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d617e:	ea41 0105 	orr.w	r1, r1, r5
   d6182:	bd30      	pop	{r4, r5, pc}
   d6184:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6188:	4140      	adcs	r0, r0
   d618a:	eb41 0101 	adc.w	r1, r1, r1
   d618e:	3c01      	subs	r4, #1
   d6190:	bf28      	it	cs
   d6192:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6196:	d2e9      	bcs.n	d616c <__adddf3+0x10c>
   d6198:	f091 0f00 	teq	r1, #0
   d619c:	bf04      	itt	eq
   d619e:	4601      	moveq	r1, r0
   d61a0:	2000      	moveq	r0, #0
   d61a2:	fab1 f381 	clz	r3, r1
   d61a6:	bf08      	it	eq
   d61a8:	3320      	addeq	r3, #32
   d61aa:	f1a3 030b 	sub.w	r3, r3, #11
   d61ae:	f1b3 0220 	subs.w	r2, r3, #32
   d61b2:	da0c      	bge.n	d61ce <__adddf3+0x16e>
   d61b4:	320c      	adds	r2, #12
   d61b6:	dd08      	ble.n	d61ca <__adddf3+0x16a>
   d61b8:	f102 0c14 	add.w	ip, r2, #20
   d61bc:	f1c2 020c 	rsb	r2, r2, #12
   d61c0:	fa01 f00c 	lsl.w	r0, r1, ip
   d61c4:	fa21 f102 	lsr.w	r1, r1, r2
   d61c8:	e00c      	b.n	d61e4 <__adddf3+0x184>
   d61ca:	f102 0214 	add.w	r2, r2, #20
   d61ce:	bfd8      	it	le
   d61d0:	f1c2 0c20 	rsble	ip, r2, #32
   d61d4:	fa01 f102 	lsl.w	r1, r1, r2
   d61d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d61dc:	bfdc      	itt	le
   d61de:	ea41 010c 	orrle.w	r1, r1, ip
   d61e2:	4090      	lslle	r0, r2
   d61e4:	1ae4      	subs	r4, r4, r3
   d61e6:	bfa2      	ittt	ge
   d61e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d61ec:	4329      	orrge	r1, r5
   d61ee:	bd30      	popge	{r4, r5, pc}
   d61f0:	ea6f 0404 	mvn.w	r4, r4
   d61f4:	3c1f      	subs	r4, #31
   d61f6:	da1c      	bge.n	d6232 <__adddf3+0x1d2>
   d61f8:	340c      	adds	r4, #12
   d61fa:	dc0e      	bgt.n	d621a <__adddf3+0x1ba>
   d61fc:	f104 0414 	add.w	r4, r4, #20
   d6200:	f1c4 0220 	rsb	r2, r4, #32
   d6204:	fa20 f004 	lsr.w	r0, r0, r4
   d6208:	fa01 f302 	lsl.w	r3, r1, r2
   d620c:	ea40 0003 	orr.w	r0, r0, r3
   d6210:	fa21 f304 	lsr.w	r3, r1, r4
   d6214:	ea45 0103 	orr.w	r1, r5, r3
   d6218:	bd30      	pop	{r4, r5, pc}
   d621a:	f1c4 040c 	rsb	r4, r4, #12
   d621e:	f1c4 0220 	rsb	r2, r4, #32
   d6222:	fa20 f002 	lsr.w	r0, r0, r2
   d6226:	fa01 f304 	lsl.w	r3, r1, r4
   d622a:	ea40 0003 	orr.w	r0, r0, r3
   d622e:	4629      	mov	r1, r5
   d6230:	bd30      	pop	{r4, r5, pc}
   d6232:	fa21 f004 	lsr.w	r0, r1, r4
   d6236:	4629      	mov	r1, r5
   d6238:	bd30      	pop	{r4, r5, pc}
   d623a:	f094 0f00 	teq	r4, #0
   d623e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6242:	bf06      	itte	eq
   d6244:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6248:	3401      	addeq	r4, #1
   d624a:	3d01      	subne	r5, #1
   d624c:	e74e      	b.n	d60ec <__adddf3+0x8c>
   d624e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6252:	bf18      	it	ne
   d6254:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6258:	d029      	beq.n	d62ae <__adddf3+0x24e>
   d625a:	ea94 0f05 	teq	r4, r5
   d625e:	bf08      	it	eq
   d6260:	ea90 0f02 	teqeq	r0, r2
   d6264:	d005      	beq.n	d6272 <__adddf3+0x212>
   d6266:	ea54 0c00 	orrs.w	ip, r4, r0
   d626a:	bf04      	itt	eq
   d626c:	4619      	moveq	r1, r3
   d626e:	4610      	moveq	r0, r2
   d6270:	bd30      	pop	{r4, r5, pc}
   d6272:	ea91 0f03 	teq	r1, r3
   d6276:	bf1e      	ittt	ne
   d6278:	2100      	movne	r1, #0
   d627a:	2000      	movne	r0, #0
   d627c:	bd30      	popne	{r4, r5, pc}
   d627e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6282:	d105      	bne.n	d6290 <__adddf3+0x230>
   d6284:	0040      	lsls	r0, r0, #1
   d6286:	4149      	adcs	r1, r1
   d6288:	bf28      	it	cs
   d628a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d628e:	bd30      	pop	{r4, r5, pc}
   d6290:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6294:	bf3c      	itt	cc
   d6296:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d629a:	bd30      	popcc	{r4, r5, pc}
   d629c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d62a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d62a8:	f04f 0000 	mov.w	r0, #0
   d62ac:	bd30      	pop	{r4, r5, pc}
   d62ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d62b2:	bf1a      	itte	ne
   d62b4:	4619      	movne	r1, r3
   d62b6:	4610      	movne	r0, r2
   d62b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d62bc:	bf1c      	itt	ne
   d62be:	460b      	movne	r3, r1
   d62c0:	4602      	movne	r2, r0
   d62c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62c6:	bf06      	itte	eq
   d62c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d62cc:	ea91 0f03 	teqeq	r1, r3
   d62d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d62d4:	bd30      	pop	{r4, r5, pc}
   d62d6:	bf00      	nop

000d62d8 <__aeabi_ui2d>:
   d62d8:	f090 0f00 	teq	r0, #0
   d62dc:	bf04      	itt	eq
   d62de:	2100      	moveq	r1, #0
   d62e0:	4770      	bxeq	lr
   d62e2:	b530      	push	{r4, r5, lr}
   d62e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d62e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62ec:	f04f 0500 	mov.w	r5, #0
   d62f0:	f04f 0100 	mov.w	r1, #0
   d62f4:	e750      	b.n	d6198 <__adddf3+0x138>
   d62f6:	bf00      	nop

000d62f8 <__aeabi_i2d>:
   d62f8:	f090 0f00 	teq	r0, #0
   d62fc:	bf04      	itt	eq
   d62fe:	2100      	moveq	r1, #0
   d6300:	4770      	bxeq	lr
   d6302:	b530      	push	{r4, r5, lr}
   d6304:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6308:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d630c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6310:	bf48      	it	mi
   d6312:	4240      	negmi	r0, r0
   d6314:	f04f 0100 	mov.w	r1, #0
   d6318:	e73e      	b.n	d6198 <__adddf3+0x138>
   d631a:	bf00      	nop

000d631c <__aeabi_f2d>:
   d631c:	0042      	lsls	r2, r0, #1
   d631e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6322:	ea4f 0131 	mov.w	r1, r1, rrx
   d6326:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d632a:	bf1f      	itttt	ne
   d632c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6330:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6334:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6338:	4770      	bxne	lr
   d633a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d633e:	bf08      	it	eq
   d6340:	4770      	bxeq	lr
   d6342:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6346:	bf04      	itt	eq
   d6348:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d634c:	4770      	bxeq	lr
   d634e:	b530      	push	{r4, r5, lr}
   d6350:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d635c:	e71c      	b.n	d6198 <__adddf3+0x138>
   d635e:	bf00      	nop

000d6360 <__aeabi_ul2d>:
   d6360:	ea50 0201 	orrs.w	r2, r0, r1
   d6364:	bf08      	it	eq
   d6366:	4770      	bxeq	lr
   d6368:	b530      	push	{r4, r5, lr}
   d636a:	f04f 0500 	mov.w	r5, #0
   d636e:	e00a      	b.n	d6386 <__aeabi_l2d+0x16>

000d6370 <__aeabi_l2d>:
   d6370:	ea50 0201 	orrs.w	r2, r0, r1
   d6374:	bf08      	it	eq
   d6376:	4770      	bxeq	lr
   d6378:	b530      	push	{r4, r5, lr}
   d637a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d637e:	d502      	bpl.n	d6386 <__aeabi_l2d+0x16>
   d6380:	4240      	negs	r0, r0
   d6382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6386:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d638a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d638e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6392:	f43f aed8 	beq.w	d6146 <__adddf3+0xe6>
   d6396:	f04f 0203 	mov.w	r2, #3
   d639a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d639e:	bf18      	it	ne
   d63a0:	3203      	addne	r2, #3
   d63a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d63a6:	bf18      	it	ne
   d63a8:	3203      	addne	r2, #3
   d63aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d63ae:	f1c2 0320 	rsb	r3, r2, #32
   d63b2:	fa00 fc03 	lsl.w	ip, r0, r3
   d63b6:	fa20 f002 	lsr.w	r0, r0, r2
   d63ba:	fa01 fe03 	lsl.w	lr, r1, r3
   d63be:	ea40 000e 	orr.w	r0, r0, lr
   d63c2:	fa21 f102 	lsr.w	r1, r1, r2
   d63c6:	4414      	add	r4, r2
   d63c8:	e6bd      	b.n	d6146 <__adddf3+0xe6>
   d63ca:	bf00      	nop

000d63cc <__aeabi_dmul>:
   d63cc:	b570      	push	{r4, r5, r6, lr}
   d63ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d63d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d63d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d63da:	bf1d      	ittte	ne
   d63dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d63e0:	ea94 0f0c 	teqne	r4, ip
   d63e4:	ea95 0f0c 	teqne	r5, ip
   d63e8:	f000 f8de 	bleq	d65a8 <__aeabi_dmul+0x1dc>
   d63ec:	442c      	add	r4, r5
   d63ee:	ea81 0603 	eor.w	r6, r1, r3
   d63f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d63f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d63fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d63fe:	bf18      	it	ne
   d6400:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6404:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d640c:	d038      	beq.n	d6480 <__aeabi_dmul+0xb4>
   d640e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6412:	f04f 0500 	mov.w	r5, #0
   d6416:	fbe1 e502 	umlal	lr, r5, r1, r2
   d641a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d641e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6422:	f04f 0600 	mov.w	r6, #0
   d6426:	fbe1 5603 	umlal	r5, r6, r1, r3
   d642a:	f09c 0f00 	teq	ip, #0
   d642e:	bf18      	it	ne
   d6430:	f04e 0e01 	orrne.w	lr, lr, #1
   d6434:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6438:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d643c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6440:	d204      	bcs.n	d644c <__aeabi_dmul+0x80>
   d6442:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6446:	416d      	adcs	r5, r5
   d6448:	eb46 0606 	adc.w	r6, r6, r6
   d644c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6450:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6454:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6458:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d645c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6460:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6464:	bf88      	it	hi
   d6466:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d646a:	d81e      	bhi.n	d64aa <__aeabi_dmul+0xde>
   d646c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6470:	bf08      	it	eq
   d6472:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6476:	f150 0000 	adcs.w	r0, r0, #0
   d647a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d647e:	bd70      	pop	{r4, r5, r6, pc}
   d6480:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6484:	ea46 0101 	orr.w	r1, r6, r1
   d6488:	ea40 0002 	orr.w	r0, r0, r2
   d648c:	ea81 0103 	eor.w	r1, r1, r3
   d6490:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6494:	bfc2      	ittt	gt
   d6496:	ebd4 050c 	rsbsgt	r5, r4, ip
   d649a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d649e:	bd70      	popgt	{r4, r5, r6, pc}
   d64a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64a4:	f04f 0e00 	mov.w	lr, #0
   d64a8:	3c01      	subs	r4, #1
   d64aa:	f300 80ab 	bgt.w	d6604 <__aeabi_dmul+0x238>
   d64ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d64b2:	bfde      	ittt	le
   d64b4:	2000      	movle	r0, #0
   d64b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d64ba:	bd70      	pople	{r4, r5, r6, pc}
   d64bc:	f1c4 0400 	rsb	r4, r4, #0
   d64c0:	3c20      	subs	r4, #32
   d64c2:	da35      	bge.n	d6530 <__aeabi_dmul+0x164>
   d64c4:	340c      	adds	r4, #12
   d64c6:	dc1b      	bgt.n	d6500 <__aeabi_dmul+0x134>
   d64c8:	f104 0414 	add.w	r4, r4, #20
   d64cc:	f1c4 0520 	rsb	r5, r4, #32
   d64d0:	fa00 f305 	lsl.w	r3, r0, r5
   d64d4:	fa20 f004 	lsr.w	r0, r0, r4
   d64d8:	fa01 f205 	lsl.w	r2, r1, r5
   d64dc:	ea40 0002 	orr.w	r0, r0, r2
   d64e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d64e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d64ec:	fa21 f604 	lsr.w	r6, r1, r4
   d64f0:	eb42 0106 	adc.w	r1, r2, r6
   d64f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64f8:	bf08      	it	eq
   d64fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64fe:	bd70      	pop	{r4, r5, r6, pc}
   d6500:	f1c4 040c 	rsb	r4, r4, #12
   d6504:	f1c4 0520 	rsb	r5, r4, #32
   d6508:	fa00 f304 	lsl.w	r3, r0, r4
   d650c:	fa20 f005 	lsr.w	r0, r0, r5
   d6510:	fa01 f204 	lsl.w	r2, r1, r4
   d6514:	ea40 0002 	orr.w	r0, r0, r2
   d6518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d651c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6520:	f141 0100 	adc.w	r1, r1, #0
   d6524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6528:	bf08      	it	eq
   d652a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d652e:	bd70      	pop	{r4, r5, r6, pc}
   d6530:	f1c4 0520 	rsb	r5, r4, #32
   d6534:	fa00 f205 	lsl.w	r2, r0, r5
   d6538:	ea4e 0e02 	orr.w	lr, lr, r2
   d653c:	fa20 f304 	lsr.w	r3, r0, r4
   d6540:	fa01 f205 	lsl.w	r2, r1, r5
   d6544:	ea43 0302 	orr.w	r3, r3, r2
   d6548:	fa21 f004 	lsr.w	r0, r1, r4
   d654c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6550:	fa21 f204 	lsr.w	r2, r1, r4
   d6554:	ea20 0002 	bic.w	r0, r0, r2
   d6558:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d655c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6560:	bf08      	it	eq
   d6562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6566:	bd70      	pop	{r4, r5, r6, pc}
   d6568:	f094 0f00 	teq	r4, #0
   d656c:	d10f      	bne.n	d658e <__aeabi_dmul+0x1c2>
   d656e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6572:	0040      	lsls	r0, r0, #1
   d6574:	eb41 0101 	adc.w	r1, r1, r1
   d6578:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d657c:	bf08      	it	eq
   d657e:	3c01      	subeq	r4, #1
   d6580:	d0f7      	beq.n	d6572 <__aeabi_dmul+0x1a6>
   d6582:	ea41 0106 	orr.w	r1, r1, r6
   d6586:	f095 0f00 	teq	r5, #0
   d658a:	bf18      	it	ne
   d658c:	4770      	bxne	lr
   d658e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6592:	0052      	lsls	r2, r2, #1
   d6594:	eb43 0303 	adc.w	r3, r3, r3
   d6598:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d659c:	bf08      	it	eq
   d659e:	3d01      	subeq	r5, #1
   d65a0:	d0f7      	beq.n	d6592 <__aeabi_dmul+0x1c6>
   d65a2:	ea43 0306 	orr.w	r3, r3, r6
   d65a6:	4770      	bx	lr
   d65a8:	ea94 0f0c 	teq	r4, ip
   d65ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d65b0:	bf18      	it	ne
   d65b2:	ea95 0f0c 	teqne	r5, ip
   d65b6:	d00c      	beq.n	d65d2 <__aeabi_dmul+0x206>
   d65b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d65bc:	bf18      	it	ne
   d65be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65c2:	d1d1      	bne.n	d6568 <__aeabi_dmul+0x19c>
   d65c4:	ea81 0103 	eor.w	r1, r1, r3
   d65c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65cc:	f04f 0000 	mov.w	r0, #0
   d65d0:	bd70      	pop	{r4, r5, r6, pc}
   d65d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d65d6:	bf06      	itte	eq
   d65d8:	4610      	moveq	r0, r2
   d65da:	4619      	moveq	r1, r3
   d65dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65e0:	d019      	beq.n	d6616 <__aeabi_dmul+0x24a>
   d65e2:	ea94 0f0c 	teq	r4, ip
   d65e6:	d102      	bne.n	d65ee <__aeabi_dmul+0x222>
   d65e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d65ec:	d113      	bne.n	d6616 <__aeabi_dmul+0x24a>
   d65ee:	ea95 0f0c 	teq	r5, ip
   d65f2:	d105      	bne.n	d6600 <__aeabi_dmul+0x234>
   d65f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d65f8:	bf1c      	itt	ne
   d65fa:	4610      	movne	r0, r2
   d65fc:	4619      	movne	r1, r3
   d65fe:	d10a      	bne.n	d6616 <__aeabi_dmul+0x24a>
   d6600:	ea81 0103 	eor.w	r1, r1, r3
   d6604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6608:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d660c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6610:	f04f 0000 	mov.w	r0, #0
   d6614:	bd70      	pop	{r4, r5, r6, pc}
   d6616:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d661a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d661e:	bd70      	pop	{r4, r5, r6, pc}

000d6620 <__aeabi_ddiv>:
   d6620:	b570      	push	{r4, r5, r6, lr}
   d6622:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d662a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d662e:	bf1d      	ittte	ne
   d6630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6634:	ea94 0f0c 	teqne	r4, ip
   d6638:	ea95 0f0c 	teqne	r5, ip
   d663c:	f000 f8a7 	bleq	d678e <__aeabi_ddiv+0x16e>
   d6640:	eba4 0405 	sub.w	r4, r4, r5
   d6644:	ea81 0e03 	eor.w	lr, r1, r3
   d6648:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d664c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6650:	f000 8088 	beq.w	d6764 <__aeabi_ddiv+0x144>
   d6654:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6658:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d665c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6660:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6664:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6668:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d666c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6670:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6674:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6678:	429d      	cmp	r5, r3
   d667a:	bf08      	it	eq
   d667c:	4296      	cmpeq	r6, r2
   d667e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6682:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6686:	d202      	bcs.n	d668e <__aeabi_ddiv+0x6e>
   d6688:	085b      	lsrs	r3, r3, #1
   d668a:	ea4f 0232 	mov.w	r2, r2, rrx
   d668e:	1ab6      	subs	r6, r6, r2
   d6690:	eb65 0503 	sbc.w	r5, r5, r3
   d6694:	085b      	lsrs	r3, r3, #1
   d6696:	ea4f 0232 	mov.w	r2, r2, rrx
   d669a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d669e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d66a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d66a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d66aa:	bf22      	ittt	cs
   d66ac:	1ab6      	subcs	r6, r6, r2
   d66ae:	4675      	movcs	r5, lr
   d66b0:	ea40 000c 	orrcs.w	r0, r0, ip
   d66b4:	085b      	lsrs	r3, r3, #1
   d66b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d66ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d66be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d66c2:	bf22      	ittt	cs
   d66c4:	1ab6      	subcs	r6, r6, r2
   d66c6:	4675      	movcs	r5, lr
   d66c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d66cc:	085b      	lsrs	r3, r3, #1
   d66ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d66d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d66d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d66da:	bf22      	ittt	cs
   d66dc:	1ab6      	subcs	r6, r6, r2
   d66de:	4675      	movcs	r5, lr
   d66e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d66e4:	085b      	lsrs	r3, r3, #1
   d66e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d66ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d66ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d66f2:	bf22      	ittt	cs
   d66f4:	1ab6      	subcs	r6, r6, r2
   d66f6:	4675      	movcs	r5, lr
   d66f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d66fc:	ea55 0e06 	orrs.w	lr, r5, r6
   d6700:	d018      	beq.n	d6734 <__aeabi_ddiv+0x114>
   d6702:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6706:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d670a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d670e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6712:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6716:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d671a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d671e:	d1c0      	bne.n	d66a2 <__aeabi_ddiv+0x82>
   d6720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6724:	d10b      	bne.n	d673e <__aeabi_ddiv+0x11e>
   d6726:	ea41 0100 	orr.w	r1, r1, r0
   d672a:	f04f 0000 	mov.w	r0, #0
   d672e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6732:	e7b6      	b.n	d66a2 <__aeabi_ddiv+0x82>
   d6734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6738:	bf04      	itt	eq
   d673a:	4301      	orreq	r1, r0
   d673c:	2000      	moveq	r0, #0
   d673e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6742:	bf88      	it	hi
   d6744:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6748:	f63f aeaf 	bhi.w	d64aa <__aeabi_dmul+0xde>
   d674c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6750:	bf04      	itt	eq
   d6752:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6756:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d675a:	f150 0000 	adcs.w	r0, r0, #0
   d675e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6762:	bd70      	pop	{r4, r5, r6, pc}
   d6764:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6768:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d676c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6770:	bfc2      	ittt	gt
   d6772:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d677a:	bd70      	popgt	{r4, r5, r6, pc}
   d677c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6780:	f04f 0e00 	mov.w	lr, #0
   d6784:	3c01      	subs	r4, #1
   d6786:	e690      	b.n	d64aa <__aeabi_dmul+0xde>
   d6788:	ea45 0e06 	orr.w	lr, r5, r6
   d678c:	e68d      	b.n	d64aa <__aeabi_dmul+0xde>
   d678e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6792:	ea94 0f0c 	teq	r4, ip
   d6796:	bf08      	it	eq
   d6798:	ea95 0f0c 	teqeq	r5, ip
   d679c:	f43f af3b 	beq.w	d6616 <__aeabi_dmul+0x24a>
   d67a0:	ea94 0f0c 	teq	r4, ip
   d67a4:	d10a      	bne.n	d67bc <__aeabi_ddiv+0x19c>
   d67a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67aa:	f47f af34 	bne.w	d6616 <__aeabi_dmul+0x24a>
   d67ae:	ea95 0f0c 	teq	r5, ip
   d67b2:	f47f af25 	bne.w	d6600 <__aeabi_dmul+0x234>
   d67b6:	4610      	mov	r0, r2
   d67b8:	4619      	mov	r1, r3
   d67ba:	e72c      	b.n	d6616 <__aeabi_dmul+0x24a>
   d67bc:	ea95 0f0c 	teq	r5, ip
   d67c0:	d106      	bne.n	d67d0 <__aeabi_ddiv+0x1b0>
   d67c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67c6:	f43f aefd 	beq.w	d65c4 <__aeabi_dmul+0x1f8>
   d67ca:	4610      	mov	r0, r2
   d67cc:	4619      	mov	r1, r3
   d67ce:	e722      	b.n	d6616 <__aeabi_dmul+0x24a>
   d67d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d67d4:	bf18      	it	ne
   d67d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d67da:	f47f aec5 	bne.w	d6568 <__aeabi_dmul+0x19c>
   d67de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d67e2:	f47f af0d 	bne.w	d6600 <__aeabi_dmul+0x234>
   d67e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d67ea:	f47f aeeb 	bne.w	d65c4 <__aeabi_dmul+0x1f8>
   d67ee:	e712      	b.n	d6616 <__aeabi_dmul+0x24a>

000d67f0 <__aeabi_d2uiz>:
   d67f0:	004a      	lsls	r2, r1, #1
   d67f2:	d211      	bcs.n	d6818 <__aeabi_d2uiz+0x28>
   d67f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d67f8:	d211      	bcs.n	d681e <__aeabi_d2uiz+0x2e>
   d67fa:	d50d      	bpl.n	d6818 <__aeabi_d2uiz+0x28>
   d67fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6800:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6804:	d40e      	bmi.n	d6824 <__aeabi_d2uiz+0x34>
   d6806:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d680a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d680e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6812:	fa23 f002 	lsr.w	r0, r3, r2
   d6816:	4770      	bx	lr
   d6818:	f04f 0000 	mov.w	r0, #0
   d681c:	4770      	bx	lr
   d681e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6822:	d102      	bne.n	d682a <__aeabi_d2uiz+0x3a>
   d6824:	f04f 30ff 	mov.w	r0, #4294967295
   d6828:	4770      	bx	lr
   d682a:	f04f 0000 	mov.w	r0, #0
   d682e:	4770      	bx	lr

000d6830 <__aeabi_f2lz>:
   d6830:	ee07 0a90 	vmov	s15, r0
   d6834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d6838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d683c:	d401      	bmi.n	d6842 <__aeabi_f2lz+0x12>
   d683e:	f000 b80b 	b.w	d6858 <__aeabi_f2ulz>
   d6842:	eef1 7a67 	vneg.f32	s15, s15
   d6846:	b508      	push	{r3, lr}
   d6848:	ee17 0a90 	vmov	r0, s15
   d684c:	f000 f804 	bl	d6858 <__aeabi_f2ulz>
   d6850:	4240      	negs	r0, r0
   d6852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6856:	bd08      	pop	{r3, pc}

000d6858 <__aeabi_f2ulz>:
   d6858:	b5d0      	push	{r4, r6, r7, lr}
   d685a:	f7ff fd5f 	bl	d631c <__aeabi_f2d>
   d685e:	4b0c      	ldr	r3, [pc, #48]	; (d6890 <__aeabi_f2ulz+0x38>)
   d6860:	2200      	movs	r2, #0
   d6862:	4606      	mov	r6, r0
   d6864:	460f      	mov	r7, r1
   d6866:	f7ff fdb1 	bl	d63cc <__aeabi_dmul>
   d686a:	f7ff ffc1 	bl	d67f0 <__aeabi_d2uiz>
   d686e:	4604      	mov	r4, r0
   d6870:	f7ff fd32 	bl	d62d8 <__aeabi_ui2d>
   d6874:	4b07      	ldr	r3, [pc, #28]	; (d6894 <__aeabi_f2ulz+0x3c>)
   d6876:	2200      	movs	r2, #0
   d6878:	f7ff fda8 	bl	d63cc <__aeabi_dmul>
   d687c:	4602      	mov	r2, r0
   d687e:	460b      	mov	r3, r1
   d6880:	4630      	mov	r0, r6
   d6882:	4639      	mov	r1, r7
   d6884:	f7ff fbea 	bl	d605c <__aeabi_dsub>
   d6888:	f7ff ffb2 	bl	d67f0 <__aeabi_d2uiz>
   d688c:	4621      	mov	r1, r4
   d688e:	bdd0      	pop	{r4, r6, r7, pc}
   d6890:	3df00000 	.word	0x3df00000
   d6894:	41f00000 	.word	0x41f00000

000d6898 <asctime_r>:
   d6898:	b510      	push	{r4, lr}
   d689a:	460c      	mov	r4, r1
   d689c:	6941      	ldr	r1, [r0, #20]
   d689e:	6903      	ldr	r3, [r0, #16]
   d68a0:	6982      	ldr	r2, [r0, #24]
   d68a2:	b086      	sub	sp, #24
   d68a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d68a8:	9104      	str	r1, [sp, #16]
   d68aa:	6801      	ldr	r1, [r0, #0]
   d68ac:	9103      	str	r1, [sp, #12]
   d68ae:	6841      	ldr	r1, [r0, #4]
   d68b0:	9102      	str	r1, [sp, #8]
   d68b2:	6881      	ldr	r1, [r0, #8]
   d68b4:	9101      	str	r1, [sp, #4]
   d68b6:	68c1      	ldr	r1, [r0, #12]
   d68b8:	9100      	str	r1, [sp, #0]
   d68ba:	4907      	ldr	r1, [pc, #28]	; (d68d8 <asctime_r+0x40>)
   d68bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d68c0:	440b      	add	r3, r1
   d68c2:	4906      	ldr	r1, [pc, #24]	; (d68dc <asctime_r+0x44>)
   d68c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d68c8:	440a      	add	r2, r1
   d68ca:	4620      	mov	r0, r4
   d68cc:	4904      	ldr	r1, [pc, #16]	; (d68e0 <asctime_r+0x48>)
   d68ce:	f7fe fc45 	bl	d515c <siprintf>
   d68d2:	4620      	mov	r0, r4
   d68d4:	b006      	add	sp, #24
   d68d6:	bd10      	pop	{r4, pc}
   d68d8:	000d70e2 	.word	0x000d70e2
   d68dc:	000d70cd 	.word	0x000d70cd
   d68e0:	000d70ad 	.word	0x000d70ad

000d68e4 <__cxa_atexit>:
   d68e4:	b510      	push	{r4, lr}
   d68e6:	4c05      	ldr	r4, [pc, #20]	; (d68fc <__cxa_atexit+0x18>)
   d68e8:	4613      	mov	r3, r2
   d68ea:	b12c      	cbz	r4, d68f8 <__cxa_atexit+0x14>
   d68ec:	460a      	mov	r2, r1
   d68ee:	4601      	mov	r1, r0
   d68f0:	2002      	movs	r0, #2
   d68f2:	f3af 8000 	nop.w
   d68f6:	bd10      	pop	{r4, pc}
   d68f8:	4620      	mov	r0, r4
   d68fa:	e7fc      	b.n	d68f6 <__cxa_atexit+0x12>
   d68fc:	00000000 	.word	0x00000000

000d6900 <memcpy>:
   d6900:	440a      	add	r2, r1
   d6902:	4291      	cmp	r1, r2
   d6904:	f100 33ff 	add.w	r3, r0, #4294967295
   d6908:	d100      	bne.n	d690c <memcpy+0xc>
   d690a:	4770      	bx	lr
   d690c:	b510      	push	{r4, lr}
   d690e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6912:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6916:	4291      	cmp	r1, r2
   d6918:	d1f9      	bne.n	d690e <memcpy+0xe>
   d691a:	bd10      	pop	{r4, pc}

000d691c <memset>:
   d691c:	4402      	add	r2, r0
   d691e:	4603      	mov	r3, r0
   d6920:	4293      	cmp	r3, r2
   d6922:	d100      	bne.n	d6926 <memset+0xa>
   d6924:	4770      	bx	lr
   d6926:	f803 1b01 	strb.w	r1, [r3], #1
   d692a:	e7f9      	b.n	d6920 <memset+0x4>

000d692c <srand>:
   d692c:	b538      	push	{r3, r4, r5, lr}
   d692e:	4b0d      	ldr	r3, [pc, #52]	; (d6964 <srand+0x38>)
   d6930:	681d      	ldr	r5, [r3, #0]
   d6932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6934:	4604      	mov	r4, r0
   d6936:	b97b      	cbnz	r3, d6958 <srand+0x2c>
   d6938:	2018      	movs	r0, #24
   d693a:	f7fe fbf7 	bl	d512c <malloc>
   d693e:	4a0a      	ldr	r2, [pc, #40]	; (d6968 <srand+0x3c>)
   d6940:	4b0a      	ldr	r3, [pc, #40]	; (d696c <srand+0x40>)
   d6942:	63a8      	str	r0, [r5, #56]	; 0x38
   d6944:	e9c0 2300 	strd	r2, r3, [r0]
   d6948:	4b09      	ldr	r3, [pc, #36]	; (d6970 <srand+0x44>)
   d694a:	6083      	str	r3, [r0, #8]
   d694c:	230b      	movs	r3, #11
   d694e:	8183      	strh	r3, [r0, #12]
   d6950:	2201      	movs	r2, #1
   d6952:	2300      	movs	r3, #0
   d6954:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6958:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d695a:	2200      	movs	r2, #0
   d695c:	611c      	str	r4, [r3, #16]
   d695e:	615a      	str	r2, [r3, #20]
   d6960:	bd38      	pop	{r3, r4, r5, pc}
   d6962:	bf00      	nop
   d6964:	2003e5a0 	.word	0x2003e5a0
   d6968:	abcd330e 	.word	0xabcd330e
   d696c:	e66d1234 	.word	0xe66d1234
   d6970:	0005deec 	.word	0x0005deec

000d6974 <strcpy>:
   d6974:	4603      	mov	r3, r0
   d6976:	f811 2b01 	ldrb.w	r2, [r1], #1
   d697a:	f803 2b01 	strb.w	r2, [r3], #1
   d697e:	2a00      	cmp	r2, #0
   d6980:	d1f9      	bne.n	d6976 <strcpy+0x2>
   d6982:	4770      	bx	lr

000d6984 <strlen>:
   d6984:	4603      	mov	r3, r0
   d6986:	f813 2b01 	ldrb.w	r2, [r3], #1
   d698a:	2a00      	cmp	r2, #0
   d698c:	d1fb      	bne.n	d6986 <strlen+0x2>
   d698e:	1a18      	subs	r0, r3, r0
   d6990:	3801      	subs	r0, #1
   d6992:	4770      	bx	lr

000d6994 <dynalib_user>:
   d6994:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d69a4:	0000 0000 794d 6e20 6d61 2065 7369 4220     ....My name is B
   d69b4:	6972 6e61 000a 6954 656d 6920 2073 7325     rian..Time is %s
   d69c4:	000a 0000                                   ....

000d69c8 <_ZTV16Adafruit_SSD1306>:
	...
   d69d0:	40c1 000d 41f1 000d 4c25 000d 5581 000d     .@...A..%L...U..
   d69e0:	4505 000d 493d 000d 4395 000d 4229 000d     .E..=I...C..)B..
   d69f0:	49f9 000d 4a97 000d 4acd 000d 4ae9 000d     .I...J...J...J..

000d6a00 <_ZL4font>:
   d6a00:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6a10:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6a20:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6a30:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6a40:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6a50:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6a60:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6a70:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6a80:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6a90:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6aa0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6ab0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6ac0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6ad0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6ae0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6af0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6b00:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6b10:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6b20:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6b30:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6b40:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6b50:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6b60:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6b70:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6b80:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6b90:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6ba0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6bb0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6bc0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6bd0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6be0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6bf0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6c00:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6c10:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6c20:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6c30:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6c40:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6c50:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6c60:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6c70:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6c80:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6c90:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d6ca0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6cb0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6cc0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d6cd0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6ce0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d6cf0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d6d00:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d6d10:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d6d20:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d6d30:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d6d40:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d6d50:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d6d60:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d6d70:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d6d80:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d6d90:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d6da0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d6db0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d6dc0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d6dd0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d6de0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d6df0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d6e00:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d6e10:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d6e20:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d6e30:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d6e40:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d6e50:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d6e60:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d6e70:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d6e80:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d6e90:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d6ea0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d6eb0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d6ec0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d6ed0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d6ee0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d6ef0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d6efc <_ZTV12Adafruit_GFX>:
	...
   d6f0c:	4c25 000d 5581 000d 409d 000d 493d 000d     %L...U...@..=I..
   d6f1c:	4a61 000d 4a7d 000d 49f9 000d 4a97 000d     aJ..}J...I...J..
   d6f2c:	4acd 000d 4ae9 000d                         .J...J..

000d6f34 <_ZTVN5spark13EthernetClassE>:
	...
   d6f3c:	51fb 000d 51f1 000d 51e7 000d 51dd 000d     .Q...Q...Q...Q..
   d6f4c:	51d1 000d 51c5 000d 5d7d 000d 5d85 000d     .Q...Q..}]...]..
   d6f5c:	51b9 000d 51b1 000d 51a7 000d 519d 000d     .Q...Q...Q...Q..
   d6f6c:	5db5 000d                                   .]..

000d6f70 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6f70:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d6f80:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d6f90:	7361 7463 6d69 0065                         asctime.

000d6f98 <_ZTV9IPAddress>:
	...
   d6fa0:	5949 000d 5939 000d 593b 000d               IY..9Y..;Y..

000d6fac <_ZTV9USBSerial>:
	...
   d6fb4:	5a29 000d 5a91 000d 5a67 000d 5581 000d     )Z...Z..gZ...U..
   d6fc4:	5a59 000d 5a2b 000d 5a3b 000d 5a8b 000d     YZ..+Z..;Z...Z..
   d6fd4:	5a4b 000d 5a25 000d                         KZ..%Z..

000d6fdc <_ZTV11USARTSerial>:
	...
   d6fe4:	5b2d 000d 5b99 000d 5b71 000d 5581 000d     -[...[..q[...U..
   d6ff4:	5b41 000d 5b5d 000d 5b4f 000d 5b6b 000d     A[..][..O[..k[..
   d7004:	5b2f 000d 5b33 000d                         /[..3[..

000d700c <_ZTV7TwoWire>:
	...
   d7014:	5c29 000d 5c73 000d 5c4b 000d 5c2b 000d     )\..s\..K\..+\..
   d7024:	5c53 000d 5c5b 000d 5c63 000d 5c6b 000d     S\..[\..c\..k\..

000d7034 <_ZTVN5spark9WiFiClassE>:
	...
   d703c:	5d1f 000d 5d15 000d 5d0b 000d 5ccd 000d     .]...]...]...\..
   d704c:	568d 000d 5cff 000d 5d7d 000d 5d85 000d     .V...\..}]...]..
   d705c:	5cf3 000d 5ceb 000d 5ce1 000d 5cd7 000d     .\...\...\...\..
   d706c:	5db5 000d                                   .]..

000d7070 <_ZTVN5spark12NetworkClassE>:
	...
   d7078:	5d3d 000d 5d47 000d 5d51 000d 5d5b 000d     =]..G]..Q]..[]..
   d7088:	5d65 000d 5d71 000d 5d7d 000d 5d85 000d     e]..q]..}]...]..
   d7098:	5d8d 000d 5d99 000d 5da1 000d 5dab 000d     .]...]...]...]..
   d70a8:	5db5 000d                                   .]..

000d70ac <_ZSt7nothrow>:
   d70ac:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d70bc:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d70cd <day_name.6145>:
   d70cd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d70dd:	6972 6153                                    riSat

000d70e2 <mon_name.6146>:
   d70e2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d70f2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d7102:	4476 6365                                   vDec

000d7106 <link_const_variable_data_end>:
	...

000d7108 <link_constructors_location>:
   d7108:	000d4201 	.word	0x000d4201
   d710c:	000d5205 	.word	0x000d5205
   d7110:	000d53b1 	.word	0x000d53b1
   d7114:	000d5559 	.word	0x000d5559
   d7118:	000d5699 	.word	0x000d5699
   d711c:	000d57d1 	.word	0x000d57d1
   d7120:	000d57f9 	.word	0x000d57f9
   d7124:	000d5d29 	.word	0x000d5d29
   d7128:	000d5e95 	.word	0x000d5e95

000d712c <link_constructors_end>:
   d712c:	00000000 	.word	0x00000000

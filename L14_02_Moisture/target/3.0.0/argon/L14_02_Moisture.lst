
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/L14_Moisture/L14_02_Moisture/target/3.0.0/argon/L14_02_Moisture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003174  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7190  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e18c  000d7194  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001ec  2003e608  2003e608  0002e608  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d760c  000d760c  0002760c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7634  000d7634  00027634  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017e4ed  00000000  00000000  00027638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016a45  00000000  00000000  001a5b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00034b4a  00000000  00000000  001bc56a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b88  00000000  00000000  001f10b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008d80  00000000  00000000  001f3c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038a2f  00000000  00000000  001fc9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003cf9e  00000000  00000000  002353eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00122805  00000000  00000000  00272389  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007a24  00000000  00000000  00394b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc93 	bl	d6958 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc9b 	bl	d6974 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e18c 	.word	0x2003e18c
   d4048:	000d7194 	.word	0x000d7194
   d404c:	2003e604 	.word	0x2003e604
   d4050:	2003e608 	.word	0x2003e608
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fc4f 	bl	d5900 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7160 	.word	0x000d7160
   d407c:	000d7184 	.word	0x000d7184

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b82e 	b.w	d40e0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8a1 	bl	d41cc <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bbf9 	b.w	d5884 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 b861 	b.w	d5158 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 b867 	b.w	d5168 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 ff94 	bl	d4fd0 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d4d41 	.word	0x000d4d41

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	b40e      	push	{r1, r2, r3}
   d40c4:	b503      	push	{r0, r1, lr}
   d40c6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ca:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ce:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40d0:	f001 fac1 	bl	d5656 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40d4:	b002      	add	sp, #8
   d40d6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40da:	b003      	add	sp, #12
   d40dc:	4770      	bx	lr
	...

000d40e0 <setup>:
const int MOISTPIN = A0;
const unsigned int updateTime = 5000;
unsigned int lastTime;
int moisture;

void setup() {
   d40e0:	b508      	push	{r3, lr}

  Time.zone(-6); // -6 for MDT, -7 for MST
   d40e2:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d40e6:	f001 fb03 	bl	d56f0 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40ea:	f001 f815 	bl	d5118 <spark_cloud_flag_connected>
        if (!connected()) {
   d40ee:	b110      	cbz	r0, d40f6 <setup+0x16>
        return spark_sync_time(NULL);
   d40f0:	2000      	movs	r0, #0
   d40f2:	f001 f819 	bl	d5128 <spark_sync_time>
  Particle.syncTime();

  pinMode(MOISTPIN,INPUT);
   d40f6:	2100      	movs	r1, #0
   d40f8:	2013      	movs	r0, #19
   d40fa:	f001 ff29 	bl	d5f50 <pinMode>

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  //0x3C obtained from I2C_Scan  
   d40fe:	223c      	movs	r2, #60	; 0x3c
   d4100:	2102      	movs	r1, #2
   d4102:	4807      	ldr	r0, [pc, #28]	; (d4120 <setup+0x40>)
   d4104:	f000 fb4a 	bl	d479c <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); 
   d4108:	4805      	ldr	r0, [pc, #20]	; (d4120 <setup+0x40>)
   d410a:	f000 fad7 	bl	d46bc <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d410e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4112:	f001 fb7d 	bl	d5810 <delay>
  display.clearDisplay();   // clears the screen and buffer  
}
   d4116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.clearDisplay();   // clears the screen and buffer  
   d411a:	4801      	ldr	r0, [pc, #4]	; (d4120 <setup+0x40>)
   d411c:	f000 ba56 	b.w	d45cc <_ZN16Adafruit_SSD130612clearDisplayEv>
   d4120:	2003e60c 	.word	0x2003e60c

000d4124 <_Z15displayMoisturei>:
    displayMoisture(moisture);
    lastTime = millis();
  }
}

void displayMoisture(int moist) {
   d4124:	b530      	push	{r4, r5, lr}
   d4126:	b08d      	sub	sp, #52	; 0x34
   d4128:	4605      	mov	r5, r0
  String DateTime, TimeOnly;
   d412a:	4924      	ldr	r1, [pc, #144]	; (d41bc <_Z15displayMoisturei+0x98>)

  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);

  display.clearDisplay();   // clears the screen and buffer
   d412c:	4c24      	ldr	r4, [pc, #144]	; (d41c0 <_Z15displayMoisturei+0x9c>)
  String DateTime, TimeOnly;
   d412e:	4668      	mov	r0, sp
   d4130:	f001 f9bd 	bl	d54ae <_ZN6StringC1EPKc>
   d4134:	4921      	ldr	r1, [pc, #132]	; (d41bc <_Z15displayMoisturei+0x98>)
   d4136:	a804      	add	r0, sp, #16
   d4138:	f001 f9b9 	bl	d54ae <_ZN6StringC1EPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d413c:	f001 fb4d 	bl	d57da <_ZN9TimeClass3nowEv>
   d4140:	4602      	mov	r2, r0
   d4142:	17c3      	asrs	r3, r0, #31
   d4144:	a808      	add	r0, sp, #32
   d4146:	f001 faf3 	bl	d5730 <_ZN9TimeClass7timeStrEx>
  DateTime = Time.timeStr();
   d414a:	a908      	add	r1, sp, #32
   d414c:	4668      	mov	r0, sp
   d414e:	f001 f9df 	bl	d5510 <_ZN6StringaSEOS_>
   d4152:	a808      	add	r0, sp, #32
   d4154:	f001 f960 	bl	d5418 <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   d4158:	2313      	movs	r3, #19
   d415a:	220b      	movs	r2, #11
   d415c:	4669      	mov	r1, sp
   d415e:	a808      	add	r0, sp, #32
   d4160:	f001 f9de 	bl	d5520 <_ZNK6String9substringEjj>
   d4164:	a908      	add	r1, sp, #32
   d4166:	a804      	add	r0, sp, #16
   d4168:	f001 f9d2 	bl	d5510 <_ZN6StringaSEOS_>
   d416c:	a808      	add	r0, sp, #32
   d416e:	f001 f953 	bl	d5418 <_ZN6StringD1Ev>
  display.clearDisplay();   // clears the screen and buffer
   d4172:	4620      	mov	r0, r4
   d4174:	f000 fa2a 	bl	d45cc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4178:	4620      	mov	r0, r4
   d417a:	2101      	movs	r1, #1
   d417c:	f000 fd8f 	bl	d4c9e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4180:	4620      	mov	r0, r4
   d4182:	2101      	movs	r1, #1
   d4184:	f000 fd90 	bl	d4ca8 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d4188:	2200      	movs	r2, #0
   d418a:	4611      	mov	r1, r2
   d418c:	4620      	mov	r0, r4
   d418e:	f000 fd83 	bl	d4c98 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Time is %s\n",TimeOnly.c_str());
   d4192:	9a04      	ldr	r2, [sp, #16]
   d4194:	490b      	ldr	r1, [pc, #44]	; (d41c4 <_Z15displayMoisturei+0xa0>)
   d4196:	4620      	mov	r0, r4
   d4198:	f7ff ff93 	bl	d40c2 <_ZN5Print6printfEPKcz>
  display.printf("Moisure Level is %i", moist);
   d419c:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_Z15displayMoisturei+0xa4>)
   d419e:	462a      	mov	r2, r5
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff8e 	bl	d40c2 <_ZN5Print6printfEPKcz>
  display.display();
   d41a6:	4620      	mov	r0, r4
   d41a8:	f000 fa88 	bl	d46bc <_ZN16Adafruit_SSD13067displayEv>
  String DateTime, TimeOnly;
   d41ac:	a804      	add	r0, sp, #16
   d41ae:	f001 f933 	bl	d5418 <_ZN6StringD1Ev>
   d41b2:	4668      	mov	r0, sp
   d41b4:	f001 f930 	bl	d5418 <_ZN6StringD1Ev>
   d41b8:	b00d      	add	sp, #52	; 0x34
   d41ba:	bd30      	pop	{r4, r5, pc}
   d41bc:	000d7124 	.word	0x000d7124
   d41c0:	2003e60c 	.word	0x2003e60c
   d41c4:	000d6a00 	.word	0x000d6a00
   d41c8:	000d6a0c 	.word	0x000d6a0c

000d41cc <loop>:
void loop() {
   d41cc:	b510      	push	{r4, lr}
  if(millis()-lastTime>updateTime) {
   d41ce:	4c0a      	ldr	r4, [pc, #40]	; (d41f8 <loop+0x2c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41d0:	f000 fdbe 	bl	d4d50 <HAL_Timer_Get_Milli_Seconds>
   d41d4:	6823      	ldr	r3, [r4, #0]
   d41d6:	1ac0      	subs	r0, r0, r3
   d41d8:	f241 3388 	movw	r3, #5000	; 0x1388
   d41dc:	4298      	cmp	r0, r3
   d41de:	d909      	bls.n	d41f4 <loop+0x28>
    moisture = analogRead(MOISTPIN);
   d41e0:	2013      	movs	r0, #19
   d41e2:	f001 fedf 	bl	d5fa4 <analogRead>
   d41e6:	4b05      	ldr	r3, [pc, #20]	; (d41fc <loop+0x30>)
   d41e8:	6018      	str	r0, [r3, #0]
    displayMoisture(moisture);
   d41ea:	f7ff ff9b 	bl	d4124 <_Z15displayMoisturei>
   d41ee:	f000 fdaf 	bl	d4d50 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   d41f2:	6020      	str	r0, [r4, #0]
}
   d41f4:	bd10      	pop	{r4, pc}
   d41f6:	bf00      	nop
   d41f8:	2003e630 	.word	0x2003e630
   d41fc:	2003e634 	.word	0x2003e634

000d4200 <_ZN16Adafruit_SSD1306D0Ev>:
   d4200:	b510      	push	{r4, lr}
   d4202:	2124      	movs	r1, #36	; 0x24
   d4204:	4604      	mov	r4, r0
   d4206:	f001 ff4c 	bl	d60a2 <_ZdlPvj>
   d420a:	4620      	mov	r0, r4
   d420c:	bd10      	pop	{r4, pc}
	...

000d4210 <_GLOBAL__sub_I_display>:
   d4210:	b510      	push	{r4, lr}
Adafruit_SSD1306 display(OLED_RESET);
   d4212:	4c06      	ldr	r4, [pc, #24]	; (d422c <_GLOBAL__sub_I_display+0x1c>)
   d4214:	2104      	movs	r1, #4
   d4216:	4620      	mov	r0, r4
   d4218:	f000 f9c2 	bl	d45a0 <_ZN16Adafruit_SSD1306C1Ea>
   d421c:	4620      	mov	r0, r4
   d421e:	4a04      	ldr	r2, [pc, #16]	; (d4230 <_GLOBAL__sub_I_display+0x20>)
   d4220:	4904      	ldr	r1, [pc, #16]	; (d4234 <_GLOBAL__sub_I_display+0x24>)
   d4222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_SSD1306 display(OLED_RESET);
   d4226:	f001 bf37 	b.w	d6098 <__aeabi_atexit>
   d422a:	bf00      	nop
   d422c:	2003e60c 	.word	0x2003e60c
   d4230:	2003e608 	.word	0x2003e608
   d4234:	000d40c1 	.word	0x000d40c1

000d4238 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4238:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d423a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d423c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4240:	2d02      	cmp	r5, #2
   d4242:	d067      	beq.n	d4314 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d4244:	2d03      	cmp	r5, #3
   d4246:	f000 8097 	beq.w	d4378 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d424a:	2d01      	cmp	r5, #1
   d424c:	d16a      	bne.n	d4324 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d424e:	8905      	ldrh	r5, [r0, #8]
   d4250:	43d2      	mvns	r2, r2
   d4252:	442a      	add	r2, r5
   d4254:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4256:	2a00      	cmp	r2, #0
   d4258:	db5b      	blt.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d425a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d425e:	4295      	cmp	r5, r2
   d4260:	dd57      	ble.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4262:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4264:	bfbe      	ittt	lt
   d4266:	185b      	addlt	r3, r3, r1
   d4268:	b21b      	sxthlt	r3, r3
    __y = 0;
   d426a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d426c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4270:	18cd      	adds	r5, r1, r3
   d4272:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4274:	bfc4      	itt	gt
   d4276:	1a43      	subgt	r3, r0, r1
   d4278:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d427a:	2b00      	cmp	r3, #0
   d427c:	dd49      	ble.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d427e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d4282:	f8df c11c 	ldr.w	ip, [pc, #284]	; d43a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d4286:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d428a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d428e:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4290:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d4294:	d01a      	beq.n	d42cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4296:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d429a:	4e3f      	ldr	r6, [pc, #252]	; (d4398 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d429c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d429e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d42a0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d42a2:	bf3f      	itttt	cc
   d42a4:	eba5 0e03 	subcc.w	lr, r5, r3
   d42a8:	26ff      	movcc	r6, #255	; 0xff
   d42aa:	fa46 f60e 	asrcc.w	r6, r6, lr
   d42ae:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d42b0:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d42b4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d42b6:	bf0c      	ite	eq
   d42b8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d42ba:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42bc:	42ab      	cmp	r3, r5
   d42be:	f80c 6002 	strb.w	r6, [ip, r2]
   d42c2:	d326      	bcc.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d42c4:	3908      	subs	r1, #8
   d42c6:	440b      	add	r3, r1
   d42c8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d42ca:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d42cc:	2b07      	cmp	r3, #7
   d42ce:	d917      	bls.n	d4300 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d42d0:	2c01      	cmp	r4, #1
   d42d2:	bf0c      	ite	eq
   d42d4:	25ff      	moveq	r5, #255	; 0xff
   d42d6:	2500      	movne	r5, #0
   d42d8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d42dc:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d42de:	3a08      	subs	r2, #8
   d42e0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d42e2:	2a07      	cmp	r2, #7
      *pBuf = val;
   d42e4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d42e8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d42ec:	d8f7      	bhi.n	d42de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d42ee:	f1a3 0208 	sub.w	r2, r3, #8
   d42f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d42f6:	3201      	adds	r2, #1
   d42f8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d42fc:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4300:	b13b      	cbz	r3, d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4302:	4a26      	ldr	r2, [pc, #152]	; (d439c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d4304:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4306:	7803      	ldrb	r3, [r0, #0]
   d4308:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d430a:	bf0c      	ite	eq
   d430c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d430e:	4393      	bicne	r3, r2
   d4310:	7003      	strb	r3, [r0, #0]
}
   d4312:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4314:	8945      	ldrh	r5, [r0, #10]
   d4316:	43d2      	mvns	r2, r2
   d4318:	442a      	add	r2, r5
      x -= (w-1);
   d431a:	18cd      	adds	r5, r1, r3
   d431c:	8901      	ldrh	r1, [r0, #8]
   d431e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4320:	b212      	sxth	r2, r2
      x -= (w-1);
   d4322:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d4324:	2a00      	cmp	r2, #0
   d4326:	dbf4      	blt.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4328:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d432c:	4295      	cmp	r5, r2
   d432e:	ddf0      	ble.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4330:	2900      	cmp	r1, #0
    w += x;
   d4332:	bfbe      	ittt	lt
   d4334:	185b      	addlt	r3, r3, r1
   d4336:	b21b      	sxthlt	r3, r3
    x = 0;
   d4338:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d433a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d433e:	18ce      	adds	r6, r1, r3
   d4340:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4342:	bfc4      	itt	gt
   d4344:	1a6b      	subgt	r3, r5, r1
   d4346:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4348:	2b00      	cmp	r3, #0
   d434a:	dde2      	ble.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d434c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d434e:	2580      	movs	r5, #128	; 0x80
   d4350:	fb10 1105 	smlabb	r1, r0, r5, r1
   d4354:	4812      	ldr	r0, [pc, #72]	; (d43a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4356:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4358:	f002 0107 	and.w	r1, r2, #7
   d435c:	2201      	movs	r2, #1
   d435e:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4360:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4362:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d4364:	4403      	add	r3, r0
   d4366:	d10c      	bne.n	d4382 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4368:	4283      	cmp	r3, r0
   d436a:	d0d2      	beq.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d436c:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4370:	4314      	orrs	r4, r2
   d4372:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4376:	e7f7      	b.n	d4368 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4378:	18cd      	adds	r5, r1, r3
   d437a:	8941      	ldrh	r1, [r0, #10]
   d437c:	1b49      	subs	r1, r1, r5
   d437e:	b209      	sxth	r1, r1
      break;
   d4380:	e769      	b.n	d4256 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d4382:	43d2      	mvns	r2, r2
   d4384:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d4386:	4283      	cmp	r3, r0
   d4388:	d0c3      	beq.n	d4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d438a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d438e:	4014      	ands	r4, r2
   d4390:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4394:	e7f7      	b.n	d4386 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4396:	bf00      	nop
   d4398:	2003e194 	.word	0x2003e194
   d439c:	2003e18c 	.word	0x2003e18c
   d43a0:	2003e19c 	.word	0x2003e19c

000d43a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d43a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d43a6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d43a8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d43ac:	2d02      	cmp	r5, #2
   d43ae:	d034      	beq.n	d441a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d43b0:	2d03      	cmp	r5, #3
   d43b2:	f000 8099 	beq.w	d44e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d43b6:	2d01      	cmp	r5, #1
   d43b8:	d137      	bne.n	d442a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d43ba:	18d5      	adds	r5, r2, r3
   d43bc:	8902      	ldrh	r2, [r0, #8]
   d43be:	1b52      	subs	r2, r2, r5
   d43c0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d43c2:	2900      	cmp	r1, #0
   d43c4:	f2c0 808f 	blt.w	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d43c8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d43cc:	428d      	cmp	r5, r1
   d43ce:	f340 808a 	ble.w	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d43d2:	2a00      	cmp	r2, #0
    w += x;
   d43d4:	bfbe      	ittt	lt
   d43d6:	189b      	addlt	r3, r3, r2
   d43d8:	b21b      	sxthlt	r3, r3
    x = 0;
   d43da:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d43dc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d43e0:	18d6      	adds	r6, r2, r3
   d43e2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d43e4:	bfc4      	itt	gt
   d43e6:	1aab      	subgt	r3, r5, r2
   d43e8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d43ea:	2b00      	cmp	r3, #0
   d43ec:	dd7b      	ble.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d43ee:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d43f0:	2580      	movs	r5, #128	; 0x80
   d43f2:	fb10 2205 	smlabb	r2, r0, r5, r2
   d43f6:	4844      	ldr	r0, [pc, #272]	; (d4508 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d43f8:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d43fa:	f001 0207 	and.w	r2, r1, #7
   d43fe:	2101      	movs	r1, #1
   d4400:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d4402:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4404:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d4406:	4403      	add	r3, r0
   d4408:	d173      	bne.n	d44f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d440a:	4298      	cmp	r0, r3
   d440c:	d06b      	beq.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d440e:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4412:	430c      	orrs	r4, r1
   d4414:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4418:	e7f7      	b.n	d440a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d441a:	8905      	ldrh	r5, [r0, #8]
   d441c:	43c9      	mvns	r1, r1
   d441e:	4429      	add	r1, r5
      y -= (h-1);
   d4420:	18d5      	adds	r5, r2, r3
   d4422:	8942      	ldrh	r2, [r0, #10]
   d4424:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4426:	b209      	sxth	r1, r1
      y -= (h-1);
   d4428:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d442a:	2900      	cmp	r1, #0
   d442c:	db5b      	blt.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d442e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4432:	428d      	cmp	r5, r1
   d4434:	dd57      	ble.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4436:	2a00      	cmp	r2, #0
    __h += __y;
   d4438:	bfbe      	ittt	lt
   d443a:	189b      	addlt	r3, r3, r2
   d443c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d443e:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4440:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4444:	18d5      	adds	r5, r2, r3
   d4446:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4448:	bfc4      	itt	gt
   d444a:	1a83      	subgt	r3, r0, r2
   d444c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d444e:	2b00      	cmp	r3, #0
   d4450:	dd49      	ble.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4452:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4456:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d4508 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d445a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d445e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4462:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4464:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4468:	d01a      	beq.n	d44a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d446a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d446e:	4e27      	ldr	r6, [pc, #156]	; (d450c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4470:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4472:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4474:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4476:	bf3f      	itttt	cc
   d4478:	eba5 0e03 	subcc.w	lr, r5, r3
   d447c:	26ff      	movcc	r6, #255	; 0xff
   d447e:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4482:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4484:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4488:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d448a:	bf0c      	ite	eq
   d448c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d448e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4490:	42ab      	cmp	r3, r5
   d4492:	f80c 6001 	strb.w	r6, [ip, r1]
   d4496:	d326      	bcc.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4498:	3a08      	subs	r2, #8
   d449a:	4413      	add	r3, r2
   d449c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d449e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d44a0:	2b07      	cmp	r3, #7
   d44a2:	d917      	bls.n	d44d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d44a4:	2c01      	cmp	r4, #1
   d44a6:	bf0c      	ite	eq
   d44a8:	25ff      	moveq	r5, #255	; 0xff
   d44aa:	2500      	movne	r5, #0
   d44ac:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d44b0:	461a      	mov	r2, r3
      h -= 8;
   d44b2:	3a08      	subs	r2, #8
   d44b4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d44b6:	2a07      	cmp	r2, #7
      *pBuf = val;
   d44b8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d44bc:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d44c0:	d8f7      	bhi.n	d44b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d44c2:	f1a3 0208 	sub.w	r2, r3, #8
   d44c6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d44ca:	3201      	adds	r2, #1
   d44cc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d44d0:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d44d4:	b13b      	cbz	r3, d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d44d6:	4a0e      	ldr	r2, [pc, #56]	; (d4510 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d44d8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d44da:	7803      	ldrb	r3, [r0, #0]
   d44dc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d44de:	bf0c      	ite	eq
   d44e0:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d44e2:	4393      	bicne	r3, r2
   d44e4:	7003      	strb	r3, [r0, #0]
}
   d44e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d44e8:	8945      	ldrh	r5, [r0, #10]
   d44ea:	43c9      	mvns	r1, r1
   d44ec:	4429      	add	r1, r5
   d44ee:	b209      	sxth	r1, r1
      break;
   d44f0:	e767      	b.n	d43c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d44f2:	43c9      	mvns	r1, r1
   d44f4:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d44f6:	4298      	cmp	r0, r3
   d44f8:	d0f5      	beq.n	d44e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d44fa:	f810 4b01 	ldrb.w	r4, [r0], #1
   d44fe:	400c      	ands	r4, r1
   d4500:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4504:	e7f7      	b.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4506:	bf00      	nop
   d4508:	2003e19c 	.word	0x2003e19c
   d450c:	2003e194 	.word	0x2003e194
   d4510:	2003e18c 	.word	0x2003e18c

000d4514 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4516:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4518:	4606      	mov	r6, r0
   d451a:	4614      	mov	r4, r2
   d451c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d451e:	db2d      	blt.n	d457c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4520:	f000 fbc7 	bl	d4cb2 <_ZN12Adafruit_GFX5widthEv>
   d4524:	42a8      	cmp	r0, r5
   d4526:	dd29      	ble.n	d457c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4528:	2c00      	cmp	r4, #0
   d452a:	db27      	blt.n	d457c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d452c:	4630      	mov	r0, r6
   d452e:	f000 fbc3 	bl	d4cb8 <_ZN12Adafruit_GFX6heightEv>
   d4532:	42a0      	cmp	r0, r4
   d4534:	dd22      	ble.n	d457c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4536:	4630      	mov	r0, r6
   d4538:	f000 fbb9 	bl	d4cae <_ZN12Adafruit_GFX11getRotationEv>
   d453c:	2802      	cmp	r0, #2
   d453e:	d01e      	beq.n	d457e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4540:	2803      	cmp	r0, #3
   d4542:	d025      	beq.n	d4590 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4544:	2801      	cmp	r0, #1
   d4546:	d104      	bne.n	d4552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4548:	8932      	ldrh	r2, [r6, #8]
   d454a:	43e4      	mvns	r4, r4
   d454c:	4422      	add	r2, r4
    break;
   d454e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4550:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4552:	2c00      	cmp	r4, #0
   d4554:	4621      	mov	r1, r4
   d4556:	bfb8      	it	lt
   d4558:	1de1      	addlt	r1, r4, #7
   d455a:	10c9      	asrs	r1, r1, #3
   d455c:	2380      	movs	r3, #128	; 0x80
   d455e:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4562:	490e      	ldr	r1, [pc, #56]	; (d459c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4564:	2201      	movs	r2, #1
   d4566:	f004 0407 	and.w	r4, r4, #7
   d456a:	574b      	ldrsb	r3, [r1, r5]
   d456c:	fa02 f404 	lsl.w	r4, r2, r4
   d4570:	b264      	sxtb	r4, r4
   d4572:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4574:	bf0c      	ite	eq
   d4576:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4578:	43a3      	bicne	r3, r4
   d457a:	554b      	strb	r3, [r1, r5]
}
   d457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d457e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4580:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4582:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4584:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4586:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4588:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d458a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d458c:	b224      	sxth	r4, r4
    break;
   d458e:	e7e0      	b.n	d4552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4590:	8973      	ldrh	r3, [r6, #10]
   d4592:	3b01      	subs	r3, #1
   d4594:	1b5b      	subs	r3, r3, r5
    break;
   d4596:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4598:	b21c      	sxth	r4, r3
    break;
   d459a:	e7da      	b.n	d4552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d459c:	2003e19c 	.word	0x2003e19c

000d45a0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45a0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45a2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45a4:	4604      	mov	r4, r0
   d45a6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45a8:	2180      	movs	r1, #128	; 0x80
   d45aa:	f000 faa7 	bl	d4afc <_ZN12Adafruit_GFXC1Ess>
   d45ae:	4b06      	ldr	r3, [pc, #24]	; (d45c8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d45b0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d45b2:	23ff      	movs	r3, #255	; 0xff
   d45b4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d45b8:	7763      	strb	r3, [r4, #29]
   d45ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d45be:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d45c0:	f884 5020 	strb.w	r5, [r4, #32]
}
   d45c4:	4620      	mov	r0, r4
   d45c6:	bd38      	pop	{r3, r4, r5, pc}
   d45c8:	000d6a28 	.word	0x000d6a28

000d45cc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d45cc:	4802      	ldr	r0, [pc, #8]	; (d45d8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d45ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d45d2:	2100      	movs	r1, #0
   d45d4:	f002 b9ce 	b.w	d6974 <memset>
   d45d8:	2003e19c 	.word	0x2003e19c

000d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d45dc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d45de:	4c0b      	ldr	r4, [pc, #44]	; (d460c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d45e0:	7821      	ldrb	r1, [r4, #0]
   d45e2:	f3bf 8f5b 	dmb	ish
   d45e6:	f011 0101 	ands.w	r1, r1, #1
   d45ea:	d10b      	bne.n	d4604 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d45ec:	4620      	mov	r0, r4
   d45ee:	9101      	str	r1, [sp, #4]
   d45f0:	f7ff fd5e 	bl	d40b0 <__cxa_guard_acquire>
   d45f4:	9901      	ldr	r1, [sp, #4]
   d45f6:	b128      	cbz	r0, d4604 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d45f8:	4805      	ldr	r0, [pc, #20]	; (d4610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d45fa:	f000 fe29 	bl	d5250 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d45fe:	4620      	mov	r0, r4
   d4600:	f7ff fd5b 	bl	d40ba <__cxa_guard_release>
        return instance;
    }
   d4604:	4802      	ldr	r0, [pc, #8]	; (d4610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4606:	b002      	add	sp, #8
   d4608:	bd10      	pop	{r4, pc}
   d460a:	bf00      	nop
   d460c:	2003e638 	.word	0x2003e638
   d4610:	2003e63c 	.word	0x2003e63c

000d4614 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4614:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4616:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d461a:	b143      	cbz	r3, d462e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d461c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d461e:	f7ff ffdd 	bl	d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4622:	9901      	ldr	r1, [sp, #4]
}
   d4624:	b003      	add	sp, #12
   d4626:	f85d eb04 	ldr.w	lr, [sp], #4
   d462a:	f000 bec1 	b.w	d53b0 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d462e:	460b      	mov	r3, r1
   d4630:	7f81      	ldrb	r1, [r0, #30]
   d4632:	7f40      	ldrb	r0, [r0, #29]
   d4634:	2201      	movs	r2, #1
}
   d4636:	b003      	add	sp, #12
   d4638:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d463c:	f001 bcc9 	b.w	d5fd2 <shiftOut>

000d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4640:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4642:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4646:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4648:	4604      	mov	r4, r0
   d464a:	460d      	mov	r5, r1
  if (sid != -1)
   d464c:	d01d      	beq.n	d468a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d464e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4652:	2101      	movs	r1, #1
   d4654:	b280      	uxth	r0, r0
   d4656:	f001 fc8c 	bl	d5f72 <digitalWrite>
    digitalWrite(dc, LOW);
   d465a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d465e:	2100      	movs	r1, #0
   d4660:	b280      	uxth	r0, r0
   d4662:	f001 fc86 	bl	d5f72 <digitalWrite>
    digitalWrite(cs, LOW);
   d4666:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d466a:	2100      	movs	r1, #0
   d466c:	b280      	uxth	r0, r0
   d466e:	f001 fc80 	bl	d5f72 <digitalWrite>
    fastSPIwrite(c);
   d4672:	4629      	mov	r1, r5
   d4674:	4620      	mov	r0, r4
   d4676:	f7ff ffcd 	bl	d4614 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d467a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d467e:	2101      	movs	r1, #1
}
   d4680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4684:	b280      	uxth	r0, r0
   d4686:	f001 bc74 	b.w	d5f72 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d468a:	f001 fcdd 	bl	d6048 <_Z19__fetch_global_Wirev>
   d468e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4692:	f001 fb27 	bl	d5ce4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4696:	f001 fcd7 	bl	d6048 <_Z19__fetch_global_Wirev>
   d469a:	6803      	ldr	r3, [r0, #0]
   d469c:	2100      	movs	r1, #0
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	4798      	blx	r3
    Wire.write(c);
   d46a2:	f001 fcd1 	bl	d6048 <_Z19__fetch_global_Wirev>
   d46a6:	6803      	ldr	r3, [r0, #0]
   d46a8:	4629      	mov	r1, r5
   d46aa:	689b      	ldr	r3, [r3, #8]
   d46ac:	4798      	blx	r3
    Wire.endTransmission();
   d46ae:	f001 fccb 	bl	d6048 <_Z19__fetch_global_Wirev>
}
   d46b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d46b6:	f001 bb1c 	b.w	d5cf2 <_ZN7TwoWire15endTransmissionEv>
	...

000d46bc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d46bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d46be:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d46c0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d46c2:	f7ff ffbd 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d46c6:	2100      	movs	r1, #0
   d46c8:	4620      	mov	r0, r4
   d46ca:	f7ff ffb9 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d46ce:	217f      	movs	r1, #127	; 0x7f
   d46d0:	4620      	mov	r0, r4
   d46d2:	f7ff ffb5 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d46d6:	2122      	movs	r1, #34	; 0x22
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ffb1 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d46de:	2100      	movs	r1, #0
   d46e0:	4620      	mov	r0, r4
   d46e2:	f7ff ffad 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d46e6:	2107      	movs	r1, #7
   d46e8:	4620      	mov	r0, r4
   d46ea:	f7ff ffa9 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d46ee:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d46f2:	4f29      	ldr	r7, [pc, #164]	; (d4798 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d46f4:	3301      	adds	r3, #1
   d46f6:	d02a      	beq.n	d474e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d46f8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d46fc:	2101      	movs	r1, #1
   d46fe:	b280      	uxth	r0, r0
   d4700:	f001 fc37 	bl	d5f72 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4704:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4708:	2101      	movs	r1, #1
   d470a:	b280      	uxth	r0, r0
   d470c:	f001 fc31 	bl	d5f72 <digitalWrite>
    digitalWrite(cs, LOW);
   d4710:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4714:	2100      	movs	r1, #0
   d4716:	b280      	uxth	r0, r0
   d4718:	f001 fc2b 	bl	d5f72 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d471c:	2001      	movs	r0, #1
   d471e:	f000 fb0f 	bl	d4d40 <HAL_Delay_Microseconds>
   d4722:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4726:	3d01      	subs	r5, #1
   d4728:	f817 1b01 	ldrb.w	r1, [r7], #1
   d472c:	4620      	mov	r0, r4
   d472e:	b2ad      	uxth	r5, r5
   d4730:	f7ff ff70 	bl	d4614 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4734:	2d00      	cmp	r5, #0
   d4736:	d1f6      	bne.n	d4726 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4738:	2001      	movs	r0, #1
   d473a:	f000 fb01 	bl	d4d40 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d473e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4742:	2101      	movs	r1, #1
}
   d4744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4748:	b280      	uxth	r0, r0
   d474a:	f001 bc12 	b.w	d5f72 <digitalWrite>
   d474e:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4750:	f001 fc7a 	bl	d6048 <_Z19__fetch_global_Wirev>
   d4754:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4758:	f001 fac4 	bl	d5ce4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d475c:	f001 fc74 	bl	d6048 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4760:	6803      	ldr	r3, [r0, #0]
   d4762:	f1a6 0510 	sub.w	r5, r6, #16
   d4766:	689b      	ldr	r3, [r3, #8]
   d4768:	2140      	movs	r1, #64	; 0x40
   d476a:	b2ad      	uxth	r5, r5
   d476c:	4798      	blx	r3
		Wire.write(buffer[i]);
   d476e:	f001 fc6b 	bl	d6048 <_Z19__fetch_global_Wirev>
   d4772:	6803      	ldr	r3, [r0, #0]
   d4774:	5d79      	ldrb	r1, [r7, r5]
   d4776:	689b      	ldr	r3, [r3, #8]
		i++;
   d4778:	3501      	adds	r5, #1
   d477a:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d477c:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d477e:	42ae      	cmp	r6, r5
   d4780:	d1f5      	bne.n	d476e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4782:	f001 fc61 	bl	d6048 <_Z19__fetch_global_Wirev>
   d4786:	f001 fab4 	bl	d5cf2 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d478a:	f106 0310 	add.w	r3, r6, #16
   d478e:	b29e      	uxth	r6, r3
   d4790:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4794:	d1dc      	bne.n	d4750 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4798:	2003e19c 	.word	0x2003e19c

000d479c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d479c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d479e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d47a2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d47a4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d47a6:	4604      	mov	r4, r0
   d47a8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d47aa:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d47ac:	f000 80c9 	beq.w	d4942 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d47b0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d47b4:	2101      	movs	r1, #1
   d47b6:	b280      	uxth	r0, r0
   d47b8:	f001 fbca 	bl	d5f50 <pinMode>
    pinMode(cs, OUTPUT);
   d47bc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47c0:	2101      	movs	r1, #1
   d47c2:	b280      	uxth	r0, r0
   d47c4:	f001 fbc4 	bl	d5f50 <pinMode>
    if (!hwSPI){
   d47c8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d47cc:	2b00      	cmp	r3, #0
   d47ce:	f000 80a6 	beq.w	d491e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d47d2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d47d6:	2101      	movs	r1, #1
   d47d8:	b280      	uxth	r0, r0
   d47da:	f001 fbca 	bl	d5f72 <digitalWrite>
        instance().setBitOrder(order);
   d47de:	f7ff fefd 	bl	d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47e2:	2101      	movs	r1, #1
   d47e4:	f000 fd4f 	bl	d5286 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d47e8:	f7ff fef8 	bl	d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47ec:	2110      	movs	r1, #16
   d47ee:	f000 fdb9 	bl	d5364 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d47f2:	f7ff fef3 	bl	d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47f6:	2100      	movs	r1, #0
   d47f8:	f000 fd58 	bl	d52ac <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d47fc:	f7ff feee 	bl	d45dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4800:	f000 fd30 	bl	d5264 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d4804:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4808:	2101      	movs	r1, #1
   d480a:	b280      	uxth	r0, r0
   d480c:	f001 fba0 	bl	d5f50 <pinMode>
  digitalWrite(rst, HIGH);
   d4810:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4814:	2101      	movs	r1, #1
   d4816:	b280      	uxth	r0, r0
   d4818:	f001 fbab 	bl	d5f72 <digitalWrite>
  delay(1);
   d481c:	2001      	movs	r0, #1
   d481e:	f000 fff7 	bl	d5810 <delay>
  digitalWrite(rst, LOW);
   d4822:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4826:	2100      	movs	r1, #0
   d4828:	b280      	uxth	r0, r0
   d482a:	f001 fba2 	bl	d5f72 <digitalWrite>
  delay(10);
   d482e:	200a      	movs	r0, #10
   d4830:	f000 ffee 	bl	d5810 <delay>
  digitalWrite(rst, HIGH);
   d4834:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4838:	2101      	movs	r1, #1
   d483a:	b280      	uxth	r0, r0
   d483c:	f001 fb99 	bl	d5f72 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4840:	4620      	mov	r0, r4
   d4842:	21ae      	movs	r1, #174	; 0xae
   d4844:	f7ff fefc 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4848:	4620      	mov	r0, r4
   d484a:	21d5      	movs	r1, #213	; 0xd5
   d484c:	f7ff fef8 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4850:	4620      	mov	r0, r4
   d4852:	2180      	movs	r1, #128	; 0x80
   d4854:	f7ff fef4 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4858:	4620      	mov	r0, r4
   d485a:	21a8      	movs	r1, #168	; 0xa8
   d485c:	f7ff fef0 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4860:	4620      	mov	r0, r4
   d4862:	213f      	movs	r1, #63	; 0x3f
   d4864:	f7ff feec 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4868:	4620      	mov	r0, r4
   d486a:	21d3      	movs	r1, #211	; 0xd3
   d486c:	f7ff fee8 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4870:	4620      	mov	r0, r4
   d4872:	2100      	movs	r1, #0
   d4874:	f7ff fee4 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4878:	4620      	mov	r0, r4
   d487a:	2140      	movs	r1, #64	; 0x40
   d487c:	f7ff fee0 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4880:	218d      	movs	r1, #141	; 0x8d
   d4882:	4620      	mov	r0, r4
   d4884:	f7ff fedc 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4888:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d488a:	bf0c      	ite	eq
   d488c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d488e:	2114      	movne	r1, #20
   d4890:	4620      	mov	r0, r4
   d4892:	f7ff fed5 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4896:	4620      	mov	r0, r4
   d4898:	2120      	movs	r1, #32
   d489a:	f7ff fed1 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d489e:	4620      	mov	r0, r4
   d48a0:	2100      	movs	r1, #0
   d48a2:	f7ff fecd 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d48a6:	4620      	mov	r0, r4
   d48a8:	21a1      	movs	r1, #161	; 0xa1
   d48aa:	f7ff fec9 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d48ae:	4620      	mov	r0, r4
   d48b0:	21c8      	movs	r1, #200	; 0xc8
   d48b2:	f7ff fec5 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d48b6:	4620      	mov	r0, r4
   d48b8:	21da      	movs	r1, #218	; 0xda
   d48ba:	f7ff fec1 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d48be:	4620      	mov	r0, r4
   d48c0:	2112      	movs	r1, #18
   d48c2:	f7ff febd 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d48c6:	2181      	movs	r1, #129	; 0x81
   d48c8:	4620      	mov	r0, r4
   d48ca:	f7ff feb9 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48ce:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d48d0:	bf0c      	ite	eq
   d48d2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d48d4:	21cf      	movne	r1, #207	; 0xcf
   d48d6:	4620      	mov	r0, r4
   d48d8:	f7ff feb2 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d48dc:	21d9      	movs	r1, #217	; 0xd9
   d48de:	4620      	mov	r0, r4
   d48e0:	f7ff feae 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d48e4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d48e6:	bf0c      	ite	eq
   d48e8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d48ea:	21f1      	movne	r1, #241	; 0xf1
   d48ec:	4620      	mov	r0, r4
   d48ee:	f7ff fea7 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d48f2:	4620      	mov	r0, r4
   d48f4:	21db      	movs	r1, #219	; 0xdb
   d48f6:	f7ff fea3 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d48fa:	4620      	mov	r0, r4
   d48fc:	2140      	movs	r1, #64	; 0x40
   d48fe:	f7ff fe9f 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4902:	4620      	mov	r0, r4
   d4904:	21a4      	movs	r1, #164	; 0xa4
   d4906:	f7ff fe9b 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d490a:	4620      	mov	r0, r4
   d490c:	21a6      	movs	r1, #166	; 0xa6
   d490e:	f7ff fe97 	bl	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4912:	4620      	mov	r0, r4
   d4914:	21af      	movs	r1, #175	; 0xaf
}
   d4916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d491a:	f7ff be91 	b.w	d4640 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d491e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4922:	2101      	movs	r1, #1
   d4924:	b280      	uxth	r0, r0
   d4926:	f001 fb13 	bl	d5f50 <pinMode>
    	pinMode(sclk, OUTPUT);
   d492a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d492e:	2101      	movs	r1, #1
   d4930:	b280      	uxth	r0, r0
   d4932:	f001 fb0d 	bl	d5f50 <pinMode>
    if (hwSPI){
   d4936:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d493a:	2b00      	cmp	r3, #0
   d493c:	f43f af62 	beq.w	d4804 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d4940:	e747      	b.n	d47d2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d4942:	f001 fb81 	bl	d6048 <_Z19__fetch_global_Wirev>
   d4946:	f001 f9c3 	bl	d5cd0 <_ZN7TwoWire5beginEv>
   d494a:	e75b      	b.n	d4804 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d494c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4950:	b085      	sub	sp, #20
   d4952:	461f      	mov	r7, r3
   d4954:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4958:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d495c:	eba8 0902 	sub.w	r9, r8, r2
   d4960:	eba7 0a01 	sub.w	sl, r7, r1
   d4964:	f1b9 0f00 	cmp.w	r9, #0
   d4968:	bfb8      	it	lt
   d496a:	f1c9 0900 	rsblt	r9, r9, #0
   d496e:	f1ba 0f00 	cmp.w	sl, #0
   d4972:	bfb8      	it	lt
   d4974:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d4978:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d497a:	4683      	mov	fp, r0
   d497c:	460c      	mov	r4, r1
   d497e:	4615      	mov	r5, r2
  if (steep) {
   d4980:	dd04      	ble.n	d498c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d4982:	463a      	mov	r2, r7
    swap(x0, y0);
   d4984:	462c      	mov	r4, r5
    swap(x1, y1);
   d4986:	4647      	mov	r7, r8
    swap(x0, y0);
   d4988:	460d      	mov	r5, r1
    swap(x1, y1);
   d498a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d498c:	42bc      	cmp	r4, r7
   d498e:	dd05      	ble.n	d499c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d4990:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4992:	4645      	mov	r5, r8
   d4994:	4690      	mov	r8, r2
  if (x0 > x1) {
   d4996:	4622      	mov	r2, r4
   d4998:	463c      	mov	r4, r7
   d499a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d499c:	1b3e      	subs	r6, r7, r4
   d499e:	b2b2      	uxth	r2, r6
   d49a0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d49a2:	eba8 0205 	sub.w	r2, r8, r5
   d49a6:	2a00      	cmp	r2, #0
   d49a8:	bfb8      	it	lt
   d49aa:	4252      	neglt	r2, r2
   d49ac:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d49ae:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d49b2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d49b6:	4545      	cmp	r5, r8
   d49b8:	bfb4      	ite	lt
   d49ba:	2201      	movlt	r2, #1
   d49bc:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d49c0:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d49c2:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d49c4:	42bc      	cmp	r4, r7
   d49c6:	dc1c      	bgt.n	d4a02 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d49c8:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d49cc:	9303      	str	r3, [sp, #12]
    if (steep) {
   d49ce:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d49d0:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d49d4:	bfc7      	ittee	gt
   d49d6:	4629      	movgt	r1, r5
   d49d8:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d49da:	462a      	movle	r2, r5
   d49dc:	4621      	movle	r1, r4
   d49de:	4658      	mov	r0, fp
   d49e0:	47c0      	blx	r8
    }
    err -= dy;
   d49e2:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d49e4:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d49e6:	1ab6      	subs	r6, r6, r2
   d49e8:	b2b1      	uxth	r1, r6
   d49ea:	b236      	sxth	r6, r6
    if (err < 0) {
   d49ec:	2e00      	cmp	r6, #0
   d49ee:	da05      	bge.n	d49fc <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d49f0:	9a02      	ldr	r2, [sp, #8]
   d49f2:	4415      	add	r5, r2
      err += dx;
   d49f4:	9a00      	ldr	r2, [sp, #0]
   d49f6:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d49f8:	b22d      	sxth	r5, r5
      err += dx;
   d49fa:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d49fc:	3401      	adds	r4, #1
   d49fe:	b224      	sxth	r4, r4
   d4a00:	e7e0      	b.n	d49c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d4a02:	b005      	add	sp, #20
   d4a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4a08 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4a08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4a0c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4a10:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d4a12:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4a16:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d4a1a:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4a1c:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d4a1e:	4616      	mov	r6, r2
   d4a20:	468a      	mov	sl, r1
   d4a22:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d4a24:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4a26:	6823      	ldr	r3, [r4, #0]
   d4a28:	f8cd 8000 	str.w	r8, [sp]
   d4a2c:	f109 32ff 	add.w	r2, r9, #4294967295
   d4a30:	4432      	add	r2, r6
   d4a32:	69df      	ldr	r7, [r3, #28]
   d4a34:	4651      	mov	r1, sl
   d4a36:	462b      	mov	r3, r5
   d4a38:	4620      	mov	r0, r4
   d4a3a:	b212      	sxth	r2, r2
   d4a3c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4a3e:	6823      	ldr	r3, [r4, #0]
   d4a40:	f8cd 8000 	str.w	r8, [sp]
   d4a44:	699f      	ldr	r7, [r3, #24]
   d4a46:	4632      	mov	r2, r6
   d4a48:	464b      	mov	r3, r9
   d4a4a:	4651      	mov	r1, sl
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4a50:	1e6b      	subs	r3, r5, #1
   d4a52:	eb03 010a 	add.w	r1, r3, sl
   d4a56:	6823      	ldr	r3, [r4, #0]
   d4a58:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d4a5c:	699d      	ldr	r5, [r3, #24]
   d4a5e:	4632      	mov	r2, r6
   d4a60:	464b      	mov	r3, r9
   d4a62:	b209      	sxth	r1, r1
   d4a64:	4620      	mov	r0, r4
   d4a66:	46ac      	mov	ip, r5
}
   d4a68:	b002      	add	sp, #8
   d4a6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d4a6e:	4760      	bx	ip

000d4a70 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4a72:	3b01      	subs	r3, #1
   d4a74:	4413      	add	r3, r2
   d4a76:	6804      	ldr	r4, [r0, #0]
   d4a78:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a7c:	9501      	str	r5, [sp, #4]
   d4a7e:	b21b      	sxth	r3, r3
   d4a80:	9300      	str	r3, [sp, #0]
   d4a82:	6964      	ldr	r4, [r4, #20]
   d4a84:	460b      	mov	r3, r1
   d4a86:	47a0      	blx	r4
}
   d4a88:	b003      	add	sp, #12
   d4a8a:	bd30      	pop	{r4, r5, pc}

000d4a8c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4a8e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a92:	6804      	ldr	r4, [r0, #0]
   d4a94:	e9cd 2500 	strd	r2, r5, [sp]
   d4a98:	3b01      	subs	r3, #1
   d4a9a:	440b      	add	r3, r1
   d4a9c:	6964      	ldr	r4, [r4, #20]
   d4a9e:	b21b      	sxth	r3, r3
   d4aa0:	47a0      	blx	r4
}
   d4aa2:	b003      	add	sp, #12
   d4aa4:	bd30      	pop	{r4, r5, pc}

000d4aa6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4aa6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4aaa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4aae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4ab2:	4605      	mov	r5, r0
   d4ab4:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4ab6:	460c      	mov	r4, r1
   d4ab8:	18ce      	adds	r6, r1, r3
   d4aba:	42b4      	cmp	r4, r6
   d4abc:	da0b      	bge.n	d4ad6 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d4abe:	682b      	ldr	r3, [r5, #0]
   d4ac0:	f8cd 8000 	str.w	r8, [sp]
   d4ac4:	699f      	ldr	r7, [r3, #24]
   d4ac6:	4621      	mov	r1, r4
   d4ac8:	464b      	mov	r3, r9
   d4aca:	4652      	mov	r2, sl
   d4acc:	4628      	mov	r0, r5
   d4ace:	3401      	adds	r4, #1
   d4ad0:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d4ad2:	b224      	sxth	r4, r4
   d4ad4:	e7f1      	b.n	d4aba <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d4ad6:	b002      	add	sp, #8
   d4ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4adc <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4adc:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4ade:	6802      	ldr	r2, [r0, #0]
   d4ae0:	9101      	str	r1, [sp, #4]
   d4ae2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4ae6:	9100      	str	r1, [sp, #0]
   d4ae8:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d4aea:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4aee:	2200      	movs	r2, #0
   d4af0:	4611      	mov	r1, r2
   d4af2:	47a0      	blx	r4
}
   d4af4:	b002      	add	sp, #8
   d4af6:	bd10      	pop	{r4, pc}

000d4af8 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d4af8:	4770      	bx	lr
	...

000d4afc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4afc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4afe:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d4b00:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d4b02:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d4b06:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d4b08:	4d05      	ldr	r5, [pc, #20]	; (d4b20 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d4b0a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d4b0c:	2201      	movs	r2, #1
   d4b0e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d4b10:	6005      	str	r5, [r0, #0]
   d4b12:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d4b14:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d4b16:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d4b18:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d4b1a:	7682      	strb	r2, [r0, #26]
}
   d4b1c:	bd30      	pop	{r4, r5, pc}
   d4b1e:	bf00      	nop
   d4b20:	000d6f5c 	.word	0x000d6f5c

000d4b24 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b28:	ed2d 8b02 	vpush	{d8}
   d4b2c:	b08b      	sub	sp, #44	; 0x2c
   d4b2e:	4606      	mov	r6, r0
   d4b30:	9103      	str	r1, [sp, #12]
   d4b32:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d4b36:	9105      	str	r1, [sp, #20]
   d4b38:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d4b3c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d4b3e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4b42:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b44:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d4b48:	4281      	cmp	r1, r0
   d4b4a:	dd51      	ble.n	d4bf0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d4b4c:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d4b50:	4291      	cmp	r1, r2
   d4b52:	dd4d      	ble.n	d4bf0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b54:	2106      	movs	r1, #6
   d4b56:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d4b5a:	2c00      	cmp	r4, #0
   d4b5c:	dd48      	ble.n	d4bf0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d4b5e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b62:	2c00      	cmp	r4, #0
   d4b64:	dd44      	ble.n	d4bf0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d4b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4b6a:	9309      	str	r3, [sp, #36]	; 0x24
   d4b6c:	b293      	uxth	r3, r2
   d4b6e:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d4b70:	2400      	movs	r4, #0
   d4b72:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d4b74:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d4b76:	bf1c      	itt	ne
   d4b78:	4b2d      	ldrne	r3, [pc, #180]	; (d4c30 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d4b7a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b7c:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d4b7e:	bf16      	itet	ne
   d4b80:	191b      	addne	r3, r3, r4
      line = 0x0;
   d4b82:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d4b84:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d4b86:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b88:	9a03      	ldr	r2, [sp, #12]
   d4b8a:	b2ab      	uxth	r3, r5
   d4b8c:	9308      	str	r3, [sp, #32]
   d4b8e:	fb04 f305 	mul.w	r3, r4, r5
   d4b92:	fa13 f382 	uxtah	r3, r3, r2
   d4b96:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d4b98:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b9c:	ee08 3a10 	vmov	s16, r3
   d4ba0:	f04f 0800 	mov.w	r8, #0
   d4ba4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d4ba8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d4bac:	9b02      	ldr	r3, [sp, #8]
   d4bae:	07db      	lsls	r3, r3, #31
   d4bb0:	d52f      	bpl.n	d4c12 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4bb2:	2d01      	cmp	r5, #1
   d4bb4:	6833      	ldr	r3, [r6, #0]
   d4bb6:	d120      	bne.n	d4bfa <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d4bb8:	9a04      	ldr	r2, [sp, #16]
   d4bba:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4bbe:	9b05      	ldr	r3, [sp, #20]
   d4bc0:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d4bc2:	b212      	sxth	r2, r2
   d4bc4:	4651      	mov	r1, sl
   d4bc6:	4630      	mov	r0, r6
   d4bc8:	47d8      	blx	fp
      line >>= 1;
   d4bca:	9b02      	ldr	r3, [sp, #8]
   d4bcc:	085b      	lsrs	r3, r3, #1
   d4bce:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d4bd0:	9b08      	ldr	r3, [sp, #32]
   d4bd2:	f108 0801 	add.w	r8, r8, #1
   d4bd6:	441f      	add	r7, r3
   d4bd8:	f1b8 0f08 	cmp.w	r8, #8
   d4bdc:	b2bf      	uxth	r7, r7
   d4bde:	d1e5      	bne.n	d4bac <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d4be0:	9b07      	ldr	r3, [sp, #28]
   d4be2:	3b01      	subs	r3, #1
   d4be4:	3401      	adds	r4, #1
   d4be6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4bea:	b264      	sxtb	r4, r4
   d4bec:	9307      	str	r3, [sp, #28]
   d4bee:	d1c1      	bne.n	d4b74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d4bf0:	b00b      	add	sp, #44	; 0x2c
   d4bf2:	ecbd 8b02 	vpop	{d8}
   d4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4bfa:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4bfc:	e9cd 9200 	strd	r9, r2, [sp]
   d4c00:	ee18 1a10 	vmov	r1, s16
   d4c04:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4c08:	b23a      	sxth	r2, r7
   d4c0a:	464b      	mov	r3, r9
   d4c0c:	4630      	mov	r0, r6
   d4c0e:	47d8      	blx	fp
   d4c10:	e7db      	b.n	d4bca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d4c12:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d4c16:	4293      	cmp	r3, r2
   d4c18:	d0d7      	beq.n	d4bca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d4c1a:	2d01      	cmp	r5, #1
   d4c1c:	6833      	ldr	r3, [r6, #0]
   d4c1e:	d105      	bne.n	d4c2c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d4c20:	9a04      	ldr	r2, [sp, #16]
   d4c22:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c26:	9b06      	ldr	r3, [sp, #24]
   d4c28:	4442      	add	r2, r8
   d4c2a:	e7ca      	b.n	d4bc2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4c2c:	9a06      	ldr	r2, [sp, #24]
   d4c2e:	e7e5      	b.n	d4bfc <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d4c30:	000d6a58 	.word	0x000d6a58

000d4c34 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4c34:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d4c36:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d4c38:	b085      	sub	sp, #20
   d4c3a:	4604      	mov	r4, r0
  if (c == '\n') {
   d4c3c:	d107      	bne.n	d4c4e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d4c3e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d4c40:	8a63      	ldrh	r3, [r4, #18]
   d4c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4c46:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4c48:	2300      	movs	r3, #0
   d4c4a:	8223      	strh	r3, [r4, #16]
   d4c4c:	e021      	b.n	d4c92 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d4c4e:	290d      	cmp	r1, #13
   d4c50:	d01f      	beq.n	d4c92 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4c52:	7e03      	ldrb	r3, [r0, #24]
   d4c54:	9302      	str	r3, [sp, #8]
   d4c56:	8ac3      	ldrh	r3, [r0, #22]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	8a83      	ldrh	r3, [r0, #20]
   d4c5c:	9300      	str	r3, [sp, #0]
   d4c5e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4c62:	460b      	mov	r3, r1
   d4c64:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4c68:	f7ff ff5c 	bl	d4b24 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4c6c:	7e21      	ldrb	r1, [r4, #24]
   d4c6e:	8a23      	ldrh	r3, [r4, #16]
   d4c70:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4c74:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c78:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d4c7a:	b21b      	sxth	r3, r3
   d4c7c:	460a      	mov	r2, r1
   d4c7e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c80:	b138      	cbz	r0, d4c92 <_ZN12Adafruit_GFX5writeEh+0x5e>
   d4c82:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4c86:	f06f 0505 	mvn.w	r5, #5
   d4c8a:	fb05 0101 	mla	r1, r5, r1, r0
   d4c8e:	428b      	cmp	r3, r1
   d4c90:	dcd6      	bgt.n	d4c40 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d4c92:	2001      	movs	r0, #1
   d4c94:	b005      	add	sp, #20
   d4c96:	bd30      	pop	{r4, r5, pc}

000d4c98 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d4c98:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4c9a:	8242      	strh	r2, [r0, #18]
}
   d4c9c:	4770      	bx	lr

000d4c9e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d4c9e:	2901      	cmp	r1, #1
   d4ca0:	bf38      	it	cc
   d4ca2:	2101      	movcc	r1, #1
   d4ca4:	7601      	strb	r1, [r0, #24]
}
   d4ca6:	4770      	bx	lr

000d4ca8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d4ca8:	82c1      	strh	r1, [r0, #22]
   d4caa:	8281      	strh	r1, [r0, #20]
}
   d4cac:	4770      	bx	lr

000d4cae <_ZN12Adafruit_GFX11getRotationEv>:
}
   d4cae:	7e40      	ldrb	r0, [r0, #25]
   d4cb0:	4770      	bx	lr

000d4cb2 <_ZN12Adafruit_GFX5widthEv>:
}
   d4cb2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4cb6:	4770      	bx	lr

000d4cb8 <_ZN12Adafruit_GFX6heightEv>:
}
   d4cb8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4cbc:	4770      	bx	lr
	...

000d4cc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <netdb_freeaddrinfo+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	689b      	ldr	r3, [r3, #8]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030268 	.word	0x00030268

000d4cd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <netdb_getaddrinfo+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	68db      	ldr	r3, [r3, #12]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030268 	.word	0x00030268

000d4ce0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <HAL_Validate_Pin_Function+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	685b      	ldr	r3, [r3, #4]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	0003022c 	.word	0x0003022c

000d4cf0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <HAL_Pin_Mode+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	689b      	ldr	r3, [r3, #8]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	0003022c 	.word	0x0003022c

000d4d00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <HAL_Get_Pin_Mode+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	68db      	ldr	r3, [r3, #12]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	0003022c 	.word	0x0003022c

000d4d10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <HAL_GPIO_Write+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	691b      	ldr	r3, [r3, #16]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	0003022c 	.word	0x0003022c

000d4d20 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <hal_adc_read+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	0003022c 	.word	0x0003022c

000d4d30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <HAL_RNG_GetRandomNumber+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	685b      	ldr	r3, [r3, #4]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030218 	.word	0x00030218

000d4d40 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <HAL_Delay_Microseconds+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	68db      	ldr	r3, [r3, #12]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030218 	.word	0x00030218

000d4d50 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	695b      	ldr	r3, [r3, #20]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030218 	.word	0x00030218

000d4d60 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <hal_rtc_time_is_valid+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030218 	.word	0x00030218

000d4d70 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <hal_rtc_get_time+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030218 	.word	0x00030218

000d4d80 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <os_mutex_recursive_create+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030248 	.word	0x00030248

000d4d90 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <os_mutex_recursive_destroy+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030248 	.word	0x00030248

000d4da0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <inet_inet_ntop+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	695b      	ldr	r3, [r3, #20]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030264 	.word	0x00030264

000d4db0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <hal_usart_init+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	681b      	ldr	r3, [r3, #0]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	0003023c 	.word	0x0003023c

000d4dc0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <hal_usart_write+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	68db      	ldr	r3, [r3, #12]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	0003023c 	.word	0x0003023c

000d4dd0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <hal_usart_available+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	691b      	ldr	r3, [r3, #16]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	0003023c 	.word	0x0003023c

000d4de0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <hal_usart_read+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	695b      	ldr	r3, [r3, #20]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	0003023c 	.word	0x0003023c

000d4df0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <hal_usart_peek+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	699b      	ldr	r3, [r3, #24]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	0003023c 	.word	0x0003023c

000d4e00 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <hal_usart_flush+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	69db      	ldr	r3, [r3, #28]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003023c 	.word	0x0003023c

000d4e10 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <hal_usart_is_enabled+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	6a1b      	ldr	r3, [r3, #32]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003023c 	.word	0x0003023c

000d4e20 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <hal_usart_available_data_for_write+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	0003023c 	.word	0x0003023c

000d4e30 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <hal_i2c_begin+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	68db      	ldr	r3, [r3, #12]
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	00030228 	.word	0x00030228

000d4e40 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <hal_i2c_begin_transmission+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	699b      	ldr	r3, [r3, #24]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	00030228 	.word	0x00030228

000d4e50 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <hal_i2c_end_transmission+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	69db      	ldr	r3, [r3, #28]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	00030228 	.word	0x00030228

000d4e60 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <hal_i2c_write+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	6a1b      	ldr	r3, [r3, #32]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	00030228 	.word	0x00030228

000d4e70 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <hal_i2c_available+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	00030228 	.word	0x00030228

000d4e80 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <hal_i2c_read+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	00030228 	.word	0x00030228

000d4e90 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <hal_i2c_peek+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030228 	.word	0x00030228

000d4ea0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <hal_i2c_flush+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030228 	.word	0x00030228

000d4eb0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <hal_i2c_is_enabled+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030228 	.word	0x00030228

000d4ec0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <hal_i2c_init+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030228 	.word	0x00030228

000d4ed0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <hal_spi_begin+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	681b      	ldr	r3, [r3, #0]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030230 	.word	0x00030230

000d4ee0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <hal_spi_set_bit_order+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	689b      	ldr	r3, [r3, #8]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030230 	.word	0x00030230

000d4ef0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <hal_spi_set_data_mode+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	68db      	ldr	r3, [r3, #12]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030230 	.word	0x00030230

000d4f00 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <hal_spi_set_clock_divider+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	691b      	ldr	r3, [r3, #16]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030230 	.word	0x00030230

000d4f10 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <hal_spi_transfer+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	695b      	ldr	r3, [r3, #20]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030230 	.word	0x00030230

000d4f20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <hal_spi_init+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	69db      	ldr	r3, [r3, #28]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030230 	.word	0x00030230

000d4f30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <hal_spi_is_enabled+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	6a1b      	ldr	r3, [r3, #32]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030230 	.word	0x00030230

000d4f40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <hal_spi_info+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030230 	.word	0x00030230

000d4f50 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <hal_spi_acquire+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030230 	.word	0x00030230

000d4f60 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <hal_spi_release+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030230 	.word	0x00030230

000d4f70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_USB_USART_Init+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	681b      	ldr	r3, [r3, #0]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003024c 	.word	0x0003024c

000d4f80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_USB_USART_Available_Data+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	691b      	ldr	r3, [r3, #16]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003024c 	.word	0x0003024c

000d4f90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	695b      	ldr	r3, [r3, #20]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003024c 	.word	0x0003024c

000d4fa0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <HAL_USB_USART_Receive_Data+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	699b      	ldr	r3, [r3, #24]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003024c 	.word	0x0003024c

000d4fb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_USB_USART_Send_Data+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	69db      	ldr	r3, [r3, #28]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003024c 	.word	0x0003024c

000d4fc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <HAL_USB_USART_Flush_Data+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6a1b      	ldr	r3, [r3, #32]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003024c 	.word	0x0003024c

000d4fd0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <panic_+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030260 	.word	0x00030260

000d4fe0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <system_mode+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	681b      	ldr	r3, [r3, #0]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030220 	.word	0x00030220

000d4ff0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <set_system_mode+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	685b      	ldr	r3, [r3, #4]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030220 	.word	0x00030220

000d5000 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <system_delay_ms+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	695b      	ldr	r3, [r3, #20]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030220 	.word	0x00030220

000d5010 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <system_thread_get_state+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030220 	.word	0x00030220

000d5020 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b03      	ldr	r3, [pc, #12]	; (d5030 <system_ctrl_set_app_request_handler+0x10>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d502a:	9301      	str	r3, [sp, #4]
   d502c:	bd08      	pop	{r3, pc}
   d502e:	0000      	.short	0x0000
   d5030:	00030220 	.word	0x00030220

000d5034 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b03      	ldr	r3, [pc, #12]	; (d5044 <system_ctrl_set_result+0x10>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d503e:	9301      	str	r3, [sp, #4]
   d5040:	bd08      	pop	{r3, pc}
   d5042:	0000      	.short	0x0000
   d5044:	00030220 	.word	0x00030220

000d5048 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <network_connect+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	685b      	ldr	r3, [r3, #4]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	00030240 	.word	0x00030240

000d5058 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <network_connecting+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	689b      	ldr	r3, [r3, #8]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	00030240 	.word	0x00030240

000d5068 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <network_disconnect+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	68db      	ldr	r3, [r3, #12]
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	00030240 	.word	0x00030240

000d5078 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <network_ready+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	691b      	ldr	r3, [r3, #16]
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	00030240 	.word	0x00030240

000d5088 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <network_on+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	695b      	ldr	r3, [r3, #20]
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030240 	.word	0x00030240

000d5098 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <network_off+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	699b      	ldr	r3, [r3, #24]
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030240 	.word	0x00030240

000d50a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <network_listen+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	69db      	ldr	r3, [r3, #28]
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030240 	.word	0x00030240

000d50b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <network_listening+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6a1b      	ldr	r3, [r3, #32]
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030240 	.word	0x00030240

000d50c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <network_set_listen_timeout+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	00030240 	.word	0x00030240

000d50d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <network_get_listen_timeout+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030240 	.word	0x00030240

000d50e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <network_is_on+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030240 	.word	0x00030240

000d50f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <network_is_off+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	00030240 	.word	0x00030240

000d5108 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <spark_process+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	689b      	ldr	r3, [r3, #8]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	00030244 	.word	0x00030244

000d5118 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <spark_cloud_flag_connected+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	695b      	ldr	r3, [r3, #20]
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	00030244 	.word	0x00030244

000d5128 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <spark_sync_time+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030244 	.word	0x00030244

000d5138 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <spark_sync_time_pending+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030244 	.word	0x00030244

000d5148 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <spark_set_random_seed_from_cloud_handler+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030244 	.word	0x00030244

000d5158 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <malloc+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	681b      	ldr	r3, [r3, #0]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	0003021c 	.word	0x0003021c

000d5168 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <free+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	685b      	ldr	r3, [r3, #4]
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	0003021c 	.word	0x0003021c

000d5178 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <realloc+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	689b      	ldr	r3, [r3, #8]
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	0003021c 	.word	0x0003021c

000d5188 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <siprintf+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	691b      	ldr	r3, [r3, #16]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	0003021c 	.word	0x0003021c

000d5198 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <vsnprintf+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	0003021c 	.word	0x0003021c

000d51a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <newlib_impure_ptr_callback+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	0003021c 	.word	0x0003021c

000d51b8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <localtime_r+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	0003021c 	.word	0x0003021c

000d51c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51c8:	2200      	movs	r2, #0
   d51ca:	6840      	ldr	r0, [r0, #4]
   d51cc:	4611      	mov	r1, r2
   d51ce:	f7ff bf73 	b.w	d50b8 <network_listening>

000d51d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d51d2:	2200      	movs	r2, #0
   d51d4:	6840      	ldr	r0, [r0, #4]
   d51d6:	4611      	mov	r1, r2
   d51d8:	f7ff bf7e 	b.w	d50d8 <network_get_listen_timeout>

000d51dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	2200      	movs	r2, #0
   d51e0:	f7ff bf72 	b.w	d50c8 <network_set_listen_timeout>

000d51e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d51e4:	6840      	ldr	r0, [r0, #4]
   d51e6:	2200      	movs	r2, #0
   d51e8:	f081 0101 	eor.w	r1, r1, #1
   d51ec:	f7ff bf5c 	b.w	d50a8 <network_listen>

000d51f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d51f0:	2300      	movs	r3, #0
   d51f2:	6840      	ldr	r0, [r0, #4]
   d51f4:	461a      	mov	r2, r3
   d51f6:	4619      	mov	r1, r3
   d51f8:	f7ff bf4e 	b.w	d5098 <network_off>

000d51fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d51fc:	2300      	movs	r3, #0
   d51fe:	6840      	ldr	r0, [r0, #4]
   d5200:	461a      	mov	r2, r3
   d5202:	4619      	mov	r1, r3
   d5204:	f7ff bf40 	b.w	d5088 <network_on>

000d5208 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5208:	2200      	movs	r2, #0
   d520a:	6840      	ldr	r0, [r0, #4]
   d520c:	4611      	mov	r1, r2
   d520e:	f7ff bf33 	b.w	d5078 <network_ready>

000d5212 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5212:	2200      	movs	r2, #0
   d5214:	6840      	ldr	r0, [r0, #4]
   d5216:	4611      	mov	r1, r2
   d5218:	f7ff bf1e 	b.w	d5058 <network_connecting>

000d521c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d521c:	6840      	ldr	r0, [r0, #4]
   d521e:	2200      	movs	r2, #0
   d5220:	2102      	movs	r1, #2
   d5222:	f7ff bf21 	b.w	d5068 <network_disconnect>

000d5226 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5226:	2300      	movs	r3, #0
   d5228:	6840      	ldr	r0, [r0, #4]
   d522a:	461a      	mov	r2, r3
   d522c:	f7ff bf0c 	b.w	d5048 <network_connect>

000d5230 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5230:	4b02      	ldr	r3, [pc, #8]	; (d523c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5232:	2203      	movs	r2, #3
   d5234:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5236:	4a02      	ldr	r2, [pc, #8]	; (d5240 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5238:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d523a:	4770      	bx	lr
   d523c:	2003e644 	.word	0x2003e644
   d5240:	000d6f94 	.word	0x000d6f94

000d5244 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5244:	2100      	movs	r1, #0
   d5246:	f7ff be83 	b.w	d4f50 <hal_spi_acquire>

000d524a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d524a:	2100      	movs	r1, #0
   d524c:	f7ff be88 	b.w	d4f60 <hal_spi_release>

000d5250 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5250:	b510      	push	{r4, lr}
   d5252:	4604      	mov	r4, r0
   d5254:	4608      	mov	r0, r1
{
    _spi = spi;
   d5256:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5258:	f7ff fe62 	bl	d4f20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d525c:	2300      	movs	r3, #0
   d525e:	6063      	str	r3, [r4, #4]
}
   d5260:	4620      	mov	r0, r4
   d5262:	bd10      	pop	{r4, pc}

000d5264 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5264:	b510      	push	{r4, lr}
   d5266:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5268:	7800      	ldrb	r0, [r0, #0]
   d526a:	f7ff ffeb 	bl	d5244 <_ZN8SPIClass4lockEv.isra.0>
   d526e:	b948      	cbnz	r0, d5284 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5270:	7820      	ldrb	r0, [r4, #0]
   d5272:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5276:	f7ff fe2b 	bl	d4ed0 <hal_spi_begin>
        unlock();
   d527a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5280:	f7ff bfe3 	b.w	d524a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5284:	bd10      	pop	{r4, pc}

000d5286 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5286:	b513      	push	{r0, r1, r4, lr}
   d5288:	4604      	mov	r4, r0
    if (!lock())
   d528a:	7800      	ldrb	r0, [r0, #0]
{
   d528c:	9101      	str	r1, [sp, #4]
    if (!lock())
   d528e:	f7ff ffd9 	bl	d5244 <_ZN8SPIClass4lockEv.isra.0>
   d5292:	9901      	ldr	r1, [sp, #4]
   d5294:	b940      	cbnz	r0, d52a8 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5296:	7820      	ldrb	r0, [r4, #0]
   d5298:	f7ff fe22 	bl	d4ee0 <hal_spi_set_bit_order>
        unlock();
   d529c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d529e:	b002      	add	sp, #8
   d52a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d52a4:	f7ff bfd1 	b.w	d524a <_ZN8SPIClass6unlockEv.isra.0>
}
   d52a8:	b002      	add	sp, #8
   d52aa:	bd10      	pop	{r4, pc}

000d52ac <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d52ac:	b513      	push	{r0, r1, r4, lr}
   d52ae:	4604      	mov	r4, r0
    if (!lock())
   d52b0:	7800      	ldrb	r0, [r0, #0]
{
   d52b2:	9101      	str	r1, [sp, #4]
    if (!lock())
   d52b4:	f7ff ffc6 	bl	d5244 <_ZN8SPIClass4lockEv.isra.0>
   d52b8:	9901      	ldr	r1, [sp, #4]
   d52ba:	b940      	cbnz	r0, d52ce <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d52bc:	7820      	ldrb	r0, [r4, #0]
   d52be:	f7ff fe17 	bl	d4ef0 <hal_spi_set_data_mode>
        unlock();
   d52c2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d52c4:	b002      	add	sp, #8
   d52c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d52ca:	f7ff bfbe 	b.w	d524a <_ZN8SPIClass6unlockEv.isra.0>
}
   d52ce:	b002      	add	sp, #8
   d52d0:	bd10      	pop	{r4, pc}
	...

000d52d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d52d4:	0840      	lsrs	r0, r0, #1
{
   d52d6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d52d8:	6018      	str	r0, [r3, #0]
   d52da:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d52dc:	6818      	ldr	r0, [r3, #0]
   d52de:	4288      	cmp	r0, r1
   d52e0:	b2e5      	uxtb	r5, r4
   d52e2:	d906      	bls.n	d52f2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d52e4:	3401      	adds	r4, #1
   d52e6:	2c08      	cmp	r4, #8
   d52e8:	d002      	beq.n	d52f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d52ea:	0840      	lsrs	r0, r0, #1
   d52ec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d52ee:	e7f5      	b.n	d52dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d52f0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d52f4:	5d5b      	ldrb	r3, [r3, r5]
   d52f6:	7013      	strb	r3, [r2, #0]
}
   d52f8:	bd30      	pop	{r4, r5, pc}
   d52fa:	bf00      	nop
   d52fc:	000d6fc8 	.word	0x000d6fc8

000d5300 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5304:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5306:	2300      	movs	r3, #0
{
   d5308:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d530a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d530c:	9302      	str	r3, [sp, #8]
{
   d530e:	460e      	mov	r6, r1
   d5310:	4617      	mov	r7, r2
    if (!lock())
   d5312:	f7ff ff97 	bl	d5244 <_ZN8SPIClass4lockEv.isra.0>
   d5316:	4605      	mov	r5, r0
   d5318:	bb00      	cbnz	r0, d535c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d531a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d531e:	4601      	mov	r1, r0
   d5320:	2214      	movs	r2, #20
   d5322:	a803      	add	r0, sp, #12
   d5324:	f001 fb26 	bl	d6974 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5328:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d532a:	462a      	mov	r2, r5
   d532c:	a903      	add	r1, sp, #12
   d532e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5330:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5334:	f7ff fe04 	bl	d4f40 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5338:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d533a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d533e:	ab02      	add	r3, sp, #8
   d5340:	f10d 0207 	add.w	r2, sp, #7
   d5344:	fb07 f106 	mul.w	r1, r7, r6
   d5348:	f7ff ffc4 	bl	d52d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d534c:	7820      	ldrb	r0, [r4, #0]
   d534e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5352:	f7ff fdd5 	bl	d4f00 <hal_spi_set_clock_divider>
        unlock();
   d5356:	7820      	ldrb	r0, [r4, #0]
   d5358:	f7ff ff77 	bl	d524a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d535c:	9802      	ldr	r0, [sp, #8]
   d535e:	b008      	add	sp, #32
   d5360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5364 <_ZN8SPIClass15setClockDividerEh>:
{
   d5364:	b538      	push	{r3, r4, r5, lr}
   d5366:	4604      	mov	r4, r0
    if (!lock())
   d5368:	7800      	ldrb	r0, [r0, #0]
{
   d536a:	460d      	mov	r5, r1
    if (!lock())
   d536c:	f7ff ff6a 	bl	d5244 <_ZN8SPIClass4lockEv.isra.0>
   d5370:	4603      	mov	r3, r0
   d5372:	b9d0      	cbnz	r0, d53aa <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d5374:	6861      	ldr	r1, [r4, #4]
   d5376:	b199      	cbz	r1, d53a0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d5378:	4a0c      	ldr	r2, [pc, #48]	; (d53ac <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d537a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d537e:	4285      	cmp	r5, r0
   d5380:	d002      	beq.n	d5388 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d5382:	3301      	adds	r3, #1
   d5384:	2b08      	cmp	r3, #8
   d5386:	d1f8      	bne.n	d537a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d5388:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d538a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d538c:	2201      	movs	r2, #1
   d538e:	40d9      	lsrs	r1, r3
   d5390:	4620      	mov	r0, r4
   d5392:	f7ff ffb5 	bl	d5300 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d5396:	7820      	ldrb	r0, [r4, #0]
}
   d5398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d539c:	f7ff bf55 	b.w	d524a <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d53a0:	7820      	ldrb	r0, [r4, #0]
   d53a2:	4629      	mov	r1, r5
   d53a4:	f7ff fdac 	bl	d4f00 <hal_spi_set_clock_divider>
   d53a8:	e7f5      	b.n	d5396 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d53aa:	bd38      	pop	{r3, r4, r5, pc}
   d53ac:	000d6fc8 	.word	0x000d6fc8

000d53b0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d53b0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d53b2:	7800      	ldrb	r0, [r0, #0]
   d53b4:	f7ff fdac 	bl	d4f10 <hal_spi_transfer>
}
   d53b8:	b2c0      	uxtb	r0, r0
   d53ba:	bd08      	pop	{r3, pc}

000d53bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d53bc:	b510      	push	{r4, lr}
   d53be:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d53c0:	6800      	ldr	r0, [r0, #0]
   d53c2:	b118      	cbz	r0, d53cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d53c4:	f7ff fed0 	bl	d5168 <free>
            wakeupSource_ = nullptr;
   d53c8:	2300      	movs	r3, #0
   d53ca:	6023      	str	r3, [r4, #0]
        }
    }
   d53cc:	bd10      	pop	{r4, pc}

000d53ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d53ce:	b510      	push	{r4, lr}
   d53d0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d53d2:	f7ff fff3 	bl	d53bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d53d6:	4620      	mov	r0, r4
   d53d8:	bd10      	pop	{r4, pc}
	...

000d53dc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d53dc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d53de:	4b09      	ldr	r3, [pc, #36]	; (d5404 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d53e0:	4c09      	ldr	r4, [pc, #36]	; (d5408 <_GLOBAL__sub_I_System+0x2c>)
   d53e2:	2202      	movs	r2, #2
   d53e4:	2000      	movs	r0, #0
   d53e6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d53e8:	4b08      	ldr	r3, [pc, #32]	; (d540c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d53ea:	6020      	str	r0, [r4, #0]
   d53ec:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d53ee:	71a0      	strb	r0, [r4, #6]
   d53f0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d53f2:	f7ff fdfd 	bl	d4ff0 <set_system_mode>
SystemClass System;
   d53f6:	4620      	mov	r0, r4
   d53f8:	4a05      	ldr	r2, [pc, #20]	; (d5410 <_GLOBAL__sub_I_System+0x34>)
   d53fa:	4906      	ldr	r1, [pc, #24]	; (d5414 <_GLOBAL__sub_I_System+0x38>)
   d53fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5400:	f000 be4a 	b.w	d6098 <__aeabi_atexit>
   d5404:	2003e658 	.word	0x2003e658
   d5408:	2003e64c 	.word	0x2003e64c
   d540c:	ffff0000 	.word	0xffff0000
   d5410:	2003e608 	.word	0x2003e608
   d5414:	000d53cf 	.word	0x000d53cf

000d5418 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5418:	b510      	push	{r4, lr}
   d541a:	4604      	mov	r4, r0
{
	free(buffer);
   d541c:	6800      	ldr	r0, [r0, #0]
   d541e:	f7ff fea3 	bl	d5168 <free>
}
   d5422:	4620      	mov	r0, r4
   d5424:	bd10      	pop	{r4, pc}

000d5426 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5426:	b510      	push	{r4, lr}
   d5428:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d542a:	6800      	ldr	r0, [r0, #0]
   d542c:	b108      	cbz	r0, d5432 <_ZN6String10invalidateEv+0xc>
   d542e:	f7ff fe9b 	bl	d5168 <free>
	buffer = NULL;
   d5432:	2300      	movs	r3, #0
	capacity = len = 0;
   d5434:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5438:	6023      	str	r3, [r4, #0]
}
   d543a:	bd10      	pop	{r4, pc}

000d543c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d543c:	b538      	push	{r3, r4, r5, lr}
   d543e:	4604      	mov	r4, r0
   d5440:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5442:	6800      	ldr	r0, [r0, #0]
   d5444:	3101      	adds	r1, #1
   d5446:	f7ff fe97 	bl	d5178 <realloc>
	if (newbuffer) {
   d544a:	b110      	cbz	r0, d5452 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d544c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5450:	2001      	movs	r0, #1
	}
	return 0;
}
   d5452:	bd38      	pop	{r3, r4, r5, pc}

000d5454 <_ZN6String7reserveEj>:
{
   d5454:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5456:	6803      	ldr	r3, [r0, #0]
{
   d5458:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d545a:	b123      	cbz	r3, d5466 <_ZN6String7reserveEj+0x12>
   d545c:	6843      	ldr	r3, [r0, #4]
   d545e:	428b      	cmp	r3, r1
   d5460:	d301      	bcc.n	d5466 <_ZN6String7reserveEj+0x12>
   d5462:	2001      	movs	r0, #1
}
   d5464:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5466:	4620      	mov	r0, r4
   d5468:	f7ff ffe8 	bl	d543c <_ZN6String12changeBufferEj>
   d546c:	2800      	cmp	r0, #0
   d546e:	d0f9      	beq.n	d5464 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5470:	68a3      	ldr	r3, [r4, #8]
   d5472:	2b00      	cmp	r3, #0
   d5474:	d1f5      	bne.n	d5462 <_ZN6String7reserveEj+0xe>
   d5476:	6822      	ldr	r2, [r4, #0]
   d5478:	7013      	strb	r3, [r2, #0]
   d547a:	e7f2      	b.n	d5462 <_ZN6String7reserveEj+0xe>

000d547c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d547c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d547e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5480:	4611      	mov	r1, r2
   d5482:	9201      	str	r2, [sp, #4]
{
   d5484:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5486:	f7ff ffe5 	bl	d5454 <_ZN6String7reserveEj>
   d548a:	9a01      	ldr	r2, [sp, #4]
   d548c:	b928      	cbnz	r0, d549a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d548e:	4620      	mov	r0, r4
   d5490:	f7ff ffc9 	bl	d5426 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5494:	4620      	mov	r0, r4
   d5496:	b003      	add	sp, #12
   d5498:	bd30      	pop	{r4, r5, pc}
	len = length;
   d549a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d549c:	4629      	mov	r1, r5
   d549e:	6820      	ldr	r0, [r4, #0]
   d54a0:	f001 fa5a 	bl	d6958 <memcpy>
	buffer[len] = 0;
   d54a4:	6822      	ldr	r2, [r4, #0]
   d54a6:	68a3      	ldr	r3, [r4, #8]
   d54a8:	2100      	movs	r1, #0
   d54aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   d54ac:	e7f2      	b.n	d5494 <_ZN6String4copyEPKcj+0x18>

000d54ae <_ZN6StringC1EPKc>:
	buffer = NULL;
   d54ae:	2300      	movs	r3, #0
String::String(const char *cstr)
   d54b0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d54b2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d54b6:	4604      	mov	r4, r0
	len = 0;
   d54b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d54bc:	b141      	cbz	r1, d54d0 <_ZN6StringC1EPKc+0x22>
   d54be:	4608      	mov	r0, r1
   d54c0:	9101      	str	r1, [sp, #4]
   d54c2:	f001 fa8b 	bl	d69dc <strlen>
   d54c6:	9901      	ldr	r1, [sp, #4]
   d54c8:	4602      	mov	r2, r0
   d54ca:	4620      	mov	r0, r4
   d54cc:	f7ff ffd6 	bl	d547c <_ZN6String4copyEPKcj>
}
   d54d0:	4620      	mov	r0, r4
   d54d2:	b002      	add	sp, #8
   d54d4:	bd10      	pop	{r4, pc}

000d54d6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d54d6:	b538      	push	{r3, r4, r5, lr}
   d54d8:	4605      	mov	r5, r0
	if (buffer) {
   d54da:	6800      	ldr	r0, [r0, #0]
{
   d54dc:	460c      	mov	r4, r1
	if (buffer) {
   d54de:	b168      	cbz	r0, d54fc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d54e0:	686a      	ldr	r2, [r5, #4]
   d54e2:	688b      	ldr	r3, [r1, #8]
   d54e4:	429a      	cmp	r2, r3
   d54e6:	d307      	bcc.n	d54f8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d54e8:	6809      	ldr	r1, [r1, #0]
   d54ea:	f001 fa6f 	bl	d69cc <strcpy>
			len = rhs.len;
   d54ee:	68a3      	ldr	r3, [r4, #8]
   d54f0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d54f2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d54f4:	60a3      	str	r3, [r4, #8]
}
   d54f6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d54f8:	f7ff fe36 	bl	d5168 <free>
	buffer = rhs.buffer;
   d54fc:	6823      	ldr	r3, [r4, #0]
   d54fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5500:	6863      	ldr	r3, [r4, #4]
   d5502:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5504:	68a3      	ldr	r3, [r4, #8]
   d5506:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5508:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d550a:	e9c4 3300 	strd	r3, r3, [r4]
   d550e:	e7f1      	b.n	d54f4 <_ZN6String4moveERS_+0x1e>

000d5510 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5510:	4288      	cmp	r0, r1
{
   d5512:	b510      	push	{r4, lr}
   d5514:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5516:	d001      	beq.n	d551c <_ZN6StringaSEOS_+0xc>
   d5518:	f7ff ffdd 	bl	d54d6 <_ZN6String4moveERS_>
	return *this;
}
   d551c:	4620      	mov	r0, r4
   d551e:	bd10      	pop	{r4, pc}

000d5520 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5522:	429a      	cmp	r2, r3
{
   d5524:	460f      	mov	r7, r1
   d5526:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5528:	490c      	ldr	r1, [pc, #48]	; (d555c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d552a:	bf88      	it	hi
   d552c:	4613      	movhi	r3, r2
{
   d552e:	4614      	mov	r4, r2
   d5530:	4606      	mov	r6, r0
	if (left > right) {
   d5532:	bf84      	itt	hi
   d5534:	462c      	movhi	r4, r5
   d5536:	461d      	movhi	r5, r3
	String out;
   d5538:	f7ff ffb9 	bl	d54ae <_ZN6StringC1EPKc>
	if (left > len) return out;
   d553c:	68ba      	ldr	r2, [r7, #8]
   d553e:	42a2      	cmp	r2, r4
   d5540:	d30a      	bcc.n	d5558 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5542:	6839      	ldr	r1, [r7, #0]
   d5544:	42aa      	cmp	r2, r5
   d5546:	bf94      	ite	ls
   d5548:	ebc4 0202 	rsbls	r2, r4, r2
   d554c:	ebc4 0205 	rsbhi	r2, r4, r5
   d5550:	4421      	add	r1, r4
   d5552:	4630      	mov	r0, r6
   d5554:	f7ff ff92 	bl	d547c <_ZN6String4copyEPKcj>
	return out;
}
   d5558:	4630      	mov	r0, r6
   d555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d555c:	000d7124 	.word	0x000d7124

000d5560 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5560:	b510      	push	{r4, lr}
   d5562:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5564:	6800      	ldr	r0, [r0, #0]
   d5566:	b108      	cbz	r0, d556c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5568:	f7ff fc12 	bl	d4d90 <os_mutex_recursive_destroy>
    }
   d556c:	4620      	mov	r0, r4
   d556e:	bd10      	pop	{r4, pc}

000d5570 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5570:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5572:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5574:	4604      	mov	r4, r0
      if (_M_manager)
   d5576:	b113      	cbz	r3, d557e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5578:	2203      	movs	r2, #3
   d557a:	4601      	mov	r1, r0
   d557c:	4798      	blx	r3
    }
   d557e:	4620      	mov	r0, r4
   d5580:	bd10      	pop	{r4, pc}
	...

000d5584 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5584:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5586:	4c06      	ldr	r4, [pc, #24]	; (d55a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5588:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d558a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d558c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d558e:	f7ff fbf7 	bl	d4d80 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5592:	4620      	mov	r0, r4
   d5594:	4a03      	ldr	r2, [pc, #12]	; (d55a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5596:	4904      	ldr	r1, [pc, #16]	; (d55a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d559c:	f000 bd7c 	b.w	d6098 <__aeabi_atexit>
   d55a0:	2003e65c 	.word	0x2003e65c
   d55a4:	2003e608 	.word	0x2003e608
   d55a8:	000d5561 	.word	0x000d5561

000d55ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55ae:	4606      	mov	r6, r0
   d55b0:	460d      	mov	r5, r1
  size_t n = 0;
   d55b2:	188f      	adds	r7, r1, r2
   d55b4:	2400      	movs	r4, #0
  while (size--) {
   d55b6:	42bd      	cmp	r5, r7
   d55b8:	d00c      	beq.n	d55d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55ba:	6833      	ldr	r3, [r6, #0]
   d55bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55c0:	689b      	ldr	r3, [r3, #8]
   d55c2:	4630      	mov	r0, r6
   d55c4:	4798      	blx	r3
     if (chunk>=0)
   d55c6:	1e03      	subs	r3, r0, #0
   d55c8:	db01      	blt.n	d55ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55ca:	441c      	add	r4, r3
  while (size--) {
   d55cc:	e7f3      	b.n	d55b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d55ce:	2c00      	cmp	r4, #0
   d55d0:	bf08      	it	eq
   d55d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d55d4:	4620      	mov	r0, r4
   d55d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d55d8:	b513      	push	{r0, r1, r4, lr}
   d55da:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d55dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d55de:	b159      	cbz	r1, d55f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d55e0:	9101      	str	r1, [sp, #4]
   d55e2:	f001 f9fb 	bl	d69dc <strlen>
   d55e6:	6823      	ldr	r3, [r4, #0]
   d55e8:	9901      	ldr	r1, [sp, #4]
   d55ea:	68db      	ldr	r3, [r3, #12]
   d55ec:	4602      	mov	r2, r0
   d55ee:	4620      	mov	r0, r4
    }
   d55f0:	b002      	add	sp, #8
   d55f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d55f6:	4718      	bx	r3
    }
   d55f8:	b002      	add	sp, #8
   d55fa:	bd10      	pop	{r4, pc}

000d55fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d55fc:	6803      	ldr	r3, [r0, #0]
   d55fe:	689b      	ldr	r3, [r3, #8]
   d5600:	4718      	bx	r3

000d5602 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5602:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5604:	210d      	movs	r1, #13
{
   d5606:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5608:	f7ff fff8 	bl	d55fc <_ZN5Print5printEc>
  n += print('\n');
   d560c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d560e:	4604      	mov	r4, r0
  n += print('\n');
   d5610:	4628      	mov	r0, r5
   d5612:	f7ff fff3 	bl	d55fc <_ZN5Print5printEc>
  return n;
}
   d5616:	4420      	add	r0, r4
   d5618:	bd38      	pop	{r3, r4, r5, pc}

000d561a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d561a:	b530      	push	{r4, r5, lr}
   d561c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d561e:	2300      	movs	r3, #0
   d5620:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5624:	2a01      	cmp	r2, #1
   d5626:	bf98      	it	ls
   d5628:	220a      	movls	r2, #10
   d562a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d562c:	460d      	mov	r5, r1
   d562e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5632:	fb01 5312 	mls	r3, r1, r2, r5
   d5636:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d563a:	2b09      	cmp	r3, #9
   d563c:	bf94      	ite	ls
   d563e:	3330      	addls	r3, #48	; 0x30
   d5640:	3337      	addhi	r3, #55	; 0x37
   d5642:	b2db      	uxtb	r3, r3
  } while(n);
   d5644:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5646:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d564a:	d9ef      	bls.n	d562c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d564c:	4621      	mov	r1, r4
   d564e:	f7ff ffc3 	bl	d55d8 <_ZN5Print5writeEPKc>
}
   d5652:	b00b      	add	sp, #44	; 0x2c
   d5654:	bd30      	pop	{r4, r5, pc}

000d5656 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d565a:	b086      	sub	sp, #24
   d565c:	af00      	add	r7, sp, #0
   d565e:	4605      	mov	r5, r0
   d5660:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5662:	1d38      	adds	r0, r7, #4
   d5664:	2114      	movs	r1, #20
{
   d5666:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5668:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d566a:	f7ff fd95 	bl	d5198 <vsnprintf>

    if (n<bufsize)
   d566e:	2813      	cmp	r0, #19
   d5670:	d80e      	bhi.n	d5690 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5672:	1d39      	adds	r1, r7, #4
   d5674:	4628      	mov	r0, r5
   d5676:	f7ff ffaf 	bl	d55d8 <_ZN5Print5writeEPKc>
   d567a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d567c:	b11e      	cbz	r6, d5686 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d567e:	4628      	mov	r0, r5
   d5680:	f7ff ffbf 	bl	d5602 <_ZN5Print7printlnEv>
   d5684:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5686:	4620      	mov	r0, r4
   d5688:	3718      	adds	r7, #24
   d568a:	46bd      	mov	sp, r7
   d568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5690:	f100 0308 	add.w	r3, r0, #8
   d5694:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5698:	46e8      	mov	r8, sp
        char bigger[n+1];
   d569a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d569e:	4622      	mov	r2, r4
   d56a0:	1c41      	adds	r1, r0, #1
   d56a2:	683b      	ldr	r3, [r7, #0]
   d56a4:	4668      	mov	r0, sp
   d56a6:	f7ff fd77 	bl	d5198 <vsnprintf>
  return write(str);
   d56aa:	4669      	mov	r1, sp
   d56ac:	4628      	mov	r0, r5
   d56ae:	f7ff ff93 	bl	d55d8 <_ZN5Print5writeEPKc>
   d56b2:	4604      	mov	r4, r0
   d56b4:	46c5      	mov	sp, r8
   d56b6:	e7e1      	b.n	d567c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d56b8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56b8:	2300      	movs	r3, #0
   d56ba:	6840      	ldr	r0, [r0, #4]
   d56bc:	461a      	mov	r2, r3
   d56be:	4619      	mov	r1, r3
   d56c0:	f7ff bce2 	b.w	d5088 <network_on>

000d56c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56c4:	4b01      	ldr	r3, [pc, #4]	; (d56cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56c6:	4a02      	ldr	r2, [pc, #8]	; (d56d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d56ca:	4770      	bx	lr
   d56cc:	2003e660 	.word	0x2003e660
   d56d0:	000d6fd0 	.word	0x000d6fd0

000d56d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d56d4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56d6:	2000      	movs	r0, #0
   d56d8:	f7ff fd2e 	bl	d5138 <spark_sync_time_pending>
   d56dc:	b128      	cbz	r0, d56ea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56de:	f7ff fd1b 	bl	d5118 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56e2:	f080 0001 	eor.w	r0, r0, #1
   d56e6:	b2c0      	uxtb	r0, r0
    }
   d56e8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d56ea:	2001      	movs	r0, #1
   d56ec:	e7fc      	b.n	d56e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d56f0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d56f0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d56f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d56f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d56fc:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d56fe:	d411      	bmi.n	d5724 <_ZN9TimeClass4zoneEf+0x34>
   d5700:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5704:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d570c:	dc0a      	bgt.n	d5724 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d570e:	eddf 7a06 	vldr	s15, [pc, #24]	; d5728 <_ZN9TimeClass4zoneEf+0x38>
   d5712:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5716:	ee17 0a90 	vmov	r0, s15
   d571a:	f001 f8b5 	bl	d6888 <__aeabi_f2lz>
   d571e:	4b03      	ldr	r3, [pc, #12]	; (d572c <_ZN9TimeClass4zoneEf+0x3c>)
   d5720:	e9c3 0100 	strd	r0, r1, [r3]
}
   d5724:	bd08      	pop	{r3, pc}
   d5726:	bf00      	nop
   d5728:	45610000 	.word	0x45610000
   d572c:	2003e670 	.word	0x2003e670

000d5730 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5730:	b530      	push	{r4, r5, lr}
   d5732:	4604      	mov	r4, r0
    t += time_zone_cache;
   d5734:	4818      	ldr	r0, [pc, #96]	; (d5798 <_ZN9TimeClass7timeStrEx+0x68>)
   d5736:	e9d0 1000 	ldrd	r1, r0, [r0]
   d573a:	1852      	adds	r2, r2, r1
   d573c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d5740:	4816      	ldr	r0, [pc, #88]	; (d579c <_ZN9TimeClass7timeStrEx+0x6c>)
   d5742:	e9d0 1000 	ldrd	r1, r0, [r0]
   d5746:	1852      	adds	r2, r2, r1
{
   d5748:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d574a:	eb40 0303 	adc.w	r3, r0, r3
   d574e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d5752:	2224      	movs	r2, #36	; 0x24
   d5754:	eb0d 0002 	add.w	r0, sp, r2
   d5758:	2100      	movs	r1, #0
   d575a:	f001 f90b 	bl	d6974 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d575e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d5760:	a909      	add	r1, sp, #36	; 0x24
   d5762:	4668      	mov	r0, sp
   d5764:	f7ff fd28 	bl	d51b8 <localtime_r>
    char ascstr[26] = {};
   d5768:	2216      	movs	r2, #22
   d576a:	4629      	mov	r1, r5
   d576c:	a803      	add	r0, sp, #12
   d576e:	9502      	str	r5, [sp, #8]
   d5770:	f001 f900 	bl	d6974 <memset>
    asctime_r(&calendar_time, ascstr);
   d5774:	a902      	add	r1, sp, #8
   d5776:	a809      	add	r0, sp, #36	; 0x24
   d5778:	f001 f8ba 	bl	d68f0 <asctime_r>
    int len = strlen(ascstr);
   d577c:	a802      	add	r0, sp, #8
   d577e:	f001 f92d 	bl	d69dc <strlen>
    ascstr[len-1] = 0; // remove final newline
   d5782:	ab12      	add	r3, sp, #72	; 0x48
   d5784:	4418      	add	r0, r3
    return String(ascstr);
   d5786:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d5788:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d578c:	4620      	mov	r0, r4
   d578e:	f7ff fe8e 	bl	d54ae <_ZN6StringC1EPKc>
}
   d5792:	4620      	mov	r0, r4
   d5794:	b013      	add	sp, #76	; 0x4c
   d5796:	bd30      	pop	{r4, r5, pc}
   d5798:	2003e670 	.word	0x2003e670
   d579c:	2003e668 	.word	0x2003e668

000d57a0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d57a0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d57a2:	2000      	movs	r0, #0
   d57a4:	f7ff fadc 	bl	d4d60 <hal_rtc_time_is_valid>
    if (rtcstate)
   d57a8:	4604      	mov	r4, r0
   d57aa:	b9a0      	cbnz	r0, d57d6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d57ac:	f7ff fc18 	bl	d4fe0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d57b0:	2801      	cmp	r0, #1
   d57b2:	d110      	bne.n	d57d6 <_ZN9TimeClass7isValidEv+0x36>
   d57b4:	4620      	mov	r0, r4
   d57b6:	f7ff fc2b 	bl	d5010 <system_thread_get_state>
   d57ba:	b960      	cbnz	r0, d57d6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d57bc:	f7ff ff8a 	bl	d56d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d57c0:	b910      	cbnz	r0, d57c8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d57c2:	f7ff fca1 	bl	d5108 <spark_process>
        while (_while() && !_condition()) {
   d57c6:	e7f9      	b.n	d57bc <_ZN9TimeClass7isValidEv+0x1c>
   d57c8:	f7ff ff84 	bl	d56d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d57cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d57d0:	2000      	movs	r0, #0
   d57d2:	f7ff bac5 	b.w	d4d60 <hal_rtc_time_is_valid>
}
   d57d6:	4620      	mov	r0, r4
   d57d8:	bd10      	pop	{r4, pc}

000d57da <_ZN9TimeClass3nowEv>:
{
   d57da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d57dc:	f7ff ffe0 	bl	d57a0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d57e0:	2210      	movs	r2, #16
   d57e2:	2100      	movs	r1, #0
   d57e4:	4668      	mov	r0, sp
   d57e6:	f001 f8c5 	bl	d6974 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d57ea:	2100      	movs	r1, #0
   d57ec:	4668      	mov	r0, sp
   d57ee:	f7ff fabf 	bl	d4d70 <hal_rtc_get_time>
}
   d57f2:	9800      	ldr	r0, [sp, #0]
   d57f4:	b005      	add	sp, #20
   d57f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d57fc:	4b02      	ldr	r3, [pc, #8]	; (d5808 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d57fe:	681a      	ldr	r2, [r3, #0]
   d5800:	4b02      	ldr	r3, [pc, #8]	; (d580c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5802:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5804:	4770      	bx	lr
   d5806:	bf00      	nop
   d5808:	2003e59c 	.word	0x2003e59c
   d580c:	2003e664 	.word	0x2003e664

000d5810 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5810:	2100      	movs	r1, #0
   d5812:	f7ff bbf5 	b.w	d5000 <system_delay_ms>

000d5816 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5816:	b510      	push	{r4, lr}
   d5818:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d581a:	f7ff fea9 	bl	d5570 <_ZNSt14_Function_baseD1Ev>
   d581e:	4620      	mov	r0, r4
   d5820:	bd10      	pop	{r4, pc}
	...

000d5824 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5824:	4803      	ldr	r0, [pc, #12]	; (d5834 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5826:	4a04      	ldr	r2, [pc, #16]	; (d5838 <_GLOBAL__sub_I_RGB+0x14>)
   d5828:	4904      	ldr	r1, [pc, #16]	; (d583c <_GLOBAL__sub_I_RGB+0x18>)
   d582a:	2300      	movs	r3, #0
   d582c:	6083      	str	r3, [r0, #8]
   d582e:	f000 bc33 	b.w	d6098 <__aeabi_atexit>
   d5832:	bf00      	nop
   d5834:	2003e678 	.word	0x2003e678
   d5838:	2003e608 	.word	0x2003e608
   d583c:	000d5817 	.word	0x000d5817

000d5840 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5840:	4b01      	ldr	r3, [pc, #4]	; (d5848 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5842:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5844:	4770      	bx	lr
   d5846:	bf00      	nop
   d5848:	2003e5a0 	.word	0x2003e5a0

000d584c <serialEventRun>:
{
   d584c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d584e:	4b0b      	ldr	r3, [pc, #44]	; (d587c <serialEventRun+0x30>)
   d5850:	b143      	cbz	r3, d5864 <serialEventRun+0x18>
   d5852:	f000 f957 	bl	d5b04 <_Z16_fetch_usbserialv>
   d5856:	6803      	ldr	r3, [r0, #0]
   d5858:	691b      	ldr	r3, [r3, #16]
   d585a:	4798      	blx	r3
   d585c:	2800      	cmp	r0, #0
   d585e:	dd01      	ble.n	d5864 <serialEventRun+0x18>
        serialEvent();
   d5860:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5864:	4b06      	ldr	r3, [pc, #24]	; (d5880 <serialEventRun+0x34>)
   d5866:	b143      	cbz	r3, d587a <serialEventRun+0x2e>
   d5868:	f000 f9ca 	bl	d5c00 <_Z22__fetch_global_Serial1v>
   d586c:	6803      	ldr	r3, [r0, #0]
   d586e:	691b      	ldr	r3, [r3, #16]
   d5870:	4798      	blx	r3
   d5872:	2800      	cmp	r0, #0
   d5874:	dd01      	ble.n	d587a <serialEventRun+0x2e>
        serialEvent1();
   d5876:	f3af 8000 	nop.w
}
   d587a:	bd08      	pop	{r3, pc}
	...

000d5884 <_post_loop>:
{
   d5884:	b508      	push	{r3, lr}
	serialEventRun();
   d5886:	f7ff ffe1 	bl	d584c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d588a:	f7ff fa61 	bl	d4d50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d588e:	4b01      	ldr	r3, [pc, #4]	; (d5894 <_post_loop+0x10>)
   d5890:	6018      	str	r0, [r3, #0]
}
   d5892:	bd08      	pop	{r3, pc}
   d5894:	2003e7d8 	.word	0x2003e7d8

000d5898 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5898:	4802      	ldr	r0, [pc, #8]	; (d58a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d589a:	4a03      	ldr	r2, [pc, #12]	; (d58a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d589c:	4903      	ldr	r1, [pc, #12]	; (d58ac <_Z33system_initialize_user_backup_ramv+0x14>)
   d589e:	1a12      	subs	r2, r2, r0
   d58a0:	f001 b85a 	b.w	d6958 <memcpy>
   d58a4:	2003f400 	.word	0x2003f400
   d58a8:	2003f404 	.word	0x2003f404
   d58ac:	000d7190 	.word	0x000d7190

000d58b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d58b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58b2:	2300      	movs	r3, #0
   d58b4:	9300      	str	r3, [sp, #0]
   d58b6:	461a      	mov	r2, r3
   d58b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58bc:	f7ff fbba 	bl	d5034 <system_ctrl_set_result>
}
   d58c0:	b003      	add	sp, #12
   d58c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d58c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58ca:	8843      	ldrh	r3, [r0, #2]
   d58cc:	2b0a      	cmp	r3, #10
   d58ce:	d008      	beq.n	d58e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58d0:	2b50      	cmp	r3, #80	; 0x50
   d58d2:	d10b      	bne.n	d58ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d58d4:	4b09      	ldr	r3, [pc, #36]	; (d58fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58d6:	681b      	ldr	r3, [r3, #0]
   d58d8:	b14b      	cbz	r3, d58ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d58da:	b003      	add	sp, #12
   d58dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d58e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d58e2:	f7ff ffe5 	bl	d58b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d58e6:	b003      	add	sp, #12
   d58e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58ec:	2300      	movs	r3, #0
   d58ee:	9300      	str	r3, [sp, #0]
   d58f0:	461a      	mov	r2, r3
   d58f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58f6:	f7ff fb9d 	bl	d5034 <system_ctrl_set_result>
}
   d58fa:	e7f4      	b.n	d58e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d58fc:	2003e68c 	.word	0x2003e68c

000d5900 <module_user_init_hook>:
{
   d5900:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5902:	4c12      	ldr	r4, [pc, #72]	; (d594c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5904:	4812      	ldr	r0, [pc, #72]	; (d5950 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5906:	4d13      	ldr	r5, [pc, #76]	; (d5954 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5908:	2100      	movs	r1, #0
   d590a:	f7ff fc4d 	bl	d51a8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d590e:	6823      	ldr	r3, [r4, #0]
   d5910:	42ab      	cmp	r3, r5
   d5912:	4b11      	ldr	r3, [pc, #68]	; (d5958 <module_user_init_hook+0x58>)
   d5914:	bf0c      	ite	eq
   d5916:	2201      	moveq	r2, #1
   d5918:	2200      	movne	r2, #0
   d591a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d591c:	d002      	beq.n	d5924 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d591e:	f7ff ffbb 	bl	d5898 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5922:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5924:	f7ff fa04 	bl	d4d30 <HAL_RNG_GetRandomNumber>
   d5928:	4604      	mov	r4, r0
    srand(seed);
   d592a:	f001 f82b 	bl	d6984 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d592e:	4b0b      	ldr	r3, [pc, #44]	; (d595c <module_user_init_hook+0x5c>)
   d5930:	b113      	cbz	r3, d5938 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5932:	4620      	mov	r0, r4
   d5934:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5938:	2100      	movs	r1, #0
   d593a:	4808      	ldr	r0, [pc, #32]	; (d595c <module_user_init_hook+0x5c>)
   d593c:	f7ff fc04 	bl	d5148 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5944:	4806      	ldr	r0, [pc, #24]	; (d5960 <module_user_init_hook+0x60>)
   d5946:	2100      	movs	r1, #0
   d5948:	f7ff bb6a 	b.w	d5020 <system_ctrl_set_app_request_handler>
   d594c:	2003f400 	.word	0x2003f400
   d5950:	000d5841 	.word	0x000d5841
   d5954:	9a271c1e 	.word	0x9a271c1e
   d5958:	2003e688 	.word	0x2003e688
   d595c:	00000000 	.word	0x00000000
   d5960:	000d58c9 	.word	0x000d58c9

000d5964 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5964:	4770      	bx	lr

000d5966 <_ZN9IPAddressD0Ev>:
   d5966:	b510      	push	{r4, lr}
   d5968:	2118      	movs	r1, #24
   d596a:	4604      	mov	r4, r0
   d596c:	f000 fb99 	bl	d60a2 <_ZdlPvj>
   d5970:	4620      	mov	r0, r4
   d5972:	bd10      	pop	{r4, pc}

000d5974 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5974:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5976:	7d03      	ldrb	r3, [r0, #20]
   d5978:	2b06      	cmp	r3, #6
{
   d597a:	b08d      	sub	sp, #52	; 0x34
   d597c:	460e      	mov	r6, r1
   d597e:	f100 0704 	add.w	r7, r0, #4
   d5982:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5986:	d012      	beq.n	d59ae <_ZNK9IPAddress7printToER5Print+0x3a>
   d5988:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d598c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5990:	220a      	movs	r2, #10
   d5992:	4630      	mov	r0, r6
   d5994:	f7ff fe41 	bl	d561a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5998:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d599a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d599c:	d019      	beq.n	d59d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d599e:	2c00      	cmp	r4, #0
   d59a0:	d0f4      	beq.n	d598c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d59a2:	212e      	movs	r1, #46	; 0x2e
   d59a4:	4630      	mov	r0, r6
   d59a6:	f7ff fe29 	bl	d55fc <_ZN5Print5printEc>
   d59aa:	4404      	add	r4, r0
   d59ac:	e7ee      	b.n	d598c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59ae:	232f      	movs	r3, #47	; 0x2f
   d59b0:	466a      	mov	r2, sp
   d59b2:	4639      	mov	r1, r7
   d59b4:	200a      	movs	r0, #10
		buf[0] = 0;
   d59b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59ba:	f7ff f9f1 	bl	d4da0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d59be:	4668      	mov	r0, sp
   d59c0:	f001 f80c 	bl	d69dc <strlen>
   d59c4:	6833      	ldr	r3, [r6, #0]
   d59c6:	4602      	mov	r2, r0
   d59c8:	68db      	ldr	r3, [r3, #12]
   d59ca:	4669      	mov	r1, sp
   d59cc:	4630      	mov	r0, r6
   d59ce:	4798      	blx	r3
   d59d0:	4604      	mov	r4, r0
    }
    return n;
}
   d59d2:	4620      	mov	r0, r4
   d59d4:	b00d      	add	sp, #52	; 0x34
   d59d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d59d8:	b510      	push	{r4, lr}
   d59da:	4b05      	ldr	r3, [pc, #20]	; (d59f0 <_ZN9IPAddressC1Ev+0x18>)
   d59dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d59de:	2211      	movs	r2, #17
   d59e0:	f840 3b04 	str.w	r3, [r0], #4
   d59e4:	2100      	movs	r1, #0
   d59e6:	f000 ffc5 	bl	d6974 <memset>
}
   d59ea:	4620      	mov	r0, r4
   d59ec:	bd10      	pop	{r4, pc}
   d59ee:	bf00      	nop
   d59f0:	000d6ff8 	.word	0x000d6ff8

000d59f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d59f4:	4603      	mov	r3, r0
   d59f6:	4a07      	ldr	r2, [pc, #28]	; (d5a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d59f8:	b510      	push	{r4, lr}
   d59fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d59fe:	f101 0210 	add.w	r2, r1, #16
   d5a02:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a06:	f843 4b04 	str.w	r4, [r3], #4
   d5a0a:	4291      	cmp	r1, r2
   d5a0c:	d1f9      	bne.n	d5a02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a0e:	780a      	ldrb	r2, [r1, #0]
   d5a10:	701a      	strb	r2, [r3, #0]
}
   d5a12:	bd10      	pop	{r4, pc}
   d5a14:	000d6ff8 	.word	0x000d6ff8

000d5a18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5a18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5a2a:	2304      	movs	r3, #4
   d5a2c:	6041      	str	r1, [r0, #4]
   d5a2e:	7503      	strb	r3, [r0, #20]
}
   d5a30:	bd10      	pop	{r4, pc}
	...

000d5a34 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5a34:	b513      	push	{r0, r1, r4, lr}
   d5a36:	4b05      	ldr	r3, [pc, #20]	; (d5a4c <_ZN9IPAddressC1EPKh+0x18>)
   d5a38:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5a3a:	78cb      	ldrb	r3, [r1, #3]
   d5a3c:	9300      	str	r3, [sp, #0]
   d5a3e:	788b      	ldrb	r3, [r1, #2]
   d5a40:	784a      	ldrb	r2, [r1, #1]
   d5a42:	7809      	ldrb	r1, [r1, #0]
   d5a44:	f7ff ffe8 	bl	d5a18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5a48:	b002      	add	sp, #8
   d5a4a:	bd10      	pop	{r4, pc}
   d5a4c:	000d6ff8 	.word	0x000d6ff8

000d5a50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a50:	7441      	strb	r1, [r0, #17]
}
   d5a52:	4770      	bx	lr

000d5a54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a54:	4770      	bx	lr

000d5a56 <_ZN9USBSerial4readEv>:
{
   d5a56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a58:	2100      	movs	r1, #0
   d5a5a:	7c00      	ldrb	r0, [r0, #16]
   d5a5c:	f7ff faa0 	bl	d4fa0 <HAL_USB_USART_Receive_Data>
}
   d5a60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5a66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a68:	2101      	movs	r1, #1
   d5a6a:	7c00      	ldrb	r0, [r0, #16]
   d5a6c:	f7ff fa98 	bl	d4fa0 <HAL_USB_USART_Receive_Data>
}
   d5a70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a74:	bd08      	pop	{r3, pc}

000d5a76 <_ZN9USBSerial17availableForWriteEv>:
{
   d5a76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a78:	7c00      	ldrb	r0, [r0, #16]
   d5a7a:	f7ff fa89 	bl	d4f90 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a82:	bd08      	pop	{r3, pc}

000d5a84 <_ZN9USBSerial9availableEv>:
{
   d5a84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a86:	7c00      	ldrb	r0, [r0, #16]
   d5a88:	f7ff fa7a 	bl	d4f80 <HAL_USB_USART_Available_Data>
}
   d5a8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a90:	bd08      	pop	{r3, pc}

000d5a92 <_ZN9USBSerial5writeEh>:
{
   d5a92:	b513      	push	{r0, r1, r4, lr}
   d5a94:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a96:	7c00      	ldrb	r0, [r0, #16]
{
   d5a98:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a9a:	f7ff fa79 	bl	d4f90 <HAL_USB_USART_Available_Data_For_Write>
   d5a9e:	2800      	cmp	r0, #0
   d5aa0:	9901      	ldr	r1, [sp, #4]
   d5aa2:	dc01      	bgt.n	d5aa8 <_ZN9USBSerial5writeEh+0x16>
   d5aa4:	7c60      	ldrb	r0, [r4, #17]
   d5aa6:	b120      	cbz	r0, d5ab2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5aa8:	7c20      	ldrb	r0, [r4, #16]
   d5aaa:	f7ff fa81 	bl	d4fb0 <HAL_USB_USART_Send_Data>
   d5aae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5ab2:	b002      	add	sp, #8
   d5ab4:	bd10      	pop	{r4, pc}

000d5ab6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ab6:	7c00      	ldrb	r0, [r0, #16]
   d5ab8:	f7ff ba82 	b.w	d4fc0 <HAL_USB_USART_Flush_Data>

000d5abc <_ZN9USBSerialD0Ev>:
   d5abc:	b510      	push	{r4, lr}
   d5abe:	2114      	movs	r1, #20
   d5ac0:	4604      	mov	r4, r0
   d5ac2:	f000 faee 	bl	d60a2 <_ZdlPvj>
   d5ac6:	4620      	mov	r0, r4
   d5ac8:	bd10      	pop	{r4, pc}
	...

000d5acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5acc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	4608      	mov	r0, r1
   d5ad6:	2100      	movs	r1, #0
   d5ad8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5adc:	4b04      	ldr	r3, [pc, #16]	; (d5af0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ade:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5ae0:	2301      	movs	r3, #1
  _serial = serial;
   d5ae2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ae4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5ae6:	4611      	mov	r1, r2
   d5ae8:	f7ff fa42 	bl	d4f70 <HAL_USB_USART_Init>
}
   d5aec:	4620      	mov	r0, r4
   d5aee:	bd10      	pop	{r4, pc}
   d5af0:	000d700c 	.word	0x000d700c

000d5af4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5af4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5af6:	2214      	movs	r2, #20
{
   d5af8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5afa:	2100      	movs	r1, #0
   d5afc:	f000 ff3a 	bl	d6974 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b00:	4620      	mov	r0, r4
   d5b02:	bd10      	pop	{r4, pc}

000d5b04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b06:	4c10      	ldr	r4, [pc, #64]	; (d5b48 <_Z16_fetch_usbserialv+0x44>)
{
   d5b08:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b0a:	a803      	add	r0, sp, #12
   d5b0c:	f7ff fff2 	bl	d5af4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b10:	7821      	ldrb	r1, [r4, #0]
   d5b12:	f3bf 8f5b 	dmb	ish
   d5b16:	f011 0101 	ands.w	r1, r1, #1
   d5b1a:	d111      	bne.n	d5b40 <_Z16_fetch_usbserialv+0x3c>
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	9101      	str	r1, [sp, #4]
   d5b20:	f7fe fac6 	bl	d40b0 <__cxa_guard_acquire>
   d5b24:	9901      	ldr	r1, [sp, #4]
   d5b26:	b158      	cbz	r0, d5b40 <_Z16_fetch_usbserialv+0x3c>
   d5b28:	aa03      	add	r2, sp, #12
   d5b2a:	4808      	ldr	r0, [pc, #32]	; (d5b4c <_Z16_fetch_usbserialv+0x48>)
   d5b2c:	f7ff ffce 	bl	d5acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b30:	4620      	mov	r0, r4
   d5b32:	f7fe fac2 	bl	d40ba <__cxa_guard_release>
   d5b36:	4a06      	ldr	r2, [pc, #24]	; (d5b50 <_Z16_fetch_usbserialv+0x4c>)
   d5b38:	4906      	ldr	r1, [pc, #24]	; (d5b54 <_Z16_fetch_usbserialv+0x50>)
   d5b3a:	4804      	ldr	r0, [pc, #16]	; (d5b4c <_Z16_fetch_usbserialv+0x48>)
   d5b3c:	f000 faac 	bl	d6098 <__aeabi_atexit>
	return _usbserial;
}
   d5b40:	4802      	ldr	r0, [pc, #8]	; (d5b4c <_Z16_fetch_usbserialv+0x48>)
   d5b42:	b008      	add	sp, #32
   d5b44:	bd10      	pop	{r4, pc}
   d5b46:	bf00      	nop
   d5b48:	2003e690 	.word	0x2003e690
   d5b4c:	2003e694 	.word	0x2003e694
   d5b50:	2003e608 	.word	0x2003e608
   d5b54:	000d5a55 	.word	0x000d5a55

000d5b58 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b58:	4770      	bx	lr

000d5b5a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b5a:	7441      	strb	r1, [r0, #17]
}
   d5b5c:	4770      	bx	lr

000d5b5e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5b5e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b60:	7c00      	ldrb	r0, [r0, #16]
   d5b62:	f7ff f95d 	bl	d4e20 <hal_usart_available_data_for_write>
}
   d5b66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b6a:	bd08      	pop	{r3, pc}

000d5b6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b6c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5b6e:	7c00      	ldrb	r0, [r0, #16]
   d5b70:	f7ff f92e 	bl	d4dd0 <hal_usart_available>
}
   d5b74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b78:	bd08      	pop	{r3, pc}

000d5b7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b7c:	7c00      	ldrb	r0, [r0, #16]
   d5b7e:	f7ff f937 	bl	d4df0 <hal_usart_peek>
}
   d5b82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b86:	bd08      	pop	{r3, pc}

000d5b88 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b88:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5b8a:	7c00      	ldrb	r0, [r0, #16]
   d5b8c:	f7ff f928 	bl	d4de0 <hal_usart_read>
}
   d5b90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b94:	bd08      	pop	{r3, pc}

000d5b96 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5b96:	7c00      	ldrb	r0, [r0, #16]
   d5b98:	f7ff b932 	b.w	d4e00 <hal_usart_flush>

000d5b9c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b9e:	7c45      	ldrb	r5, [r0, #17]
{
   d5ba0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ba2:	b12d      	cbz	r5, d5bb0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5ba4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ba6:	b003      	add	sp, #12
   d5ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5bac:	f7ff b908 	b.w	d4dc0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bb0:	7c00      	ldrb	r0, [r0, #16]
   d5bb2:	9101      	str	r1, [sp, #4]
   d5bb4:	f7ff f934 	bl	d4e20 <hal_usart_available_data_for_write>
   d5bb8:	2800      	cmp	r0, #0
   d5bba:	9901      	ldr	r1, [sp, #4]
   d5bbc:	dcf2      	bgt.n	d5ba4 <_ZN11USARTSerial5writeEh+0x8>
}
   d5bbe:	4628      	mov	r0, r5
   d5bc0:	b003      	add	sp, #12
   d5bc2:	bd30      	pop	{r4, r5, pc}

000d5bc4 <_ZN11USARTSerialD0Ev>:
   d5bc4:	b510      	push	{r4, lr}
   d5bc6:	2114      	movs	r1, #20
   d5bc8:	4604      	mov	r4, r0
   d5bca:	f000 fa6a 	bl	d60a2 <_ZdlPvj>
   d5bce:	4620      	mov	r0, r4
   d5bd0:	bd10      	pop	{r4, pc}
	...

000d5bd4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5bd4:	b510      	push	{r4, lr}
   d5bd6:	f04f 0c00 	mov.w	ip, #0
   d5bda:	4604      	mov	r4, r0
   d5bdc:	4608      	mov	r0, r1
   d5bde:	4611      	mov	r1, r2
   d5be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5be4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5be8:	4a04      	ldr	r2, [pc, #16]	; (d5bfc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5bea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5bec:	2201      	movs	r2, #1
  _serial = serial;
   d5bee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5bf0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5bf2:	461a      	mov	r2, r3
   d5bf4:	f7ff f8dc 	bl	d4db0 <hal_usart_init>
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	000d703c 	.word	0x000d703c

000d5c00 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c00:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c02:	4c0e      	ldr	r4, [pc, #56]	; (d5c3c <_Z22__fetch_global_Serial1v+0x3c>)
   d5c04:	7821      	ldrb	r1, [r4, #0]
   d5c06:	f3bf 8f5b 	dmb	ish
   d5c0a:	f011 0101 	ands.w	r1, r1, #1
   d5c0e:	d112      	bne.n	d5c36 <_Z22__fetch_global_Serial1v+0x36>
   d5c10:	4620      	mov	r0, r4
   d5c12:	9101      	str	r1, [sp, #4]
   d5c14:	f7fe fa4c 	bl	d40b0 <__cxa_guard_acquire>
   d5c18:	9901      	ldr	r1, [sp, #4]
   d5c1a:	b160      	cbz	r0, d5c36 <_Z22__fetch_global_Serial1v+0x36>
   d5c1c:	4a08      	ldr	r2, [pc, #32]	; (d5c40 <_Z22__fetch_global_Serial1v+0x40>)
   d5c1e:	4b09      	ldr	r3, [pc, #36]	; (d5c44 <_Z22__fetch_global_Serial1v+0x44>)
   d5c20:	4809      	ldr	r0, [pc, #36]	; (d5c48 <_Z22__fetch_global_Serial1v+0x48>)
   d5c22:	f7ff ffd7 	bl	d5bd4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5c26:	4620      	mov	r0, r4
   d5c28:	f7fe fa47 	bl	d40ba <__cxa_guard_release>
   d5c2c:	4a07      	ldr	r2, [pc, #28]	; (d5c4c <_Z22__fetch_global_Serial1v+0x4c>)
   d5c2e:	4908      	ldr	r1, [pc, #32]	; (d5c50 <_Z22__fetch_global_Serial1v+0x50>)
   d5c30:	4805      	ldr	r0, [pc, #20]	; (d5c48 <_Z22__fetch_global_Serial1v+0x48>)
   d5c32:	f000 fa31 	bl	d6098 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c36:	4804      	ldr	r0, [pc, #16]	; (d5c48 <_Z22__fetch_global_Serial1v+0x48>)
   d5c38:	b002      	add	sp, #8
   d5c3a:	bd10      	pop	{r4, pc}
   d5c3c:	2003e6a8 	.word	0x2003e6a8
   d5c40:	2003e6ac 	.word	0x2003e6ac
   d5c44:	2003e730 	.word	0x2003e730
   d5c48:	2003e7b4 	.word	0x2003e7b4
   d5c4c:	2003e608 	.word	0x2003e608
   d5c50:	000d5b59 	.word	0x000d5b59

000d5c54 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5c54:	4770      	bx	lr

000d5c56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c58:	4606      	mov	r6, r0
   d5c5a:	4615      	mov	r5, r2
   d5c5c:	460c      	mov	r4, r1
   d5c5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c60:	42bc      	cmp	r4, r7
   d5c62:	d006      	beq.n	d5c72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c64:	6833      	ldr	r3, [r6, #0]
   d5c66:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c6a:	689b      	ldr	r3, [r3, #8]
   d5c6c:	4630      	mov	r0, r6
   d5c6e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5c70:	e7f6      	b.n	d5c60 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5c72:	4628      	mov	r0, r5
   d5c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c76 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5c76:	7c00      	ldrb	r0, [r0, #16]
   d5c78:	2200      	movs	r2, #0
   d5c7a:	f7ff b8f1 	b.w	d4e60 <hal_i2c_write>

000d5c7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5c7e:	7c00      	ldrb	r0, [r0, #16]
   d5c80:	2100      	movs	r1, #0
   d5c82:	f7ff b8f5 	b.w	d4e70 <hal_i2c_available>

000d5c86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5c86:	7c00      	ldrb	r0, [r0, #16]
   d5c88:	2100      	movs	r1, #0
   d5c8a:	f7ff b8f9 	b.w	d4e80 <hal_i2c_read>

000d5c8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5c8e:	7c00      	ldrb	r0, [r0, #16]
   d5c90:	2100      	movs	r1, #0
   d5c92:	f7ff b8fd 	b.w	d4e90 <hal_i2c_peek>

000d5c96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5c96:	7c00      	ldrb	r0, [r0, #16]
   d5c98:	2100      	movs	r1, #0
   d5c9a:	f7ff b901 	b.w	d4ea0 <hal_i2c_flush>

000d5c9e <_ZN7TwoWireD0Ev>:
   d5c9e:	b510      	push	{r4, lr}
   d5ca0:	2114      	movs	r1, #20
   d5ca2:	4604      	mov	r4, r0
   d5ca4:	f000 f9fd 	bl	d60a2 <_ZdlPvj>
   d5ca8:	4620      	mov	r0, r4
   d5caa:	bd10      	pop	{r4, pc}

000d5cac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5cac:	b510      	push	{r4, lr}
   d5cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cb2:	4604      	mov	r4, r0
   d5cb4:	4608      	mov	r0, r1
   d5cb6:	2100      	movs	r1, #0
   d5cb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5cbc:	4b03      	ldr	r3, [pc, #12]	; (d5ccc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5cbe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5cc0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5cc2:	4611      	mov	r1, r2
   d5cc4:	f7ff f8fc 	bl	d4ec0 <hal_i2c_init>
}
   d5cc8:	4620      	mov	r0, r4
   d5cca:	bd10      	pop	{r4, pc}
   d5ccc:	000d706c 	.word	0x000d706c

000d5cd0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5cd0:	2300      	movs	r3, #0
   d5cd2:	7c00      	ldrb	r0, [r0, #16]
   d5cd4:	461a      	mov	r2, r3
   d5cd6:	4619      	mov	r1, r3
   d5cd8:	f7ff b8aa 	b.w	d4e30 <hal_i2c_begin>

000d5cdc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5cdc:	7c00      	ldrb	r0, [r0, #16]
   d5cde:	2200      	movs	r2, #0
   d5ce0:	f7ff b8ae 	b.w	d4e40 <hal_i2c_begin_transmission>

000d5ce4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5ce4:	b2c9      	uxtb	r1, r1
   d5ce6:	f7ff bff9 	b.w	d5cdc <_ZN7TwoWire17beginTransmissionEh>

000d5cea <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5cea:	7c00      	ldrb	r0, [r0, #16]
   d5cec:	2200      	movs	r2, #0
   d5cee:	f7ff b8af 	b.w	d4e50 <hal_i2c_end_transmission>

000d5cf2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5cf2:	2101      	movs	r1, #1
   d5cf4:	f7ff bff9 	b.w	d5cea <_ZN7TwoWire15endTransmissionEh>

000d5cf8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5cf8:	2200      	movs	r2, #0
   d5cfa:	6840      	ldr	r0, [r0, #4]
   d5cfc:	4611      	mov	r1, r2
   d5cfe:	f7ff b9bb 	b.w	d5078 <network_ready>

000d5d02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d02:	2200      	movs	r2, #0
   d5d04:	6840      	ldr	r0, [r0, #4]
   d5d06:	4611      	mov	r1, r2
   d5d08:	f7ff b9d6 	b.w	d50b8 <network_listening>

000d5d0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d0c:	2200      	movs	r2, #0
   d5d0e:	6840      	ldr	r0, [r0, #4]
   d5d10:	4611      	mov	r1, r2
   d5d12:	f7ff b9e1 	b.w	d50d8 <network_get_listen_timeout>

000d5d16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d16:	6840      	ldr	r0, [r0, #4]
   d5d18:	2200      	movs	r2, #0
   d5d1a:	f7ff b9d5 	b.w	d50c8 <network_set_listen_timeout>

000d5d1e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	2200      	movs	r2, #0
   d5d22:	f081 0101 	eor.w	r1, r1, #1
   d5d26:	f7ff b9bf 	b.w	d50a8 <network_listen>

000d5d2a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d2a:	2300      	movs	r3, #0
   d5d2c:	6840      	ldr	r0, [r0, #4]
   d5d2e:	461a      	mov	r2, r3
   d5d30:	4619      	mov	r1, r3
   d5d32:	f7ff b9b1 	b.w	d5098 <network_off>

000d5d36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d36:	2200      	movs	r2, #0
   d5d38:	6840      	ldr	r0, [r0, #4]
   d5d3a:	4611      	mov	r1, r2
   d5d3c:	f7ff b98c 	b.w	d5058 <network_connecting>

000d5d40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d40:	6840      	ldr	r0, [r0, #4]
   d5d42:	2200      	movs	r2, #0
   d5d44:	2102      	movs	r1, #2
   d5d46:	f7ff b98f 	b.w	d5068 <network_disconnect>

000d5d4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d4a:	2300      	movs	r3, #0
   d5d4c:	6840      	ldr	r0, [r0, #4]
   d5d4e:	461a      	mov	r2, r3
   d5d50:	f7ff b97a 	b.w	d5048 <network_connect>

000d5d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d54:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d56:	2204      	movs	r2, #4
   d5d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d5a:	4a02      	ldr	r2, [pc, #8]	; (d5d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5d5e:	4770      	bx	lr
   d5d60:	2003e7c8 	.word	0x2003e7c8
   d5d64:	000d7094 	.word	0x000d7094

000d5d68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d68:	2300      	movs	r3, #0
   d5d6a:	6840      	ldr	r0, [r0, #4]
   d5d6c:	461a      	mov	r2, r3
   d5d6e:	f7ff b96b 	b.w	d5048 <network_connect>

000d5d72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	2200      	movs	r2, #0
   d5d76:	2102      	movs	r1, #2
   d5d78:	f7ff b976 	b.w	d5068 <network_disconnect>

000d5d7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d7c:	2200      	movs	r2, #0
   d5d7e:	6840      	ldr	r0, [r0, #4]
   d5d80:	4611      	mov	r1, r2
   d5d82:	f7ff b969 	b.w	d5058 <network_connecting>

000d5d86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d86:	2200      	movs	r2, #0
   d5d88:	6840      	ldr	r0, [r0, #4]
   d5d8a:	4611      	mov	r1, r2
   d5d8c:	f7ff b974 	b.w	d5078 <network_ready>

000d5d90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d90:	2300      	movs	r3, #0
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	461a      	mov	r2, r3
   d5d96:	4619      	mov	r1, r3
   d5d98:	f7ff b976 	b.w	d5088 <network_on>

000d5d9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d9c:	2300      	movs	r3, #0
   d5d9e:	6840      	ldr	r0, [r0, #4]
   d5da0:	461a      	mov	r2, r3
   d5da2:	4619      	mov	r1, r3
   d5da4:	f7ff b978 	b.w	d5098 <network_off>

000d5da8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5da8:	6840      	ldr	r0, [r0, #4]
   d5daa:	2100      	movs	r1, #0
   d5dac:	f7ff b99c 	b.w	d50e8 <network_is_on>

000d5db0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	2100      	movs	r1, #0
   d5db4:	f7ff b9a0 	b.w	d50f8 <network_is_off>

000d5db8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5db8:	6840      	ldr	r0, [r0, #4]
   d5dba:	2200      	movs	r2, #0
   d5dbc:	f081 0101 	eor.w	r1, r1, #1
   d5dc0:	f7ff b972 	b.w	d50a8 <network_listen>

000d5dc4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5dc4:	6840      	ldr	r0, [r0, #4]
   d5dc6:	2200      	movs	r2, #0
   d5dc8:	f7ff b97e 	b.w	d50c8 <network_set_listen_timeout>

000d5dcc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5dcc:	2200      	movs	r2, #0
   d5dce:	6840      	ldr	r0, [r0, #4]
   d5dd0:	4611      	mov	r1, r2
   d5dd2:	f7ff b981 	b.w	d50d8 <network_get_listen_timeout>

000d5dd6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5dd6:	2200      	movs	r2, #0
   d5dd8:	6840      	ldr	r0, [r0, #4]
   d5dda:	4611      	mov	r1, r2
   d5ddc:	f7ff b96c 	b.w	d50b8 <network_listening>

000d5de0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5de4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5de6:	b095      	sub	sp, #84	; 0x54
   d5de8:	4616      	mov	r6, r2
   d5dea:	460d      	mov	r5, r1
   d5dec:	4607      	mov	r7, r0
    IPAddress addr;
   d5dee:	f7ff fdf3 	bl	d59d8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5df2:	4621      	mov	r1, r4
   d5df4:	2218      	movs	r2, #24
   d5df6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5df8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5dfa:	f000 fdbb 	bl	d6974 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5dfe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e04:	4621      	mov	r1, r4
   d5e06:	466b      	mov	r3, sp
   d5e08:	aa0c      	add	r2, sp, #48	; 0x30
   d5e0a:	4630      	mov	r0, r6
   d5e0c:	f7fe ff60 	bl	d4cd0 <netdb_getaddrinfo>
    if (!r) {
   d5e10:	4604      	mov	r4, r0
   d5e12:	2800      	cmp	r0, #0
   d5e14:	d14c      	bne.n	d5eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e16:	4602      	mov	r2, r0
   d5e18:	2101      	movs	r1, #1
   d5e1a:	6868      	ldr	r0, [r5, #4]
   d5e1c:	f7ff f92c 	bl	d5078 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e24:	4622      	mov	r2, r4
   d5e26:	6868      	ldr	r0, [r5, #4]
   d5e28:	f7ff f926 	bl	d5078 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e2e:	4681      	mov	r9, r0
        bool ok = false;
   d5e30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e32:	2e00      	cmp	r6, #0
   d5e34:	d03c      	beq.n	d5eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5e36:	2900      	cmp	r1, #0
   d5e38:	d13a      	bne.n	d5eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e3a:	6873      	ldr	r3, [r6, #4]
   d5e3c:	2b02      	cmp	r3, #2
   d5e3e:	d003      	beq.n	d5e48 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5e40:	2b0a      	cmp	r3, #10
   d5e42:	d011      	beq.n	d5e68 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e44:	69f6      	ldr	r6, [r6, #28]
   d5e46:	e7f4      	b.n	d5e32 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5e48:	f1b8 0f00 	cmp.w	r8, #0
   d5e4c:	d00a      	beq.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e4e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5e50:	a806      	add	r0, sp, #24
   d5e52:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5e54:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5e56:	f7ff fded 	bl	d5a34 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e5c:	1d3c      	adds	r4, r7, #4
   d5e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e60:	682b      	ldr	r3, [r5, #0]
   d5e62:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5e64:	4641      	mov	r1, r8
   d5e66:	e7ed      	b.n	d5e44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e68:	f1b9 0f00 	cmp.w	r9, #0
   d5e6c:	d101      	bne.n	d5e72 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5e6e:	4649      	mov	r1, r9
   d5e70:	e7e8      	b.n	d5e44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e72:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e74:	2210      	movs	r2, #16
   d5e76:	a801      	add	r0, sp, #4
   d5e78:	f000 fd7c 	bl	d6974 <memset>
                    a.v = 6;
   d5e7c:	2306      	movs	r3, #6
   d5e7e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e82:	ad01      	add	r5, sp, #4
   d5e84:	f104 0308 	add.w	r3, r4, #8
   d5e88:	3418      	adds	r4, #24
   d5e8a:	6818      	ldr	r0, [r3, #0]
   d5e8c:	6859      	ldr	r1, [r3, #4]
   d5e8e:	462a      	mov	r2, r5
   d5e90:	c203      	stmia	r2!, {r0, r1}
   d5e92:	3308      	adds	r3, #8
   d5e94:	42a3      	cmp	r3, r4
   d5e96:	4615      	mov	r5, r2
   d5e98:	d1f7      	bne.n	d5e8a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5e9a:	a901      	add	r1, sp, #4
   d5e9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5e9e:	ad07      	add	r5, sp, #28
   d5ea0:	f7ff fda8 	bl	d59f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ea6:	1d3c      	adds	r4, r7, #4
   d5ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eaa:	682b      	ldr	r3, [r5, #0]
   d5eac:	7023      	strb	r3, [r4, #0]
   d5eae:	e7de      	b.n	d5e6e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5eb0:	9800      	ldr	r0, [sp, #0]
   d5eb2:	f7fe ff05 	bl	d4cc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5eb6:	4638      	mov	r0, r7
   d5eb8:	b015      	add	sp, #84	; 0x54
   d5eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ec0:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ec2:	4a03      	ldr	r2, [pc, #12]	; (d5ed0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ec4:	601a      	str	r2, [r3, #0]
   d5ec6:	2200      	movs	r2, #0
   d5ec8:	605a      	str	r2, [r3, #4]

} // spark
   d5eca:	4770      	bx	lr
   d5ecc:	2003e7d0 	.word	0x2003e7d0
   d5ed0:	000d70d0 	.word	0x000d70d0

000d5ed4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5ed4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5ed6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5ed8:	d902      	bls.n	d5ee0 <pinAvailable+0xc>
    return false;
   d5eda:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5edc:	b002      	add	sp, #8
   d5ede:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5ee0:	f1a0 030b 	sub.w	r3, r0, #11
   d5ee4:	2b02      	cmp	r3, #2
   d5ee6:	d81a      	bhi.n	d5f1e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5ee8:	4c17      	ldr	r4, [pc, #92]	; (d5f48 <pinAvailable+0x74>)
   d5eea:	7821      	ldrb	r1, [r4, #0]
   d5eec:	f3bf 8f5b 	dmb	ish
   d5ef0:	f011 0101 	ands.w	r1, r1, #1
   d5ef4:	d10b      	bne.n	d5f0e <pinAvailable+0x3a>
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	9101      	str	r1, [sp, #4]
   d5efa:	f7fe f8d9 	bl	d40b0 <__cxa_guard_acquire>
   d5efe:	9901      	ldr	r1, [sp, #4]
   d5f00:	b128      	cbz	r0, d5f0e <pinAvailable+0x3a>
   d5f02:	4812      	ldr	r0, [pc, #72]	; (d5f4c <pinAvailable+0x78>)
   d5f04:	f7ff f9a4 	bl	d5250 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5f08:	4620      	mov	r0, r4
   d5f0a:	f7fe f8d6 	bl	d40ba <__cxa_guard_release>
   d5f0e:	4b0f      	ldr	r3, [pc, #60]	; (d5f4c <pinAvailable+0x78>)
   d5f10:	7818      	ldrb	r0, [r3, #0]
   d5f12:	f7ff f80d 	bl	d4f30 <hal_spi_is_enabled>
   d5f16:	2800      	cmp	r0, #0
   d5f18:	d1df      	bne.n	d5eda <pinAvailable+0x6>
  return true; // 'pin' is available
   d5f1a:	2001      	movs	r0, #1
   d5f1c:	e7de      	b.n	d5edc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5f1e:	2801      	cmp	r0, #1
   d5f20:	d809      	bhi.n	d5f36 <pinAvailable+0x62>
   d5f22:	f000 f891 	bl	d6048 <_Z19__fetch_global_Wirev>
   d5f26:	2100      	movs	r1, #0
   d5f28:	7c00      	ldrb	r0, [r0, #16]
   d5f2a:	f7fe ffc1 	bl	d4eb0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5f2e:	f080 0001 	eor.w	r0, r0, #1
   d5f32:	b2c0      	uxtb	r0, r0
   d5f34:	e7d2      	b.n	d5edc <pinAvailable+0x8>
   d5f36:	3809      	subs	r0, #9
   d5f38:	2801      	cmp	r0, #1
   d5f3a:	d8ee      	bhi.n	d5f1a <pinAvailable+0x46>
   d5f3c:	f7ff fe60 	bl	d5c00 <_Z22__fetch_global_Serial1v>
   d5f40:	7c00      	ldrb	r0, [r0, #16]
   d5f42:	f7fe ff65 	bl	d4e10 <hal_usart_is_enabled>
   d5f46:	e7f2      	b.n	d5f2e <pinAvailable+0x5a>
   d5f48:	2003e638 	.word	0x2003e638
   d5f4c:	2003e63c 	.word	0x2003e63c

000d5f50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f50:	2823      	cmp	r0, #35	; 0x23
{
   d5f52:	b538      	push	{r3, r4, r5, lr}
   d5f54:	4604      	mov	r4, r0
   d5f56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f58:	d80a      	bhi.n	d5f70 <pinMode+0x20>
   d5f5a:	29ff      	cmp	r1, #255	; 0xff
   d5f5c:	d008      	beq.n	d5f70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5f5e:	f7ff ffb9 	bl	d5ed4 <pinAvailable>
   d5f62:	b128      	cbz	r0, d5f70 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5f64:	4629      	mov	r1, r5
   d5f66:	4620      	mov	r0, r4
}
   d5f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5f6c:	f7fe bec0 	b.w	d4cf0 <HAL_Pin_Mode>
}
   d5f70:	bd38      	pop	{r3, r4, r5, pc}

000d5f72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f72:	b538      	push	{r3, r4, r5, lr}
   d5f74:	4604      	mov	r4, r0
   d5f76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f78:	f7fe fec2 	bl	d4d00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5f7c:	28ff      	cmp	r0, #255	; 0xff
   d5f7e:	d010      	beq.n	d5fa2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5f80:	2806      	cmp	r0, #6
   d5f82:	d804      	bhi.n	d5f8e <digitalWrite+0x1c>
   d5f84:	234d      	movs	r3, #77	; 0x4d
   d5f86:	fa23 f000 	lsr.w	r0, r3, r0
   d5f8a:	07c3      	lsls	r3, r0, #31
   d5f8c:	d409      	bmi.n	d5fa2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f8e:	4620      	mov	r0, r4
   d5f90:	f7ff ffa0 	bl	d5ed4 <pinAvailable>
   d5f94:	b128      	cbz	r0, d5fa2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f96:	4629      	mov	r1, r5
   d5f98:	4620      	mov	r0, r4
}
   d5f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5f9e:	f7fe beb7 	b.w	d4d10 <HAL_GPIO_Write>
}
   d5fa2:	bd38      	pop	{r3, r4, r5, pc}

000d5fa4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5fa4:	280d      	cmp	r0, #13
{
   d5fa6:	b510      	push	{r4, lr}
   d5fa8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5faa:	bf9c      	itt	ls
   d5fac:	340e      	addls	r4, #14
   d5fae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	f7ff ff8f 	bl	d5ed4 <pinAvailable>
   d5fb6:	b150      	cbz	r0, d5fce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5fb8:	2103      	movs	r1, #3
   d5fba:	4620      	mov	r0, r4
   d5fbc:	f7fe fe90 	bl	d4ce0 <HAL_Validate_Pin_Function>
   d5fc0:	2803      	cmp	r0, #3
   d5fc2:	d104      	bne.n	d5fce <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5fc4:	4620      	mov	r0, r4
}
   d5fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5fca:	f7fe bea9 	b.w	d4d20 <hal_adc_read>
}
   d5fce:	2000      	movs	r0, #0
   d5fd0:	bd10      	pop	{r4, pc}

000d5fd2 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fd6:	4690      	mov	r8, r2
   d5fd8:	461f      	mov	r7, r3
   d5fda:	2400      	movs	r4, #0
   d5fdc:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5fde:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d5fe0:	f1b8 0f00 	cmp.w	r8, #0
   d5fe4:	d113      	bne.n	d600e <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5fe6:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5fea:	f001 0101 	and.w	r1, r1, #1
   d5fee:	4630      	mov	r0, r6
   d5ff0:	f7ff ffbf 	bl	d5f72 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d5ff4:	2101      	movs	r1, #1
   d5ff6:	4628      	mov	r0, r5
   d5ff8:	f7ff ffbb 	bl	d5f72 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5ffc:	3401      	adds	r4, #1
   d5ffe:	2100      	movs	r1, #0
   d6000:	4628      	mov	r0, r5
   d6002:	f7ff ffb6 	bl	d5f72 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d6006:	2c08      	cmp	r4, #8
   d6008:	d1ea      	bne.n	d5fe0 <shiftOut+0xe>
  }
}
   d600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d600e:	f1c4 0107 	rsb	r1, r4, #7
   d6012:	fa47 f101 	asr.w	r1, r7, r1
   d6016:	e7e8      	b.n	d5fea <shiftOut+0x18>

000d6018 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6018:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d601a:	2300      	movs	r3, #0
   d601c:	2520      	movs	r5, #32
   d601e:	8043      	strh	r3, [r0, #2]
   d6020:	2314      	movs	r3, #20
{
   d6022:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6024:	8003      	strh	r3, [r0, #0]
   d6026:	6085      	str	r5, [r0, #8]
   d6028:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d602a:	4906      	ldr	r1, [pc, #24]	; (d6044 <_Z17acquireWireBufferv+0x2c>)
   d602c:	4628      	mov	r0, r5
   d602e:	f000 f83a 	bl	d60a6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6032:	4904      	ldr	r1, [pc, #16]	; (d6044 <_Z17acquireWireBufferv+0x2c>)
	};
   d6034:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6036:	4628      	mov	r0, r5
   d6038:	f000 f835 	bl	d60a6 <_ZnajRKSt9nothrow_t>
	};
   d603c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d603e:	4620      	mov	r0, r4
   d6040:	bd38      	pop	{r3, r4, r5, pc}
   d6042:	bf00      	nop
   d6044:	000d7104 	.word	0x000d7104

000d6048 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6048:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d604a:	4d0f      	ldr	r5, [pc, #60]	; (d6088 <_Z19__fetch_global_Wirev+0x40>)
   d604c:	7829      	ldrb	r1, [r5, #0]
   d604e:	f3bf 8f5b 	dmb	ish
   d6052:	f011 0401 	ands.w	r4, r1, #1
{
   d6056:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6058:	d113      	bne.n	d6082 <_Z19__fetch_global_Wirev+0x3a>
   d605a:	4628      	mov	r0, r5
   d605c:	f7fe f828 	bl	d40b0 <__cxa_guard_acquire>
   d6060:	b178      	cbz	r0, d6082 <_Z19__fetch_global_Wirev+0x3a>
   d6062:	a801      	add	r0, sp, #4
   d6064:	f7ff ffd8 	bl	d6018 <_Z17acquireWireBufferv>
   d6068:	aa01      	add	r2, sp, #4
   d606a:	4621      	mov	r1, r4
   d606c:	4807      	ldr	r0, [pc, #28]	; (d608c <_Z19__fetch_global_Wirev+0x44>)
   d606e:	f7ff fe1d 	bl	d5cac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6072:	4628      	mov	r0, r5
   d6074:	f7fe f821 	bl	d40ba <__cxa_guard_release>
   d6078:	4a05      	ldr	r2, [pc, #20]	; (d6090 <_Z19__fetch_global_Wirev+0x48>)
   d607a:	4906      	ldr	r1, [pc, #24]	; (d6094 <_Z19__fetch_global_Wirev+0x4c>)
   d607c:	4803      	ldr	r0, [pc, #12]	; (d608c <_Z19__fetch_global_Wirev+0x44>)
   d607e:	f000 f80b 	bl	d6098 <__aeabi_atexit>
	return wire;
}
   d6082:	4802      	ldr	r0, [pc, #8]	; (d608c <_Z19__fetch_global_Wirev+0x44>)
   d6084:	b007      	add	sp, #28
   d6086:	bd30      	pop	{r4, r5, pc}
   d6088:	2003e7dc 	.word	0x2003e7dc
   d608c:	2003e7e0 	.word	0x2003e7e0
   d6090:	2003e608 	.word	0x2003e608
   d6094:	000d5c55 	.word	0x000d5c55

000d6098 <__aeabi_atexit>:
   d6098:	460b      	mov	r3, r1
   d609a:	4601      	mov	r1, r0
   d609c:	4618      	mov	r0, r3
   d609e:	f000 bc4d 	b.w	d693c <__cxa_atexit>

000d60a2 <_ZdlPvj>:
   d60a2:	f7fd bff8 	b.w	d4096 <_ZdlPv>

000d60a6 <_ZnajRKSt9nothrow_t>:
   d60a6:	f7fd bff4 	b.w	d4092 <_Znaj>
	...

000d60ac <__aeabi_drsub>:
   d60ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d60b0:	e002      	b.n	d60b8 <__adddf3>
   d60b2:	bf00      	nop

000d60b4 <__aeabi_dsub>:
   d60b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d60b8 <__adddf3>:
   d60b8:	b530      	push	{r4, r5, lr}
   d60ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d60be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d60c2:	ea94 0f05 	teq	r4, r5
   d60c6:	bf08      	it	eq
   d60c8:	ea90 0f02 	teqeq	r0, r2
   d60cc:	bf1f      	itttt	ne
   d60ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   d60d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d60d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d60da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d60de:	f000 80e2 	beq.w	d62a6 <__adddf3+0x1ee>
   d60e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d60e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d60ea:	bfb8      	it	lt
   d60ec:	426d      	neglt	r5, r5
   d60ee:	dd0c      	ble.n	d610a <__adddf3+0x52>
   d60f0:	442c      	add	r4, r5
   d60f2:	ea80 0202 	eor.w	r2, r0, r2
   d60f6:	ea81 0303 	eor.w	r3, r1, r3
   d60fa:	ea82 0000 	eor.w	r0, r2, r0
   d60fe:	ea83 0101 	eor.w	r1, r3, r1
   d6102:	ea80 0202 	eor.w	r2, r0, r2
   d6106:	ea81 0303 	eor.w	r3, r1, r3
   d610a:	2d36      	cmp	r5, #54	; 0x36
   d610c:	bf88      	it	hi
   d610e:	bd30      	pophi	{r4, r5, pc}
   d6110:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6114:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6118:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d611c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6120:	d002      	beq.n	d6128 <__adddf3+0x70>
   d6122:	4240      	negs	r0, r0
   d6124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6128:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d612c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6130:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6134:	d002      	beq.n	d613c <__adddf3+0x84>
   d6136:	4252      	negs	r2, r2
   d6138:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d613c:	ea94 0f05 	teq	r4, r5
   d6140:	f000 80a7 	beq.w	d6292 <__adddf3+0x1da>
   d6144:	f1a4 0401 	sub.w	r4, r4, #1
   d6148:	f1d5 0e20 	rsbs	lr, r5, #32
   d614c:	db0d      	blt.n	d616a <__adddf3+0xb2>
   d614e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6152:	fa22 f205 	lsr.w	r2, r2, r5
   d6156:	1880      	adds	r0, r0, r2
   d6158:	f141 0100 	adc.w	r1, r1, #0
   d615c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6160:	1880      	adds	r0, r0, r2
   d6162:	fa43 f305 	asr.w	r3, r3, r5
   d6166:	4159      	adcs	r1, r3
   d6168:	e00e      	b.n	d6188 <__adddf3+0xd0>
   d616a:	f1a5 0520 	sub.w	r5, r5, #32
   d616e:	f10e 0e20 	add.w	lr, lr, #32
   d6172:	2a01      	cmp	r2, #1
   d6174:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6178:	bf28      	it	cs
   d617a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d617e:	fa43 f305 	asr.w	r3, r3, r5
   d6182:	18c0      	adds	r0, r0, r3
   d6184:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d618c:	d507      	bpl.n	d619e <__adddf3+0xe6>
   d618e:	f04f 0e00 	mov.w	lr, #0
   d6192:	f1dc 0c00 	rsbs	ip, ip, #0
   d6196:	eb7e 0000 	sbcs.w	r0, lr, r0
   d619a:	eb6e 0101 	sbc.w	r1, lr, r1
   d619e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d61a2:	d31b      	bcc.n	d61dc <__adddf3+0x124>
   d61a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d61a8:	d30c      	bcc.n	d61c4 <__adddf3+0x10c>
   d61aa:	0849      	lsrs	r1, r1, #1
   d61ac:	ea5f 0030 	movs.w	r0, r0, rrx
   d61b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d61b4:	f104 0401 	add.w	r4, r4, #1
   d61b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d61bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d61c0:	f080 809a 	bcs.w	d62f8 <__adddf3+0x240>
   d61c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d61c8:	bf08      	it	eq
   d61ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d61ce:	f150 0000 	adcs.w	r0, r0, #0
   d61d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61d6:	ea41 0105 	orr.w	r1, r1, r5
   d61da:	bd30      	pop	{r4, r5, pc}
   d61dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d61e0:	4140      	adcs	r0, r0
   d61e2:	eb41 0101 	adc.w	r1, r1, r1
   d61e6:	3c01      	subs	r4, #1
   d61e8:	bf28      	it	cs
   d61ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d61ee:	d2e9      	bcs.n	d61c4 <__adddf3+0x10c>
   d61f0:	f091 0f00 	teq	r1, #0
   d61f4:	bf04      	itt	eq
   d61f6:	4601      	moveq	r1, r0
   d61f8:	2000      	moveq	r0, #0
   d61fa:	fab1 f381 	clz	r3, r1
   d61fe:	bf08      	it	eq
   d6200:	3320      	addeq	r3, #32
   d6202:	f1a3 030b 	sub.w	r3, r3, #11
   d6206:	f1b3 0220 	subs.w	r2, r3, #32
   d620a:	da0c      	bge.n	d6226 <__adddf3+0x16e>
   d620c:	320c      	adds	r2, #12
   d620e:	dd08      	ble.n	d6222 <__adddf3+0x16a>
   d6210:	f102 0c14 	add.w	ip, r2, #20
   d6214:	f1c2 020c 	rsb	r2, r2, #12
   d6218:	fa01 f00c 	lsl.w	r0, r1, ip
   d621c:	fa21 f102 	lsr.w	r1, r1, r2
   d6220:	e00c      	b.n	d623c <__adddf3+0x184>
   d6222:	f102 0214 	add.w	r2, r2, #20
   d6226:	bfd8      	it	le
   d6228:	f1c2 0c20 	rsble	ip, r2, #32
   d622c:	fa01 f102 	lsl.w	r1, r1, r2
   d6230:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6234:	bfdc      	itt	le
   d6236:	ea41 010c 	orrle.w	r1, r1, ip
   d623a:	4090      	lslle	r0, r2
   d623c:	1ae4      	subs	r4, r4, r3
   d623e:	bfa2      	ittt	ge
   d6240:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6244:	4329      	orrge	r1, r5
   d6246:	bd30      	popge	{r4, r5, pc}
   d6248:	ea6f 0404 	mvn.w	r4, r4
   d624c:	3c1f      	subs	r4, #31
   d624e:	da1c      	bge.n	d628a <__adddf3+0x1d2>
   d6250:	340c      	adds	r4, #12
   d6252:	dc0e      	bgt.n	d6272 <__adddf3+0x1ba>
   d6254:	f104 0414 	add.w	r4, r4, #20
   d6258:	f1c4 0220 	rsb	r2, r4, #32
   d625c:	fa20 f004 	lsr.w	r0, r0, r4
   d6260:	fa01 f302 	lsl.w	r3, r1, r2
   d6264:	ea40 0003 	orr.w	r0, r0, r3
   d6268:	fa21 f304 	lsr.w	r3, r1, r4
   d626c:	ea45 0103 	orr.w	r1, r5, r3
   d6270:	bd30      	pop	{r4, r5, pc}
   d6272:	f1c4 040c 	rsb	r4, r4, #12
   d6276:	f1c4 0220 	rsb	r2, r4, #32
   d627a:	fa20 f002 	lsr.w	r0, r0, r2
   d627e:	fa01 f304 	lsl.w	r3, r1, r4
   d6282:	ea40 0003 	orr.w	r0, r0, r3
   d6286:	4629      	mov	r1, r5
   d6288:	bd30      	pop	{r4, r5, pc}
   d628a:	fa21 f004 	lsr.w	r0, r1, r4
   d628e:	4629      	mov	r1, r5
   d6290:	bd30      	pop	{r4, r5, pc}
   d6292:	f094 0f00 	teq	r4, #0
   d6296:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d629a:	bf06      	itte	eq
   d629c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d62a0:	3401      	addeq	r4, #1
   d62a2:	3d01      	subne	r5, #1
   d62a4:	e74e      	b.n	d6144 <__adddf3+0x8c>
   d62a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d62aa:	bf18      	it	ne
   d62ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62b0:	d029      	beq.n	d6306 <__adddf3+0x24e>
   d62b2:	ea94 0f05 	teq	r4, r5
   d62b6:	bf08      	it	eq
   d62b8:	ea90 0f02 	teqeq	r0, r2
   d62bc:	d005      	beq.n	d62ca <__adddf3+0x212>
   d62be:	ea54 0c00 	orrs.w	ip, r4, r0
   d62c2:	bf04      	itt	eq
   d62c4:	4619      	moveq	r1, r3
   d62c6:	4610      	moveq	r0, r2
   d62c8:	bd30      	pop	{r4, r5, pc}
   d62ca:	ea91 0f03 	teq	r1, r3
   d62ce:	bf1e      	ittt	ne
   d62d0:	2100      	movne	r1, #0
   d62d2:	2000      	movne	r0, #0
   d62d4:	bd30      	popne	{r4, r5, pc}
   d62d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d62da:	d105      	bne.n	d62e8 <__adddf3+0x230>
   d62dc:	0040      	lsls	r0, r0, #1
   d62de:	4149      	adcs	r1, r1
   d62e0:	bf28      	it	cs
   d62e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d62e6:	bd30      	pop	{r4, r5, pc}
   d62e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d62ec:	bf3c      	itt	cc
   d62ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d62f2:	bd30      	popcc	{r4, r5, pc}
   d62f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d62fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6300:	f04f 0000 	mov.w	r0, #0
   d6304:	bd30      	pop	{r4, r5, pc}
   d6306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d630a:	bf1a      	itte	ne
   d630c:	4619      	movne	r1, r3
   d630e:	4610      	movne	r0, r2
   d6310:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6314:	bf1c      	itt	ne
   d6316:	460b      	movne	r3, r1
   d6318:	4602      	movne	r2, r0
   d631a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d631e:	bf06      	itte	eq
   d6320:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6324:	ea91 0f03 	teqeq	r1, r3
   d6328:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d632c:	bd30      	pop	{r4, r5, pc}
   d632e:	bf00      	nop

000d6330 <__aeabi_ui2d>:
   d6330:	f090 0f00 	teq	r0, #0
   d6334:	bf04      	itt	eq
   d6336:	2100      	moveq	r1, #0
   d6338:	4770      	bxeq	lr
   d633a:	b530      	push	{r4, r5, lr}
   d633c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6344:	f04f 0500 	mov.w	r5, #0
   d6348:	f04f 0100 	mov.w	r1, #0
   d634c:	e750      	b.n	d61f0 <__adddf3+0x138>
   d634e:	bf00      	nop

000d6350 <__aeabi_i2d>:
   d6350:	f090 0f00 	teq	r0, #0
   d6354:	bf04      	itt	eq
   d6356:	2100      	moveq	r1, #0
   d6358:	4770      	bxeq	lr
   d635a:	b530      	push	{r4, r5, lr}
   d635c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6360:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6364:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6368:	bf48      	it	mi
   d636a:	4240      	negmi	r0, r0
   d636c:	f04f 0100 	mov.w	r1, #0
   d6370:	e73e      	b.n	d61f0 <__adddf3+0x138>
   d6372:	bf00      	nop

000d6374 <__aeabi_f2d>:
   d6374:	0042      	lsls	r2, r0, #1
   d6376:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d637a:	ea4f 0131 	mov.w	r1, r1, rrx
   d637e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6382:	bf1f      	itttt	ne
   d6384:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d638c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6390:	4770      	bxne	lr
   d6392:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6396:	bf08      	it	eq
   d6398:	4770      	bxeq	lr
   d639a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d639e:	bf04      	itt	eq
   d63a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d63a4:	4770      	bxeq	lr
   d63a6:	b530      	push	{r4, r5, lr}
   d63a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d63ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63b4:	e71c      	b.n	d61f0 <__adddf3+0x138>
   d63b6:	bf00      	nop

000d63b8 <__aeabi_ul2d>:
   d63b8:	ea50 0201 	orrs.w	r2, r0, r1
   d63bc:	bf08      	it	eq
   d63be:	4770      	bxeq	lr
   d63c0:	b530      	push	{r4, r5, lr}
   d63c2:	f04f 0500 	mov.w	r5, #0
   d63c6:	e00a      	b.n	d63de <__aeabi_l2d+0x16>

000d63c8 <__aeabi_l2d>:
   d63c8:	ea50 0201 	orrs.w	r2, r0, r1
   d63cc:	bf08      	it	eq
   d63ce:	4770      	bxeq	lr
   d63d0:	b530      	push	{r4, r5, lr}
   d63d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d63d6:	d502      	bpl.n	d63de <__aeabi_l2d+0x16>
   d63d8:	4240      	negs	r0, r0
   d63da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d63de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d63e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d63e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d63ea:	f43f aed8 	beq.w	d619e <__adddf3+0xe6>
   d63ee:	f04f 0203 	mov.w	r2, #3
   d63f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d63f6:	bf18      	it	ne
   d63f8:	3203      	addne	r2, #3
   d63fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d63fe:	bf18      	it	ne
   d6400:	3203      	addne	r2, #3
   d6402:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6406:	f1c2 0320 	rsb	r3, r2, #32
   d640a:	fa00 fc03 	lsl.w	ip, r0, r3
   d640e:	fa20 f002 	lsr.w	r0, r0, r2
   d6412:	fa01 fe03 	lsl.w	lr, r1, r3
   d6416:	ea40 000e 	orr.w	r0, r0, lr
   d641a:	fa21 f102 	lsr.w	r1, r1, r2
   d641e:	4414      	add	r4, r2
   d6420:	e6bd      	b.n	d619e <__adddf3+0xe6>
   d6422:	bf00      	nop

000d6424 <__aeabi_dmul>:
   d6424:	b570      	push	{r4, r5, r6, lr}
   d6426:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d642a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d642e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6432:	bf1d      	ittte	ne
   d6434:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6438:	ea94 0f0c 	teqne	r4, ip
   d643c:	ea95 0f0c 	teqne	r5, ip
   d6440:	f000 f8de 	bleq	d6600 <__aeabi_dmul+0x1dc>
   d6444:	442c      	add	r4, r5
   d6446:	ea81 0603 	eor.w	r6, r1, r3
   d644a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d644e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6452:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6456:	bf18      	it	ne
   d6458:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d645c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6464:	d038      	beq.n	d64d8 <__aeabi_dmul+0xb4>
   d6466:	fba0 ce02 	umull	ip, lr, r0, r2
   d646a:	f04f 0500 	mov.w	r5, #0
   d646e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6472:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6476:	fbe0 e503 	umlal	lr, r5, r0, r3
   d647a:	f04f 0600 	mov.w	r6, #0
   d647e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6482:	f09c 0f00 	teq	ip, #0
   d6486:	bf18      	it	ne
   d6488:	f04e 0e01 	orrne.w	lr, lr, #1
   d648c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6490:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6494:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6498:	d204      	bcs.n	d64a4 <__aeabi_dmul+0x80>
   d649a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d649e:	416d      	adcs	r5, r5
   d64a0:	eb46 0606 	adc.w	r6, r6, r6
   d64a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d64a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d64ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d64b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d64b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d64b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d64bc:	bf88      	it	hi
   d64be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d64c2:	d81e      	bhi.n	d6502 <__aeabi_dmul+0xde>
   d64c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d64c8:	bf08      	it	eq
   d64ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d64ce:	f150 0000 	adcs.w	r0, r0, #0
   d64d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64d6:	bd70      	pop	{r4, r5, r6, pc}
   d64d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d64dc:	ea46 0101 	orr.w	r1, r6, r1
   d64e0:	ea40 0002 	orr.w	r0, r0, r2
   d64e4:	ea81 0103 	eor.w	r1, r1, r3
   d64e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d64ec:	bfc2      	ittt	gt
   d64ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d64f6:	bd70      	popgt	{r4, r5, r6, pc}
   d64f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64fc:	f04f 0e00 	mov.w	lr, #0
   d6500:	3c01      	subs	r4, #1
   d6502:	f300 80ab 	bgt.w	d665c <__aeabi_dmul+0x238>
   d6506:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d650a:	bfde      	ittt	le
   d650c:	2000      	movle	r0, #0
   d650e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6512:	bd70      	pople	{r4, r5, r6, pc}
   d6514:	f1c4 0400 	rsb	r4, r4, #0
   d6518:	3c20      	subs	r4, #32
   d651a:	da35      	bge.n	d6588 <__aeabi_dmul+0x164>
   d651c:	340c      	adds	r4, #12
   d651e:	dc1b      	bgt.n	d6558 <__aeabi_dmul+0x134>
   d6520:	f104 0414 	add.w	r4, r4, #20
   d6524:	f1c4 0520 	rsb	r5, r4, #32
   d6528:	fa00 f305 	lsl.w	r3, r0, r5
   d652c:	fa20 f004 	lsr.w	r0, r0, r4
   d6530:	fa01 f205 	lsl.w	r2, r1, r5
   d6534:	ea40 0002 	orr.w	r0, r0, r2
   d6538:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d653c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6544:	fa21 f604 	lsr.w	r6, r1, r4
   d6548:	eb42 0106 	adc.w	r1, r2, r6
   d654c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6550:	bf08      	it	eq
   d6552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6556:	bd70      	pop	{r4, r5, r6, pc}
   d6558:	f1c4 040c 	rsb	r4, r4, #12
   d655c:	f1c4 0520 	rsb	r5, r4, #32
   d6560:	fa00 f304 	lsl.w	r3, r0, r4
   d6564:	fa20 f005 	lsr.w	r0, r0, r5
   d6568:	fa01 f204 	lsl.w	r2, r1, r4
   d656c:	ea40 0002 	orr.w	r0, r0, r2
   d6570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6578:	f141 0100 	adc.w	r1, r1, #0
   d657c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6580:	bf08      	it	eq
   d6582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6586:	bd70      	pop	{r4, r5, r6, pc}
   d6588:	f1c4 0520 	rsb	r5, r4, #32
   d658c:	fa00 f205 	lsl.w	r2, r0, r5
   d6590:	ea4e 0e02 	orr.w	lr, lr, r2
   d6594:	fa20 f304 	lsr.w	r3, r0, r4
   d6598:	fa01 f205 	lsl.w	r2, r1, r5
   d659c:	ea43 0302 	orr.w	r3, r3, r2
   d65a0:	fa21 f004 	lsr.w	r0, r1, r4
   d65a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65a8:	fa21 f204 	lsr.w	r2, r1, r4
   d65ac:	ea20 0002 	bic.w	r0, r0, r2
   d65b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d65b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d65b8:	bf08      	it	eq
   d65ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d65be:	bd70      	pop	{r4, r5, r6, pc}
   d65c0:	f094 0f00 	teq	r4, #0
   d65c4:	d10f      	bne.n	d65e6 <__aeabi_dmul+0x1c2>
   d65c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d65ca:	0040      	lsls	r0, r0, #1
   d65cc:	eb41 0101 	adc.w	r1, r1, r1
   d65d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65d4:	bf08      	it	eq
   d65d6:	3c01      	subeq	r4, #1
   d65d8:	d0f7      	beq.n	d65ca <__aeabi_dmul+0x1a6>
   d65da:	ea41 0106 	orr.w	r1, r1, r6
   d65de:	f095 0f00 	teq	r5, #0
   d65e2:	bf18      	it	ne
   d65e4:	4770      	bxne	lr
   d65e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d65ea:	0052      	lsls	r2, r2, #1
   d65ec:	eb43 0303 	adc.w	r3, r3, r3
   d65f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d65f4:	bf08      	it	eq
   d65f6:	3d01      	subeq	r5, #1
   d65f8:	d0f7      	beq.n	d65ea <__aeabi_dmul+0x1c6>
   d65fa:	ea43 0306 	orr.w	r3, r3, r6
   d65fe:	4770      	bx	lr
   d6600:	ea94 0f0c 	teq	r4, ip
   d6604:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6608:	bf18      	it	ne
   d660a:	ea95 0f0c 	teqne	r5, ip
   d660e:	d00c      	beq.n	d662a <__aeabi_dmul+0x206>
   d6610:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6614:	bf18      	it	ne
   d6616:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d661a:	d1d1      	bne.n	d65c0 <__aeabi_dmul+0x19c>
   d661c:	ea81 0103 	eor.w	r1, r1, r3
   d6620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6624:	f04f 0000 	mov.w	r0, #0
   d6628:	bd70      	pop	{r4, r5, r6, pc}
   d662a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d662e:	bf06      	itte	eq
   d6630:	4610      	moveq	r0, r2
   d6632:	4619      	moveq	r1, r3
   d6634:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6638:	d019      	beq.n	d666e <__aeabi_dmul+0x24a>
   d663a:	ea94 0f0c 	teq	r4, ip
   d663e:	d102      	bne.n	d6646 <__aeabi_dmul+0x222>
   d6640:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6644:	d113      	bne.n	d666e <__aeabi_dmul+0x24a>
   d6646:	ea95 0f0c 	teq	r5, ip
   d664a:	d105      	bne.n	d6658 <__aeabi_dmul+0x234>
   d664c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6650:	bf1c      	itt	ne
   d6652:	4610      	movne	r0, r2
   d6654:	4619      	movne	r1, r3
   d6656:	d10a      	bne.n	d666e <__aeabi_dmul+0x24a>
   d6658:	ea81 0103 	eor.w	r1, r1, r3
   d665c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6660:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6664:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6668:	f04f 0000 	mov.w	r0, #0
   d666c:	bd70      	pop	{r4, r5, r6, pc}
   d666e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6672:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6676:	bd70      	pop	{r4, r5, r6, pc}

000d6678 <__aeabi_ddiv>:
   d6678:	b570      	push	{r4, r5, r6, lr}
   d667a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d667e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6686:	bf1d      	ittte	ne
   d6688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d668c:	ea94 0f0c 	teqne	r4, ip
   d6690:	ea95 0f0c 	teqne	r5, ip
   d6694:	f000 f8a7 	bleq	d67e6 <__aeabi_ddiv+0x16e>
   d6698:	eba4 0405 	sub.w	r4, r4, r5
   d669c:	ea81 0e03 	eor.w	lr, r1, r3
   d66a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d66a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66a8:	f000 8088 	beq.w	d67bc <__aeabi_ddiv+0x144>
   d66ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d66b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d66b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d66b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d66bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d66c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d66c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d66c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d66cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d66d0:	429d      	cmp	r5, r3
   d66d2:	bf08      	it	eq
   d66d4:	4296      	cmpeq	r6, r2
   d66d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d66da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d66de:	d202      	bcs.n	d66e6 <__aeabi_ddiv+0x6e>
   d66e0:	085b      	lsrs	r3, r3, #1
   d66e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d66e6:	1ab6      	subs	r6, r6, r2
   d66e8:	eb65 0503 	sbc.w	r5, r5, r3
   d66ec:	085b      	lsrs	r3, r3, #1
   d66ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d66f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d66f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d66fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d66fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6702:	bf22      	ittt	cs
   d6704:	1ab6      	subcs	r6, r6, r2
   d6706:	4675      	movcs	r5, lr
   d6708:	ea40 000c 	orrcs.w	r0, r0, ip
   d670c:	085b      	lsrs	r3, r3, #1
   d670e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6712:	ebb6 0e02 	subs.w	lr, r6, r2
   d6716:	eb75 0e03 	sbcs.w	lr, r5, r3
   d671a:	bf22      	ittt	cs
   d671c:	1ab6      	subcs	r6, r6, r2
   d671e:	4675      	movcs	r5, lr
   d6720:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6724:	085b      	lsrs	r3, r3, #1
   d6726:	ea4f 0232 	mov.w	r2, r2, rrx
   d672a:	ebb6 0e02 	subs.w	lr, r6, r2
   d672e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6732:	bf22      	ittt	cs
   d6734:	1ab6      	subcs	r6, r6, r2
   d6736:	4675      	movcs	r5, lr
   d6738:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d673c:	085b      	lsrs	r3, r3, #1
   d673e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6742:	ebb6 0e02 	subs.w	lr, r6, r2
   d6746:	eb75 0e03 	sbcs.w	lr, r5, r3
   d674a:	bf22      	ittt	cs
   d674c:	1ab6      	subcs	r6, r6, r2
   d674e:	4675      	movcs	r5, lr
   d6750:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6754:	ea55 0e06 	orrs.w	lr, r5, r6
   d6758:	d018      	beq.n	d678c <__aeabi_ddiv+0x114>
   d675a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d675e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6762:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6766:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d676a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d676e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6772:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6776:	d1c0      	bne.n	d66fa <__aeabi_ddiv+0x82>
   d6778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d677c:	d10b      	bne.n	d6796 <__aeabi_ddiv+0x11e>
   d677e:	ea41 0100 	orr.w	r1, r1, r0
   d6782:	f04f 0000 	mov.w	r0, #0
   d6786:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d678a:	e7b6      	b.n	d66fa <__aeabi_ddiv+0x82>
   d678c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6790:	bf04      	itt	eq
   d6792:	4301      	orreq	r1, r0
   d6794:	2000      	moveq	r0, #0
   d6796:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d679a:	bf88      	it	hi
   d679c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d67a0:	f63f aeaf 	bhi.w	d6502 <__aeabi_dmul+0xde>
   d67a4:	ebb5 0c03 	subs.w	ip, r5, r3
   d67a8:	bf04      	itt	eq
   d67aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d67ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67b2:	f150 0000 	adcs.w	r0, r0, #0
   d67b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67ba:	bd70      	pop	{r4, r5, r6, pc}
   d67bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d67c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d67c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d67c8:	bfc2      	ittt	gt
   d67ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d67ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d67d2:	bd70      	popgt	{r4, r5, r6, pc}
   d67d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d67d8:	f04f 0e00 	mov.w	lr, #0
   d67dc:	3c01      	subs	r4, #1
   d67de:	e690      	b.n	d6502 <__aeabi_dmul+0xde>
   d67e0:	ea45 0e06 	orr.w	lr, r5, r6
   d67e4:	e68d      	b.n	d6502 <__aeabi_dmul+0xde>
   d67e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d67ea:	ea94 0f0c 	teq	r4, ip
   d67ee:	bf08      	it	eq
   d67f0:	ea95 0f0c 	teqeq	r5, ip
   d67f4:	f43f af3b 	beq.w	d666e <__aeabi_dmul+0x24a>
   d67f8:	ea94 0f0c 	teq	r4, ip
   d67fc:	d10a      	bne.n	d6814 <__aeabi_ddiv+0x19c>
   d67fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6802:	f47f af34 	bne.w	d666e <__aeabi_dmul+0x24a>
   d6806:	ea95 0f0c 	teq	r5, ip
   d680a:	f47f af25 	bne.w	d6658 <__aeabi_dmul+0x234>
   d680e:	4610      	mov	r0, r2
   d6810:	4619      	mov	r1, r3
   d6812:	e72c      	b.n	d666e <__aeabi_dmul+0x24a>
   d6814:	ea95 0f0c 	teq	r5, ip
   d6818:	d106      	bne.n	d6828 <__aeabi_ddiv+0x1b0>
   d681a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d681e:	f43f aefd 	beq.w	d661c <__aeabi_dmul+0x1f8>
   d6822:	4610      	mov	r0, r2
   d6824:	4619      	mov	r1, r3
   d6826:	e722      	b.n	d666e <__aeabi_dmul+0x24a>
   d6828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d682c:	bf18      	it	ne
   d682e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6832:	f47f aec5 	bne.w	d65c0 <__aeabi_dmul+0x19c>
   d6836:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d683a:	f47f af0d 	bne.w	d6658 <__aeabi_dmul+0x234>
   d683e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6842:	f47f aeeb 	bne.w	d661c <__aeabi_dmul+0x1f8>
   d6846:	e712      	b.n	d666e <__aeabi_dmul+0x24a>

000d6848 <__aeabi_d2uiz>:
   d6848:	004a      	lsls	r2, r1, #1
   d684a:	d211      	bcs.n	d6870 <__aeabi_d2uiz+0x28>
   d684c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6850:	d211      	bcs.n	d6876 <__aeabi_d2uiz+0x2e>
   d6852:	d50d      	bpl.n	d6870 <__aeabi_d2uiz+0x28>
   d6854:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6858:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d685c:	d40e      	bmi.n	d687c <__aeabi_d2uiz+0x34>
   d685e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6866:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d686a:	fa23 f002 	lsr.w	r0, r3, r2
   d686e:	4770      	bx	lr
   d6870:	f04f 0000 	mov.w	r0, #0
   d6874:	4770      	bx	lr
   d6876:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d687a:	d102      	bne.n	d6882 <__aeabi_d2uiz+0x3a>
   d687c:	f04f 30ff 	mov.w	r0, #4294967295
   d6880:	4770      	bx	lr
   d6882:	f04f 0000 	mov.w	r0, #0
   d6886:	4770      	bx	lr

000d6888 <__aeabi_f2lz>:
   d6888:	ee07 0a90 	vmov	s15, r0
   d688c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d6890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6894:	d401      	bmi.n	d689a <__aeabi_f2lz+0x12>
   d6896:	f000 b80b 	b.w	d68b0 <__aeabi_f2ulz>
   d689a:	eef1 7a67 	vneg.f32	s15, s15
   d689e:	b508      	push	{r3, lr}
   d68a0:	ee17 0a90 	vmov	r0, s15
   d68a4:	f000 f804 	bl	d68b0 <__aeabi_f2ulz>
   d68a8:	4240      	negs	r0, r0
   d68aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d68ae:	bd08      	pop	{r3, pc}

000d68b0 <__aeabi_f2ulz>:
   d68b0:	b5d0      	push	{r4, r6, r7, lr}
   d68b2:	f7ff fd5f 	bl	d6374 <__aeabi_f2d>
   d68b6:	4b0c      	ldr	r3, [pc, #48]	; (d68e8 <__aeabi_f2ulz+0x38>)
   d68b8:	2200      	movs	r2, #0
   d68ba:	4606      	mov	r6, r0
   d68bc:	460f      	mov	r7, r1
   d68be:	f7ff fdb1 	bl	d6424 <__aeabi_dmul>
   d68c2:	f7ff ffc1 	bl	d6848 <__aeabi_d2uiz>
   d68c6:	4604      	mov	r4, r0
   d68c8:	f7ff fd32 	bl	d6330 <__aeabi_ui2d>
   d68cc:	4b07      	ldr	r3, [pc, #28]	; (d68ec <__aeabi_f2ulz+0x3c>)
   d68ce:	2200      	movs	r2, #0
   d68d0:	f7ff fda8 	bl	d6424 <__aeabi_dmul>
   d68d4:	4602      	mov	r2, r0
   d68d6:	460b      	mov	r3, r1
   d68d8:	4630      	mov	r0, r6
   d68da:	4639      	mov	r1, r7
   d68dc:	f7ff fbea 	bl	d60b4 <__aeabi_dsub>
   d68e0:	f7ff ffb2 	bl	d6848 <__aeabi_d2uiz>
   d68e4:	4621      	mov	r1, r4
   d68e6:	bdd0      	pop	{r4, r6, r7, pc}
   d68e8:	3df00000 	.word	0x3df00000
   d68ec:	41f00000 	.word	0x41f00000

000d68f0 <asctime_r>:
   d68f0:	b510      	push	{r4, lr}
   d68f2:	460c      	mov	r4, r1
   d68f4:	6941      	ldr	r1, [r0, #20]
   d68f6:	6903      	ldr	r3, [r0, #16]
   d68f8:	6982      	ldr	r2, [r0, #24]
   d68fa:	b086      	sub	sp, #24
   d68fc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6900:	9104      	str	r1, [sp, #16]
   d6902:	6801      	ldr	r1, [r0, #0]
   d6904:	9103      	str	r1, [sp, #12]
   d6906:	6841      	ldr	r1, [r0, #4]
   d6908:	9102      	str	r1, [sp, #8]
   d690a:	6881      	ldr	r1, [r0, #8]
   d690c:	9101      	str	r1, [sp, #4]
   d690e:	68c1      	ldr	r1, [r0, #12]
   d6910:	9100      	str	r1, [sp, #0]
   d6912:	4907      	ldr	r1, [pc, #28]	; (d6930 <asctime_r+0x40>)
   d6914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d6918:	440b      	add	r3, r1
   d691a:	4906      	ldr	r1, [pc, #24]	; (d6934 <asctime_r+0x44>)
   d691c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6920:	440a      	add	r2, r1
   d6922:	4620      	mov	r0, r4
   d6924:	4904      	ldr	r1, [pc, #16]	; (d6938 <asctime_r+0x48>)
   d6926:	f7fe fc2f 	bl	d5188 <siprintf>
   d692a:	4620      	mov	r0, r4
   d692c:	b006      	add	sp, #24
   d692e:	bd10      	pop	{r4, pc}
   d6930:	000d713a 	.word	0x000d713a
   d6934:	000d7125 	.word	0x000d7125
   d6938:	000d7105 	.word	0x000d7105

000d693c <__cxa_atexit>:
   d693c:	b510      	push	{r4, lr}
   d693e:	4c05      	ldr	r4, [pc, #20]	; (d6954 <__cxa_atexit+0x18>)
   d6940:	4613      	mov	r3, r2
   d6942:	b12c      	cbz	r4, d6950 <__cxa_atexit+0x14>
   d6944:	460a      	mov	r2, r1
   d6946:	4601      	mov	r1, r0
   d6948:	2002      	movs	r0, #2
   d694a:	f3af 8000 	nop.w
   d694e:	bd10      	pop	{r4, pc}
   d6950:	4620      	mov	r0, r4
   d6952:	e7fc      	b.n	d694e <__cxa_atexit+0x12>
   d6954:	00000000 	.word	0x00000000

000d6958 <memcpy>:
   d6958:	440a      	add	r2, r1
   d695a:	4291      	cmp	r1, r2
   d695c:	f100 33ff 	add.w	r3, r0, #4294967295
   d6960:	d100      	bne.n	d6964 <memcpy+0xc>
   d6962:	4770      	bx	lr
   d6964:	b510      	push	{r4, lr}
   d6966:	f811 4b01 	ldrb.w	r4, [r1], #1
   d696a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d696e:	4291      	cmp	r1, r2
   d6970:	d1f9      	bne.n	d6966 <memcpy+0xe>
   d6972:	bd10      	pop	{r4, pc}

000d6974 <memset>:
   d6974:	4402      	add	r2, r0
   d6976:	4603      	mov	r3, r0
   d6978:	4293      	cmp	r3, r2
   d697a:	d100      	bne.n	d697e <memset+0xa>
   d697c:	4770      	bx	lr
   d697e:	f803 1b01 	strb.w	r1, [r3], #1
   d6982:	e7f9      	b.n	d6978 <memset+0x4>

000d6984 <srand>:
   d6984:	b538      	push	{r3, r4, r5, lr}
   d6986:	4b0d      	ldr	r3, [pc, #52]	; (d69bc <srand+0x38>)
   d6988:	681d      	ldr	r5, [r3, #0]
   d698a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d698c:	4604      	mov	r4, r0
   d698e:	b97b      	cbnz	r3, d69b0 <srand+0x2c>
   d6990:	2018      	movs	r0, #24
   d6992:	f7fe fbe1 	bl	d5158 <malloc>
   d6996:	4a0a      	ldr	r2, [pc, #40]	; (d69c0 <srand+0x3c>)
   d6998:	4b0a      	ldr	r3, [pc, #40]	; (d69c4 <srand+0x40>)
   d699a:	63a8      	str	r0, [r5, #56]	; 0x38
   d699c:	e9c0 2300 	strd	r2, r3, [r0]
   d69a0:	4b09      	ldr	r3, [pc, #36]	; (d69c8 <srand+0x44>)
   d69a2:	6083      	str	r3, [r0, #8]
   d69a4:	230b      	movs	r3, #11
   d69a6:	8183      	strh	r3, [r0, #12]
   d69a8:	2201      	movs	r2, #1
   d69aa:	2300      	movs	r3, #0
   d69ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d69b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d69b2:	2200      	movs	r2, #0
   d69b4:	611c      	str	r4, [r3, #16]
   d69b6:	615a      	str	r2, [r3, #20]
   d69b8:	bd38      	pop	{r3, r4, r5, pc}
   d69ba:	bf00      	nop
   d69bc:	2003e5a0 	.word	0x2003e5a0
   d69c0:	abcd330e 	.word	0xabcd330e
   d69c4:	e66d1234 	.word	0xe66d1234
   d69c8:	0005deec 	.word	0x0005deec

000d69cc <strcpy>:
   d69cc:	4603      	mov	r3, r0
   d69ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d69d2:	f803 2b01 	strb.w	r2, [r3], #1
   d69d6:	2a00      	cmp	r2, #0
   d69d8:	d1f9      	bne.n	d69ce <strcpy+0x2>
   d69da:	4770      	bx	lr

000d69dc <strlen>:
   d69dc:	4603      	mov	r3, r0
   d69de:	f813 2b01 	ldrb.w	r2, [r3], #1
   d69e2:	2a00      	cmp	r2, #0
   d69e4:	d1fb      	bne.n	d69de <strlen+0x2>
   d69e6:	1a18      	subs	r0, r3, r0
   d69e8:	3801      	subs	r0, #1
   d69ea:	4770      	bx	lr

000d69ec <dynalib_user>:
   d69ec:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d69fc:	0000 0000 6954 656d 6920 2073 7325 000a     ....Time is %s..
   d6a0c:	6f4d 7369 7275 2065 654c 6576 206c 7369     Moisure Level is
   d6a1c:	2520 0069                                    %i.

000d6a20 <_ZTV16Adafruit_SSD1306>:
	...
   d6a28:	40c1 000d 4201 000d 4c35 000d 55ad 000d     .@...B..5L...U..
   d6a38:	4515 000d 494d 000d 43a5 000d 4239 000d     .E..MI...C..9B..
   d6a48:	4a09 000d 4aa7 000d 4add 000d 4af9 000d     .J...J...J...J..

000d6a58 <_ZL4font>:
   d6a58:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6a68:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6a78:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6a88:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6a98:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6aa8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6ab8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6ac8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6ad8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6ae8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6af8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6b08:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6b18:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6b28:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6b38:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6b48:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6b58:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6b68:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6b78:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6b88:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6b98:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6ba8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6bb8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6bc8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6bd8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6be8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6bf8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6c08:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6c18:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6c28:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6c38:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6c48:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6c58:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6c68:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6c78:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6c88:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6c98:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6ca8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6cb8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6cc8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6cd8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6ce8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d6cf8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6d08:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6d18:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d6d28:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6d38:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d6d48:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d6d58:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d6d68:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d6d78:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d6d88:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d6d98:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d6da8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d6db8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d6dc8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d6dd8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d6de8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d6df8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d6e08:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d6e18:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d6e28:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d6e38:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d6e48:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d6e58:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d6e68:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d6e78:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d6e88:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d6e98:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d6ea8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d6eb8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d6ec8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d6ed8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d6ee8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d6ef8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d6f08:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d6f18:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d6f28:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d6f38:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d6f48:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d6f54 <_ZTV12Adafruit_GFX>:
	...
   d6f64:	4c35 000d 55ad 000d 409d 000d 494d 000d     5L...U...@..MI..
   d6f74:	4a71 000d 4a8d 000d 4a09 000d 4aa7 000d     qJ...J...J...J..
   d6f84:	4add 000d 4af9 000d                         .J...J..

000d6f8c <_ZTVN5spark13EthernetClassE>:
	...
   d6f94:	5227 000d 521d 000d 5213 000d 5209 000d     'R...R...R...R..
   d6fa4:	51fd 000d 51f1 000d 5da9 000d 5db1 000d     .Q...Q...]...]..
   d6fb4:	51e5 000d 51dd 000d 51d3 000d 51c9 000d     .Q...Q...Q...Q..
   d6fc4:	5de1 000d                                   .]..

000d6fc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6fc8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d6fd8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d6fe8:	7361 7463 6d69 0065                         asctime.

000d6ff0 <_ZTV9IPAddress>:
	...
   d6ff8:	5975 000d 5965 000d 5967 000d               uY..eY..gY..

000d7004 <_ZTV9USBSerial>:
	...
   d700c:	5a55 000d 5abd 000d 5a93 000d 55ad 000d     UZ...Z...Z...U..
   d701c:	5a85 000d 5a57 000d 5a67 000d 5ab7 000d     .Z..WZ..gZ...Z..
   d702c:	5a77 000d 5a51 000d                         wZ..QZ..

000d7034 <_ZTV11USARTSerial>:
	...
   d703c:	5b59 000d 5bc5 000d 5b9d 000d 55ad 000d     Y[...[...[...U..
   d704c:	5b6d 000d 5b89 000d 5b7b 000d 5b97 000d     m[...[..{[...[..
   d705c:	5b5b 000d 5b5f 000d                         [[.._[..

000d7064 <_ZTV7TwoWire>:
	...
   d706c:	5c55 000d 5c9f 000d 5c77 000d 5c57 000d     U\...\..w\..W\..
   d707c:	5c7f 000d 5c87 000d 5c8f 000d 5c97 000d     .\...\...\...\..

000d708c <_ZTVN5spark9WiFiClassE>:
	...
   d7094:	5d4b 000d 5d41 000d 5d37 000d 5cf9 000d     K]..A]..7]...\..
   d70a4:	56b9 000d 5d2b 000d 5da9 000d 5db1 000d     .V..+]...]...]..
   d70b4:	5d1f 000d 5d17 000d 5d0d 000d 5d03 000d     .]...]...]...]..
   d70c4:	5de1 000d                                   .]..

000d70c8 <_ZTVN5spark12NetworkClassE>:
	...
   d70d0:	5d69 000d 5d73 000d 5d7d 000d 5d87 000d     i]..s]..}]...]..
   d70e0:	5d91 000d 5d9d 000d 5da9 000d 5db1 000d     .]...]...]...]..
   d70f0:	5db9 000d 5dc5 000d 5dcd 000d 5dd7 000d     .]...]...]...]..
   d7100:	5de1 000d                                   .]..

000d7104 <_ZSt7nothrow>:
   d7104:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d7114:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d7125 <day_name.6145>:
   d7125:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d7135:	6972 6153                                    riSat

000d713a <mon_name.6146>:
   d713a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d714a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d715a:	4476 6365                                   vDec

000d715e <link_const_variable_data_end>:
	...

000d7160 <link_constructors_location>:
   d7160:	000d4211 	.word	0x000d4211
   d7164:	000d5231 	.word	0x000d5231
   d7168:	000d53dd 	.word	0x000d53dd
   d716c:	000d5585 	.word	0x000d5585
   d7170:	000d56c5 	.word	0x000d56c5
   d7174:	000d57fd 	.word	0x000d57fd
   d7178:	000d5825 	.word	0x000d5825
   d717c:	000d5d55 	.word	0x000d5d55
   d7180:	000d5ec1 	.word	0x000d5ec1

000d7184 <link_constructors_end>:
	...
